/* Capstone Disassembly Engine, https://www.capstone-engine.org */
/* By Nguyen Anh Quynh <aquynh@gmail.com>, 2013-2022, */
/*    Rot127 <unisono@quyllur.org> 2022-2024 */
/* Automatically generated file by Capstone's LLVM TableGen Disassembler Backend. */

/* LLVM-commit: <commit> */
/* LLVM-tag: <tag> */

/* Do not edit. */

/* Capstone's LLVM TableGen Backends: */
/* https://github.com/capstone-engine/llvm-capstone */

#include <capstone/platform.h>
#include <assert.h>

/// getMnemonic - This method is automatically generated by tablegen
/// from the instruction set description.
static MnemonicBitsInfo getMnemonic(MCInst *MI, SStream *O) {
#ifndef CAPSTONE_DIET
  static const char AsmStrs[] = {
  /* 0 */ "call0\t\0"
  /* 7 */ "callx0\t\0"
  /* 15 */ "subx2\t\0"
  /* 22 */ "addx2\t\0"
  /* 29 */ "subx4\t\0"
  /* 36 */ "addx4\t\0"
  /* 43 */ "subx8\t\0"
  /* 50 */ "addx8\t\0"
  /* 57 */ "sra\t\0"
  /* 62 */ "sub\t\0"
  /* 67 */ "bbc\t\0"
  /* 72 */ "src\t\0"
  /* 77 */ "add\t\0"
  /* 82 */ "and\t\0"
  /* 87 */ "bge\t\0"
  /* 92 */ "bne\t\0"
  /* 97 */ "bnone\t\0"
  /* 104 */ "neg\t\0"
  /* 109 */ "l32i\t\0"
  /* 115 */ "s32i\t\0"
  /* 121 */ "s16i\t\0"
  /* 127 */ "s8i\t\0"
  /* 132 */ "srai\t\0"
  /* 138 */ "ssai\t\0"
  /* 144 */ "bbci\t\0"
  /* 150 */ "addi\t\0"
  /* 156 */ "bgei\t\0"
  /* 162 */ "bnei\t\0"
  /* 168 */ "slli\t\0"
  /* 174 */ "srli\t\0"
  /* 180 */ "addmi\t\0"
  /* 187 */ "beqi\t\0"
  /* 193 */ "l16si\t\0"
  /* 200 */ "bbsi\t\0"
  /* 206 */ "blti\t\0"
  /* 212 */ "l16ui\t\0"
  /* 219 */ "l8ui\t\0"
  /* 225 */ "bgeui\t\0"
  /* 232 */ "bltui\t\0"
  /* 239 */ "extui\t\0"
  /* 246 */ "movi\t\0"
  /* 252 */ "j\t\0"
  /* 255 */ "ssa8l\t\0"
  /* 262 */ "ball\t\0"
  /* 268 */ "bnall\t\0"
  /* 275 */ "sll\t\0"
  /* 280 */ "srl\t\0"
  /* 285 */ "ssl\t\0"
  /* 290 */ "beq\t\0"
  /* 295 */ "l32r\t\0"
  /* 301 */ "xor\t\0"
  /* 306 */ "rsr\t\0"
  /* 311 */ "ssr\t\0"
  /* 316 */ "wsr\t\0"
  /* 321 */ "xsr\t\0"
  /* 326 */ "abs\t\0"
  /* 331 */ "bbs\t\0"
  /* 336 */ "blt\t\0"
  /* 341 */ "bgeu\t\0"
  /* 347 */ "bltu\t\0"
  /* 353 */ "jx\t\0"
  /* 357 */ "bany\t\0"
  /* 363 */ "bgez\t\0"
  /* 369 */ "movgez\t\0"
  /* 377 */ "bnez\t\0"
  /* 383 */ "movnez\t\0"
  /* 391 */ "beqz\t\0"
  /* 397 */ "moveqz\t\0"
  /* 405 */ "bltz\t\0"
  /* 411 */ "movltz\t\0"
  /* 419 */ "# XRay Function Patchable RET.\0"
  /* 450 */ "# XRay Typed Event Log.\0"
  /* 474 */ "# XRay Custom Event Log.\0"
  /* 499 */ "# XRay Function Enter.\0"
  /* 522 */ "# XRay Tail Call Exit.\0"
  /* 545 */ "# XRay Function Exit.\0"
  /* 567 */ "LIFETIME_END\0"
  /* 580 */ "PSEUDO_PROBE\0"
  /* 593 */ "BUNDLE\0"
  /* 600 */ "DBG_VALUE\0"
  /* 610 */ "DBG_INSTR_REF\0"
  /* 624 */ "DBG_PHI\0"
  /* 632 */ "DBG_LABEL\0"
  /* 642 */ "LIFETIME_START\0"
  /* 657 */ "DBG_VALUE_LIST\0"
  /* 672 */ "dsync\0"
  /* 678 */ "esync\0"
  /* 684 */ "isync\0"
  /* 690 */ "rsync\0"
  /* 696 */ "# FEntry call\0"
  /* 710 */ "nop\0"
  /* 714 */ "ret\0"
  /* 718 */ "memw\0"
  /* 723 */ "extw\0"
};
#endif // CAPSTONE_DIET

  static const uint16_t OpInfo0[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// INLINEASM_BR
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// ANNOTATION_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    601U,	// DBG_VALUE
    658U,	// DBG_VALUE_LIST
    611U,	// DBG_INSTR_REF
    625U,	// DBG_PHI
    633U,	// DBG_LABEL
    0U,	// REG_SEQUENCE
    0U,	// COPY
    594U,	// BUNDLE
    643U,	// LIFETIME_START
    568U,	// LIFETIME_END
    581U,	// PSEUDO_PROBE
    0U,	// ARITH_FENCE
    0U,	// STACKMAP
    697U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// PREALLOCATED_SETUP
    0U,	// PREALLOCATED_ARG
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    500U,	// PATCHABLE_FUNCTION_ENTER
    420U,	// PATCHABLE_RET
    546U,	// PATCHABLE_FUNCTION_EXIT
    523U,	// PATCHABLE_TAIL_CALL
    475U,	// PATCHABLE_EVENT_CALL
    451U,	// PATCHABLE_TYPED_EVENT_CALL
    0U,	// ICALL_BRANCH_FUNNEL
    0U,	// MEMBARRIER
    0U,	// JUMP_TABLE_DEBUG_INFO
    0U,	// G_ASSERT_SEXT
    0U,	// G_ASSERT_ZEXT
    0U,	// G_ASSERT_ALIGN
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_SDIVREM
    0U,	// G_UDIVREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_IMPLICIT_DEF
    0U,	// G_PHI
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_CONSTANT_POOL
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_MERGE_VALUES
    0U,	// G_BUILD_VECTOR
    0U,	// G_BUILD_VECTOR_TRUNC
    0U,	// G_CONCAT_VECTORS
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_FREEZE
    0U,	// G_CONSTANT_FOLD_BARRIER
    0U,	// G_INTRINSIC_FPTRUNC_ROUND
    0U,	// G_INTRINSIC_TRUNC
    0U,	// G_INTRINSIC_ROUND
    0U,	// G_INTRINSIC_LRINT
    0U,	// G_INTRINSIC_ROUNDEVEN
    0U,	// G_READCYCLECOUNTER
    0U,	// G_LOAD
    0U,	// G_SEXTLOAD
    0U,	// G_ZEXTLOAD
    0U,	// G_INDEXED_LOAD
    0U,	// G_INDEXED_SEXTLOAD
    0U,	// G_INDEXED_ZEXTLOAD
    0U,	// G_STORE
    0U,	// G_INDEXED_STORE
    0U,	// G_ATOMIC_CMPXCHG_WITH_SUCCESS
    0U,	// G_ATOMIC_CMPXCHG
    0U,	// G_ATOMICRMW_XCHG
    0U,	// G_ATOMICRMW_ADD
    0U,	// G_ATOMICRMW_SUB
    0U,	// G_ATOMICRMW_AND
    0U,	// G_ATOMICRMW_NAND
    0U,	// G_ATOMICRMW_OR
    0U,	// G_ATOMICRMW_XOR
    0U,	// G_ATOMICRMW_MAX
    0U,	// G_ATOMICRMW_MIN
    0U,	// G_ATOMICRMW_UMAX
    0U,	// G_ATOMICRMW_UMIN
    0U,	// G_ATOMICRMW_FADD
    0U,	// G_ATOMICRMW_FSUB
    0U,	// G_ATOMICRMW_FMAX
    0U,	// G_ATOMICRMW_FMIN
    0U,	// G_ATOMICRMW_UINC_WRAP
    0U,	// G_ATOMICRMW_UDEC_WRAP
    0U,	// G_FENCE
    0U,	// G_PREFETCH
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INVOKE_REGION_START
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_INTRINSIC_CONVERGENT
    0U,	// G_INTRINSIC_CONVERGENT_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_SEXT_INREG
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_FSHL
    0U,	// G_FSHR
    0U,	// G_ROTR
    0U,	// G_ROTL
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDO
    0U,	// G_UADDE
    0U,	// G_USUBO
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SADDE
    0U,	// G_SSUBO
    0U,	// G_SSUBE
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_UADDSAT
    0U,	// G_SADDSAT
    0U,	// G_USUBSAT
    0U,	// G_SSUBSAT
    0U,	// G_USHLSAT
    0U,	// G_SSHLSAT
    0U,	// G_SMULFIX
    0U,	// G_UMULFIX
    0U,	// G_SMULFIXSAT
    0U,	// G_UMULFIXSAT
    0U,	// G_SDIVFIX
    0U,	// G_UDIVFIX
    0U,	// G_SDIVFIXSAT
    0U,	// G_UDIVFIXSAT
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FMA
    0U,	// G_FMAD
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FPOWI
    0U,	// G_FEXP
    0U,	// G_FEXP2
    0U,	// G_FEXP10
    0U,	// G_FLOG
    0U,	// G_FLOG2
    0U,	// G_FLOG10
    0U,	// G_FLDEXP
    0U,	// G_FFREXP
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_FABS
    0U,	// G_FCOPYSIGN
    0U,	// G_IS_FPCLASS
    0U,	// G_FCANONICALIZE
    0U,	// G_FMINNUM
    0U,	// G_FMAXNUM
    0U,	// G_FMINNUM_IEEE
    0U,	// G_FMAXNUM_IEEE
    0U,	// G_FMINIMUM
    0U,	// G_FMAXIMUM
    0U,	// G_GET_FPENV
    0U,	// G_SET_FPENV
    0U,	// G_RESET_FPENV
    0U,	// G_GET_FPMODE
    0U,	// G_SET_FPMODE
    0U,	// G_RESET_FPMODE
    0U,	// G_PTR_ADD
    0U,	// G_PTRMASK
    0U,	// G_SMIN
    0U,	// G_SMAX
    0U,	// G_UMIN
    0U,	// G_UMAX
    0U,	// G_ABS
    0U,	// G_LROUND
    0U,	// G_LLROUND
    0U,	// G_BR
    0U,	// G_BRJT
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// G_SHUFFLE_VECTOR
    0U,	// G_CTTZ
    0U,	// G_CTTZ_ZERO_UNDEF
    0U,	// G_CTLZ
    0U,	// G_CTLZ_ZERO_UNDEF
    0U,	// G_CTPOP
    0U,	// G_BSWAP
    0U,	// G_BITREVERSE
    0U,	// G_FCEIL
    0U,	// G_FCOS
    0U,	// G_FSIN
    0U,	// G_FSQRT
    0U,	// G_FFLOOR
    0U,	// G_FRINT
    0U,	// G_FNEARBYINT
    0U,	// G_ADDRSPACE_CAST
    0U,	// G_BLOCK_ADDR
    0U,	// G_JUMP_TABLE
    0U,	// G_DYN_STACKALLOC
    0U,	// G_STACKSAVE
    0U,	// G_STACKRESTORE
    0U,	// G_STRICT_FADD
    0U,	// G_STRICT_FSUB
    0U,	// G_STRICT_FMUL
    0U,	// G_STRICT_FDIV
    0U,	// G_STRICT_FREM
    0U,	// G_STRICT_FMA
    0U,	// G_STRICT_FSQRT
    0U,	// G_STRICT_FLDEXP
    0U,	// G_READ_REGISTER
    0U,	// G_WRITE_REGISTER
    0U,	// G_MEMCPY
    0U,	// G_MEMCPY_INLINE
    0U,	// G_MEMMOVE
    0U,	// G_MEMSET
    0U,	// G_BZERO
    0U,	// G_VECREDUCE_SEQ_FADD
    0U,	// G_VECREDUCE_SEQ_FMUL
    0U,	// G_VECREDUCE_FADD
    0U,	// G_VECREDUCE_FMUL
    0U,	// G_VECREDUCE_FMAX
    0U,	// G_VECREDUCE_FMIN
    0U,	// G_VECREDUCE_FMAXIMUM
    0U,	// G_VECREDUCE_FMINIMUM
    0U,	// G_VECREDUCE_ADD
    0U,	// G_VECREDUCE_MUL
    0U,	// G_VECREDUCE_AND
    0U,	// G_VECREDUCE_OR
    0U,	// G_VECREDUCE_XOR
    0U,	// G_VECREDUCE_SMAX
    0U,	// G_VECREDUCE_SMIN
    0U,	// G_VECREDUCE_UMAX
    0U,	// G_VECREDUCE_UMIN
    0U,	// G_SBFX
    0U,	// G_UBFX
    1351U,	// ABS
    1102U,	// ADD
    1175U,	// ADDI
    1205U,	// ADDMI
    1047U,	// ADDX2
    1061U,	// ADDX4
    1075U,	// ADDX8
    1107U,	// AND
    1287U,	// BALL
    1382U,	// BANY
    1092U,	// BBC
    17553U,	// BBCI
    1356U,	// BBS
    17609U,	// BBSI
    1315U,	// BEQ
    33980U,	// BEQI
    50568U,	// BEQZ
    1112U,	// BGE
    33949U,	// BGEI
    1366U,	// BGEU
    1250U,	// BGEUI
    50540U,	// BGEZ
    1361U,	// BLT
    33999U,	// BLTI
    1372U,	// BLTU
    1257U,	// BLTUI
    50582U,	// BLTZ
    1293U,	// BNALL
    1117U,	// BNE
    33955U,	// BNEI
    50554U,	// BNEZ
    1122U,	// BNONE
    2049U,	// CALL0
    9224U,	// CALLX0
    673U,	// DSYNC
    679U,	// ESYNC
    1264U,	// EXTUI
    724U,	// EXTW
    685U,	// ISYNC
    3325U,	// J
    9570U,	// JX
    17602U,	// L16SI
    17621U,	// L16UI
    17518U,	// L32I
    34088U,	// L32R
    17628U,	// L8UI
    719U,	// MEMW
    1422U,	// MOVEQZ
    1394U,	// MOVGEZ
    50423U,	// MOVI
    1436U,	// MOVLTZ
    1408U,	// MOVNEZ
    1129U,	// NEG
    711U,	// NOP
    1327U,	// OR
    715U,	// RET
    1331U,	// RSR
    691U,	// RSYNC
    17530U,	// S16I
    17524U,	// S32I
    17536U,	// S8I
    1300U,	// SLL
    1193U,	// SLLI
    1082U,	// SRA
    1157U,	// SRAI
    1097U,	// SRC
    1305U,	// SRL
    1199U,	// SRLI
    9472U,	// SSA8L
    4235U,	// SSAI
    9502U,	// SSL
    9528U,	// SSR
    1087U,	// SUB
    1040U,	// SUBX2
    1054U,	// SUBX4
    1068U,	// SUBX8
    5437U,	// WSR
    1326U,	// XOR
    6466U,	// XSR
  };

  static const uint8_t OpInfo1[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// INLINEASM_BR
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// ANNOTATION_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    0U,	// DBG_VALUE
    0U,	// DBG_VALUE_LIST
    0U,	// DBG_INSTR_REF
    0U,	// DBG_PHI
    0U,	// DBG_LABEL
    0U,	// REG_SEQUENCE
    0U,	// COPY
    0U,	// BUNDLE
    0U,	// LIFETIME_START
    0U,	// LIFETIME_END
    0U,	// PSEUDO_PROBE
    0U,	// ARITH_FENCE
    0U,	// STACKMAP
    0U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// PREALLOCATED_SETUP
    0U,	// PREALLOCATED_ARG
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    0U,	// PATCHABLE_FUNCTION_ENTER
    0U,	// PATCHABLE_RET
    0U,	// PATCHABLE_FUNCTION_EXIT
    0U,	// PATCHABLE_TAIL_CALL
    0U,	// PATCHABLE_EVENT_CALL
    0U,	// PATCHABLE_TYPED_EVENT_CALL
    0U,	// ICALL_BRANCH_FUNNEL
    0U,	// MEMBARRIER
    0U,	// JUMP_TABLE_DEBUG_INFO
    0U,	// G_ASSERT_SEXT
    0U,	// G_ASSERT_ZEXT
    0U,	// G_ASSERT_ALIGN
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_SDIVREM
    0U,	// G_UDIVREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_IMPLICIT_DEF
    0U,	// G_PHI
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_CONSTANT_POOL
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_MERGE_VALUES
    0U,	// G_BUILD_VECTOR
    0U,	// G_BUILD_VECTOR_TRUNC
    0U,	// G_CONCAT_VECTORS
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_FREEZE
    0U,	// G_CONSTANT_FOLD_BARRIER
    0U,	// G_INTRINSIC_FPTRUNC_ROUND
    0U,	// G_INTRINSIC_TRUNC
    0U,	// G_INTRINSIC_ROUND
    0U,	// G_INTRINSIC_LRINT
    0U,	// G_INTRINSIC_ROUNDEVEN
    0U,	// G_READCYCLECOUNTER
    0U,	// G_LOAD
    0U,	// G_SEXTLOAD
    0U,	// G_ZEXTLOAD
    0U,	// G_INDEXED_LOAD
    0U,	// G_INDEXED_SEXTLOAD
    0U,	// G_INDEXED_ZEXTLOAD
    0U,	// G_STORE
    0U,	// G_INDEXED_STORE
    0U,	// G_ATOMIC_CMPXCHG_WITH_SUCCESS
    0U,	// G_ATOMIC_CMPXCHG
    0U,	// G_ATOMICRMW_XCHG
    0U,	// G_ATOMICRMW_ADD
    0U,	// G_ATOMICRMW_SUB
    0U,	// G_ATOMICRMW_AND
    0U,	// G_ATOMICRMW_NAND
    0U,	// G_ATOMICRMW_OR
    0U,	// G_ATOMICRMW_XOR
    0U,	// G_ATOMICRMW_MAX
    0U,	// G_ATOMICRMW_MIN
    0U,	// G_ATOMICRMW_UMAX
    0U,	// G_ATOMICRMW_UMIN
    0U,	// G_ATOMICRMW_FADD
    0U,	// G_ATOMICRMW_FSUB
    0U,	// G_ATOMICRMW_FMAX
    0U,	// G_ATOMICRMW_FMIN
    0U,	// G_ATOMICRMW_UINC_WRAP
    0U,	// G_ATOMICRMW_UDEC_WRAP
    0U,	// G_FENCE
    0U,	// G_PREFETCH
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INVOKE_REGION_START
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_INTRINSIC_CONVERGENT
    0U,	// G_INTRINSIC_CONVERGENT_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_SEXT_INREG
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_FSHL
    0U,	// G_FSHR
    0U,	// G_ROTR
    0U,	// G_ROTL
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDO
    0U,	// G_UADDE
    0U,	// G_USUBO
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SADDE
    0U,	// G_SSUBO
    0U,	// G_SSUBE
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_UADDSAT
    0U,	// G_SADDSAT
    0U,	// G_USUBSAT
    0U,	// G_SSUBSAT
    0U,	// G_USHLSAT
    0U,	// G_SSHLSAT
    0U,	// G_SMULFIX
    0U,	// G_UMULFIX
    0U,	// G_SMULFIXSAT
    0U,	// G_UMULFIXSAT
    0U,	// G_SDIVFIX
    0U,	// G_UDIVFIX
    0U,	// G_SDIVFIXSAT
    0U,	// G_UDIVFIXSAT
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FMA
    0U,	// G_FMAD
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FPOWI
    0U,	// G_FEXP
    0U,	// G_FEXP2
    0U,	// G_FEXP10
    0U,	// G_FLOG
    0U,	// G_FLOG2
    0U,	// G_FLOG10
    0U,	// G_FLDEXP
    0U,	// G_FFREXP
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_FABS
    0U,	// G_FCOPYSIGN
    0U,	// G_IS_FPCLASS
    0U,	// G_FCANONICALIZE
    0U,	// G_FMINNUM
    0U,	// G_FMAXNUM
    0U,	// G_FMINNUM_IEEE
    0U,	// G_FMAXNUM_IEEE
    0U,	// G_FMINIMUM
    0U,	// G_FMAXIMUM
    0U,	// G_GET_FPENV
    0U,	// G_SET_FPENV
    0U,	// G_RESET_FPENV
    0U,	// G_GET_FPMODE
    0U,	// G_SET_FPMODE
    0U,	// G_RESET_FPMODE
    0U,	// G_PTR_ADD
    0U,	// G_PTRMASK
    0U,	// G_SMIN
    0U,	// G_SMAX
    0U,	// G_UMIN
    0U,	// G_UMAX
    0U,	// G_ABS
    0U,	// G_LROUND
    0U,	// G_LLROUND
    0U,	// G_BR
    0U,	// G_BRJT
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// G_SHUFFLE_VECTOR
    0U,	// G_CTTZ
    0U,	// G_CTTZ_ZERO_UNDEF
    0U,	// G_CTLZ
    0U,	// G_CTLZ_ZERO_UNDEF
    0U,	// G_CTPOP
    0U,	// G_BSWAP
    0U,	// G_BITREVERSE
    0U,	// G_FCEIL
    0U,	// G_FCOS
    0U,	// G_FSIN
    0U,	// G_FSQRT
    0U,	// G_FFLOOR
    0U,	// G_FRINT
    0U,	// G_FNEARBYINT
    0U,	// G_ADDRSPACE_CAST
    0U,	// G_BLOCK_ADDR
    0U,	// G_JUMP_TABLE
    0U,	// G_DYN_STACKALLOC
    0U,	// G_STACKSAVE
    0U,	// G_STACKRESTORE
    0U,	// G_STRICT_FADD
    0U,	// G_STRICT_FSUB
    0U,	// G_STRICT_FMUL
    0U,	// G_STRICT_FDIV
    0U,	// G_STRICT_FREM
    0U,	// G_STRICT_FMA
    0U,	// G_STRICT_FSQRT
    0U,	// G_STRICT_FLDEXP
    0U,	// G_READ_REGISTER
    0U,	// G_WRITE_REGISTER
    0U,	// G_MEMCPY
    0U,	// G_MEMCPY_INLINE
    0U,	// G_MEMMOVE
    0U,	// G_MEMSET
    0U,	// G_BZERO
    0U,	// G_VECREDUCE_SEQ_FADD
    0U,	// G_VECREDUCE_SEQ_FMUL
    0U,	// G_VECREDUCE_FADD
    0U,	// G_VECREDUCE_FMUL
    0U,	// G_VECREDUCE_FMAX
    0U,	// G_VECREDUCE_FMIN
    0U,	// G_VECREDUCE_FMAXIMUM
    0U,	// G_VECREDUCE_FMINIMUM
    0U,	// G_VECREDUCE_ADD
    0U,	// G_VECREDUCE_MUL
    0U,	// G_VECREDUCE_AND
    0U,	// G_VECREDUCE_OR
    0U,	// G_VECREDUCE_XOR
    0U,	// G_VECREDUCE_SMAX
    0U,	// G_VECREDUCE_SMIN
    0U,	// G_VECREDUCE_UMAX
    0U,	// G_VECREDUCE_UMIN
    0U,	// G_SBFX
    0U,	// G_UBFX
    0U,	// ABS
    2U,	// ADD
    6U,	// ADDI
    10U,	// ADDMI
    2U,	// ADDX2
    2U,	// ADDX4
    2U,	// ADDX8
    2U,	// AND
    14U,	// BALL
    14U,	// BANY
    14U,	// BBC
    0U,	// BBCI
    14U,	// BBS
    0U,	// BBSI
    14U,	// BEQ
    0U,	// BEQI
    0U,	// BEQZ
    14U,	// BGE
    0U,	// BGEI
    14U,	// BGEU
    1U,	// BGEUI
    0U,	// BGEZ
    14U,	// BLT
    0U,	// BLTI
    14U,	// BLTU
    1U,	// BLTUI
    0U,	// BLTZ
    14U,	// BNALL
    14U,	// BNE
    0U,	// BNEI
    0U,	// BNEZ
    14U,	// BNONE
    0U,	// CALL0
    0U,	// CALLX0
    0U,	// DSYNC
    0U,	// ESYNC
    18U,	// EXTUI
    0U,	// EXTW
    0U,	// ISYNC
    0U,	// J
    0U,	// JX
    1U,	// L16SI
    1U,	// L16UI
    1U,	// L32I
    1U,	// L32R
    1U,	// L8UI
    0U,	// MEMW
    2U,	// MOVEQZ
    2U,	// MOVGEZ
    1U,	// MOVI
    2U,	// MOVLTZ
    2U,	// MOVNEZ
    0U,	// NEG
    0U,	// NOP
    2U,	// OR
    0U,	// RET
    0U,	// RSR
    0U,	// RSYNC
    1U,	// S16I
    1U,	// S32I
    1U,	// S8I
    0U,	// SLL
    22U,	// SLLI
    0U,	// SRA
    50U,	// SRAI
    2U,	// SRC
    0U,	// SRL
    26U,	// SRLI
    0U,	// SSA8L
    0U,	// SSAI
    0U,	// SSL
    0U,	// SSR
    2U,	// SUB
    2U,	// SUBX2
    2U,	// SUBX4
    2U,	// SUBX8
    0U,	// WSR
    2U,	// XOR
    0U,	// XSR
  };

  // Emit the opcode for the instruction.
  uint32_t Bits = 0;
  Bits |= OpInfo0[MCInst_getOpcode(MI)] << 0;
  Bits |= OpInfo1[MCInst_getOpcode(MI)] << 16;
  MnemonicBitsInfo MBI = {
#ifndef CAPSTONE_DIET
    AsmStrs+(Bits & 1023)-1,
#else
    NULL,
#endif // CAPSTONE_DIET
    Bits
  };
  return MBI;
}

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
static void printInstruction(MCInst *MI, uint64_t Address, SStream *O) {
  SStream_concat0(O, "");
  MnemonicBitsInfo MnemonicInfo = getMnemonic(MI, O);

  SStream_concat0(O, MnemonicInfo.first);

  uint32_t Bits = MnemonicInfo.second;
  assert(Bits != 0 && "Cannot print this instruction.");

  // Fragment 0 encoded into 3 bits for 7 unique commands.
  switch ((Bits >> 10) & 7) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // DBG_VALUE, DBG_VALUE_LIST, DBG_INSTR_REF, DBG_PHI, DBG_LABEL, BUNDLE, ...
    return;
    break;
  case 1:
    // ABS, ADD, ADDI, ADDMI, ADDX2, ADDX4, ADDX8, AND, BALL, BANY, BBC, BBCI...
    printOperand(MI, 0, O);
    break;
  case 2:
    // CALL0
    printCallOperand(MI, 0, O);
    return;
    break;
  case 3:
    // J
    printJumpTarget(MI, 0, O);
    return;
    break;
  case 4:
    // SSAI
    printUimm5_AsmOperand(MI, 0, O);
    return;
    break;
  case 5:
    // WSR
    printOperand(MI, 1, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 0, O);
    return;
    break;
  case 6:
    // XSR
    printOperand(MI, 2, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 3, O);
    return;
    break;
  }


  // Fragment 1 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 13) & 1) {
    // CALLX0, JX, SSA8L, SSL, SSR
    return;
  } else {
    // ABS, ADD, ADDI, ADDMI, ADDX2, ADDX4, ADDX8, AND, BALL, BANY, BBC, BBCI...
    SStream_concat0(O, ", ");
  }


  // Fragment 2 encoded into 3 bits for 8 unique commands.
  switch ((Bits >> 14) & 7) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ABS, ADD, ADDI, ADDMI, ADDX2, ADDX4, ADDX8, AND, BALL, BANY, BBC, BBS,...
    printOperand(MI, 1, O);
    break;
  case 1:
    // BBCI, BBSI
    printUimm5_AsmOperand(MI, 1, O);
    SStream_concat0(O, ", ");
    printBranchTarget(MI, 2, O);
    return;
    break;
  case 2:
    // BEQI, BGEI, BLTI, BNEI
    printB4const_AsmOperand(MI, 1, O);
    SStream_concat0(O, ", ");
    printBranchTarget(MI, 2, O);
    return;
    break;
  case 3:
    // BEQZ, BGEZ, BLTZ, BNEZ
    printBranchTarget(MI, 1, O);
    return;
    break;
  case 4:
    // BGEUI, BLTUI
    printB4constu_AsmOperand(MI, 1, O);
    SStream_concat0(O, ", ");
    printBranchTarget(MI, 2, O);
    return;
    break;
  case 5:
    // L16SI, L16UI, L32I, L8UI, S16I, S32I, S8I
    printMemOperand(MI, 1, O);
    return;
    break;
  case 6:
    // L32R
    printL32RTarget(MI, 1, O);
    return;
    break;
  case 7:
    // MOVI
    printImm12m_AsmOperand(MI, 1, O);
    return;
    break;
  }


  // Fragment 3 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 17) & 1) {
    // ADD, ADDI, ADDMI, ADDX2, ADDX4, ADDX8, AND, BALL, BANY, BBC, BBS, BEQ,...
    SStream_concat0(O, ", ");
  } else {
    // ABS, NEG, RSR, SLL, SRA, SRL
    return;
  }


  // Fragment 4 encoded into 3 bits for 7 unique commands.
  switch ((Bits >> 18) & 7) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ADD, ADDX2, ADDX4, ADDX8, AND, MOVEQZ, MOVGEZ, MOVLTZ, MOVNEZ, OR, SRC...
    printOperand(MI, 2, O);
    return;
    break;
  case 1:
    // ADDI
    printImm8_AsmOperand(MI, 2, O);
    return;
    break;
  case 2:
    // ADDMI
    printImm8_sh8_AsmOperand(MI, 2, O);
    return;
    break;
  case 3:
    // BALL, BANY, BBC, BBS, BEQ, BGE, BGEU, BLT, BLTU, BNALL, BNE, BNONE
    printBranchTarget(MI, 2, O);
    return;
    break;
  case 4:
    // EXTUI, SRAI
    printUimm5_AsmOperand(MI, 2, O);
    break;
  case 5:
    // SLLI
    printShimm1_31_AsmOperand(MI, 2, O);
    return;
    break;
  case 6:
    // SRLI
    printUimm4_AsmOperand(MI, 2, O);
    return;
    break;
  }


  // Fragment 5 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 21) & 1) {
    // SRAI
    return;
  } else {
    // EXTUI
    SStream_concat0(O, ", ");
    printImm1_16_AsmOperand(MI, 3, O);
    return;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
static const char *getRegisterName(unsigned RegNo) {
#ifndef CAPSTONE_DIET
  assert(RegNo && RegNo < 18 && "Invalid register number!");

  static const char AsmStrs[] = {
  /* 0 */ "a10\0"
  /* 4 */ "a0\0"
  /* 7 */ "a11\0"
  /* 11 */ "a1\0"
  /* 14 */ "a12\0"
  /* 18 */ "a2\0"
  /* 21 */ "a13\0"
  /* 25 */ "a3\0"
  /* 28 */ "a14\0"
  /* 32 */ "a4\0"
  /* 35 */ "a15\0"
  /* 39 */ "a5\0"
  /* 42 */ "a6\0"
  /* 45 */ "a7\0"
  /* 48 */ "a8\0"
  /* 51 */ "a9\0"
  /* 54 */ "sar\0"
};
  static const uint8_t RegAsmOffset[] = {
    54, 11, 4, 18, 25, 32, 39, 42, 45, 48, 51, 0, 7, 14, 
    21, 28, 35, 
  };

  assert (*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!");
  return AsmStrs+RegAsmOffset[RegNo-1];
#else
  return NULL;
#endif // CAPSTONE_DIET
}
#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

static bool printAliasInstr(MCInst *MI, uint64_t Address, SStream *OS) {
#ifndef CAPSTONE_DIET
  return false;
#endif // CAPSTONE_DIET
}

#endif // PRINT_ALIAS_INSTR
