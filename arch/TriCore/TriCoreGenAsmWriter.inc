/* Capstone Disassembly Engine, http://www.capstone-engine.org */
/* By Nguyen Anh Quynh <aquynh@gmail.com>, 2013-2022, */
/*    Rot127 <unisono@quyllur.org> 2022-2023 */
/* Automatically generated file by Capstone's LLVM TableGen Disassembler Backend. */

/* LLVM-commit: <commit> */
/* LLVM-tag: <tag> */

/* Do not edit. */

/* Capstone's LLVM TableGen Backends: */
/* https://github.com/capstone-engine/llvm-capstone */

#include <capstone/platform.h>
#include <assert.h>

/// getMnemonic - This method is automatically generated by tablegen
/// from the instruction set description.
static MnemonicBitsInfo getMnemonic(MCInst *MI, SStream *O) {
#ifndef CAPSTONE_DIET
  static const char AsmStrs[] = {
  /* 0 */ "sub d15, \0"
  /* 10 */ "add d15, \0"
  /* 20 */ "and d15, \0"
  /* 30 */ "jne d15, \0"
  /* 40 */ "jeq d15, \0"
  /* 50 */ "or d15, \0"
  /* 59 */ "jz.t d15, \0"
  /* 70 */ "jnz.t d15, \0"
  /* 82 */ "lt d15, \0"
  /* 91 */ "lt.u d15, \0"
  /* 102 */ "mov d15, \0"
  /* 112 */ "jz d15, \0"
  /* 121 */ "jnz d15, \0"
  /* 131 */ "sub.a sp, \0"
  /* 142 */ "ftoq31 \0"
  /* 150 */ "csub.a \0"
  /* 158 */ "subsc.a \0"
  /* 167 */ "addsc.a \0"
  /* 176 */ "difsc.a \0"
  /* 185 */ "cadd.a \0"
  /* 193 */ "ld.a \0"
  /* 199 */ "tlbprobe.a \0"
  /* 211 */ "ge.a \0"
  /* 217 */ "jne.a \0"
  /* 224 */ "addih.a \0"
  /* 233 */ "movh.a \0"
  /* 241 */ "sel.a \0"
  /* 248 */ "csubn.a \0"
  /* 257 */ "caddn.a \0"
  /* 266 */ "seln.a \0"
  /* 274 */ "swap.a \0"
  /* 282 */ "jeq.a \0"
  /* 289 */ "lt.a \0"
  /* 295 */ "st.a \0"
  /* 301 */ "mov.a \0"
  /* 308 */ "nez.a \0"
  /* 315 */ "jz.a \0"
  /* 321 */ "jnz.a \0"
  /* 328 */ "eqz.a \0"
  /* 335 */ "movz.a \0"
  /* 343 */ "mov.aa \0"
  /* 351 */ "ld.da \0"
  /* 358 */ "st.da \0"
  /* 365 */ "lea \0"
  /* 370 */ "lha \0"
  /* 375 */ "sha \0"
  /* 380 */ "ja \0"
  /* 384 */ "jla \0"
  /* 389 */ "fcalla \0"
  /* 397 */ "crc32.b \0"
  /* 406 */ "sha.b \0"
  /* 413 */ "sub.b \0"
  /* 420 */ "add.b \0"
  /* 427 */ "ld.b \0"
  /* 433 */ "absdif.b \0"
  /* 443 */ "sh.b \0"
  /* 449 */ "min.b \0"
  /* 456 */ "clo.b \0"
  /* 463 */ "eq.b \0"
  /* 469 */ "abs.b \0"
  /* 476 */ "subs.b \0"
  /* 484 */ "adds.b \0"
  /* 492 */ "absdifs.b \0"
  /* 503 */ "cls.b \0"
  /* 510 */ "abss.b \0"
  /* 518 */ "sat.b \0"
  /* 525 */ "dvinit.b \0"
  /* 535 */ "lt.b \0"
  /* 541 */ "st.b \0"
  /* 547 */ "max.b \0"
  /* 554 */ "eqany.b \0"
  /* 563 */ "clz.b \0"
  /* 570 */ "csub \0"
  /* 576 */ "msub \0"
  /* 582 */ "rsub \0"
  /* 588 */ "subc \0"
  /* 594 */ "addc \0"
  /* 600 */ "ld.d \0"
  /* 606 */ "st.d \0"
  /* 612 */ "mov.d \0"
  /* 619 */ "cadd \0"
  /* 625 */ "madd \0"
  /* 631 */ "jned \0"
  /* 637 */ "nand \0"
  /* 643 */ "and.ge \0"
  /* 651 */ "sh.ge \0"
  /* 658 */ "xor.ge \0"
  /* 666 */ "jge \0"
  /* 671 */ "bmerge \0"
  /* 679 */ "disable \0"
  /* 688 */ "shuffle \0"
  /* 697 */ "and.ne \0"
  /* 705 */ "sh.ne \0"
  /* 712 */ "xor.ne \0"
  /* 720 */ "jne \0"
  /* 725 */ "restore \0"
  /* 734 */ "msub.f \0"
  /* 742 */ "madd.f \0"
  /* 750 */ "qseed.f \0"
  /* 759 */ "mul.f \0"
  /* 766 */ "cmp.f \0"
  /* 773 */ "div.f \0"
  /* 780 */ "absdif \0"
  /* 788 */ "q31tof \0"
  /* 796 */ "itof \0"
  /* 802 */ "hptof \0"
  /* 809 */ "utof \0"
  /* 815 */ "sha.h \0"
  /* 822 */ "msub.h \0"
  /* 830 */ "msubad.h \0"
  /* 840 */ "madd.h \0"
  /* 848 */ "ld.h \0"
  /* 854 */ "absdif.h \0"
  /* 864 */ "sh.h \0"
  /* 870 */ "mul.h \0"
  /* 877 */ "msubm.h \0"
  /* 886 */ "msubadm.h \0"
  /* 897 */ "maddm.h \0"
  /* 906 */ "mulm.h \0"
  /* 914 */ "maddsum.h \0"
  /* 925 */ "min.h \0"
  /* 932 */ "clo.h \0"
  /* 939 */ "eq.h \0"
  /* 945 */ "msubr.h \0"
  /* 954 */ "msubadr.h \0"
  /* 965 */ "maddr.h \0"
  /* 974 */ "mulr.h \0"
  /* 982 */ "maddsur.h \0"
  /* 993 */ "abs.h \0"
  /* 1000 */ "msubs.h \0"
  /* 1009 */ "msubads.h \0"
  /* 1020 */ "madds.h \0"
  /* 1029 */ "absdifs.h \0"
  /* 1040 */ "cls.h \0"
  /* 1047 */ "msubms.h \0"
  /* 1057 */ "msubadms.h \0"
  /* 1069 */ "maddms.h \0"
  /* 1079 */ "mulms.h \0"
  /* 1088 */ "maddsums.h \0"
  /* 1100 */ "msubrs.h \0"
  /* 1110 */ "msubadrs.h \0"
  /* 1122 */ "maddrs.h \0"
  /* 1132 */ "maddsurs.h \0"
  /* 1144 */ "abss.h \0"
  /* 1152 */ "maddsus.h \0"
  /* 1163 */ "sat.h \0"
  /* 1170 */ "dvinit.h \0"
  /* 1180 */ "lt.h \0"
  /* 1186 */ "st.h \0"
  /* 1192 */ "maddsu.h \0"
  /* 1202 */ "max.h \0"
  /* 1209 */ "eqany.h \0"
  /* 1218 */ "clz.h \0"
  /* 1225 */ "addih \0"
  /* 1232 */ "sh \0"
  /* 1236 */ "movh \0"
  /* 1242 */ "tlbprobe.i \0"
  /* 1254 */ "addi \0"
  /* 1260 */ "jnei \0"
  /* 1266 */ "ji \0"
  /* 1270 */ "jli \0"
  /* 1275 */ "fcalli \0"
  /* 1283 */ "ftoi \0"
  /* 1289 */ "dvadj \0"
  /* 1296 */ "unpack \0"
  /* 1304 */ "imask \0"
  /* 1311 */ "sel \0"
  /* 1316 */ "updfl \0"
  /* 1323 */ "jl \0"
  /* 1327 */ "fcall \0"
  /* 1334 */ "syscall \0"
  /* 1343 */ "mul \0"
  /* 1348 */ "msubm \0"
  /* 1355 */ "maddm \0"
  /* 1362 */ "mulm \0"
  /* 1368 */ "csubn \0"
  /* 1375 */ "crcn \0"
  /* 1381 */ "caddn \0"
  /* 1388 */ "andn \0"
  /* 1394 */ "ixmin \0"
  /* 1401 */ "seln \0"
  /* 1407 */ "orn \0"
  /* 1412 */ "cmovn \0"
  /* 1419 */ "clo \0"
  /* 1424 */ "tlbmap \0"
  /* 1432 */ "tlbdemap \0"
  /* 1442 */ "dvstep \0"
  /* 1450 */ "ftohp \0"
  /* 1457 */ "loop \0"
  /* 1463 */ "msub.q \0"
  /* 1471 */ "madd.q \0"
  /* 1479 */ "ld.q \0"
  /* 1485 */ "mul.q \0"
  /* 1492 */ "msubm.q \0"
  /* 1501 */ "maddm.q \0"
  /* 1510 */ "msubr.q \0"
  /* 1519 */ "maddr.q \0"
  /* 1528 */ "mulr.q \0"
  /* 1536 */ "msubs.q \0"
  /* 1545 */ "madds.q \0"
  /* 1554 */ "msubrs.q \0"
  /* 1564 */ "maddrs.q \0"
  /* 1574 */ "st.q \0"
  /* 1580 */ "and.eq \0"
  /* 1588 */ "sh.eq \0"
  /* 1595 */ "xor.eq \0"
  /* 1603 */ "jeq \0"
  /* 1608 */ "mfcr \0"
  /* 1614 */ "mtcr \0"
  /* 1620 */ "xnor \0"
  /* 1626 */ "xor \0"
  /* 1631 */ "bisr \0"
  /* 1637 */ "dextr \0"
  /* 1644 */ "shas \0"
  /* 1650 */ "abs \0"
  /* 1655 */ "msubs \0"
  /* 1662 */ "rsubs \0"
  /* 1669 */ "madds \0"
  /* 1676 */ "absdifs \0"
  /* 1685 */ "cls \0"
  /* 1690 */ "muls \0"
  /* 1696 */ "msubms \0"
  /* 1704 */ "maddms \0"
  /* 1712 */ "abss \0"
  /* 1718 */ "and.and.t \0"
  /* 1729 */ "sh.and.t \0"
  /* 1739 */ "or.and.t \0"
  /* 1749 */ "sh.nand.t \0"
  /* 1760 */ "and.andn.t \0"
  /* 1772 */ "sh.andn.t \0"
  /* 1783 */ "or.andn.t \0"
  /* 1794 */ "sh.orn.t \0"
  /* 1804 */ "insn.t \0"
  /* 1812 */ "and.or.t \0"
  /* 1822 */ "sh.or.t \0"
  /* 1831 */ "or.or.t \0"
  /* 1840 */ "and.nor.t \0"
  /* 1851 */ "sh.nor.t \0"
  /* 1861 */ "or.nor.t \0"
  /* 1871 */ "sh.xnor.t \0"
  /* 1882 */ "sh.xor.t \0"
  /* 1892 */ "ins.t \0"
  /* 1899 */ "st.t \0"
  /* 1905 */ "jz.t \0"
  /* 1911 */ "jnz.t \0"
  /* 1918 */ "addsc.at \0"
  /* 1928 */ "bsplit \0"
  /* 1936 */ "dvinit \0"
  /* 1944 */ "and.lt \0"
  /* 1952 */ "sh.lt \0"
  /* 1959 */ "xor.lt \0"
  /* 1967 */ "jlt \0"
  /* 1972 */ "not \0"
  /* 1977 */ "insert \0"
  /* 1985 */ "ldmst \0"
  /* 1992 */ "msub.u \0"
  /* 2000 */ "madd.u \0"
  /* 2008 */ "and.ge.u \0"
  /* 2018 */ "sh.ge.u \0"
  /* 2027 */ "xor.ge.u \0"
  /* 2037 */ "jge.u \0"
  /* 2044 */ "mul.u \0"
  /* 2051 */ "msubm.u \0"
  /* 2060 */ "maddm.u \0"
  /* 2069 */ "mulm.u \0"
  /* 2077 */ "ixmin.u \0"
  /* 2086 */ "dvstep.u \0"
  /* 2096 */ "extr.u \0"
  /* 2104 */ "msubs.u \0"
  /* 2113 */ "rsubs.u \0"
  /* 2122 */ "madds.u \0"
  /* 2131 */ "muls.u \0"
  /* 2139 */ "msubms.u \0"
  /* 2149 */ "maddms.u \0"
  /* 2159 */ "dvinit.u \0"
  /* 2169 */ "and.lt.u \0"
  /* 2179 */ "sh.lt.u \0"
  /* 2188 */ "xor.lt.u \0"
  /* 2198 */ "jlt.u \0"
  /* 2205 */ "div.u \0"
  /* 2212 */ "mov.u \0"
  /* 2219 */ "ixmax.u \0"
  /* 2228 */ "ld.bu \0"
  /* 2235 */ "min.bu \0"
  /* 2243 */ "subs.bu \0"
  /* 2252 */ "adds.bu \0"
  /* 2261 */ "sat.bu \0"
  /* 2269 */ "dvinit.bu \0"
  /* 2280 */ "lt.bu \0"
  /* 2287 */ "max.bu \0"
  /* 2295 */ "ld.hu \0"
  /* 2302 */ "min.hu \0"
  /* 2310 */ "subs.hu \0"
  /* 2319 */ "adds.hu \0"
  /* 2328 */ "sat.hu \0"
  /* 2336 */ "dvinit.hu \0"
  /* 2347 */ "lt.hu \0"
  /* 2354 */ "max.hu \0"
  /* 2362 */ "ftou \0"
  /* 2368 */ "loopu \0"
  /* 2375 */ "lt.wu \0"
  /* 2382 */ "div \0"
  /* 2387 */ "cmov \0"
  /* 2393 */ "crc32b.w \0"
  /* 2403 */ "ld.w \0"
  /* 2409 */ "crc32l.w \0"
  /* 2419 */ "swap.w \0"
  /* 2427 */ "eq.w \0"
  /* 2433 */ "lt.w \0"
  /* 2439 */ "popcnt.w \0"
  /* 2449 */ "st.w \0"
  /* 2455 */ "ixmax \0"
  /* 2462 */ "subx \0"
  /* 2468 */ "ldlcx \0"
  /* 2475 */ "stlcx \0"
  /* 2482 */ "lducx \0"
  /* 2489 */ "stucx \0"
  /* 2496 */ "addx \0"
  /* 2502 */ "parity \0"
  /* 2510 */ "ftoq31z \0"
  /* 2519 */ "jgez \0"
  /* 2525 */ "jlez \0"
  /* 2531 */ "ftoiz \0"
  /* 2538 */ "jz \0"
  /* 2542 */ "clz \0"
  /* 2547 */ "jnz \0"
  /* 2552 */ "jgtz \0"
  /* 2558 */ "jltz \0"
  /* 2564 */ "ftouz \0"
  /* 2571 */ "swap.a [+\0"
  /* 2581 */ "st.a [+\0"
  /* 2589 */ "st.da [+\0"
  /* 2598 */ "st.b [+\0"
  /* 2606 */ "st.d [+\0"
  /* 2614 */ "st.h [+\0"
  /* 2622 */ "cachea.i [+\0"
  /* 2634 */ "cachei.i [+\0"
  /* 2646 */ "cachea.wi [+\0"
  /* 2659 */ "cachei.wi [+\0"
  /* 2672 */ "st.q [+\0"
  /* 2680 */ "ldmst [+\0"
  /* 2689 */ "cachea.w [+\0"
  /* 2701 */ "cachei.w [+\0"
  /* 2713 */ "swapmsk.w [+\0"
  /* 2726 */ "cmpswap.w [+\0"
  /* 2739 */ "st.w [+\0"
  /* 2747 */ "# XRay Function Patchable RET.\0"
  /* 2778 */ "# XRay Typed Event Log.\0"
  /* 2802 */ "# XRay Custom Event Log.\0"
  /* 2827 */ "# XRay Function Enter.\0"
  /* 2850 */ "# XRay Tail Call Exit.\0"
  /* 2873 */ "# XRay Function Exit.\0"
  /* 2895 */ "LIFETIME_END\0"
  /* 2908 */ "PSEUDO_PROBE\0"
  /* 2921 */ "BUNDLE\0"
  /* 2928 */ "DBG_VALUE\0"
  /* 2938 */ "DBG_INSTR_REF\0"
  /* 2952 */ "DBG_PHI\0"
  /* 2960 */ "DBG_LABEL\0"
  /* 2970 */ "LIFETIME_START\0"
  /* 2985 */ "DBG_VALUE_LIST\0"
  /* 3000 */ "ld.a a15, [\0"
  /* 3012 */ "ld.b d15, [\0"
  /* 3024 */ "ld.h d15, [\0"
  /* 3036 */ "ld.bu d15, [\0"
  /* 3049 */ "ld.w d15, [\0"
  /* 3061 */ "swap.a [\0"
  /* 3070 */ "st.a [\0"
  /* 3077 */ "st.da [\0"
  /* 3085 */ "st.b [\0"
  /* 3092 */ "st.d [\0"
  /* 3099 */ "st.h [\0"
  /* 3106 */ "cachea.i [\0"
  /* 3117 */ "cachei.i [\0"
  /* 3128 */ "cachea.wi [\0"
  /* 3140 */ "cachei.wi [\0"
  /* 3152 */ "st.q [\0"
  /* 3159 */ "ldmst [\0"
  /* 3167 */ "cachea.w [\0"
  /* 3178 */ "cachei.w [\0"
  /* 3189 */ "swapmsk.w [\0"
  /* 3201 */ "cmpswap.w [\0"
  /* 3213 */ "st.w [\0"
  /* 3220 */ "ldlcx [\0"
  /* 3228 */ "stlcx [\0"
  /* 3236 */ "lducx [\0"
  /* 3244 */ "stucx [\0"
  /* 3252 */ "st.a [a15]\0"
  /* 3263 */ "st.b [a15]\0"
  /* 3274 */ "st.h [a15]\0"
  /* 3285 */ "st.w [a15]\0"
  /* 3296 */ "ld.a a15, [sp]\0"
  /* 3311 */ "ld.w d15, [sp]\0"
  /* 3326 */ "st.a [sp]\0"
  /* 3336 */ "st.w [sp]\0"
  /* 3346 */ "tlbflush.a\0"
  /* 3357 */ "tlbflush.b\0"
  /* 3368 */ "dsync\0"
  /* 3374 */ "isync\0"
  /* 3380 */ "rfe\0"
  /* 3384 */ "enable\0"
  /* 3391 */ "disable\0"
  /* 3399 */ "debug\0"
  /* 3405 */ "# FEntry call\0"
  /* 3419 */ "rfm\0"
  /* 3423 */ "nop\0"
  /* 3427 */ "fret\0"
  /* 3432 */ "wait\0"
  /* 3437 */ "trapv\0"
  /* 3443 */ "trapsv\0"
  /* 3450 */ "rstv\0"
  /* 3455 */ "rslcx\0"
  /* 3461 */ "svlcx\0"
};
#endif // CAPSTONE_DIET

  static const uint32_t OpInfo0[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// INLINEASM_BR
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// ANNOTATION_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    2929U,	// DBG_VALUE
    2986U,	// DBG_VALUE_LIST
    2939U,	// DBG_INSTR_REF
    2953U,	// DBG_PHI
    2961U,	// DBG_LABEL
    0U,	// REG_SEQUENCE
    0U,	// COPY
    2922U,	// BUNDLE
    2971U,	// LIFETIME_START
    2896U,	// LIFETIME_END
    2909U,	// PSEUDO_PROBE
    0U,	// ARITH_FENCE
    0U,	// STACKMAP
    3406U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// PREALLOCATED_SETUP
    0U,	// PREALLOCATED_ARG
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    2828U,	// PATCHABLE_FUNCTION_ENTER
    2748U,	// PATCHABLE_RET
    2874U,	// PATCHABLE_FUNCTION_EXIT
    2851U,	// PATCHABLE_TAIL_CALL
    2803U,	// PATCHABLE_EVENT_CALL
    2779U,	// PATCHABLE_TYPED_EVENT_CALL
    0U,	// ICALL_BRANCH_FUNNEL
    0U,	// MEMBARRIER
    0U,	// G_ASSERT_SEXT
    0U,	// G_ASSERT_ZEXT
    0U,	// G_ASSERT_ALIGN
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_SDIVREM
    0U,	// G_UDIVREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_IMPLICIT_DEF
    0U,	// G_PHI
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_MERGE_VALUES
    0U,	// G_BUILD_VECTOR
    0U,	// G_BUILD_VECTOR_TRUNC
    0U,	// G_CONCAT_VECTORS
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_FREEZE
    0U,	// G_INTRINSIC_FPTRUNC_ROUND
    0U,	// G_INTRINSIC_TRUNC
    0U,	// G_INTRINSIC_ROUND
    0U,	// G_INTRINSIC_LRINT
    0U,	// G_INTRINSIC_ROUNDEVEN
    0U,	// G_READCYCLECOUNTER
    0U,	// G_LOAD
    0U,	// G_SEXTLOAD
    0U,	// G_ZEXTLOAD
    0U,	// G_INDEXED_LOAD
    0U,	// G_INDEXED_SEXTLOAD
    0U,	// G_INDEXED_ZEXTLOAD
    0U,	// G_STORE
    0U,	// G_INDEXED_STORE
    0U,	// G_ATOMIC_CMPXCHG_WITH_SUCCESS
    0U,	// G_ATOMIC_CMPXCHG
    0U,	// G_ATOMICRMW_XCHG
    0U,	// G_ATOMICRMW_ADD
    0U,	// G_ATOMICRMW_SUB
    0U,	// G_ATOMICRMW_AND
    0U,	// G_ATOMICRMW_NAND
    0U,	// G_ATOMICRMW_OR
    0U,	// G_ATOMICRMW_XOR
    0U,	// G_ATOMICRMW_MAX
    0U,	// G_ATOMICRMW_MIN
    0U,	// G_ATOMICRMW_UMAX
    0U,	// G_ATOMICRMW_UMIN
    0U,	// G_ATOMICRMW_FADD
    0U,	// G_ATOMICRMW_FSUB
    0U,	// G_ATOMICRMW_FMAX
    0U,	// G_ATOMICRMW_FMIN
    0U,	// G_ATOMICRMW_UINC_WRAP
    0U,	// G_ATOMICRMW_UDEC_WRAP
    0U,	// G_FENCE
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INVOKE_REGION_START
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_SEXT_INREG
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_FSHL
    0U,	// G_FSHR
    0U,	// G_ROTR
    0U,	// G_ROTL
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDO
    0U,	// G_UADDE
    0U,	// G_USUBO
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SADDE
    0U,	// G_SSUBO
    0U,	// G_SSUBE
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_UADDSAT
    0U,	// G_SADDSAT
    0U,	// G_USUBSAT
    0U,	// G_SSUBSAT
    0U,	// G_USHLSAT
    0U,	// G_SSHLSAT
    0U,	// G_SMULFIX
    0U,	// G_UMULFIX
    0U,	// G_SMULFIXSAT
    0U,	// G_UMULFIXSAT
    0U,	// G_SDIVFIX
    0U,	// G_UDIVFIX
    0U,	// G_SDIVFIXSAT
    0U,	// G_UDIVFIXSAT
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FMA
    0U,	// G_FMAD
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FPOWI
    0U,	// G_FEXP
    0U,	// G_FEXP2
    0U,	// G_FLOG
    0U,	// G_FLOG2
    0U,	// G_FLOG10
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_FABS
    0U,	// G_FCOPYSIGN
    0U,	// G_IS_FPCLASS
    0U,	// G_FCANONICALIZE
    0U,	// G_FMINNUM
    0U,	// G_FMAXNUM
    0U,	// G_FMINNUM_IEEE
    0U,	// G_FMAXNUM_IEEE
    0U,	// G_FMINIMUM
    0U,	// G_FMAXIMUM
    0U,	// G_PTR_ADD
    0U,	// G_PTRMASK
    0U,	// G_SMIN
    0U,	// G_SMAX
    0U,	// G_UMIN
    0U,	// G_UMAX
    0U,	// G_ABS
    0U,	// G_LROUND
    0U,	// G_LLROUND
    0U,	// G_BR
    0U,	// G_BRJT
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// G_SHUFFLE_VECTOR
    0U,	// G_CTTZ
    0U,	// G_CTTZ_ZERO_UNDEF
    0U,	// G_CTLZ
    0U,	// G_CTLZ_ZERO_UNDEF
    0U,	// G_CTPOP
    0U,	// G_BSWAP
    0U,	// G_BITREVERSE
    0U,	// G_FCEIL
    0U,	// G_FCOS
    0U,	// G_FSIN
    0U,	// G_FSQRT
    0U,	// G_FFLOOR
    0U,	// G_FRINT
    0U,	// G_FNEARBYINT
    0U,	// G_ADDRSPACE_CAST
    0U,	// G_BLOCK_ADDR
    0U,	// G_JUMP_TABLE
    0U,	// G_DYN_STACKALLOC
    0U,	// G_STRICT_FADD
    0U,	// G_STRICT_FSUB
    0U,	// G_STRICT_FMUL
    0U,	// G_STRICT_FDIV
    0U,	// G_STRICT_FREM
    0U,	// G_STRICT_FMA
    0U,	// G_STRICT_FSQRT
    0U,	// G_READ_REGISTER
    0U,	// G_WRITE_REGISTER
    0U,	// G_MEMCPY
    0U,	// G_MEMCPY_INLINE
    0U,	// G_MEMMOVE
    0U,	// G_MEMSET
    0U,	// G_BZERO
    0U,	// G_VECREDUCE_SEQ_FADD
    0U,	// G_VECREDUCE_SEQ_FMUL
    0U,	// G_VECREDUCE_FADD
    0U,	// G_VECREDUCE_FMUL
    0U,	// G_VECREDUCE_FMAX
    0U,	// G_VECREDUCE_FMIN
    0U,	// G_VECREDUCE_ADD
    0U,	// G_VECREDUCE_MUL
    0U,	// G_VECREDUCE_AND
    0U,	// G_VECREDUCE_OR
    0U,	// G_VECREDUCE_XOR
    0U,	// G_VECREDUCE_SMAX
    0U,	// G_VECREDUCE_SMIN
    0U,	// G_VECREDUCE_UMAX
    0U,	// G_VECREDUCE_UMIN
    0U,	// G_SBFX
    0U,	// G_UBFX
    4589U,	// ABSDIFS_B_rr_v110
    5126U,	// ABSDIFS_H_rr
    5773U,	// ABSDIFS_rc
    5773U,	// ABSDIFS_rr
    4530U,	// ABSDIF_B_rr
    4951U,	// ABSDIF_H_rr
    536875789U,	// ABSDIF_rc
    4877U,	// ABSDIF_rr
    34607615U,	// ABSS_B_rr_v110
    34608249U,	// ABSS_H_rr
    34608817U,	// ABSS_rr
    33558998U,	// ABS_B_rr
    33559522U,	// ABS_H_rr
    33560179U,	// ABS_rr
    536875603U,	// ADDC_rc
    4691U,	// ADDC_rr
    1073746145U,	// ADDIH_A_rlc
    1073747146U,	// ADDIH_rlc
    1610618087U,	// ADDI_rlc
    2148538239U,	// ADDSC_AT_rr
    6015U,	// ADDSC_AT_rr_v110
    2148536488U,	// ADDSC_A_rr
    4264U,	// ADDSC_A_rr_v110
    67113128U,	// ADDSC_A_srrs
    2684358824U,	// ADDSC_A_srrs_v110
    6349U,	// ADDS_BU_rr_v110
    4581U,	// ADDS_B_rr
    5118U,	// ADDS_H
    6416U,	// ADDS_HU
    6220U,	// ADDS_U
    536877132U,	// ADDS_U_rc
    536876679U,	// ADDS_rc
    5767U,	// ADDS_rr
    33560199U,	// ADDS_srr
    536877505U,	// ADDX_rc
    6593U,	// ADDX_rr
    4283U,	// ADD_A_rr
    35655867U,	// ADD_A_src
    33558715U,	// ADD_A_srr
    4517U,	// ADD_B_rr
    3325039336U,	// ADD_F_rrr
    4938U,	// ADD_H_rr
    536875629U,	// ADD_rc
    4717U,	// ADD_rr
    35656301U,	// ADD_src
    35655691U,	// ADD_src_15a
    35721837U,	// ADD_src_a15
    33559149U,	// ADD_srr
    33558539U,	// ADD_srr_15a
    33624685U,	// ADD_srr_a15
    3758102245U,	// ANDN_T
    536876397U,	// ANDN_rc
    5485U,	// ANDN_rr
    3758102241U,	// AND_ANDN_T
    3758102199U,	// AND_AND_T
    536876589U,	// AND_EQ_rc
    5677U,	// AND_EQ_rr
    536877017U,	// AND_GE_U_rc
    6105U,	// AND_GE_U_rr
    536875652U,	// AND_GE_rc
    4740U,	// AND_GE_rr
    536877178U,	// AND_LT_U_rc
    6266U,	// AND_LT_U_rr
    536876953U,	// AND_LT_rc
    6041U,	// AND_LT_rr
    536875706U,	// AND_NE_rc
    4794U,	// AND_NE_rr
    3758102321U,	// AND_NOR_T
    3758102293U,	// AND_OR_T
    3758102203U,	// AND_T
    536875647U,	// AND_rc
    4735U,	// AND_rr
    139285U,	// AND_sc
    139285U,	// AND_sc_v110
    33559167U,	// AND_srr
    33559167U,	// AND_srr_v110
    13920U,	// BISR_rc
    13920U,	// BISR_rc_v161
    140896U,	// BISR_sc
    140896U,	// BISR_sc_v110
    4768U,	// BMERGAE_rr_v110
    4768U,	// BMERGE_rr
    33560457U,	// BSPLIT_rr
    33560457U,	// BSPLIT_rr_v110
    4398115U,	// CACHEA_I_bo_bso
    4463651U,	// CACHEA_I_bo_c
    4529187U,	// CACHEA_I_bo_pos
    4397631U,	// CACHEA_I_bo_pre
    400419U,	// CACHEA_I_bo_r
    4398137U,	// CACHEA_WI_bo_bso
    4463673U,	// CACHEA_WI_bo_c
    4529209U,	// CACHEA_WI_bo_pos
    4397655U,	// CACHEA_WI_bo_pre
    400441U,	// CACHEA_WI_bo_r
    4398176U,	// CACHEA_W_bo_bso
    4463712U,	// CACHEA_W_bo_c
    4529248U,	// CACHEA_W_bo_pos
    4397698U,	// CACHEA_W_bo_pre
    400480U,	// CACHEA_W_bo_r
    4398126U,	// CACHEI_I_bo_bso
    4529198U,	// CACHEI_I_bo_pos
    4397643U,	// CACHEI_I_bo_pre
    4398149U,	// CACHEI_WI_bo_bso
    4529221U,	// CACHEI_WI_bo_pos
    4397668U,	// CACHEI_WI_bo_pre
    4398187U,	// CACHEI_W_bo_bso
    4529259U,	// CACHEI_W_bo_pos
    4397710U,	// CACHEI_W_bo_pre
    2148536578U,	// CADDN_A_rcr_v110
    103813378U,	// CADDN_A_rrr_v110
    2148537702U,	// CADDN_rcr
    103814502U,	// CADDN_rrr
    35722598U,	// CADDN_src
    33625446U,	// CADDN_srr_v110
    2148536506U,	// CADD_A_rcr_v110
    103813306U,	// CADD_A_rrr_v110
    2148536940U,	// CADD_rcr
    103813740U,	// CADD_rrr
    35721836U,	// CADD_src
    33624684U,	// CADD_srr_v110
    16775U,	// CALLA_b
    136445U,	// CALLI_rr
    136445U,	// CALLI_rr_v110
    17713U,	// CALL_b
    21809U,	// CALL_sb
    33558985U,	// CLO_B_rr_v110
    33559461U,	// CLO_H_rr
    33559948U,	// CLO_rr
    33559032U,	// CLS_B_rr_v110
    33559569U,	// CLS_H_rr
    33560214U,	// CLS_rr
    33559092U,	// CLZ_B_rr_v110
    33559747U,	// CLZ_H_rr
    33561071U,	// CLZ_rr
    35722629U,	// CMOVN_src
    33625477U,	// CMOVN_srr
    35723604U,	// CMOV_src
    33626452U,	// CMOV_srr
    139684994U,	// CMPSWAP_W_bo_bso
    139750530U,	// CMPSWAP_W_bo_c
    139816066U,	// CMPSWAP_W_bo_pos
    139684519U,	// CMPSWAP_W_bo_pre
    6777986U,	// CMPSWAP_W_bo_r
    4863U,	// CMP_F_rr
    2148538714U,	// CRC32B_W_rr
    2148538730U,	// CRC32L_W_rr
    2148536718U,	// CRC32_B_rr
    103814496U,	// CRCN_rrr
    103813369U,	// CSUBN_A__rrr_v110
    103814489U,	// CSUBN_rrr
    103813271U,	// CSUB_A__rrr_v110
    103813691U,	// CSUB_rrr
    3400U,	// DEBUG_sr
    3400U,	// DEBUG_sys
    5734U,	// DEXTR_rrpw
    5734U,	// DEXTR_rrrr
    4273U,	// DIFSC_A_rr_v110
    3392U,	// DISABLE_sys
    135848U,	// DISABLE_sys_1
    4870U,	// DIV_F_rr
    6302U,	// DIV_U_rr
    6479U,	// DIV_rr
    3369U,	// DSYNC_sys
    3392148746U,	// DVADJ_rrr
    3392148746U,	// DVADJ_rrr_v110
    33559818U,	// DVADJ_srr_v110
    6366U,	// DVINIT_BU_rr
    6366U,	// DVINIT_BU_rr_v110
    4622U,	// DVINIT_B_rr
    4622U,	// DVINIT_B_rr_v110
    6433U,	// DVINIT_HU_rr
    6433U,	// DVINIT_HU_rr_v110
    5267U,	// DVINIT_H_rr
    5267U,	// DVINIT_H_rr_v110
    6256U,	// DVINIT_U_rr
    6256U,	// DVINIT_U_rr_v110
    6033U,	// DVINIT_rr
    6033U,	// DVINIT_rr_v110
    3392149543U,	// DVSTEP_U_rrr
    3392149543U,	// DVSTEP_U_rrrv110
    33560615U,	// DVSTEP_Uv110
    3392148899U,	// DVSTEP_rrr
    3392148899U,	// DVSTEP_rrrv110
    33559971U,	// DVSTEPv110
    3385U,	// ENABLE_sys
    536875563U,	// EQANY_B_rc
    4651U,	// EQANY_B_rr
    536876218U,	// EQANY_H_rc
    5306U,	// EQANY_H_rr
    33558857U,	// EQZ_A_rr
    4380U,	// EQ_A_rr
    4560U,	// EQ_B_rr
    5036U,	// EQ_H_rr
    6524U,	// EQ_W_rr
    536876593U,	// EQ_rc
    5681U,	// EQ_rr
    35655722U,	// EQ_src
    33558570U,	// EQ_srr
    536877105U,	// EXTR_U_rrpw
    6193U,	// EXTR_U_rrrr
    536877105U,	// EXTR_U_rrrw
    536876647U,	// EXTR_rrpw
    5735U,	// EXTR_rrrr
    536876647U,	// EXTR_rrrw
    16774U,	// FCALLA_b
    136444U,	// FCALLA_i
    17712U,	// FCALL_b
    3428U,	// FRET_sr
    3428U,	// FRET_sys
    33559979U,	// FTOHP_rr
    33561060U,	// FTOIZ_rr
    33559812U,	// FTOI_rr
    6607U,	// FTOQ31Z_rr
    4239U,	// FTOQ31_rr
    33561093U,	// FTOUZ_rr
    33560891U,	// FTOU_rr
    4308U,	// GE_A_rr
    536877021U,	// GE_U_rc
    6109U,	// GE_U_rr
    536875656U,	// GE_rc
    4744U,	// GE_rr
    33559331U,	// HPTOF_rr
    537924889U,	// IMASK_rcpw
    170923289U,	// IMASK_rcrw
    537924889U,	// IMASK_rrpw
    537924889U,	// IMASK_rrrw
    6074U,	// INSERT_rcpw
    6074U,	// INSERT_rcrr
    536876986U,	// INSERT_rcrw
    6074U,	// INSERT_rrpw
    6074U,	// INSERT_rrrr
    6074U,	// INSERT_rrrw
    3758102285U,	// INSN_T
    3758102373U,	// INS_T
    3375U,	// ISYNC_sys
    33559325U,	// ITOF_rr
    3392149676U,	// IXMAX_U_rrr
    3392149912U,	// IXMAX_rrr
    3392149534U,	// IXMIN_U_rrr
    3392148851U,	// IXMIN_rrr
    16765U,	// JA_b
    1073746203U,	// JEQ_A_brr
    1075844676U,	// JEQ_brc
    1073747524U,	// JEQ_brr
    28713U,	// JEQ_sbc1
    28713U,	// JEQ_sbc2
    28713U,	// JEQ_sbc_v110
    7344169U,	// JEQ_sbr1
    7344169U,	// JEQ_sbr2
    7344169U,	// JEQ_sbr_v110
    7346648U,	// JGEZ_sbr
    7346648U,	// JGEZ_sbr_v110
    1082136566U,	// JGE_U_brc
    1073747958U,	// JGE_U_brr
    1075843739U,	// JGE_brc
    1073746587U,	// JGE_brr
    7346681U,	// JGTZ_sbr
    7346681U,	// JGTZ_sbr_v110
    136435U,	// JI_rr
    136435U,	// JI_rr_v110
    136435U,	// JI_sbr_v110
    136435U,	// JI_sr
    16769U,	// JLA_b
    7346654U,	// JLEZ_sbr
    7346654U,	// JLEZ_sbr_v110
    136439U,	// JLI_rr
    136439U,	// JLI_rr_v110
    7346687U,	// JLTZ_sbr
    7346687U,	// JLTZ_sbr_v110
    1082136727U,	// JLT_U_brc
    1073748119U,	// JLT_U_brr
    1082136496U,	// JLT_brc
    1073747888U,	// JLT_brr
    17708U,	// JL_b
    1082135160U,	// JNED_brc
    1073746552U,	// JNED_brr
    1082135789U,	// JNEI_brc
    1073747181U,	// JNEI_brr
    1073746138U,	// JNE_A_brr
    1075843793U,	// JNE_brc
    1073746641U,	// JNE_brr
    28703U,	// JNE_sbc1
    28703U,	// JNE_sbc2
    28703U,	// JNE_sbc_v110
    7344159U,	// JNE_sbr1
    7344159U,	// JNE_sbr2
    7344159U,	// JNE_sbr_v110
    9441602U,	// JNZ_A_brr
    7344450U,	// JNZ_A_sbr
    1073747832U,	// JNZ_T_brn
    7344199U,	// JNZ_T_sbrn
    7344199U,	// JNZ_T_sbrn_v110
    20602U,	// JNZ_sb
    20602U,	// JNZ_sb_v110
    7346676U,	// JNZ_sbr
    7346676U,	// JNZ_sbr_v110
    9441596U,	// JZ_A_brr
    7344444U,	// JZ_A_sbr
    1073747826U,	// JZ_T_brn
    7344188U,	// JZ_T_sbrn
    7344188U,	// JZ_T_sbrn_v110
    20593U,	// JZ_sb
    20593U,	// JZ_sb_v110
    7346667U,	// JZ_sbr
    7346667U,	// JZ_sbr_v110
    17678U,	// J_b
    21774U,	// J_sb
    21774U,	// J_sb_v110
    166309U,	// LDLCX_abs
    4398229U,	// LDLCX_bo_bso
    38850U,	// LDMST_abs
    139684952U,	// LDMST_bo_bso
    139750488U,	// LDMST_bo_c
    139816024U,	// LDMST_bo_pos
    139684473U,	// LDMST_bo_pre
    6777944U,	// LDMST_bo_r
    166323U,	// LDUCX_abs
    4398245U,	// LDUCX_bo_bso
    10490050U,	// LD_A_abs
    213389506U,	// LD_A_bo_bso
    13111490U,	// LD_A_bo_c
    215486658U,	// LD_A_bo_pos
    594114U,	// LD_A_bo_pre
    15208642U,	// LD_A_bo_r
    246943938U,	// LD_A_bol
    142561U,	// LD_A_sc
    45617346U,	// LD_A_slr
    47714498U,	// LD_A_slr_post
    47714498U,	// LD_A_slr_post_v110
    45617346U,	// LD_A_slr_v110
    659650U,	// LD_A_slro
    659650U,	// LD_A_slro_v110
    42146745U,	// LD_A_sro
    42146745U,	// LD_A_sro_v110
    10492085U,	// LD_BU_abs
    213391541U,	// LD_BU_bo_bso
    13113525U,	// LD_BU_bo_c
    215488693U,	// LD_BU_bo_pos
    596149U,	// LD_BU_bo_pre
    15210677U,	// LD_BU_bo_r
    246945973U,	// LD_BU_bol
    45619381U,	// LD_BU_slr
    47716533U,	// LD_BU_slr_post
    47716533U,	// LD_BU_slr_post_v110
    45619381U,	// LD_BU_slr_v110
    661685U,	// LD_BU_slro
    661685U,	// LD_BU_slro_v110
    42146781U,	// LD_BU_sro
    42146781U,	// LD_BU_sro_v110
    10490284U,	// LD_B_abs
    213389740U,	// LD_B_bo_bso
    13111724U,	// LD_B_bo_c
    215486892U,	// LD_B_bo_pos
    594348U,	// LD_B_bo_pre
    15208876U,	// LD_B_bo_r
    246944172U,	// LD_B_bol
    47714732U,	// LD_B_slr_post_v110
    45617580U,	// LD_B_slr_v110
    659884U,	// LD_B_slro_v110
    42146757U,	// LD_B_sro_v110
    10490208U,	// LD_DA_abs
    213389664U,	// LD_DA_bo_bso
    13111648U,	// LD_DA_bo_c
    215486816U,	// LD_DA_bo_pos
    594272U,	// LD_DA_bo_pre
    15208800U,	// LD_DA_bo_r
    10490457U,	// LD_D_abs
    213389913U,	// LD_D_bo_bso
    13111897U,	// LD_D_bo_c
    215487065U,	// LD_D_bo_pos
    594521U,	// LD_D_bo_pre
    15209049U,	// LD_D_bo_r
    10492152U,	// LD_HU_abs
    213391608U,	// LD_HU_bo_bso
    13113592U,	// LD_HU_bo_c
    215488760U,	// LD_HU_bo_pos
    596216U,	// LD_HU_bo_pre
    15210744U,	// LD_HU_bo_r
    246946040U,	// LD_HU_bol
    10490705U,	// LD_H_abs
    213390161U,	// LD_H_bo_bso
    13112145U,	// LD_H_bo_c
    215487313U,	// LD_H_bo_pos
    594769U,	// LD_H_bo_pre
    15209297U,	// LD_H_bo_r
    246944593U,	// LD_H_bol
    45618001U,	// LD_H_slr
    47715153U,	// LD_H_slr_post
    47715153U,	// LD_H_slr_post_v110
    45618001U,	// LD_H_slr_v110
    660305U,	// LD_H_slro
    660305U,	// LD_H_slro_v110
    42146769U,	// LD_H_sro
    42146769U,	// LD_H_sro_v110
    10491336U,	// LD_Q_abs
    213390792U,	// LD_Q_bo_bso
    13112776U,	// LD_Q_bo_c
    215487944U,	// LD_Q_bo_pos
    595400U,	// LD_Q_bo_pre
    15209928U,	// LD_Q_bo_r
    10492260U,	// LD_W_abs
    213391716U,	// LD_W_bo_bso
    13113700U,	// LD_W_bo_c
    215488868U,	// LD_W_bo_pos
    596324U,	// LD_W_bo_pre
    15210852U,	// LD_W_bo_r
    246946148U,	// LD_W_bol
    142576U,	// LD_W_sc
    45619556U,	// LD_W_slr
    47716708U,	// LD_W_slr_post
    47716708U,	// LD_W_slr_post_v110
    45619556U,	// LD_W_slr_v110
    661860U,	// LD_W_slro
    661860U,	// LD_W_slro_v110
    42146794U,	// LD_W_sro
    42146794U,	// LD_W_sro_v110
    10490222U,	// LEA_abs
    213389678U,	// LEA_bo_bso
    246944110U,	// LEA_bol
    10490227U,	// LHA_abs
    43329U,	// LOOPU_brr
    9442738U,	// LOOP_brr
    15734194U,	// LOOP_sbr
    4386U,	// LT_A_rr
    4632U,	// LT_B
    6377U,	// LT_BU
    5277U,	// LT_H
    6444U,	// LT_HU
    536877182U,	// LT_U_rc
    6270U,	// LT_U_rr
    41947228U,	// LT_U_srcv110
    33558620U,	// LT_U_srrv110
    6530U,	// LT_W
    6472U,	// LT_WU
    536876957U,	// LT_rc
    6045U,	// LT_rr
    35655763U,	// LT_src
    33558611U,	// LT_srr
    103814190U,	// MADDMS_H_rrr1_LL
    103814190U,	// MADDMS_H_rrr1_LU
    103814190U,	// MADDMS_H_rrr1_UL
    103814190U,	// MADDMS_H_rrr1_UU
    2148538470U,	// MADDMS_U_rcr_v110
    103815270U,	// MADDMS_U_rrr2_v110
    2148538025U,	// MADDMS_rcr_v110
    103814825U,	// MADDMS_rrr2_v110
    103814018U,	// MADDM_H_rrr1_LL
    103814018U,	// MADDM_H_rrr1_LU
    103814018U,	// MADDM_H_rrr1_UL
    103814018U,	// MADDM_H_rrr1_UU
    103814018U,	// MADDM_H_rrr1_v110
    103814622U,	// MADDM_Q_rrr1_v110
    2148538381U,	// MADDM_U_rcr_v110
    103815181U,	// MADDM_U_rrr2_v110
    2148537676U,	// MADDM_rcr_v110
    103814476U,	// MADDM_rrr2_v110
    103814243U,	// MADDRS_H_rrr1_LL
    103814243U,	// MADDRS_H_rrr1_LU
    103814243U,	// MADDRS_H_rrr1_UL
    103814243U,	// MADDRS_H_rrr1_UL_2
    103814243U,	// MADDRS_H_rrr1_UU
    103814243U,	// MADDRS_H_rrr1_v110
    1714427421U,	// MADDRS_Q_rrr1_L_L
    2251298333U,	// MADDRS_Q_rrr1_U_U
    103814685U,	// MADDRS_Q_rrr1_v110
    103814086U,	// MADDR_H_rrr1_LL
    103814086U,	// MADDR_H_rrr1_LU
    103814086U,	// MADDR_H_rrr1_UL
    103814086U,	// MADDR_H_rrr1_UL_2
    103814086U,	// MADDR_H_rrr1_UU
    103814086U,	// MADDR_H_rrr1_v110
    1714427376U,	// MADDR_Q_rrr1_L_L
    2251298288U,	// MADDR_Q_rrr1_U_U
    103814640U,	// MADDR_Q_rrr1_v110
    103814209U,	// MADDSUMS_H_rrr1_LL
    103814209U,	// MADDSUMS_H_rrr1_LU
    103814209U,	// MADDSUMS_H_rrr1_UL
    103814209U,	// MADDSUMS_H_rrr1_UU
    103814035U,	// MADDSUM_H_rrr1_LL
    103814035U,	// MADDSUM_H_rrr1_LU
    103814035U,	// MADDSUM_H_rrr1_UL
    103814035U,	// MADDSUM_H_rrr1_UU
    103814253U,	// MADDSURS_H_rrr1_LL
    103814253U,	// MADDSURS_H_rrr1_LU
    103814253U,	// MADDSURS_H_rrr1_UL
    103814253U,	// MADDSURS_H_rrr1_UU
    103814103U,	// MADDSUR_H_rrr1_LL
    103814103U,	// MADDSUR_H_rrr1_LU
    103814103U,	// MADDSUR_H_rrr1_UL
    103814103U,	// MADDSUR_H_rrr1_UU
    103814273U,	// MADDSUS_H_rrr1_LL
    103814273U,	// MADDSUS_H_rrr1_LU
    103814273U,	// MADDSUS_H_rrr1_UL
    103814273U,	// MADDSUS_H_rrr1_UU
    103814313U,	// MADDSU_H_rrr1_LL
    103814313U,	// MADDSU_H_rrr1_LU
    103814313U,	// MADDSU_H_rrr1_UL
    103814313U,	// MADDSU_H_rrr1_UU
    103814141U,	// MADDS_H_rrr1_LL
    103814141U,	// MADDS_H_rrr1_LU
    103814141U,	// MADDS_H_rrr1_UL
    103814141U,	// MADDS_H_rrr1_UU
    103814141U,	// MADDS_H_rrr1_v110
    103814666U,	// MADDS_Q_rrr1
    103814666U,	// MADDS_Q_rrr1_L
    1714427402U,	// MADDS_Q_rrr1_L_L
    103814666U,	// MADDS_Q_rrr1_U
    103814666U,	// MADDS_Q_rrr1_UU2_v110
    2251298314U,	// MADDS_Q_rrr1_U_U
    103814666U,	// MADDS_Q_rrr1_e
    103814666U,	// MADDS_Q_rrr1_e_L
    1714427402U,	// MADDS_Q_rrr1_e_L_L
    103814666U,	// MADDS_Q_rrr1_e_U
    2251298314U,	// MADDS_Q_rrr1_e_U_U
    2148538443U,	// MADDS_U_rcr
    2148538443U,	// MADDS_U_rcr_e
    103815243U,	// MADDS_U_rrr2
    103815243U,	// MADDS_U_rrr2_e
    2148537990U,	// MADDS_rcr
    2148537990U,	// MADDS_rcr_e
    103814790U,	// MADDS_rrr2
    103814790U,	// MADDS_rrr2_e
    103813863U,	// MADD_F_rrr
    103813961U,	// MADD_H_rrr1_LL
    103813961U,	// MADD_H_rrr1_LU
    103813961U,	// MADD_H_rrr1_UL
    103813961U,	// MADD_H_rrr1_UU
    103813961U,	// MADD_H_rrr1_v110
    103814592U,	// MADD_Q_rrr1
    103814592U,	// MADD_Q_rrr1_L
    1714427328U,	// MADD_Q_rrr1_L_L
    103814592U,	// MADD_Q_rrr1_U
    103814592U,	// MADD_Q_rrr1_UU2_v110
    2251298240U,	// MADD_Q_rrr1_U_U
    103814592U,	// MADD_Q_rrr1_e
    103814592U,	// MADD_Q_rrr1_e_L
    1714427328U,	// MADD_Q_rrr1_e_L_L
    103814592U,	// MADD_Q_rrr1_e_U
    2251298240U,	// MADD_Q_rrr1_e_U_U
    2148538321U,	// MADD_U_rcr
    103815121U,	// MADD_U_rrr2
    2148536946U,	// MADD_rcr
    2148536946U,	// MADD_rcr_e
    103813746U,	// MADD_rrr2
    103813746U,	// MADD_rrr2_e
    4644U,	// MAX_B
    6384U,	// MAX_BU
    5299U,	// MAX_H
    6451U,	// MAX_HU
    536877230U,	// MAX_U_rc
    6318U,	// MAX_U_rr
    536877466U,	// MAX_rc
    6554U,	// MAX_rr
    16782921U,	// MFCR_rlc
    4546U,	// MIN_B
    6332U,	// MIN_BU
    5022U,	// MIN_H
    6399U,	// MIN_HU
    536877088U,	// MIN_U_rc
    6176U,	// MIN_U_rr
    536876405U,	// MIN_rc
    5493U,	// MIN_rr
    16781546U,	// MOVH_A_rlc
    16782549U,	// MOVH_rlc
    135504U,	// MOVZ_A_sr
    34607448U,	// MOV_AA_rr
    33558872U,	// MOV_AA_srr_srr
    33558872U,	// MOV_AA_srr_srr_v110
    34607406U,	// MOV_A_rr
    41947438U,	// MOV_A_src
    33558830U,	// MOV_A_srr
    33558830U,	// MOV_A_srr_v110
    34607717U,	// MOV_D_rr
    33559141U,	// MOV_D_srr_srr
    33559141U,	// MOV_D_srr_srr_v110
    16783525U,	// MOV_U_rlc
    17832277U,	// MOV_rlc
    16783701U,	// MOV_rlc_e
    34609493U,	// MOV_rr
    34609493U,	// MOV_rr_e
    6485U,	// MOV_rr_eab
    139367U,	// MOV_sc
    139367U,	// MOV_sc_v110
    35658069U,	// MOV_src
    35658069U,	// MOV_src_e
    33560917U,	// MOV_srr
    103814178U,	// MSUBADMS_H_rrr1_LL
    103814178U,	// MSUBADMS_H_rrr1_LU
    103814178U,	// MSUBADMS_H_rrr1_UL
    103814178U,	// MSUBADMS_H_rrr1_UU
    103814007U,	// MSUBADM_H_rrr1_LL
    103814007U,	// MSUBADM_H_rrr1_LU
    103814007U,	// MSUBADM_H_rrr1_UL
    103814007U,	// MSUBADM_H_rrr1_UU
    103814231U,	// MSUBADRS_H_rrr1_LL
    103814231U,	// MSUBADRS_H_rrr1_LU
    103814231U,	// MSUBADRS_H_rrr1_UL
    103814231U,	// MSUBADRS_H_rrr1_UU
    103814231U,	// MSUBADRS_H_rrr1_v110
    103814075U,	// MSUBADR_H_rrr1_LL
    103814075U,	// MSUBADR_H_rrr1_LU
    103814075U,	// MSUBADR_H_rrr1_UL
    103814075U,	// MSUBADR_H_rrr1_UU
    103814075U,	// MSUBADR_H_rrr1_v110
    103814130U,	// MSUBADS_H_rrr1_LL
    103814130U,	// MSUBADS_H_rrr1_LU
    103814130U,	// MSUBADS_H_rrr1_UL
    103814130U,	// MSUBADS_H_rrr1_UU
    103813951U,	// MSUBAD_H_rrr1_LL
    103813951U,	// MSUBAD_H_rrr1_LU
    103813951U,	// MSUBAD_H_rrr1_UL
    103813951U,	// MSUBAD_H_rrr1_UU
    103814168U,	// MSUBMS_H_rrr1_LL
    103814168U,	// MSUBMS_H_rrr1_LU
    103814168U,	// MSUBMS_H_rrr1_UL
    103814168U,	// MSUBMS_H_rrr1_UU
    2148538460U,	// MSUBMS_U_rcrv110
    103815260U,	// MSUBMS_U_rrr2v110
    2148538017U,	// MSUBMS_rcrv110
    103814817U,	// MSUBMS_rrr2v110
    103813998U,	// MSUBM_H_rrr1_LL
    103813998U,	// MSUBM_H_rrr1_LU
    103813998U,	// MSUBM_H_rrr1_UL
    103813998U,	// MSUBM_H_rrr1_UU
    103813998U,	// MSUBM_H_rrr1_v110
    103814613U,	// MSUBM_Q_rrr1_v110
    2148538372U,	// MSUBM_U_rcrv110
    103815172U,	// MSUBM_U_rrr2v110
    2148537669U,	// MSUBM_rcrv110
    103814469U,	// MSUBM_rrr2v110
    103814221U,	// MSUBRS_H_rrr1_LL
    103814221U,	// MSUBRS_H_rrr1_LU
    103814221U,	// MSUBRS_H_rrr1_UL
    103814221U,	// MSUBRS_H_rrr1_UL_2
    103814221U,	// MSUBRS_H_rrr1_UU
    103814221U,	// MSUBRS_H_rrr1_v110
    1714427411U,	// MSUBRS_Q_rrr1_L_L
    2251298323U,	// MSUBRS_Q_rrr1_U_U
    103814675U,	// MSUBRS_Q_rrr1_v110
    103814066U,	// MSUBR_H_rrr1_LL
    103814066U,	// MSUBR_H_rrr1_LU
    103814066U,	// MSUBR_H_rrr1_UL
    103814066U,	// MSUBR_H_rrr1_UL_2
    103814066U,	// MSUBR_H_rrr1_UU
    103814066U,	// MSUBR_H_rrr1_v110
    1714427367U,	// MSUBR_Q_rrr1_L_L
    2251298279U,	// MSUBR_Q_rrr1_U_U
    103814631U,	// MSUBR_Q_rrr1_v110
    103814121U,	// MSUBS_H_rrr1_LL
    103814121U,	// MSUBS_H_rrr1_LU
    103814121U,	// MSUBS_H_rrr1_UL
    103814121U,	// MSUBS_H_rrr1_UU
    103814121U,	// MSUBS_H_rrr1_v110
    103814657U,	// MSUBS_Q_rrr1
    103814657U,	// MSUBS_Q_rrr1_L
    1714427393U,	// MSUBS_Q_rrr1_L_L
    103814657U,	// MSUBS_Q_rrr1_U
    103814657U,	// MSUBS_Q_rrr1_UU2_v110
    2251298305U,	// MSUBS_Q_rrr1_U_U
    103814657U,	// MSUBS_Q_rrr1_e
    103814657U,	// MSUBS_Q_rrr1_e_L
    1714427393U,	// MSUBS_Q_rrr1_e_L_L
    103814657U,	// MSUBS_Q_rrr1_e_U
    2251298305U,	// MSUBS_Q_rrr1_e_U_U
    2148538425U,	// MSUBS_U_rcr
    2148538425U,	// MSUBS_U_rcr_e
    103815225U,	// MSUBS_U_rrr2
    103815225U,	// MSUBS_U_rrr2_e
    2148537976U,	// MSUBS_rcr
    2148537976U,	// MSUBS_rcr_e
    103814776U,	// MSUBS_rrr2
    103814776U,	// MSUBS_rrr2_e
    103813855U,	// MSUB_F_rrr
    103813943U,	// MSUB_H_rrr1_LL
    103813943U,	// MSUB_H_rrr1_LU
    103813943U,	// MSUB_H_rrr1_UL
    103813943U,	// MSUB_H_rrr1_UU
    103813943U,	// MSUB_H_rrr1_v110
    103814584U,	// MSUB_Q_rrr1
    103814584U,	// MSUB_Q_rrr1_L
    1714427320U,	// MSUB_Q_rrr1_L_L
    103814584U,	// MSUB_Q_rrr1_U
    103814584U,	// MSUB_Q_rrr1_UU2_v110
    2251298232U,	// MSUB_Q_rrr1_U_U
    103814584U,	// MSUB_Q_rrr1_e
    103814584U,	// MSUB_Q_rrr1_e_L
    1714427320U,	// MSUB_Q_rrr1_e_L_L
    103814584U,	// MSUB_Q_rrr1_e_U
    2251298232U,	// MSUB_Q_rrr1_e_U_U
    2148538313U,	// MSUB_U_rcr
    103815113U,	// MSUB_U_rrr2
    2148536897U,	// MSUB_rcr
    2148536897U,	// MSUB_rcr_e
    103813697U,	// MSUB_rrr2
    103813697U,	// MSUB_rrr2_e
    46671U,	// MTCR_rlc
    5176U,	// MULMS_H_rr1_LL2e
    5176U,	// MULMS_H_rr1_LU2e
    5176U,	// MULMS_H_rr1_UL2e
    5176U,	// MULMS_H_rr1_UU2e
    5003U,	// MULM_H_rr1_LL2e
    5003U,	// MULM_H_rr1_LU2e
    5003U,	// MULM_H_rr1_UL2e
    5003U,	// MULM_H_rr1_UU2e
    536877078U,	// MULM_U_rc
    6166U,	// MULM_U_rr
    536876371U,	// MULM_rc
    5459U,	// MULM_rr
    5071U,	// MULR_H_rr1_LL2e
    5071U,	// MULR_H_rr1_LU2e
    5071U,	// MULR_H_rr1_UL2e
    5071U,	// MULR_H_rr1_UU2e
    5071U,	// MULR_H_rr_v110
    268441081U,	// MULR_Q_rr1_2LL
    301995513U,	// MULR_Q_rr1_2UU
    5625U,	// MULR_Q_rr_v110
    536877140U,	// MULS_U_rc
    6228U,	// MULS_U_rr2
    6228U,	// MULS_U_rr_v110
    536876699U,	// MULS_rc
    5787U,	// MULS_rr2
    5787U,	// MULS_rr_v110
    4856U,	// MUL_F_rrr
    4967U,	// MUL_H_rr1_LL2e
    4967U,	// MUL_H_rr1_LU2e
    4967U,	// MUL_H_rr1_UL2e
    4967U,	// MUL_H_rr1_UU2e
    4967U,	// MUL_H_rr_v110
    5582U,	// MUL_Q_rr1_2
    268441038U,	// MUL_Q_rr1_2LL
    301995470U,	// MUL_Q_rr1_2UU
    5582U,	// MUL_Q_rr1_2_L
    5582U,	// MUL_Q_rr1_2_Le
    5582U,	// MUL_Q_rr1_2_U
    5582U,	// MUL_Q_rr1_2_Ue
    5582U,	// MUL_Q_rr1_2__e
    5582U,	// MUL_Q_rr_v110
    536877053U,	// MUL_U_rc
    6141U,	// MUL_U_rr2
    536876352U,	// MUL_rc
    536876352U,	// MUL_rc_e
    5440U,	// MUL_rr2
    5440U,	// MUL_rr2_e
    5440U,	// MUL_rr_v110
    33559872U,	// MUL_srr
    3758102233U,	// NAND_T
    536875646U,	// NAND_rc
    4734U,	// NAND_rr
    33558837U,	// NEZ_A
    4315U,	// NE_A
    536875710U,	// NE_rc
    4798U,	// NE_rr
    3424U,	// NOP_sr
    3424U,	// NOP_sys
    3758102325U,	// NOR_T
    536876630U,	// NOR_rc
    5718U,	// NOR_rr
    136790U,	// NOR_sr
    136790U,	// NOR_sr_v110
    137141U,	// NOT_sr_v162
    3758102278U,	// ORN_T
    536876416U,	// ORN_rc
    5504U,	// ORN_rr
    3758102264U,	// OR_ANDN_T
    3758102220U,	// OR_AND_T
    536876605U,	// OR_EQ_rc
    5693U,	// OR_EQ_rr
    536877037U,	// OR_GE_U_rc
    6125U,	// OR_GE_U_rr
    536875668U,	// OR_GE_rc
    4756U,	// OR_GE_rr
    536877198U,	// OR_LT_U_rc
    6286U,	// OR_LT_U_rr
    536876969U,	// OR_LT_rc
    6057U,	// OR_LT_rr
    536875722U,	// OR_NE_rc
    4810U,	// OR_NE_rr
    3758102342U,	// OR_NOR_T
    3758102312U,	// OR_OR_T
    3758102297U,	// OR_T
    2684360279U,	// OR_rc
    5719U,	// OR_rr
    139315U,	// OR_sc
    139315U,	// OR_sc_v110
    33560151U,	// OR_srr
    33560151U,	// OR_srr_v110
    3325039891U,	// PACK_rrr
    33561031U,	// PARITY_rr
    33561031U,	// PARITY_rr_v110
    33560968U,	// POPCNT_W_rr
    4885U,	// Q31TOF_rr
    33559279U,	// QSEED_F_rr
    135894U,	// RESTORE_sys
    3429U,	// RET_sr
    3429U,	// RET_sys
    3429U,	// RET_sys_v110
    3381U,	// RFE_sr
    3381U,	// RFE_sys_sys
    3381U,	// RFE_sys_sys_v110
    3420U,	// RFM_sys
    3456U,	// RSLCX_sys
    3451U,	// RSTV_sys
    536877122U,	// RSUBS_U_rc
    536876671U,	// RSUBS_rc
    536875591U,	// RSUB_rc
    135751U,	// RSUB_sr_sr
    135751U,	// RSUB_sr_sr_v110
    33560790U,	// SAT_BU_rr
    137430U,	// SAT_BU_sr
    137430U,	// SAT_BU_sr_v110
    33559047U,	// SAT_B_rr
    135687U,	// SAT_B_sr
    135687U,	// SAT_B_sr_v110
    33560857U,	// SAT_HU_rr
    137497U,	// SAT_HU_sr
    137497U,	// SAT_HU_sr_v110
    33559692U,	// SAT_H_rr
    136332U,	// SAT_H_sr
    136332U,	// SAT_H_sr_v110
    2148536587U,	// SELN_A_rcr_v110
    103813387U,	// SELN_A_rrr_v110
    2148537722U,	// SELN_rcr
    103814522U,	// SELN_rrr
    2148536562U,	// SEL_A_rcr_v110
    103813362U,	// SEL_A_rrr_v110
    2148537632U,	// SEL_rcr
    103814432U,	// SEL_rrr
    536876653U,	// SHAS_rc
    5741U,	// SHAS_rr
    536875415U,	// SHA_B_rc
    4503U,	// SHA_B_rr
    536875824U,	// SHA_H_rc
    4912U,	// SHA_H_rr
    536875384U,	// SHA_rc
    4472U,	// SHA_rr
    35656056U,	// SHA_src
    35656056U,	// SHA_src_v110
    536875697U,	// SHUFFLE_rc
    3758102253U,	// SH_ANDN_T
    3758102210U,	// SH_AND_T
    536875452U,	// SH_B_rc
    4540U,	// SH_B_rr
    536876597U,	// SH_EQ_rc
    5685U,	// SH_EQ_rr
    536877027U,	// SH_GE_U_rc
    6115U,	// SH_GE_U_rr
    536875660U,	// SH_GE_rc
    4748U,	// SH_GE_rr
    536875873U,	// SH_H_rc
    4961U,	// SH_H_rr
    536877188U,	// SH_LT_U_rc
    6276U,	// SH_LT_U_rr
    536876961U,	// SH_LT_rc
    6049U,	// SH_LT_rr
    3758102230U,	// SH_NAND_T
    536875714U,	// SH_NE_rc
    4802U,	// SH_NE_rr
    3758102332U,	// SH_NOR_T
    3758102275U,	// SH_ORN_T
    3758102303U,	// SH_OR_T
    3758102352U,	// SH_XNOR_T
    3758102363U,	// SH_XOR_T
    536876241U,	// SH_rc
    5329U,	// SH_rr
    35656913U,	// SH_src
    35656913U,	// SH_src_v110
    166316U,	// STLCX_abs
    4398237U,	// STLCX_bo_bso
    166330U,	// STUCX_abs
    4398253U,	// STUCX_bo_bso
    37160U,	// ST_A_abs
    139684863U,	// ST_A_bo_bso
    3327400959U,	// ST_A_bo_c
    139815935U,	// ST_A_bo_pos
    139684374U,	// ST_A_bo_pre
    34020351U,	// ST_A_bo_r
    19078143U,	// ST_A_bol
    732415U,	// ST_A_sc
    344136703U,	// ST_A_sro
    344136703U,	// ST_A_sro_v110
    793599U,	// ST_A_ssr
    859135U,	// ST_A_ssr_pos
    859135U,	// ST_A_ssr_pos_v110
    793599U,	// ST_A_ssr_v110
    52405U,	// ST_A_ssro
    52405U,	// ST_A_ssro_v110
    37406U,	// ST_B_abs
    139684878U,	// ST_B_bo_bso
    3327400974U,	// ST_B_bo_c
    139815950U,	// ST_B_bo_pos
    139684391U,	// ST_B_bo_pre
    34020366U,	// ST_B_bo_r
    19078158U,	// ST_B_bol
    377691150U,	// ST_B_sro
    377691150U,	// ST_B_sro_v110
    793614U,	// ST_B_ssr
    859150U,	// ST_B_ssr_pos
    859150U,	// ST_B_ssr_pos_v110
    793614U,	// ST_B_ssr_v110
    52416U,	// ST_B_ssro
    52416U,	// ST_B_ssro_v110
    37223U,	// ST_DA_abs
    139684870U,	// ST_DA_bo_bso
    3327400966U,	// ST_DA_bo_c
    139815942U,	// ST_DA_bo_pos
    139684382U,	// ST_DA_bo_pre
    34020358U,	// ST_DA_bo_r
    37471U,	// ST_D_abs
    139684885U,	// ST_D_bo_bso
    3327400981U,	// ST_D_bo_c
    139815957U,	// ST_D_bo_pos
    139684399U,	// ST_D_bo_pre
    34020373U,	// ST_D_bo_r
    38051U,	// ST_H_abs
    139684892U,	// ST_H_bo_bso
    3327400988U,	// ST_H_bo_c
    139815964U,	// ST_H_bo_pos
    139684407U,	// ST_H_bo_pre
    34020380U,	// ST_H_bo_r
    19078172U,	// ST_H_bol
    377691164U,	// ST_H_sro
    377691164U,	// ST_H_sro_v110
    793628U,	// ST_H_ssr
    859164U,	// ST_H_ssr_pos
    859164U,	// ST_H_ssr_pos_v110
    793628U,	// ST_H_ssr_v110
    52427U,	// ST_H_ssro
    52427U,	// ST_H_ssro_v110
    38439U,	// ST_Q_abs
    139684945U,	// ST_Q_bo_bso
    3327401041U,	// ST_Q_bo_c
    139816017U,	// ST_Q_bo_pos
    139684465U,	// ST_Q_bo_pre
    34020433U,	// ST_Q_bo_r
    34668U,	// ST_T
    39314U,	// ST_W_abs
    139685006U,	// ST_W_bo_bso
    3327401102U,	// ST_W_bo_c
    139816078U,	// ST_W_bo_pos
    139684532U,	// ST_W_bo_pre
    34020494U,	// ST_W_bo_r
    19078286U,	// ST_W_bol
    929033U,	// ST_W_sc
    377691278U,	// ST_W_sro
    377691278U,	// ST_W_sro_v110
    793742U,	// ST_W_ssr
    859278U,	// ST_W_ssr_pos
    859278U,	// ST_W_ssr_pos_v110
    793742U,	// ST_W_ssr_v110
    52438U,	// ST_W_ssro
    52438U,	// ST_W_ssro_v110
    4685U,	// SUBC_rr
    4255U,	// SUBSC_A_rr
    6340U,	// SUBS_BU_rr
    4573U,	// SUBS_B_rr
    6407U,	// SUBS_HU_rr
    5098U,	// SUBS_H_rr
    6202U,	// SUBS_U_rr
    5753U,	// SUBS_rr
    33560185U,	// SUBS_srr
    6559U,	// SUBX_rr
    4248U,	// SUB_A_rr
    139396U,	// SUB_A_sc
    139396U,	// SUB_A_sc_v110
    4510U,	// SUB_B_rr
    3325039328U,	// SUB_F_rrr
    4920U,	// SUB_H_rr
    4668U,	// SUB_rr
    33559100U,	// SUB_srr
    33558529U,	// SUB_srr_15a
    33624636U,	// SUB_srr_a15
    3462U,	// SVLCX_sys
    139684982U,	// SWAPMSK_W_bo_bso
    3327401078U,	// SWAPMSK_W_bo_c
    1010806U,	// SWAPMSK_W_bo_i
    139816054U,	// SWAPMSK_W_bo_pos
    139684506U,	// SWAPMSK_W_bo_pre
    34020470U,	// SWAPMSK_W_bo_r
    37139U,	// SWAP_A_abs
    139684854U,	// SWAP_A_bo_bso
    3327400950U,	// SWAP_A_bo_c
    139815926U,	// SWAP_A_bo_pos
    139684364U,	// SWAP_A_bo_pre
    34020342U,	// SWAP_A_bo_r
    39284U,	// SWAP_W_abs
    139684997U,	// SWAP_W_bo_bso
    3327401093U,	// SWAP_W_bo_c
    1010821U,	// SWAP_W_bo_i
    139816069U,	// SWAP_W_bo_pos
    139684522U,	// SWAP_W_bo_pre
    34020485U,	// SWAP_W_bo_r
    13623U,	// SYSCALL_rc
    136601U,	// TLBDEMAP_rr
    3347U,	// TLBFLUSH_A_rr
    3358U,	// TLBFLUSH_B_rr
    136593U,	// TLBMAP_rr
    135368U,	// TLBPROBE_A_rr
    136411U,	// TLBPROBE_I_rr
    3444U,	// TRAPSV_sys
    3438U,	// TRAPV_sys
    33559825U,	// UNPACK_rr_rr
    33559825U,	// UNPACK_rr_rr_v110
    136485U,	// UPDFL_rr
    33559338U,	// UTOF_rr
    3433U,	// WAIT_sys
    3758102355U,	// XNOR_T
    536876629U,	// XNOR_rc
    5717U,	// XNOR_rr
    536876604U,	// XOR_EQ_rc
    5692U,	// XOR_EQ_rr
    536877036U,	// XOR_GE_U_rc
    6124U,	// XOR_GE_U_rr
    536875667U,	// XOR_GE_rc
    4755U,	// XOR_GE_rr
    536877197U,	// XOR_LT_U_rc
    6285U,	// XOR_LT_U_rr
    536876968U,	// XOR_LT_rc
    6056U,	// XOR_LT_rr
    536875721U,	// XOR_NE_rc
    4809U,	// XOR_NE_rr
    3758102366U,	// XOR_T
    536876635U,	// XOR_rc
    5723U,	// XOR_rr
    33560155U,	// XOR_srr
  };

  static const uint16_t OpInfo1[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// INLINEASM_BR
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// ANNOTATION_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    0U,	// DBG_VALUE
    0U,	// DBG_VALUE_LIST
    0U,	// DBG_INSTR_REF
    0U,	// DBG_PHI
    0U,	// DBG_LABEL
    0U,	// REG_SEQUENCE
    0U,	// COPY
    0U,	// BUNDLE
    0U,	// LIFETIME_START
    0U,	// LIFETIME_END
    0U,	// PSEUDO_PROBE
    0U,	// ARITH_FENCE
    0U,	// STACKMAP
    0U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// PREALLOCATED_SETUP
    0U,	// PREALLOCATED_ARG
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    0U,	// PATCHABLE_FUNCTION_ENTER
    0U,	// PATCHABLE_RET
    0U,	// PATCHABLE_FUNCTION_EXIT
    0U,	// PATCHABLE_TAIL_CALL
    0U,	// PATCHABLE_EVENT_CALL
    0U,	// PATCHABLE_TYPED_EVENT_CALL
    0U,	// ICALL_BRANCH_FUNNEL
    0U,	// MEMBARRIER
    0U,	// G_ASSERT_SEXT
    0U,	// G_ASSERT_ZEXT
    0U,	// G_ASSERT_ALIGN
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_SDIVREM
    0U,	// G_UDIVREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_IMPLICIT_DEF
    0U,	// G_PHI
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_MERGE_VALUES
    0U,	// G_BUILD_VECTOR
    0U,	// G_BUILD_VECTOR_TRUNC
    0U,	// G_CONCAT_VECTORS
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_FREEZE
    0U,	// G_INTRINSIC_FPTRUNC_ROUND
    0U,	// G_INTRINSIC_TRUNC
    0U,	// G_INTRINSIC_ROUND
    0U,	// G_INTRINSIC_LRINT
    0U,	// G_INTRINSIC_ROUNDEVEN
    0U,	// G_READCYCLECOUNTER
    0U,	// G_LOAD
    0U,	// G_SEXTLOAD
    0U,	// G_ZEXTLOAD
    0U,	// G_INDEXED_LOAD
    0U,	// G_INDEXED_SEXTLOAD
    0U,	// G_INDEXED_ZEXTLOAD
    0U,	// G_STORE
    0U,	// G_INDEXED_STORE
    0U,	// G_ATOMIC_CMPXCHG_WITH_SUCCESS
    0U,	// G_ATOMIC_CMPXCHG
    0U,	// G_ATOMICRMW_XCHG
    0U,	// G_ATOMICRMW_ADD
    0U,	// G_ATOMICRMW_SUB
    0U,	// G_ATOMICRMW_AND
    0U,	// G_ATOMICRMW_NAND
    0U,	// G_ATOMICRMW_OR
    0U,	// G_ATOMICRMW_XOR
    0U,	// G_ATOMICRMW_MAX
    0U,	// G_ATOMICRMW_MIN
    0U,	// G_ATOMICRMW_UMAX
    0U,	// G_ATOMICRMW_UMIN
    0U,	// G_ATOMICRMW_FADD
    0U,	// G_ATOMICRMW_FSUB
    0U,	// G_ATOMICRMW_FMAX
    0U,	// G_ATOMICRMW_FMIN
    0U,	// G_ATOMICRMW_UINC_WRAP
    0U,	// G_ATOMICRMW_UDEC_WRAP
    0U,	// G_FENCE
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INVOKE_REGION_START
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_SEXT_INREG
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_FSHL
    0U,	// G_FSHR
    0U,	// G_ROTR
    0U,	// G_ROTL
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDO
    0U,	// G_UADDE
    0U,	// G_USUBO
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SADDE
    0U,	// G_SSUBO
    0U,	// G_SSUBE
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_UADDSAT
    0U,	// G_SADDSAT
    0U,	// G_USUBSAT
    0U,	// G_SSUBSAT
    0U,	// G_USHLSAT
    0U,	// G_SSHLSAT
    0U,	// G_SMULFIX
    0U,	// G_UMULFIX
    0U,	// G_SMULFIXSAT
    0U,	// G_UMULFIXSAT
    0U,	// G_SDIVFIX
    0U,	// G_UDIVFIX
    0U,	// G_SDIVFIXSAT
    0U,	// G_UDIVFIXSAT
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FMA
    0U,	// G_FMAD
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FPOWI
    0U,	// G_FEXP
    0U,	// G_FEXP2
    0U,	// G_FLOG
    0U,	// G_FLOG2
    0U,	// G_FLOG10
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_FABS
    0U,	// G_FCOPYSIGN
    0U,	// G_IS_FPCLASS
    0U,	// G_FCANONICALIZE
    0U,	// G_FMINNUM
    0U,	// G_FMAXNUM
    0U,	// G_FMINNUM_IEEE
    0U,	// G_FMAXNUM_IEEE
    0U,	// G_FMINIMUM
    0U,	// G_FMAXIMUM
    0U,	// G_PTR_ADD
    0U,	// G_PTRMASK
    0U,	// G_SMIN
    0U,	// G_SMAX
    0U,	// G_UMIN
    0U,	// G_UMAX
    0U,	// G_ABS
    0U,	// G_LROUND
    0U,	// G_LLROUND
    0U,	// G_BR
    0U,	// G_BRJT
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// G_SHUFFLE_VECTOR
    0U,	// G_CTTZ
    0U,	// G_CTTZ_ZERO_UNDEF
    0U,	// G_CTLZ
    0U,	// G_CTLZ_ZERO_UNDEF
    0U,	// G_CTPOP
    0U,	// G_BSWAP
    0U,	// G_BITREVERSE
    0U,	// G_FCEIL
    0U,	// G_FCOS
    0U,	// G_FSIN
    0U,	// G_FSQRT
    0U,	// G_FFLOOR
    0U,	// G_FRINT
    0U,	// G_FNEARBYINT
    0U,	// G_ADDRSPACE_CAST
    0U,	// G_BLOCK_ADDR
    0U,	// G_JUMP_TABLE
    0U,	// G_DYN_STACKALLOC
    0U,	// G_STRICT_FADD
    0U,	// G_STRICT_FSUB
    0U,	// G_STRICT_FMUL
    0U,	// G_STRICT_FDIV
    0U,	// G_STRICT_FREM
    0U,	// G_STRICT_FMA
    0U,	// G_STRICT_FSQRT
    0U,	// G_READ_REGISTER
    0U,	// G_WRITE_REGISTER
    0U,	// G_MEMCPY
    0U,	// G_MEMCPY_INLINE
    0U,	// G_MEMMOVE
    0U,	// G_MEMSET
    0U,	// G_BZERO
    0U,	// G_VECREDUCE_SEQ_FADD
    0U,	// G_VECREDUCE_SEQ_FMUL
    0U,	// G_VECREDUCE_FADD
    0U,	// G_VECREDUCE_FMUL
    0U,	// G_VECREDUCE_FMAX
    0U,	// G_VECREDUCE_FMIN
    0U,	// G_VECREDUCE_ADD
    0U,	// G_VECREDUCE_MUL
    0U,	// G_VECREDUCE_AND
    0U,	// G_VECREDUCE_OR
    0U,	// G_VECREDUCE_XOR
    0U,	// G_VECREDUCE_SMAX
    0U,	// G_VECREDUCE_SMIN
    0U,	// G_VECREDUCE_UMAX
    0U,	// G_VECREDUCE_UMIN
    0U,	// G_SBFX
    0U,	// G_UBFX
    0U,	// ABSDIFS_B_rr_v110
    0U,	// ABSDIFS_H_rr
    0U,	// ABSDIFS_rc
    0U,	// ABSDIFS_rr
    0U,	// ABSDIF_B_rr
    0U,	// ABSDIF_H_rr
    0U,	// ABSDIF_rc
    0U,	// ABSDIF_rr
    0U,	// ABSS_B_rr_v110
    0U,	// ABSS_H_rr
    0U,	// ABSS_rr
    0U,	// ABS_B_rr
    0U,	// ABS_H_rr
    0U,	// ABS_rr
    0U,	// ADDC_rc
    0U,	// ADDC_rr
    0U,	// ADDIH_A_rlc
    0U,	// ADDIH_rlc
    0U,	// ADDI_rlc
    0U,	// ADDSC_AT_rr
    0U,	// ADDSC_AT_rr_v110
    2U,	// ADDSC_A_rr
    2U,	// ADDSC_A_rr_v110
    0U,	// ADDSC_A_srrs
    0U,	// ADDSC_A_srrs_v110
    0U,	// ADDS_BU_rr_v110
    0U,	// ADDS_B_rr
    0U,	// ADDS_H
    0U,	// ADDS_HU
    0U,	// ADDS_U
    0U,	// ADDS_U_rc
    0U,	// ADDS_rc
    0U,	// ADDS_rr
    0U,	// ADDS_srr
    0U,	// ADDX_rc
    0U,	// ADDX_rr
    0U,	// ADD_A_rr
    0U,	// ADD_A_src
    0U,	// ADD_A_srr
    0U,	// ADD_B_rr
    0U,	// ADD_F_rrr
    0U,	// ADD_H_rr
    0U,	// ADD_rc
    0U,	// ADD_rr
    0U,	// ADD_src
    0U,	// ADD_src_15a
    0U,	// ADD_src_a15
    0U,	// ADD_srr
    0U,	// ADD_srr_15a
    0U,	// ADD_srr_a15
    0U,	// ANDN_T
    0U,	// ANDN_rc
    0U,	// ANDN_rr
    0U,	// AND_ANDN_T
    0U,	// AND_AND_T
    0U,	// AND_EQ_rc
    0U,	// AND_EQ_rr
    0U,	// AND_GE_U_rc
    0U,	// AND_GE_U_rr
    0U,	// AND_GE_rc
    0U,	// AND_GE_rr
    0U,	// AND_LT_U_rc
    0U,	// AND_LT_U_rr
    0U,	// AND_LT_rc
    0U,	// AND_LT_rr
    0U,	// AND_NE_rc
    0U,	// AND_NE_rr
    0U,	// AND_NOR_T
    0U,	// AND_OR_T
    0U,	// AND_T
    0U,	// AND_rc
    0U,	// AND_rr
    0U,	// AND_sc
    0U,	// AND_sc_v110
    0U,	// AND_srr
    0U,	// AND_srr_v110
    0U,	// BISR_rc
    0U,	// BISR_rc_v161
    0U,	// BISR_sc
    0U,	// BISR_sc_v110
    0U,	// BMERGAE_rr_v110
    0U,	// BMERGE_rr
    0U,	// BSPLIT_rr
    0U,	// BSPLIT_rr_v110
    0U,	// CACHEA_I_bo_bso
    0U,	// CACHEA_I_bo_c
    0U,	// CACHEA_I_bo_pos
    0U,	// CACHEA_I_bo_pre
    0U,	// CACHEA_I_bo_r
    0U,	// CACHEA_WI_bo_bso
    0U,	// CACHEA_WI_bo_c
    0U,	// CACHEA_WI_bo_pos
    0U,	// CACHEA_WI_bo_pre
    0U,	// CACHEA_WI_bo_r
    0U,	// CACHEA_W_bo_bso
    0U,	// CACHEA_W_bo_c
    0U,	// CACHEA_W_bo_pos
    0U,	// CACHEA_W_bo_pre
    0U,	// CACHEA_W_bo_r
    0U,	// CACHEI_I_bo_bso
    0U,	// CACHEI_I_bo_pos
    0U,	// CACHEI_I_bo_pre
    0U,	// CACHEI_WI_bo_bso
    0U,	// CACHEI_WI_bo_pos
    0U,	// CACHEI_WI_bo_pre
    0U,	// CACHEI_W_bo_bso
    0U,	// CACHEI_W_bo_pos
    0U,	// CACHEI_W_bo_pre
    34U,	// CADDN_A_rcr_v110
    69U,	// CADDN_A_rrr_v110
    34U,	// CADDN_rcr
    69U,	// CADDN_rrr
    0U,	// CADDN_src
    0U,	// CADDN_srr_v110
    34U,	// CADD_A_rcr_v110
    69U,	// CADD_A_rrr_v110
    34U,	// CADD_rcr
    69U,	// CADD_rrr
    0U,	// CADD_src
    0U,	// CADD_srr_v110
    0U,	// CALLA_b
    0U,	// CALLI_rr
    0U,	// CALLI_rr_v110
    0U,	// CALL_b
    0U,	// CALL_sb
    0U,	// CLO_B_rr_v110
    0U,	// CLO_H_rr
    0U,	// CLO_rr
    0U,	// CLS_B_rr_v110
    0U,	// CLS_H_rr
    0U,	// CLS_rr
    0U,	// CLZ_B_rr_v110
    0U,	// CLZ_H_rr
    0U,	// CLZ_rr
    0U,	// CMOVN_src
    0U,	// CMOVN_srr
    0U,	// CMOV_src
    0U,	// CMOV_srr
    0U,	// CMPSWAP_W_bo_bso
    0U,	// CMPSWAP_W_bo_c
    0U,	// CMPSWAP_W_bo_pos
    0U,	// CMPSWAP_W_bo_pre
    0U,	// CMPSWAP_W_bo_r
    0U,	// CMP_F_rr
    0U,	// CRC32B_W_rr
    0U,	// CRC32L_W_rr
    0U,	// CRC32_B_rr
    69U,	// CRCN_rrr
    69U,	// CSUBN_A__rrr_v110
    69U,	// CSUBN_rrr
    69U,	// CSUB_A__rrr_v110
    69U,	// CSUB_rrr
    0U,	// DEBUG_sr
    0U,	// DEBUG_sys
    98U,	// DEXTR_rrpw
    98U,	// DEXTR_rrrr
    2U,	// DIFSC_A_rr_v110
    0U,	// DISABLE_sys
    0U,	// DISABLE_sys_1
    0U,	// DIV_F_rr
    0U,	// DIV_U_rr
    0U,	// DIV_rr
    0U,	// DSYNC_sys
    0U,	// DVADJ_rrr
    0U,	// DVADJ_rrr_v110
    0U,	// DVADJ_srr_v110
    0U,	// DVINIT_BU_rr
    0U,	// DVINIT_BU_rr_v110
    0U,	// DVINIT_B_rr
    0U,	// DVINIT_B_rr_v110
    0U,	// DVINIT_HU_rr
    0U,	// DVINIT_HU_rr_v110
    0U,	// DVINIT_H_rr
    0U,	// DVINIT_H_rr_v110
    0U,	// DVINIT_U_rr
    0U,	// DVINIT_U_rr_v110
    0U,	// DVINIT_rr
    0U,	// DVINIT_rr_v110
    0U,	// DVSTEP_U_rrr
    0U,	// DVSTEP_U_rrrv110
    0U,	// DVSTEP_Uv110
    0U,	// DVSTEP_rrr
    0U,	// DVSTEP_rrrv110
    0U,	// DVSTEPv110
    0U,	// ENABLE_sys
    0U,	// EQANY_B_rc
    0U,	// EQANY_B_rr
    0U,	// EQANY_H_rc
    0U,	// EQANY_H_rr
    0U,	// EQZ_A_rr
    0U,	// EQ_A_rr
    0U,	// EQ_B_rr
    0U,	// EQ_H_rr
    0U,	// EQ_W_rr
    0U,	// EQ_rc
    0U,	// EQ_rr
    0U,	// EQ_src
    0U,	// EQ_srr
    7U,	// EXTR_U_rrpw
    0U,	// EXTR_U_rrrr
    7U,	// EXTR_U_rrrw
    7U,	// EXTR_rrpw
    0U,	// EXTR_rrrr
    7U,	// EXTR_rrrw
    0U,	// FCALLA_b
    0U,	// FCALLA_i
    0U,	// FCALL_b
    0U,	// FRET_sr
    0U,	// FRET_sys
    0U,	// FTOHP_rr
    0U,	// FTOIZ_rr
    0U,	// FTOI_rr
    0U,	// FTOQ31Z_rr
    0U,	// FTOQ31_rr
    0U,	// FTOUZ_rr
    0U,	// FTOU_rr
    0U,	// GE_A_rr
    0U,	// GE_U_rc
    0U,	// GE_U_rr
    0U,	// GE_rc
    0U,	// GE_rr
    0U,	// HPTOF_rr
    7U,	// IMASK_rcpw
    7U,	// IMASK_rcrw
    7U,	// IMASK_rrpw
    7U,	// IMASK_rrrw
    610U,	// INSERT_rcpw
    98U,	// INSERT_rcrr
    1157U,	// INSERT_rcrw
    610U,	// INSERT_rrpw
    98U,	// INSERT_rrrr
    610U,	// INSERT_rrrw
    0U,	// INSN_T
    0U,	// INS_T
    0U,	// ISYNC_sys
    0U,	// ITOF_rr
    0U,	// IXMAX_U_rrr
    0U,	// IXMAX_rrr
    0U,	// IXMIN_U_rrr
    0U,	// IXMIN_rrr
    0U,	// JA_b
    1U,	// JEQ_A_brr
    1U,	// JEQ_brc
    1U,	// JEQ_brr
    0U,	// JEQ_sbc1
    0U,	// JEQ_sbc2
    0U,	// JEQ_sbc_v110
    0U,	// JEQ_sbr1
    0U,	// JEQ_sbr2
    0U,	// JEQ_sbr_v110
    0U,	// JGEZ_sbr
    0U,	// JGEZ_sbr_v110
    1U,	// JGE_U_brc
    1U,	// JGE_U_brr
    1U,	// JGE_brc
    1U,	// JGE_brr
    0U,	// JGTZ_sbr
    0U,	// JGTZ_sbr_v110
    0U,	// JI_rr
    0U,	// JI_rr_v110
    0U,	// JI_sbr_v110
    0U,	// JI_sr
    0U,	// JLA_b
    0U,	// JLEZ_sbr
    0U,	// JLEZ_sbr_v110
    0U,	// JLI_rr
    0U,	// JLI_rr_v110
    0U,	// JLTZ_sbr
    0U,	// JLTZ_sbr_v110
    1U,	// JLT_U_brc
    1U,	// JLT_U_brr
    1U,	// JLT_brc
    1U,	// JLT_brr
    0U,	// JL_b
    1U,	// JNED_brc
    1U,	// JNED_brr
    1U,	// JNEI_brc
    1U,	// JNEI_brr
    1U,	// JNE_A_brr
    1U,	// JNE_brc
    1U,	// JNE_brr
    0U,	// JNE_sbc1
    0U,	// JNE_sbc2
    0U,	// JNE_sbc_v110
    0U,	// JNE_sbr1
    0U,	// JNE_sbr2
    0U,	// JNE_sbr_v110
    0U,	// JNZ_A_brr
    0U,	// JNZ_A_sbr
    1U,	// JNZ_T_brn
    0U,	// JNZ_T_sbrn
    0U,	// JNZ_T_sbrn_v110
    0U,	// JNZ_sb
    0U,	// JNZ_sb_v110
    0U,	// JNZ_sbr
    0U,	// JNZ_sbr_v110
    0U,	// JZ_A_brr
    0U,	// JZ_A_sbr
    1U,	// JZ_T_brn
    0U,	// JZ_T_sbrn
    0U,	// JZ_T_sbrn_v110
    0U,	// JZ_sb
    0U,	// JZ_sb_v110
    0U,	// JZ_sbr
    0U,	// JZ_sbr_v110
    0U,	// J_b
    0U,	// J_sb
    0U,	// J_sb_v110
    0U,	// LDLCX_abs
    0U,	// LDLCX_bo_bso
    0U,	// LDMST_abs
    0U,	// LDMST_bo_bso
    0U,	// LDMST_bo_c
    0U,	// LDMST_bo_pos
    0U,	// LDMST_bo_pre
    0U,	// LDMST_bo_r
    0U,	// LDUCX_abs
    0U,	// LDUCX_bo_bso
    0U,	// LD_A_abs
    0U,	// LD_A_bo_bso
    0U,	// LD_A_bo_c
    0U,	// LD_A_bo_pos
    0U,	// LD_A_bo_pre
    0U,	// LD_A_bo_r
    0U,	// LD_A_bol
    0U,	// LD_A_sc
    0U,	// LD_A_slr
    0U,	// LD_A_slr_post
    0U,	// LD_A_slr_post_v110
    0U,	// LD_A_slr_v110
    0U,	// LD_A_slro
    0U,	// LD_A_slro_v110
    0U,	// LD_A_sro
    0U,	// LD_A_sro_v110
    0U,	// LD_BU_abs
    0U,	// LD_BU_bo_bso
    0U,	// LD_BU_bo_c
    0U,	// LD_BU_bo_pos
    0U,	// LD_BU_bo_pre
    0U,	// LD_BU_bo_r
    0U,	// LD_BU_bol
    0U,	// LD_BU_slr
    0U,	// LD_BU_slr_post
    0U,	// LD_BU_slr_post_v110
    0U,	// LD_BU_slr_v110
    0U,	// LD_BU_slro
    0U,	// LD_BU_slro_v110
    0U,	// LD_BU_sro
    0U,	// LD_BU_sro_v110
    0U,	// LD_B_abs
    0U,	// LD_B_bo_bso
    0U,	// LD_B_bo_c
    0U,	// LD_B_bo_pos
    0U,	// LD_B_bo_pre
    0U,	// LD_B_bo_r
    0U,	// LD_B_bol
    0U,	// LD_B_slr_post_v110
    0U,	// LD_B_slr_v110
    0U,	// LD_B_slro_v110
    0U,	// LD_B_sro_v110
    0U,	// LD_DA_abs
    0U,	// LD_DA_bo_bso
    0U,	// LD_DA_bo_c
    0U,	// LD_DA_bo_pos
    0U,	// LD_DA_bo_pre
    0U,	// LD_DA_bo_r
    0U,	// LD_D_abs
    0U,	// LD_D_bo_bso
    0U,	// LD_D_bo_c
    0U,	// LD_D_bo_pos
    0U,	// LD_D_bo_pre
    0U,	// LD_D_bo_r
    0U,	// LD_HU_abs
    0U,	// LD_HU_bo_bso
    0U,	// LD_HU_bo_c
    0U,	// LD_HU_bo_pos
    0U,	// LD_HU_bo_pre
    0U,	// LD_HU_bo_r
    0U,	// LD_HU_bol
    0U,	// LD_H_abs
    0U,	// LD_H_bo_bso
    0U,	// LD_H_bo_c
    0U,	// LD_H_bo_pos
    0U,	// LD_H_bo_pre
    0U,	// LD_H_bo_r
    0U,	// LD_H_bol
    0U,	// LD_H_slr
    0U,	// LD_H_slr_post
    0U,	// LD_H_slr_post_v110
    0U,	// LD_H_slr_v110
    0U,	// LD_H_slro
    0U,	// LD_H_slro_v110
    0U,	// LD_H_sro
    0U,	// LD_H_sro_v110
    0U,	// LD_Q_abs
    0U,	// LD_Q_bo_bso
    0U,	// LD_Q_bo_c
    0U,	// LD_Q_bo_pos
    0U,	// LD_Q_bo_pre
    0U,	// LD_Q_bo_r
    0U,	// LD_W_abs
    0U,	// LD_W_bo_bso
    0U,	// LD_W_bo_c
    0U,	// LD_W_bo_pos
    0U,	// LD_W_bo_pre
    0U,	// LD_W_bo_r
    0U,	// LD_W_bol
    0U,	// LD_W_sc
    0U,	// LD_W_slr
    0U,	// LD_W_slr_post
    0U,	// LD_W_slr_post_v110
    0U,	// LD_W_slr_v110
    0U,	// LD_W_slro
    0U,	// LD_W_slro_v110
    0U,	// LD_W_sro
    0U,	// LD_W_sro_v110
    0U,	// LEA_abs
    0U,	// LEA_bo_bso
    0U,	// LEA_bol
    0U,	// LHA_abs
    0U,	// LOOPU_brr
    0U,	// LOOP_brr
    0U,	// LOOP_sbr
    0U,	// LT_A_rr
    0U,	// LT_B
    0U,	// LT_BU
    0U,	// LT_H
    0U,	// LT_HU
    0U,	// LT_U_rc
    0U,	// LT_U_rr
    0U,	// LT_U_srcv110
    0U,	// LT_U_srrv110
    0U,	// LT_W
    0U,	// LT_WU
    0U,	// LT_rc
    0U,	// LT_rr
    0U,	// LT_src
    0U,	// LT_srr
    165U,	// MADDMS_H_rrr1_LL
    197U,	// MADDMS_H_rrr1_LU
    229U,	// MADDMS_H_rrr1_UL
    261U,	// MADDMS_H_rrr1_UU
    290U,	// MADDMS_U_rcr_v110
    69U,	// MADDMS_U_rrr2_v110
    34U,	// MADDMS_rcr_v110
    69U,	// MADDMS_rrr2_v110
    165U,	// MADDM_H_rrr1_LL
    197U,	// MADDM_H_rrr1_LU
    229U,	// MADDM_H_rrr1_UL
    261U,	// MADDM_H_rrr1_UU
    69U,	// MADDM_H_rrr1_v110
    69U,	// MADDM_Q_rrr1_v110
    290U,	// MADDM_U_rcr_v110
    69U,	// MADDM_U_rrr2_v110
    34U,	// MADDM_rcr_v110
    69U,	// MADDM_rrr2_v110
    165U,	// MADDRS_H_rrr1_LL
    197U,	// MADDRS_H_rrr1_LU
    229U,	// MADDRS_H_rrr1_UL
    229U,	// MADDRS_H_rrr1_UL_2
    261U,	// MADDRS_H_rrr1_UU
    1669U,	// MADDRS_H_rrr1_v110
    1U,	// MADDRS_Q_rrr1_L_L
    1U,	// MADDRS_Q_rrr1_U_U
    1669U,	// MADDRS_Q_rrr1_v110
    165U,	// MADDR_H_rrr1_LL
    197U,	// MADDR_H_rrr1_LU
    229U,	// MADDR_H_rrr1_UL
    229U,	// MADDR_H_rrr1_UL_2
    261U,	// MADDR_H_rrr1_UU
    1669U,	// MADDR_H_rrr1_v110
    1U,	// MADDR_Q_rrr1_L_L
    1U,	// MADDR_Q_rrr1_U_U
    1669U,	// MADDR_Q_rrr1_v110
    165U,	// MADDSUMS_H_rrr1_LL
    197U,	// MADDSUMS_H_rrr1_LU
    229U,	// MADDSUMS_H_rrr1_UL
    261U,	// MADDSUMS_H_rrr1_UU
    165U,	// MADDSUM_H_rrr1_LL
    197U,	// MADDSUM_H_rrr1_LU
    229U,	// MADDSUM_H_rrr1_UL
    261U,	// MADDSUM_H_rrr1_UU
    165U,	// MADDSURS_H_rrr1_LL
    197U,	// MADDSURS_H_rrr1_LU
    229U,	// MADDSURS_H_rrr1_UL
    261U,	// MADDSURS_H_rrr1_UU
    165U,	// MADDSUR_H_rrr1_LL
    197U,	// MADDSUR_H_rrr1_LU
    229U,	// MADDSUR_H_rrr1_UL
    261U,	// MADDSUR_H_rrr1_UU
    165U,	// MADDSUS_H_rrr1_LL
    197U,	// MADDSUS_H_rrr1_LU
    229U,	// MADDSUS_H_rrr1_UL
    261U,	// MADDSUS_H_rrr1_UU
    165U,	// MADDSU_H_rrr1_LL
    197U,	// MADDSU_H_rrr1_LU
    229U,	// MADDSU_H_rrr1_UL
    261U,	// MADDSU_H_rrr1_UU
    165U,	// MADDS_H_rrr1_LL
    197U,	// MADDS_H_rrr1_LU
    229U,	// MADDS_H_rrr1_UL
    261U,	// MADDS_H_rrr1_UU
    1669U,	// MADDS_H_rrr1_v110
    1669U,	// MADDS_Q_rrr1
    325U,	// MADDS_Q_rrr1_L
    1U,	// MADDS_Q_rrr1_L_L
    357U,	// MADDS_Q_rrr1_U
    1669U,	// MADDS_Q_rrr1_UU2_v110
    1U,	// MADDS_Q_rrr1_U_U
    1669U,	// MADDS_Q_rrr1_e
    325U,	// MADDS_Q_rrr1_e_L
    1U,	// MADDS_Q_rrr1_e_L_L
    357U,	// MADDS_Q_rrr1_e_U
    1U,	// MADDS_Q_rrr1_e_U_U
    34U,	// MADDS_U_rcr
    34U,	// MADDS_U_rcr_e
    69U,	// MADDS_U_rrr2
    69U,	// MADDS_U_rrr2_e
    34U,	// MADDS_rcr
    34U,	// MADDS_rcr_e
    69U,	// MADDS_rrr2
    69U,	// MADDS_rrr2_e
    69U,	// MADD_F_rrr
    165U,	// MADD_H_rrr1_LL
    197U,	// MADD_H_rrr1_LU
    229U,	// MADD_H_rrr1_UL
    261U,	// MADD_H_rrr1_UU
    1669U,	// MADD_H_rrr1_v110
    1669U,	// MADD_Q_rrr1
    325U,	// MADD_Q_rrr1_L
    1U,	// MADD_Q_rrr1_L_L
    357U,	// MADD_Q_rrr1_U
    1669U,	// MADD_Q_rrr1_UU2_v110
    1U,	// MADD_Q_rrr1_U_U
    1669U,	// MADD_Q_rrr1_e
    325U,	// MADD_Q_rrr1_e_L
    1U,	// MADD_Q_rrr1_e_L_L
    357U,	// MADD_Q_rrr1_e_U
    1U,	// MADD_Q_rrr1_e_U_U
    290U,	// MADD_U_rcr
    69U,	// MADD_U_rrr2
    34U,	// MADD_rcr
    34U,	// MADD_rcr_e
    69U,	// MADD_rrr2
    69U,	// MADD_rrr2_e
    0U,	// MAX_B
    0U,	// MAX_BU
    0U,	// MAX_H
    0U,	// MAX_HU
    0U,	// MAX_U_rc
    0U,	// MAX_U_rr
    0U,	// MAX_rc
    0U,	// MAX_rr
    0U,	// MFCR_rlc
    0U,	// MIN_B
    0U,	// MIN_BU
    0U,	// MIN_H
    0U,	// MIN_HU
    0U,	// MIN_U_rc
    0U,	// MIN_U_rr
    0U,	// MIN_rc
    0U,	// MIN_rr
    0U,	// MOVH_A_rlc
    0U,	// MOVH_rlc
    0U,	// MOVZ_A_sr
    0U,	// MOV_AA_rr
    0U,	// MOV_AA_srr_srr
    0U,	// MOV_AA_srr_srr_v110
    0U,	// MOV_A_rr
    0U,	// MOV_A_src
    0U,	// MOV_A_srr
    0U,	// MOV_A_srr_v110
    0U,	// MOV_D_rr
    0U,	// MOV_D_srr_srr
    0U,	// MOV_D_srr_srr_v110
    0U,	// MOV_U_rlc
    0U,	// MOV_rlc
    0U,	// MOV_rlc_e
    0U,	// MOV_rr
    0U,	// MOV_rr_e
    0U,	// MOV_rr_eab
    0U,	// MOV_sc
    0U,	// MOV_sc_v110
    0U,	// MOV_src
    0U,	// MOV_src_e
    0U,	// MOV_srr
    165U,	// MSUBADMS_H_rrr1_LL
    197U,	// MSUBADMS_H_rrr1_LU
    229U,	// MSUBADMS_H_rrr1_UL
    261U,	// MSUBADMS_H_rrr1_UU
    165U,	// MSUBADM_H_rrr1_LL
    197U,	// MSUBADM_H_rrr1_LU
    229U,	// MSUBADM_H_rrr1_UL
    261U,	// MSUBADM_H_rrr1_UU
    165U,	// MSUBADRS_H_rrr1_LL
    197U,	// MSUBADRS_H_rrr1_LU
    229U,	// MSUBADRS_H_rrr1_UL
    261U,	// MSUBADRS_H_rrr1_UU
    1669U,	// MSUBADRS_H_rrr1_v110
    165U,	// MSUBADR_H_rrr1_LL
    197U,	// MSUBADR_H_rrr1_LU
    229U,	// MSUBADR_H_rrr1_UL
    261U,	// MSUBADR_H_rrr1_UU
    1669U,	// MSUBADR_H_rrr1_v110
    165U,	// MSUBADS_H_rrr1_LL
    197U,	// MSUBADS_H_rrr1_LU
    229U,	// MSUBADS_H_rrr1_UL
    261U,	// MSUBADS_H_rrr1_UU
    165U,	// MSUBAD_H_rrr1_LL
    197U,	// MSUBAD_H_rrr1_LU
    229U,	// MSUBAD_H_rrr1_UL
    261U,	// MSUBAD_H_rrr1_UU
    165U,	// MSUBMS_H_rrr1_LL
    197U,	// MSUBMS_H_rrr1_LU
    229U,	// MSUBMS_H_rrr1_UL
    261U,	// MSUBMS_H_rrr1_UU
    34U,	// MSUBMS_U_rcrv110
    69U,	// MSUBMS_U_rrr2v110
    34U,	// MSUBMS_rcrv110
    69U,	// MSUBMS_rrr2v110
    165U,	// MSUBM_H_rrr1_LL
    197U,	// MSUBM_H_rrr1_LU
    229U,	// MSUBM_H_rrr1_UL
    261U,	// MSUBM_H_rrr1_UU
    69U,	// MSUBM_H_rrr1_v110
    69U,	// MSUBM_Q_rrr1_v110
    34U,	// MSUBM_U_rcrv110
    69U,	// MSUBM_U_rrr2v110
    34U,	// MSUBM_rcrv110
    69U,	// MSUBM_rrr2v110
    165U,	// MSUBRS_H_rrr1_LL
    197U,	// MSUBRS_H_rrr1_LU
    229U,	// MSUBRS_H_rrr1_UL
    229U,	// MSUBRS_H_rrr1_UL_2
    261U,	// MSUBRS_H_rrr1_UU
    1669U,	// MSUBRS_H_rrr1_v110
    1U,	// MSUBRS_Q_rrr1_L_L
    1U,	// MSUBRS_Q_rrr1_U_U
    1669U,	// MSUBRS_Q_rrr1_v110
    165U,	// MSUBR_H_rrr1_LL
    197U,	// MSUBR_H_rrr1_LU
    229U,	// MSUBR_H_rrr1_UL
    229U,	// MSUBR_H_rrr1_UL_2
    261U,	// MSUBR_H_rrr1_UU
    1669U,	// MSUBR_H_rrr1_v110
    1U,	// MSUBR_Q_rrr1_L_L
    1U,	// MSUBR_Q_rrr1_U_U
    1669U,	// MSUBR_Q_rrr1_v110
    165U,	// MSUBS_H_rrr1_LL
    197U,	// MSUBS_H_rrr1_LU
    229U,	// MSUBS_H_rrr1_UL
    261U,	// MSUBS_H_rrr1_UU
    1669U,	// MSUBS_H_rrr1_v110
    1669U,	// MSUBS_Q_rrr1
    325U,	// MSUBS_Q_rrr1_L
    1U,	// MSUBS_Q_rrr1_L_L
    357U,	// MSUBS_Q_rrr1_U
    1669U,	// MSUBS_Q_rrr1_UU2_v110
    1U,	// MSUBS_Q_rrr1_U_U
    1669U,	// MSUBS_Q_rrr1_e
    325U,	// MSUBS_Q_rrr1_e_L
    1U,	// MSUBS_Q_rrr1_e_L_L
    357U,	// MSUBS_Q_rrr1_e_U
    1U,	// MSUBS_Q_rrr1_e_U_U
    34U,	// MSUBS_U_rcr
    34U,	// MSUBS_U_rcr_e
    69U,	// MSUBS_U_rrr2
    69U,	// MSUBS_U_rrr2_e
    34U,	// MSUBS_rcr
    34U,	// MSUBS_rcr_e
    69U,	// MSUBS_rrr2
    69U,	// MSUBS_rrr2_e
    69U,	// MSUB_F_rrr
    165U,	// MSUB_H_rrr1_LL
    197U,	// MSUB_H_rrr1_LU
    229U,	// MSUB_H_rrr1_UL
    261U,	// MSUB_H_rrr1_UU
    1669U,	// MSUB_H_rrr1_v110
    1669U,	// MSUB_Q_rrr1
    325U,	// MSUB_Q_rrr1_L
    1U,	// MSUB_Q_rrr1_L_L
    357U,	// MSUB_Q_rrr1_U
    1669U,	// MSUB_Q_rrr1_UU2_v110
    1U,	// MSUB_Q_rrr1_U_U
    1669U,	// MSUB_Q_rrr1_e
    325U,	// MSUB_Q_rrr1_e_L
    1U,	// MSUB_Q_rrr1_e_L_L
    357U,	// MSUB_Q_rrr1_e_U
    1U,	// MSUB_Q_rrr1_e_U_U
    290U,	// MSUB_U_rcr
    69U,	// MSUB_U_rrr2
    34U,	// MSUB_rcr
    34U,	// MSUB_rcr_e
    69U,	// MSUB_rrr2
    69U,	// MSUB_rrr2_e
    0U,	// MTCR_rlc
    8U,	// MULMS_H_rr1_LL2e
    10U,	// MULMS_H_rr1_LU2e
    12U,	// MULMS_H_rr1_UL2e
    14U,	// MULMS_H_rr1_UU2e
    8U,	// MULM_H_rr1_LL2e
    10U,	// MULM_H_rr1_LU2e
    12U,	// MULM_H_rr1_UL2e
    14U,	// MULM_H_rr1_UU2e
    0U,	// MULM_U_rc
    0U,	// MULM_U_rr
    0U,	// MULM_rc
    0U,	// MULM_rr
    8U,	// MULR_H_rr1_LL2e
    10U,	// MULR_H_rr1_LU2e
    12U,	// MULR_H_rr1_UL2e
    14U,	// MULR_H_rr1_UU2e
    2U,	// MULR_H_rr_v110
    0U,	// MULR_Q_rr1_2LL
    0U,	// MULR_Q_rr1_2UU
    2U,	// MULR_Q_rr_v110
    0U,	// MULS_U_rc
    0U,	// MULS_U_rr2
    0U,	// MULS_U_rr_v110
    0U,	// MULS_rc
    0U,	// MULS_rr2
    0U,	// MULS_rr_v110
    0U,	// MUL_F_rrr
    8U,	// MUL_H_rr1_LL2e
    10U,	// MUL_H_rr1_LU2e
    12U,	// MUL_H_rr1_UL2e
    14U,	// MUL_H_rr1_UU2e
    2U,	// MUL_H_rr_v110
    2U,	// MUL_Q_rr1_2
    0U,	// MUL_Q_rr1_2LL
    0U,	// MUL_Q_rr1_2UU
    16U,	// MUL_Q_rr1_2_L
    16U,	// MUL_Q_rr1_2_Le
    18U,	// MUL_Q_rr1_2_U
    18U,	// MUL_Q_rr1_2_Ue
    2U,	// MUL_Q_rr1_2__e
    2U,	// MUL_Q_rr_v110
    0U,	// MUL_U_rc
    0U,	// MUL_U_rr2
    0U,	// MUL_rc
    0U,	// MUL_rc_e
    0U,	// MUL_rr2
    0U,	// MUL_rr2_e
    0U,	// MUL_rr_v110
    0U,	// MUL_srr
    0U,	// NAND_T
    0U,	// NAND_rc
    0U,	// NAND_rr
    0U,	// NEZ_A
    0U,	// NE_A
    0U,	// NE_rc
    0U,	// NE_rr
    0U,	// NOP_sr
    0U,	// NOP_sys
    0U,	// NOR_T
    0U,	// NOR_rc
    0U,	// NOR_rr
    0U,	// NOR_sr
    0U,	// NOR_sr_v110
    0U,	// NOT_sr_v162
    0U,	// ORN_T
    0U,	// ORN_rc
    0U,	// ORN_rr
    0U,	// OR_ANDN_T
    0U,	// OR_AND_T
    0U,	// OR_EQ_rc
    0U,	// OR_EQ_rr
    0U,	// OR_GE_U_rc
    0U,	// OR_GE_U_rr
    0U,	// OR_GE_rc
    0U,	// OR_GE_rr
    0U,	// OR_LT_U_rc
    0U,	// OR_LT_U_rr
    0U,	// OR_LT_rc
    0U,	// OR_LT_rr
    0U,	// OR_NE_rc
    0U,	// OR_NE_rr
    0U,	// OR_NOR_T
    0U,	// OR_OR_T
    0U,	// OR_T
    1U,	// OR_rc
    0U,	// OR_rr
    0U,	// OR_sc
    0U,	// OR_sc_v110
    0U,	// OR_srr
    0U,	// OR_srr_v110
    0U,	// PACK_rrr
    0U,	// PARITY_rr
    0U,	// PARITY_rr_v110
    0U,	// POPCNT_W_rr
    0U,	// Q31TOF_rr
    0U,	// QSEED_F_rr
    0U,	// RESTORE_sys
    0U,	// RET_sr
    0U,	// RET_sys
    0U,	// RET_sys_v110
    0U,	// RFE_sr
    0U,	// RFE_sys_sys
    0U,	// RFE_sys_sys_v110
    0U,	// RFM_sys
    0U,	// RSLCX_sys
    0U,	// RSTV_sys
    0U,	// RSUBS_U_rc
    0U,	// RSUBS_rc
    0U,	// RSUB_rc
    0U,	// RSUB_sr_sr
    0U,	// RSUB_sr_sr_v110
    0U,	// SAT_BU_rr
    0U,	// SAT_BU_sr
    0U,	// SAT_BU_sr_v110
    0U,	// SAT_B_rr
    0U,	// SAT_B_sr
    0U,	// SAT_B_sr_v110
    0U,	// SAT_HU_rr
    0U,	// SAT_HU_sr
    0U,	// SAT_HU_sr_v110
    0U,	// SAT_H_rr
    0U,	// SAT_H_sr
    0U,	// SAT_H_sr_v110
    34U,	// SELN_A_rcr_v110
    69U,	// SELN_A_rrr_v110
    34U,	// SELN_rcr
    69U,	// SELN_rrr
    34U,	// SEL_A_rcr_v110
    69U,	// SEL_A_rrr_v110
    34U,	// SEL_rcr
    69U,	// SEL_rrr
    0U,	// SHAS_rc
    0U,	// SHAS_rr
    0U,	// SHA_B_rc
    0U,	// SHA_B_rr
    0U,	// SHA_H_rc
    0U,	// SHA_H_rr
    0U,	// SHA_rc
    0U,	// SHA_rr
    0U,	// SHA_src
    0U,	// SHA_src_v110
    0U,	// SHUFFLE_rc
    0U,	// SH_ANDN_T
    0U,	// SH_AND_T
    0U,	// SH_B_rc
    0U,	// SH_B_rr
    0U,	// SH_EQ_rc
    0U,	// SH_EQ_rr
    0U,	// SH_GE_U_rc
    0U,	// SH_GE_U_rr
    0U,	// SH_GE_rc
    0U,	// SH_GE_rr
    0U,	// SH_H_rc
    0U,	// SH_H_rr
    0U,	// SH_LT_U_rc
    0U,	// SH_LT_U_rr
    0U,	// SH_LT_rc
    0U,	// SH_LT_rr
    0U,	// SH_NAND_T
    0U,	// SH_NE_rc
    0U,	// SH_NE_rr
    0U,	// SH_NOR_T
    0U,	// SH_ORN_T
    0U,	// SH_OR_T
    0U,	// SH_XNOR_T
    0U,	// SH_XOR_T
    0U,	// SH_rc
    0U,	// SH_rr
    0U,	// SH_src
    0U,	// SH_src_v110
    0U,	// STLCX_abs
    0U,	// STLCX_bo_bso
    0U,	// STUCX_abs
    0U,	// STUCX_bo_bso
    0U,	// ST_A_abs
    0U,	// ST_A_bo_bso
    0U,	// ST_A_bo_c
    0U,	// ST_A_bo_pos
    0U,	// ST_A_bo_pre
    0U,	// ST_A_bo_r
    0U,	// ST_A_bol
    0U,	// ST_A_sc
    0U,	// ST_A_sro
    0U,	// ST_A_sro_v110
    0U,	// ST_A_ssr
    0U,	// ST_A_ssr_pos
    0U,	// ST_A_ssr_pos_v110
    0U,	// ST_A_ssr_v110
    0U,	// ST_A_ssro
    0U,	// ST_A_ssro_v110
    0U,	// ST_B_abs
    0U,	// ST_B_bo_bso
    0U,	// ST_B_bo_c
    0U,	// ST_B_bo_pos
    0U,	// ST_B_bo_pre
    0U,	// ST_B_bo_r
    0U,	// ST_B_bol
    0U,	// ST_B_sro
    0U,	// ST_B_sro_v110
    0U,	// ST_B_ssr
    0U,	// ST_B_ssr_pos
    0U,	// ST_B_ssr_pos_v110
    0U,	// ST_B_ssr_v110
    0U,	// ST_B_ssro
    0U,	// ST_B_ssro_v110
    0U,	// ST_DA_abs
    0U,	// ST_DA_bo_bso
    0U,	// ST_DA_bo_c
    0U,	// ST_DA_bo_pos
    0U,	// ST_DA_bo_pre
    0U,	// ST_DA_bo_r
    0U,	// ST_D_abs
    0U,	// ST_D_bo_bso
    0U,	// ST_D_bo_c
    0U,	// ST_D_bo_pos
    0U,	// ST_D_bo_pre
    0U,	// ST_D_bo_r
    0U,	// ST_H_abs
    0U,	// ST_H_bo_bso
    0U,	// ST_H_bo_c
    0U,	// ST_H_bo_pos
    0U,	// ST_H_bo_pre
    0U,	// ST_H_bo_r
    0U,	// ST_H_bol
    0U,	// ST_H_sro
    0U,	// ST_H_sro_v110
    0U,	// ST_H_ssr
    0U,	// ST_H_ssr_pos
    0U,	// ST_H_ssr_pos_v110
    0U,	// ST_H_ssr_v110
    0U,	// ST_H_ssro
    0U,	// ST_H_ssro_v110
    0U,	// ST_Q_abs
    0U,	// ST_Q_bo_bso
    0U,	// ST_Q_bo_c
    0U,	// ST_Q_bo_pos
    0U,	// ST_Q_bo_pre
    0U,	// ST_Q_bo_r
    0U,	// ST_T
    0U,	// ST_W_abs
    0U,	// ST_W_bo_bso
    0U,	// ST_W_bo_c
    0U,	// ST_W_bo_pos
    0U,	// ST_W_bo_pre
    0U,	// ST_W_bo_r
    0U,	// ST_W_bol
    0U,	// ST_W_sc
    0U,	// ST_W_sro
    0U,	// ST_W_sro_v110
    0U,	// ST_W_ssr
    0U,	// ST_W_ssr_pos
    0U,	// ST_W_ssr_pos_v110
    0U,	// ST_W_ssr_v110
    0U,	// ST_W_ssro
    0U,	// ST_W_ssro_v110
    0U,	// SUBC_rr
    2U,	// SUBSC_A_rr
    0U,	// SUBS_BU_rr
    0U,	// SUBS_B_rr
    0U,	// SUBS_HU_rr
    0U,	// SUBS_H_rr
    0U,	// SUBS_U_rr
    0U,	// SUBS_rr
    0U,	// SUBS_srr
    0U,	// SUBX_rr
    0U,	// SUB_A_rr
    0U,	// SUB_A_sc
    0U,	// SUB_A_sc_v110
    0U,	// SUB_B_rr
    0U,	// SUB_F_rrr
    0U,	// SUB_H_rr
    0U,	// SUB_rr
    0U,	// SUB_srr
    0U,	// SUB_srr_15a
    0U,	// SUB_srr_a15
    0U,	// SVLCX_sys
    0U,	// SWAPMSK_W_bo_bso
    0U,	// SWAPMSK_W_bo_c
    0U,	// SWAPMSK_W_bo_i
    0U,	// SWAPMSK_W_bo_pos
    0U,	// SWAPMSK_W_bo_pre
    0U,	// SWAPMSK_W_bo_r
    0U,	// SWAP_A_abs
    0U,	// SWAP_A_bo_bso
    0U,	// SWAP_A_bo_c
    0U,	// SWAP_A_bo_pos
    0U,	// SWAP_A_bo_pre
    0U,	// SWAP_A_bo_r
    0U,	// SWAP_W_abs
    0U,	// SWAP_W_bo_bso
    0U,	// SWAP_W_bo_c
    0U,	// SWAP_W_bo_i
    0U,	// SWAP_W_bo_pos
    0U,	// SWAP_W_bo_pre
    0U,	// SWAP_W_bo_r
    0U,	// SYSCALL_rc
    0U,	// TLBDEMAP_rr
    0U,	// TLBFLUSH_A_rr
    0U,	// TLBFLUSH_B_rr
    0U,	// TLBMAP_rr
    0U,	// TLBPROBE_A_rr
    0U,	// TLBPROBE_I_rr
    0U,	// TRAPSV_sys
    0U,	// TRAPV_sys
    0U,	// UNPACK_rr_rr
    0U,	// UNPACK_rr_rr_v110
    0U,	// UPDFL_rr
    0U,	// UTOF_rr
    0U,	// WAIT_sys
    0U,	// XNOR_T
    0U,	// XNOR_rc
    0U,	// XNOR_rr
    0U,	// XOR_EQ_rc
    0U,	// XOR_EQ_rr
    0U,	// XOR_GE_U_rc
    0U,	// XOR_GE_U_rr
    0U,	// XOR_GE_rc
    0U,	// XOR_GE_rr
    0U,	// XOR_LT_U_rc
    0U,	// XOR_LT_U_rr
    0U,	// XOR_LT_rc
    0U,	// XOR_LT_rr
    0U,	// XOR_NE_rc
    0U,	// XOR_NE_rr
    0U,	// XOR_T
    0U,	// XOR_rc
    0U,	// XOR_rr
    0U,	// XOR_srr
  };

  // Emit the opcode for the instruction.
  uint64_t Bits = 0;
  Bits |= (uint64_t)OpInfo0[MCInst_getOpcode(MI)] << 0;
  Bits |= (uint64_t)OpInfo1[MCInst_getOpcode(MI)] << 32;
  MnemonicBitsInfo MBI = {
#ifndef CAPSTONE_DIET
    AsmStrs+(Bits & 4095)-1,
#else
    NULL,
#endif // CAPSTONE_DIET
    Bits
  };
  return MBI;
}

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
void printInstruction(MCInst *MI, uint64_t Address, SStream *O) {
  SStream_concat0(O, "");
  MnemonicBitsInfo MnemonicInfo = getMnemonic(MI, O);

  SStream_concat0(O, MnemonicInfo.first);

  uint64_t Bits = MnemonicInfo.second;
  assert(Bits != 0 && "Cannot print this instruction.");

  // Fragment 0 encoded into 4 bits for 13 unique commands.
  switch ((uint32_t)((Bits >> 12) & 15)) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // DBG_VALUE, DBG_VALUE_LIST, DBG_INSTR_REF, DBG_PHI, DBG_LABEL, BUNDLE, ...
    return;
    break;
  case 1:
    // ABSDIFS_B_rr_v110, ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ...
    printOperand(MI, 0, O);
    break;
  case 2:
    // AND_sc, AND_sc_v110, BISR_sc, BISR_sc_v110, LD_A_sc, LD_W_sc, MOV_sc, ...
    printZExtImm_8(MI, 0, O);
    break;
  case 3:
    // BISR_rc, BISR_rc_v161, SYSCALL_rc
    printSExtImm_9(MI, 0, O);
    return;
    break;
  case 4:
    // CALLA_b, CALL_b, FCALLA_b, FCALL_b, JA_b, JLA_b, JL_b, J_b
    printDisp24Imm(MI, 0, O);
    return;
    break;
  case 5:
    // CALL_sb, JNZ_sb, JNZ_sb_v110, JZ_sb, JZ_sb_v110, J_sb, J_sb_v110
    printDisp8Imm(MI, 0, O);
    return;
    break;
  case 6:
    // CMPSWAP_W_bo_bso, CMPSWAP_W_bo_c, CMPSWAP_W_bo_pos, CMPSWAP_W_bo_pre, ...
    printOperand(MI, 1, O);
    break;
  case 7:
    // JEQ_sbc1, JEQ_sbc2, JEQ_sbc_v110, JNE_sbc1, JNE_sbc2, JNE_sbc_v110
    printSExtImm_4(MI, 1, O);
    SStream_concat0(O, ", ");
    printDisp4Imm(MI, 0, O);
    return;
    break;
  case 8:
    // LDLCX_abs, LDUCX_abs, STLCX_abs, STUCX_abs, ST_T
    printOff18Imm(MI, 0, O);
    break;
  case 9:
    // LDMST_abs, ST_A_abs, ST_B_abs, ST_DA_abs, ST_D_abs, ST_H_abs, ST_Q_abs...
    printOff18Imm(MI, 1, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 0, O);
    return;
    break;
  case 10:
    // LOOPU_brr
    printDisp15Imm(MI, 0, O);
    return;
    break;
  case 11:
    // MTCR_rlc
    printSExtImm_16(MI, 0, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 1, O);
    return;
    break;
  case 12:
    // ST_A_ssro, ST_A_ssro_v110, ST_B_ssro, ST_B_ssro_v110, ST_H_ssro, ST_H_...
    printZExtImm_4(MI, 1, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 0, O);
    return;
    break;
  }


  // Fragment 1 encoded into 4 bits for 16 unique commands.
  switch ((uint32_t)((Bits >> 16) & 15)) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ABSDIFS_B_rr_v110, ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ...
    SStream_concat0(O, ", ");
    break;
  case 1:
    // ADD_src_a15, ADD_srr_a15, CADDN_src, CADDN_srr_v110, CADD_src, CADD_sr...
    SStream_concat0(O, ", d15, ");
    break;
  case 2:
    // AND_sc, AND_sc_v110, BISR_sc, BISR_sc_v110, CALLI_rr, CALLI_rr_v110, D...
    return;
    break;
  case 3:
    // CACHEA_I_bo_bso, CACHEA_I_bo_pre, CACHEA_WI_bo_bso, CACHEA_WI_bo_pre, ...
    SStream_concat1(O, ']');
    break;
  case 4:
    // CACHEA_I_bo_c, CACHEA_WI_bo_c, CACHEA_W_bo_c, CMPSWAP_W_bo_c, LDMST_bo...
    SStream_concat0(O, "+c]");
    set_mem_access(MI, false);
    break;
  case 5:
    // CACHEA_I_bo_pos, CACHEA_WI_bo_pos, CACHEA_W_bo_pos, CACHEI_I_bo_pos, C...
    SStream_concat0(O, "+]");
    set_mem_access(MI, false);
    break;
  case 6:
    // CACHEA_I_bo_r, CACHEA_WI_bo_r, CACHEA_W_bo_r
    SStream_concat0(O, "+r]");
    set_mem_access(MI, false);
    return;
    break;
  case 7:
    // CMPSWAP_W_bo_r, LDMST_bo_r, ST_A_bo_r, ST_B_bo_r, ST_DA_bo_r, ST_D_bo_...
    SStream_concat0(O, "+r], ");
    set_mem_access(MI, false);
    break;
  case 8:
    // LD_A_bo_bso, LD_A_bo_c, LD_A_bo_pos, LD_A_bo_r, LD_A_bol, LD_A_slr, LD...
    SStream_concat0(O, ", [");
    set_mem_access(MI, true);
    printOperand(MI, 1, O);
    break;
  case 9:
    // LD_A_bo_pre, LD_BU_bo_pre, LD_B_bo_pre, LD_DA_bo_pre, LD_D_bo_pre, LD_...
    SStream_concat0(O, ", [+");
    set_mem_access(MI, true);
    printOperand(MI, 1, O);
    SStream_concat1(O, ']');
    printSExtImm_10(MI, 2, O);
    return;
    break;
  case 10:
    // LD_A_slro, LD_A_slro_v110, LD_BU_slro, LD_BU_slro_v110, LD_B_slro_v110...
    SStream_concat0(O, ", [a15]");
    set_mem_access(MI, true);
    printZExtImm_4(MI, 1, O);
    return;
    break;
  case 11:
    // ST_A_sc
    SStream_concat0(O, ", a15");
    return;
    break;
  case 12:
    // ST_A_ssr, ST_A_ssr_v110, ST_B_ssr, ST_B_ssr_v110, ST_H_ssr, ST_H_ssr_v...
    SStream_concat0(O, "], ");
    set_mem_access(MI, false);
    printOperand(MI, 1, O);
    return;
    break;
  case 13:
    // ST_A_ssr_pos, ST_A_ssr_pos_v110, ST_B_ssr_pos, ST_B_ssr_pos_v110, ST_H...
    SStream_concat0(O, "+], ");
    set_mem_access(MI, false);
    printOperand(MI, 1, O);
    return;
    break;
  case 14:
    // ST_W_sc
    SStream_concat0(O, ", d15");
    return;
    break;
  case 15:
    // SWAPMSK_W_bo_i, SWAP_W_bo_i
    SStream_concat0(O, "+i], ");
    set_mem_access(MI, false);
    printOperand(MI, 0, O);
    return;
    break;
  }


  // Fragment 2 encoded into 5 bits for 19 unique commands.
  switch ((uint32_t)((Bits >> 20) & 31)) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ABSDIFS_B_rr_v110, ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ...
    printOperand(MI, 1, O);
    break;
  case 1:
    // ABSS_B_rr_v110, ABSS_H_rr, ABSS_rr, ADDSC_AT_rr, ADDSC_A_rr, CADDN_A_r...
    printOperand(MI, 2, O);
    break;
  case 2:
    // ADD_A_src, ADD_src, ADD_src_15a, ADD_src_a15, CADDN_src, CADD_src, CMO...
    printSExtImm_4(MI, 1, O);
    break;
  case 3:
    // ADD_F_rrr, CADDN_A_rrr_v110, CADDN_rrr, CADD_A_rrr_v110, CADD_rrr, CRC...
    printOperand(MI, 3, O);
    SStream_concat0(O, ", ");
    break;
  case 4:
    // CACHEA_I_bo_bso, CACHEA_I_bo_c, CACHEA_I_bo_pos, CACHEA_I_bo_pre, CACH...
    printSExtImm_10(MI, 1, O);
    return;
    break;
  case 5:
    // CMPSWAP_W_bo_bso, CMPSWAP_W_bo_c, CMPSWAP_W_bo_pos, CMPSWAP_W_bo_pre, ...
    printSExtImm_10(MI, 2, O);
    SStream_concat0(O, ", ");
    break;
  case 6:
    // CMPSWAP_W_bo_r, LDMST_bo_r
    printOperand(MI, 0, O);
    return;
    break;
  case 7:
    // JEQ_sbr1, JEQ_sbr2, JEQ_sbr_v110, JGEZ_sbr, JGEZ_sbr_v110, JGTZ_sbr, J...
    printDisp4Imm(MI, 1, O);
    return;
    break;
  case 8:
    // JGE_U_brc, JLT_U_brc, JLT_brc, JNED_brc, JNEI_brc, LD_A_sro, LD_A_sro_...
    printZExtImm_4(MI, 1, O);
    break;
  case 9:
    // JNZ_A_brr, JZ_A_brr, LOOP_brr
    printDisp15Imm(MI, 1, O);
    return;
    break;
  case 10:
    // LD_A_abs, LD_BU_abs, LD_B_abs, LD_DA_abs, LD_D_abs, LD_HU_abs, LD_H_ab...
    printOff18Imm(MI, 1, O);
    return;
    break;
  case 11:
    // LD_A_bo_bso, LD_A_bol, LD_A_slr, LD_A_slr_v110, LD_BU_bo_bso, LD_BU_bo...
    SStream_concat1(O, ']');
    break;
  case 12:
    // LD_A_bo_c, LD_BU_bo_c, LD_B_bo_c, LD_DA_bo_c, LD_D_bo_c, LD_HU_bo_c, L...
    SStream_concat0(O, "+c]");
    set_mem_access(MI, false);
    printSExtImm_10(MI, 2, O);
    return;
    break;
  case 13:
    // LD_A_bo_pos, LD_A_slr_post, LD_A_slr_post_v110, LD_BU_bo_pos, LD_BU_sl...
    SStream_concat0(O, "+]");
    set_mem_access(MI, false);
    break;
  case 14:
    // LD_A_bo_r, LD_BU_bo_r, LD_B_bo_r, LD_DA_bo_r, LD_D_bo_r, LD_HU_bo_r, L...
    SStream_concat0(O, "+r]");
    set_mem_access(MI, false);
    return;
    break;
  case 15:
    // LOOP_sbr
    printOExtImm_4(MI, 1, O);
    return;
    break;
  case 16:
    // MFCR_rlc, MOVH_A_rlc, MOVH_rlc, MOV_U_rlc, MOV_rlc_e
    printZExtImm_16(MI, 1, O);
    return;
    break;
  case 17:
    // MOV_rlc
    printSExtImm_16(MI, 1, O);
    return;
    break;
  case 18:
    // ST_A_bol, ST_B_bol, ST_H_bol, ST_W_bol
    printSExtImm_16(MI, 2, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 1, O);
    return;
    break;
  }


  // Fragment 3 encoded into 4 bits for 12 unique commands.
  switch ((uint32_t)((Bits >> 25) & 15)) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ABSDIFS_B_rr_v110, ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ...
    SStream_concat0(O, ", ");
    break;
  case 1:
    // ABSS_B_rr_v110, ABSS_H_rr, ABSS_rr, ABS_B_rr, ABS_H_rr, ABS_rr, ADDS_s...
    return;
    break;
  case 2:
    // ADDSC_A_srrs
    SStream_concat0(O, ", d15, ");
    printZExtImm_2(MI, 2, O);
    return;
    break;
  case 3:
    // ADD_F_rrr, CADDN_A_rrr_v110, CADDN_rrr, CADD_A_rrr_v110, CADD_rrr, CRC...
    printOperand(MI, 1, O);
    break;
  case 4:
    // CMPSWAP_W_bo_bso, CMPSWAP_W_bo_c, CMPSWAP_W_bo_pos, CMPSWAP_W_bo_pre, ...
    printOperand(MI, 0, O);
    return;
    break;
  case 5:
    // DVADJ_rrr, DVADJ_rrr_v110, DVSTEP_U_rrr, DVSTEP_U_rrrv110, DVSTEP_rrr,...
    printOperand(MI, 2, O);
    break;
  case 6:
    // LD_A_bo_bso, LD_A_bo_pos, LD_BU_bo_bso, LD_BU_bo_pos, LD_B_bo_bso, LD_...
    printSExtImm_10(MI, 2, O);
    return;
    break;
  case 7:
    // LD_A_bol, LD_BU_bol, LD_B_bol, LD_HU_bol, LD_H_bol, LD_W_bol, LEA_bol
    printSExtImm_16(MI, 2, O);
    return;
    break;
  case 8:
    // MULR_Q_rr1_2LL, MUL_Q_rr1_2LL
    SStream_concat0(O, "l, ");
    printOperand(MI, 2, O);
    SStream_concat0(O, "l, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 9:
    // MULR_Q_rr1_2UU, MUL_Q_rr1_2UU
    SStream_concat0(O, "u, ");
    printOperand(MI, 2, O);
    SStream_concat0(O, "u, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 10:
    // ST_A_sro, ST_A_sro_v110
    SStream_concat0(O, ", a15");
    return;
    break;
  case 11:
    // ST_B_sro, ST_B_sro_v110, ST_H_sro, ST_H_sro_v110, ST_W_sro, ST_W_sro_v...
    SStream_concat0(O, ", d15");
    return;
    break;
  }


  // Fragment 4 encoded into 4 bits for 14 unique commands.
  switch ((uint32_t)((Bits >> 29) & 15)) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ABSDIFS_B_rr_v110, ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ...
    printOperand(MI, 2, O);
    break;
  case 1:
    // ABSDIF_rc, ADDC_rc, ADDS_U_rc, ADDS_rc, ADDX_rc, ADD_rc, ANDN_rc, AND_...
    printSExtImm_9(MI, 2, O);
    return;
    break;
  case 2:
    // ADDIH_A_rlc, ADDIH_rlc
    printZExtImm_16(MI, 2, O);
    return;
    break;
  case 3:
    // ADDI_rlc
    printSExtImm_16(MI, 2, O);
    return;
    break;
  case 4:
    // ADDSC_AT_rr, ADDSC_A_rr, CADDN_A_rcr_v110, CADDN_rcr, CADD_A_rcr_v110,...
    printOperand(MI, 1, O);
    break;
  case 5:
    // ADDSC_A_srrs_v110
    printZExtImm_2(MI, 2, O);
    return;
    break;
  case 6:
    // ADD_F_rrr, DVADJ_rrr, DVADJ_rrr_v110, DVSTEP_U_rrr, DVSTEP_U_rrrv110, ...
    return;
    break;
  case 7:
    // ANDN_T, AND_ANDN_T, AND_AND_T, AND_NOR_T, AND_OR_T, AND_T, INSN_T, INS...
    printZExtImm_4(MI, 3, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 2, O);
    SStream_concat0(O, ", ");
    printZExtImm_4(MI, 4, O);
    return;
    break;
  case 8:
    // CADDN_A_rrr_v110, CADDN_rrr, CADD_A_rrr_v110, CADD_rrr, CRCN_rrr, CSUB...
    SStream_concat0(O, ", ");
    break;
  case 9:
    // EXTR_U_rrpw, EXTR_U_rrrw, EXTR_rrpw, EXTR_rrrw, IMASK_rcpw, IMASK_rrpw...
    printOperand(MI, 3, O);
    SStream_concat0(O, ", ");
    break;
  case 10:
    // JEQ_A_brr, JEQ_brc, JEQ_brr, JGE_U_brc, JGE_U_brr, JGE_brc, JGE_brr, J...
    printDisp15Imm(MI, 2, O);
    return;
    break;
  case 11:
    // MADDRS_Q_rrr1_L_L, MADDR_Q_rrr1_L_L, MADDS_Q_rrr1_L_L, MADDS_Q_rrr1_e_...
    SStream_concat0(O, "l, ");
    printOperand(MI, 2, O);
    SStream_concat0(O, "l, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 12:
    // MADDRS_Q_rrr1_U_U, MADDR_Q_rrr1_U_U, MADDS_Q_rrr1_U_U, MADDS_Q_rrr1_e_...
    SStream_concat0(O, "u, ");
    printOperand(MI, 2, O);
    SStream_concat0(O, "u, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 13:
    // OR_rc
    printZExtImm_9(MI, 2, O);
    return;
    break;
  }


  // Fragment 5 encoded into 4 bits for 10 unique commands.
  switch ((uint32_t)((Bits >> 33) & 15)) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ABSDIFS_B_rr_v110, ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ...
    return;
    break;
  case 1:
    // ADDSC_A_rr, ADDSC_A_rr_v110, CADDN_A_rcr_v110, CADDN_rcr, CADD_A_rcr_v...
    SStream_concat0(O, ", ");
    break;
  case 2:
    // CADDN_A_rrr_v110, CADDN_rrr, CADD_A_rrr_v110, CADD_rrr, CRCN_rrr, CSUB...
    printOperand(MI, 2, O);
    break;
  case 3:
    // EXTR_U_rrpw, EXTR_U_rrrw, EXTR_rrpw, EXTR_rrrw, IMASK_rcpw, IMASK_rcrw...
    printOperand(MI, 4, O);
    return;
    break;
  case 4:
    // MULMS_H_rr1_LL2e, MULM_H_rr1_LL2e, MULR_H_rr1_LL2e, MUL_H_rr1_LL2e
    SStream_concat0(O, "ll, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 5:
    // MULMS_H_rr1_LU2e, MULM_H_rr1_LU2e, MULR_H_rr1_LU2e, MUL_H_rr1_LU2e
    SStream_concat0(O, "lu, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 6:
    // MULMS_H_rr1_UL2e, MULM_H_rr1_UL2e, MULR_H_rr1_UL2e, MUL_H_rr1_UL2e
    SStream_concat0(O, "ul, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 7:
    // MULMS_H_rr1_UU2e, MULM_H_rr1_UU2e, MULR_H_rr1_UU2e, MUL_H_rr1_UU2e
    SStream_concat0(O, "uu, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 8:
    // MUL_Q_rr1_2_L, MUL_Q_rr1_2_Le
    SStream_concat0(O, "l, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 9:
    // MUL_Q_rr1_2_U, MUL_Q_rr1_2_Ue
    SStream_concat0(O, "u, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  }


  // Fragment 6 encoded into 4 bits for 12 unique commands.
  switch ((uint32_t)((Bits >> 37) & 15)) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ADDSC_A_rr, ADDSC_A_rr_v110, DIFSC_A_rr_v110, MULR_H_rr_v110, MULR_Q_r...
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 1:
    // CADDN_A_rcr_v110, CADDN_rcr, CADD_A_rcr_v110, CADD_rcr, MADDMS_rcr_v11...
    printSExtImm_9(MI, 3, O);
    return;
    break;
  case 2:
    // CADDN_A_rrr_v110, CADDN_rrr, CADD_A_rrr_v110, CADD_rrr, CRCN_rrr, CSUB...
    return;
    break;
  case 3:
    // DEXTR_rrpw, DEXTR_rrrr, INSERT_rcpw, INSERT_rcrr, INSERT_rrpw, INSERT_...
    printOperand(MI, 3, O);
    break;
  case 4:
    // INSERT_rcrw, MADDRS_H_rrr1_v110, MADDRS_Q_rrr1_v110, MADDR_H_rrr1_v110...
    SStream_concat0(O, ", ");
    break;
  case 5:
    // MADDMS_H_rrr1_LL, MADDM_H_rrr1_LL, MADDRS_H_rrr1_LL, MADDR_H_rrr1_LL, ...
    SStream_concat0(O, "ll, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 6:
    // MADDMS_H_rrr1_LU, MADDM_H_rrr1_LU, MADDRS_H_rrr1_LU, MADDR_H_rrr1_LU, ...
    SStream_concat0(O, "lu, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 7:
    // MADDMS_H_rrr1_UL, MADDM_H_rrr1_UL, MADDRS_H_rrr1_UL, MADDRS_H_rrr1_UL_...
    SStream_concat0(O, "ul, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 8:
    // MADDMS_H_rrr1_UU, MADDM_H_rrr1_UU, MADDRS_H_rrr1_UU, MADDR_H_rrr1_UU, ...
    SStream_concat0(O, "uu, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 9:
    // MADDMS_U_rcr_v110, MADDM_U_rcr_v110, MADD_U_rcr, MSUB_U_rcr
    printZExtImm_9(MI, 3, O);
    return;
    break;
  case 10:
    // MADDS_Q_rrr1_L, MADDS_Q_rrr1_e_L, MADD_Q_rrr1_L, MADD_Q_rrr1_e_L, MSUB...
    SStream_concat0(O, "l, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 11:
    // MADDS_Q_rrr1_U, MADDS_Q_rrr1_e_U, MADD_Q_rrr1_U, MADD_Q_rrr1_e_U, MSUB...
    SStream_concat0(O, "u, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  }


  // Fragment 7 encoded into 2 bits for 4 unique commands.
  switch ((uint32_t)((Bits >> 41) & 3)) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // DEXTR_rrpw, DEXTR_rrrr, INSERT_rcrr, INSERT_rrrr
    return;
    break;
  case 1:
    // INSERT_rcpw, INSERT_rrpw, INSERT_rrrw
    SStream_concat0(O, ", ");
    printOperand(MI, 4, O);
    return;
    break;
  case 2:
    // INSERT_rcrw
    printOperand(MI, 4, O);
    return;
    break;
  case 3:
    // MADDRS_H_rrr1_v110, MADDRS_Q_rrr1_v110, MADDR_H_rrr1_v110, MADDR_Q_rrr...
    printZExtImm_2(MI, 4, O);
    return;
    break;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
const char *getRegisterName(unsigned RegNo) {
#ifndef CAPSTONE_DIET
  assert(RegNo && RegNo < 61 && "Invalid register number!");

  static const char AsmStrs[] = {
  /* 0 */ "d10\0"
  /* 4 */ "e10\0"
  /* 8 */ "p10\0"
  /* 12 */ "a0\0"
  /* 15 */ "d0\0"
  /* 18 */ "e0\0"
  /* 21 */ "p0\0"
  /* 24 */ "A10_A11\0"
  /* 32 */ "a11\0"
  /* 36 */ "d11\0"
  /* 40 */ "A0_A1\0"
  /* 46 */ "a1\0"
  /* 49 */ "d1\0"
  /* 52 */ "a12\0"
  /* 56 */ "d12\0"
  /* 60 */ "e12\0"
  /* 64 */ "p12\0"
  /* 68 */ "a2\0"
  /* 71 */ "d2\0"
  /* 74 */ "e2\0"
  /* 77 */ "p2\0"
  /* 80 */ "A12_A13\0"
  /* 88 */ "a13\0"
  /* 92 */ "d13\0"
  /* 96 */ "A2_A3\0"
  /* 102 */ "a3\0"
  /* 105 */ "d3\0"
  /* 108 */ "a14\0"
  /* 112 */ "d14\0"
  /* 116 */ "e14\0"
  /* 120 */ "p14\0"
  /* 124 */ "a4\0"
  /* 127 */ "d4\0"
  /* 130 */ "e4\0"
  /* 133 */ "p4\0"
  /* 136 */ "A14_A15\0"
  /* 144 */ "a15\0"
  /* 148 */ "d15\0"
  /* 152 */ "A4_A5\0"
  /* 158 */ "a5\0"
  /* 161 */ "d5\0"
  /* 164 */ "a6\0"
  /* 167 */ "d6\0"
  /* 170 */ "e6\0"
  /* 173 */ "p6\0"
  /* 176 */ "A6_A7\0"
  /* 182 */ "a7\0"
  /* 185 */ "d7\0"
  /* 188 */ "a8\0"
  /* 191 */ "d8\0"
  /* 194 */ "e8\0"
  /* 197 */ "p8\0"
  /* 200 */ "A8_A9\0"
  /* 206 */ "a9\0"
  /* 209 */ "d9\0"
  /* 212 */ "pc\0"
  /* 215 */ "pcxi\0"
  /* 220 */ "sp\0"
  /* 223 */ "psw\0"
  /* 227 */ "fcx\0"
};
  static const uint8_t RegAsmOffset[] = {
    227, 212, 215, 223, 12, 46, 68, 102, 124, 158, 164, 182, 188, 206, 
    220, 32, 52, 88, 108, 144, 15, 49, 71, 105, 127, 161, 167, 185, 
    191, 209, 0, 36, 56, 92, 112, 148, 18, 74, 130, 170, 194, 4, 
    60, 116, 21, 77, 133, 173, 197, 8, 64, 120, 40, 96, 152, 176, 
    200, 24, 80, 136, 
  };

  assert (*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!");
  return AsmStrs+RegAsmOffset[RegNo-1];
#else
  return NULL;
#endif // CAPSTONE_DIET
}
#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

static bool printAliasInstr(MCInst *MI, uint64_t Address, SStream *OS) {
#ifndef CAPSTONE_DIET
  return false;
#endif // CAPSTONE_DIET
}

#endif // PRINT_ALIAS_INSTR
