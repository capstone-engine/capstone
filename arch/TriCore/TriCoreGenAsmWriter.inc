/* Capstone Disassembly Engine, https://www.capstone-engine.org */
/* By Nguyen Anh Quynh <aquynh@gmail.com>, 2013-2022, */
/*    Rot127 <unisono@quyllur.org> 2022-2024 */
/* Automatically generated file by Capstone's LLVM TableGen Disassembler Backend. */

/* LLVM-commit: <commit> */
/* LLVM-tag: <tag> */

/* Do not edit. */

/* Capstone's LLVM TableGen Backends: */
/* https://github.com/capstone-engine/llvm-capstone */

#include <capstone/platform.h>
#include "../../cs_priv.h"

/// getMnemonic - This method is automatically generated by tablegen
/// from the instruction set description.
static MnemonicBitsInfo getMnemonic(MCInst *MI, SStream *O) {
#ifndef CAPSTONE_DIET
  static const char AsmStrs[] = {
  /* 0 */ "ftoq31 \0"
  /* 8 */ "csub.a \0"
  /* 16 */ "subsc.a \0"
  /* 25 */ "addsc.a \0"
  /* 34 */ "difsc.a \0"
  /* 43 */ "cadd.a \0"
  /* 51 */ "ld.a \0"
  /* 57 */ "tlbprobe.a \0"
  /* 69 */ "ge.a \0"
  /* 75 */ "jne.a \0"
  /* 82 */ "addih.a \0"
  /* 91 */ "movh.a \0"
  /* 99 */ "sel.a \0"
  /* 106 */ "csubn.a \0"
  /* 115 */ "caddn.a \0"
  /* 124 */ "seln.a \0"
  /* 132 */ "swap.a \0"
  /* 140 */ "jeq.a \0"
  /* 147 */ "lt.a \0"
  /* 153 */ "st.a \0"
  /* 159 */ "mov.a \0"
  /* 166 */ "nez.a \0"
  /* 173 */ "jz.a \0"
  /* 179 */ "jnz.a \0"
  /* 186 */ "eqz.a \0"
  /* 193 */ "movz.a \0"
  /* 201 */ "mov.aa \0"
  /* 209 */ "ld.da \0"
  /* 216 */ "st.da \0"
  /* 223 */ "lea \0"
  /* 228 */ "lha \0"
  /* 233 */ "sha \0"
  /* 238 */ "ja \0"
  /* 242 */ "jla \0"
  /* 247 */ "fcalla \0"
  /* 255 */ "crc32.b \0"
  /* 264 */ "sha.b \0"
  /* 271 */ "sub.b \0"
  /* 278 */ "add.b \0"
  /* 285 */ "ld.b \0"
  /* 291 */ "absdif.b \0"
  /* 301 */ "sh.b \0"
  /* 307 */ "min.b \0"
  /* 314 */ "clo.b \0"
  /* 321 */ "eq.b \0"
  /* 327 */ "abs.b \0"
  /* 334 */ "subs.b \0"
  /* 342 */ "adds.b \0"
  /* 350 */ "absdifs.b \0"
  /* 361 */ "cls.b \0"
  /* 368 */ "abss.b \0"
  /* 376 */ "sat.b \0"
  /* 383 */ "dvinit.b \0"
  /* 393 */ "lt.b \0"
  /* 399 */ "st.b \0"
  /* 405 */ "max.b \0"
  /* 412 */ "eqany.b \0"
  /* 421 */ "clz.b \0"
  /* 428 */ "csub \0"
  /* 434 */ "msub \0"
  /* 440 */ "rsub \0"
  /* 446 */ "subc \0"
  /* 452 */ "addc \0"
  /* 458 */ "ld.d \0"
  /* 464 */ "st.d \0"
  /* 470 */ "mov.d \0"
  /* 477 */ "cadd \0"
  /* 483 */ "madd \0"
  /* 489 */ "jned \0"
  /* 495 */ "nand \0"
  /* 501 */ "and.ge \0"
  /* 509 */ "sh.ge \0"
  /* 516 */ "xor.ge \0"
  /* 524 */ "jge \0"
  /* 529 */ "bmerge \0"
  /* 537 */ "disable \0"
  /* 546 */ "shuffle \0"
  /* 555 */ "and.ne \0"
  /* 563 */ "sh.ne \0"
  /* 570 */ "xor.ne \0"
  /* 578 */ "jne \0"
  /* 583 */ "restore \0"
  /* 592 */ "msub.f \0"
  /* 600 */ "madd.f \0"
  /* 608 */ "qseed.f \0"
  /* 617 */ "mul.f \0"
  /* 624 */ "cmp.f \0"
  /* 631 */ "div.f \0"
  /* 638 */ "absdif \0"
  /* 646 */ "q31tof \0"
  /* 654 */ "itof \0"
  /* 660 */ "hptof \0"
  /* 667 */ "utof \0"
  /* 673 */ "sha.h \0"
  /* 680 */ "msub.h \0"
  /* 688 */ "msubad.h \0"
  /* 698 */ "madd.h \0"
  /* 706 */ "ld.h \0"
  /* 712 */ "absdif.h \0"
  /* 722 */ "sh.h \0"
  /* 728 */ "mul.h \0"
  /* 735 */ "msubm.h \0"
  /* 744 */ "msubadm.h \0"
  /* 755 */ "maddm.h \0"
  /* 764 */ "mulm.h \0"
  /* 772 */ "maddsum.h \0"
  /* 783 */ "min.h \0"
  /* 790 */ "clo.h \0"
  /* 797 */ "eq.h \0"
  /* 803 */ "msubr.h \0"
  /* 812 */ "msubadr.h \0"
  /* 823 */ "maddr.h \0"
  /* 832 */ "mulr.h \0"
  /* 840 */ "maddsur.h \0"
  /* 851 */ "abs.h \0"
  /* 858 */ "msubs.h \0"
  /* 867 */ "msubads.h \0"
  /* 878 */ "madds.h \0"
  /* 887 */ "absdifs.h \0"
  /* 898 */ "cls.h \0"
  /* 905 */ "msubms.h \0"
  /* 915 */ "msubadms.h \0"
  /* 927 */ "maddms.h \0"
  /* 937 */ "mulms.h \0"
  /* 946 */ "maddsums.h \0"
  /* 958 */ "msubrs.h \0"
  /* 968 */ "msubadrs.h \0"
  /* 980 */ "maddrs.h \0"
  /* 990 */ "maddsurs.h \0"
  /* 1002 */ "abss.h \0"
  /* 1010 */ "maddsus.h \0"
  /* 1021 */ "sat.h \0"
  /* 1028 */ "dvinit.h \0"
  /* 1038 */ "lt.h \0"
  /* 1044 */ "st.h \0"
  /* 1050 */ "maddsu.h \0"
  /* 1060 */ "max.h \0"
  /* 1067 */ "eqany.h \0"
  /* 1076 */ "clz.h \0"
  /* 1083 */ "addih \0"
  /* 1090 */ "sh \0"
  /* 1094 */ "movh \0"
  /* 1100 */ "tlbprobe.i \0"
  /* 1112 */ "addi \0"
  /* 1118 */ "jnei \0"
  /* 1124 */ "ji \0"
  /* 1128 */ "jli \0"
  /* 1133 */ "fcalli \0"
  /* 1141 */ "ftoi \0"
  /* 1147 */ "dvadj \0"
  /* 1154 */ "unpack \0"
  /* 1162 */ "imask \0"
  /* 1169 */ "sel \0"
  /* 1174 */ "updfl \0"
  /* 1181 */ "jl \0"
  /* 1185 */ "fcall \0"
  /* 1192 */ "syscall \0"
  /* 1201 */ "mul \0"
  /* 1206 */ "msubm \0"
  /* 1213 */ "maddm \0"
  /* 1220 */ "mulm \0"
  /* 1226 */ "csubn \0"
  /* 1233 */ "crcn \0"
  /* 1239 */ "caddn \0"
  /* 1246 */ "andn \0"
  /* 1252 */ "ixmin \0"
  /* 1259 */ "seln \0"
  /* 1265 */ "orn \0"
  /* 1270 */ "cmovn \0"
  /* 1277 */ "clo \0"
  /* 1282 */ "tlbmap \0"
  /* 1290 */ "tlbdemap \0"
  /* 1300 */ "dvstep \0"
  /* 1308 */ "ftohp \0"
  /* 1315 */ "loop \0"
  /* 1321 */ "msub.q \0"
  /* 1329 */ "madd.q \0"
  /* 1337 */ "ld.q \0"
  /* 1343 */ "mul.q \0"
  /* 1350 */ "msubm.q \0"
  /* 1359 */ "maddm.q \0"
  /* 1368 */ "msubr.q \0"
  /* 1377 */ "maddr.q \0"
  /* 1386 */ "mulr.q \0"
  /* 1394 */ "msubs.q \0"
  /* 1403 */ "madds.q \0"
  /* 1412 */ "msubrs.q \0"
  /* 1422 */ "maddrs.q \0"
  /* 1432 */ "st.q \0"
  /* 1438 */ "and.eq \0"
  /* 1446 */ "sh.eq \0"
  /* 1453 */ "xor.eq \0"
  /* 1461 */ "jeq \0"
  /* 1466 */ "mfcr \0"
  /* 1472 */ "mtcr \0"
  /* 1478 */ "xnor \0"
  /* 1484 */ "xor \0"
  /* 1489 */ "bisr \0"
  /* 1495 */ "dextr \0"
  /* 1502 */ "shas \0"
  /* 1508 */ "abs \0"
  /* 1513 */ "msubs \0"
  /* 1520 */ "rsubs \0"
  /* 1527 */ "madds \0"
  /* 1534 */ "absdifs \0"
  /* 1543 */ "cls \0"
  /* 1548 */ "muls \0"
  /* 1554 */ "msubms \0"
  /* 1562 */ "maddms \0"
  /* 1570 */ "abss \0"
  /* 1576 */ "and.and.t \0"
  /* 1587 */ "sh.and.t \0"
  /* 1597 */ "or.and.t \0"
  /* 1607 */ "sh.nand.t \0"
  /* 1618 */ "and.andn.t \0"
  /* 1630 */ "sh.andn.t \0"
  /* 1641 */ "or.andn.t \0"
  /* 1652 */ "sh.orn.t \0"
  /* 1662 */ "insn.t \0"
  /* 1670 */ "and.or.t \0"
  /* 1680 */ "sh.or.t \0"
  /* 1689 */ "or.or.t \0"
  /* 1698 */ "and.nor.t \0"
  /* 1709 */ "sh.nor.t \0"
  /* 1719 */ "or.nor.t \0"
  /* 1729 */ "sh.xnor.t \0"
  /* 1740 */ "sh.xor.t \0"
  /* 1750 */ "ins.t \0"
  /* 1757 */ "st.t \0"
  /* 1763 */ "jz.t \0"
  /* 1769 */ "jnz.t \0"
  /* 1776 */ "addsc.at \0"
  /* 1786 */ "bsplit \0"
  /* 1794 */ "dvinit \0"
  /* 1802 */ "and.lt \0"
  /* 1810 */ "sh.lt \0"
  /* 1817 */ "xor.lt \0"
  /* 1825 */ "jlt \0"
  /* 1830 */ "not \0"
  /* 1835 */ "insert \0"
  /* 1843 */ "ldmst \0"
  /* 1850 */ "msub.u \0"
  /* 1858 */ "madd.u \0"
  /* 1866 */ "and.ge.u \0"
  /* 1876 */ "sh.ge.u \0"
  /* 1885 */ "xor.ge.u \0"
  /* 1895 */ "jge.u \0"
  /* 1902 */ "mul.u \0"
  /* 1909 */ "msubm.u \0"
  /* 1918 */ "maddm.u \0"
  /* 1927 */ "mulm.u \0"
  /* 1935 */ "ixmin.u \0"
  /* 1944 */ "dvstep.u \0"
  /* 1954 */ "extr.u \0"
  /* 1962 */ "msubs.u \0"
  /* 1971 */ "rsubs.u \0"
  /* 1980 */ "madds.u \0"
  /* 1989 */ "muls.u \0"
  /* 1997 */ "msubms.u \0"
  /* 2007 */ "maddms.u \0"
  /* 2017 */ "dvinit.u \0"
  /* 2027 */ "and.lt.u \0"
  /* 2037 */ "sh.lt.u \0"
  /* 2046 */ "xor.lt.u \0"
  /* 2056 */ "jlt.u \0"
  /* 2063 */ "div.u \0"
  /* 2070 */ "mov.u \0"
  /* 2077 */ "ixmax.u \0"
  /* 2086 */ "ld.bu \0"
  /* 2093 */ "min.bu \0"
  /* 2101 */ "subs.bu \0"
  /* 2110 */ "adds.bu \0"
  /* 2119 */ "sat.bu \0"
  /* 2127 */ "dvinit.bu \0"
  /* 2138 */ "lt.bu \0"
  /* 2145 */ "max.bu \0"
  /* 2153 */ "ld.hu \0"
  /* 2160 */ "min.hu \0"
  /* 2168 */ "subs.hu \0"
  /* 2177 */ "adds.hu \0"
  /* 2186 */ "sat.hu \0"
  /* 2194 */ "dvinit.hu \0"
  /* 2205 */ "lt.hu \0"
  /* 2212 */ "max.hu \0"
  /* 2220 */ "ftou \0"
  /* 2226 */ "loopu \0"
  /* 2233 */ "lt.wu \0"
  /* 2240 */ "div \0"
  /* 2245 */ "cmov \0"
  /* 2251 */ "crc32b.w \0"
  /* 2261 */ "ld.w \0"
  /* 2267 */ "crc32l.w \0"
  /* 2277 */ "swap.w \0"
  /* 2285 */ "eq.w \0"
  /* 2291 */ "lt.w \0"
  /* 2297 */ "popcnt.w \0"
  /* 2307 */ "st.w \0"
  /* 2313 */ "ixmax \0"
  /* 2320 */ "subx \0"
  /* 2326 */ "ldlcx \0"
  /* 2333 */ "stlcx \0"
  /* 2340 */ "lducx \0"
  /* 2347 */ "stucx \0"
  /* 2354 */ "addx \0"
  /* 2360 */ "parity \0"
  /* 2368 */ "ftoq31z \0"
  /* 2377 */ "jgez \0"
  /* 2383 */ "jlez \0"
  /* 2389 */ "ftoiz \0"
  /* 2396 */ "jz \0"
  /* 2400 */ "clz \0"
  /* 2405 */ "jnz \0"
  /* 2410 */ "jgtz \0"
  /* 2416 */ "jltz \0"
  /* 2422 */ "ftouz \0"
  /* 2429 */ "swap.a [+\0"
  /* 2439 */ "st.a [+\0"
  /* 2447 */ "st.da [+\0"
  /* 2456 */ "st.b [+\0"
  /* 2464 */ "st.d [+\0"
  /* 2472 */ "st.h [+\0"
  /* 2480 */ "cachea.i [+\0"
  /* 2492 */ "cachei.i [+\0"
  /* 2504 */ "cachea.wi [+\0"
  /* 2517 */ "cachei.wi [+\0"
  /* 2530 */ "st.q [+\0"
  /* 2538 */ "ldmst [+\0"
  /* 2547 */ "cachea.w [+\0"
  /* 2559 */ "cachei.w [+\0"
  /* 2571 */ "swapmsk.w [+\0"
  /* 2584 */ "cmpswap.w [+\0"
  /* 2597 */ "st.w [+\0"
  /* 2605 */ "# XRay Function Patchable RET.\0"
  /* 2636 */ "# XRay Typed Event Log.\0"
  /* 2660 */ "# XRay Custom Event Log.\0"
  /* 2685 */ "# XRay Function Enter.\0"
  /* 2708 */ "# XRay Tail Call Exit.\0"
  /* 2731 */ "# XRay Function Exit.\0"
  /* 2753 */ "LIFETIME_END\0"
  /* 2766 */ "PSEUDO_PROBE\0"
  /* 2779 */ "BUNDLE\0"
  /* 2786 */ "DBG_VALUE\0"
  /* 2796 */ "DBG_INSTR_REF\0"
  /* 2810 */ "DBG_PHI\0"
  /* 2818 */ "DBG_LABEL\0"
  /* 2828 */ "LIFETIME_START\0"
  /* 2843 */ "DBG_VALUE_LIST\0"
  /* 2858 */ "swap.a [\0"
  /* 2867 */ "st.a [\0"
  /* 2874 */ "st.da [\0"
  /* 2882 */ "st.b [\0"
  /* 2889 */ "st.d [\0"
  /* 2896 */ "st.h [\0"
  /* 2903 */ "cachea.i [\0"
  /* 2914 */ "cachei.i [\0"
  /* 2925 */ "cachea.wi [\0"
  /* 2937 */ "cachei.wi [\0"
  /* 2949 */ "st.q [\0"
  /* 2956 */ "ldmst [\0"
  /* 2964 */ "cachea.w [\0"
  /* 2975 */ "cachei.w [\0"
  /* 2986 */ "swapmsk.w [\0"
  /* 2998 */ "cmpswap.w [\0"
  /* 3010 */ "st.w [\0"
  /* 3017 */ "ldlcx [\0"
  /* 3025 */ "stlcx [\0"
  /* 3033 */ "lducx [\0"
  /* 3041 */ "stucx [\0"
  /* 3049 */ "tlbflush.a\0"
  /* 3060 */ "tlbflush.b\0"
  /* 3071 */ "dsync\0"
  /* 3077 */ "isync\0"
  /* 3083 */ "rfe\0"
  /* 3087 */ "enable\0"
  /* 3094 */ "disable\0"
  /* 3102 */ "debug\0"
  /* 3108 */ "# FEntry call\0"
  /* 3122 */ "rfm\0"
  /* 3126 */ "nop\0"
  /* 3130 */ "fret\0"
  /* 3135 */ "wait\0"
  /* 3140 */ "trapv\0"
  /* 3146 */ "trapsv\0"
  /* 3153 */ "rstv\0"
  /* 3158 */ "rslcx\0"
  /* 3164 */ "svlcx\0"
};
#endif // CAPSTONE_DIET

  static const uint32_t OpInfo0[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// INLINEASM_BR
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// ANNOTATION_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    2787U,	// DBG_VALUE
    2844U,	// DBG_VALUE_LIST
    2797U,	// DBG_INSTR_REF
    2811U,	// DBG_PHI
    2819U,	// DBG_LABEL
    0U,	// REG_SEQUENCE
    0U,	// COPY
    2780U,	// BUNDLE
    2829U,	// LIFETIME_START
    2754U,	// LIFETIME_END
    2767U,	// PSEUDO_PROBE
    0U,	// ARITH_FENCE
    0U,	// STACKMAP
    3109U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// PREALLOCATED_SETUP
    0U,	// PREALLOCATED_ARG
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    2686U,	// PATCHABLE_FUNCTION_ENTER
    2606U,	// PATCHABLE_RET
    2732U,	// PATCHABLE_FUNCTION_EXIT
    2709U,	// PATCHABLE_TAIL_CALL
    2661U,	// PATCHABLE_EVENT_CALL
    2637U,	// PATCHABLE_TYPED_EVENT_CALL
    0U,	// ICALL_BRANCH_FUNNEL
    0U,	// MEMBARRIER
    0U,	// JUMP_TABLE_DEBUG_INFO
    0U,	// G_ASSERT_SEXT
    0U,	// G_ASSERT_ZEXT
    0U,	// G_ASSERT_ALIGN
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_SDIVREM
    0U,	// G_UDIVREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_IMPLICIT_DEF
    0U,	// G_PHI
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_CONSTANT_POOL
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_MERGE_VALUES
    0U,	// G_BUILD_VECTOR
    0U,	// G_BUILD_VECTOR_TRUNC
    0U,	// G_CONCAT_VECTORS
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_FREEZE
    0U,	// G_CONSTANT_FOLD_BARRIER
    0U,	// G_INTRINSIC_FPTRUNC_ROUND
    0U,	// G_INTRINSIC_TRUNC
    0U,	// G_INTRINSIC_ROUND
    0U,	// G_INTRINSIC_LRINT
    0U,	// G_INTRINSIC_ROUNDEVEN
    0U,	// G_READCYCLECOUNTER
    0U,	// G_LOAD
    0U,	// G_SEXTLOAD
    0U,	// G_ZEXTLOAD
    0U,	// G_INDEXED_LOAD
    0U,	// G_INDEXED_SEXTLOAD
    0U,	// G_INDEXED_ZEXTLOAD
    0U,	// G_STORE
    0U,	// G_INDEXED_STORE
    0U,	// G_ATOMIC_CMPXCHG_WITH_SUCCESS
    0U,	// G_ATOMIC_CMPXCHG
    0U,	// G_ATOMICRMW_XCHG
    0U,	// G_ATOMICRMW_ADD
    0U,	// G_ATOMICRMW_SUB
    0U,	// G_ATOMICRMW_AND
    0U,	// G_ATOMICRMW_NAND
    0U,	// G_ATOMICRMW_OR
    0U,	// G_ATOMICRMW_XOR
    0U,	// G_ATOMICRMW_MAX
    0U,	// G_ATOMICRMW_MIN
    0U,	// G_ATOMICRMW_UMAX
    0U,	// G_ATOMICRMW_UMIN
    0U,	// G_ATOMICRMW_FADD
    0U,	// G_ATOMICRMW_FSUB
    0U,	// G_ATOMICRMW_FMAX
    0U,	// G_ATOMICRMW_FMIN
    0U,	// G_ATOMICRMW_UINC_WRAP
    0U,	// G_ATOMICRMW_UDEC_WRAP
    0U,	// G_FENCE
    0U,	// G_PREFETCH
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INVOKE_REGION_START
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_INTRINSIC_CONVERGENT
    0U,	// G_INTRINSIC_CONVERGENT_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_SEXT_INREG
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_FSHL
    0U,	// G_FSHR
    0U,	// G_ROTR
    0U,	// G_ROTL
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDO
    0U,	// G_UADDE
    0U,	// G_USUBO
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SADDE
    0U,	// G_SSUBO
    0U,	// G_SSUBE
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_UADDSAT
    0U,	// G_SADDSAT
    0U,	// G_USUBSAT
    0U,	// G_SSUBSAT
    0U,	// G_USHLSAT
    0U,	// G_SSHLSAT
    0U,	// G_SMULFIX
    0U,	// G_UMULFIX
    0U,	// G_SMULFIXSAT
    0U,	// G_UMULFIXSAT
    0U,	// G_SDIVFIX
    0U,	// G_UDIVFIX
    0U,	// G_SDIVFIXSAT
    0U,	// G_UDIVFIXSAT
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FMA
    0U,	// G_FMAD
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FPOWI
    0U,	// G_FEXP
    0U,	// G_FEXP2
    0U,	// G_FEXP10
    0U,	// G_FLOG
    0U,	// G_FLOG2
    0U,	// G_FLOG10
    0U,	// G_FLDEXP
    0U,	// G_FFREXP
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_FABS
    0U,	// G_FCOPYSIGN
    0U,	// G_IS_FPCLASS
    0U,	// G_FCANONICALIZE
    0U,	// G_FMINNUM
    0U,	// G_FMAXNUM
    0U,	// G_FMINNUM_IEEE
    0U,	// G_FMAXNUM_IEEE
    0U,	// G_FMINIMUM
    0U,	// G_FMAXIMUM
    0U,	// G_GET_FPENV
    0U,	// G_SET_FPENV
    0U,	// G_RESET_FPENV
    0U,	// G_GET_FPMODE
    0U,	// G_SET_FPMODE
    0U,	// G_RESET_FPMODE
    0U,	// G_PTR_ADD
    0U,	// G_PTRMASK
    0U,	// G_SMIN
    0U,	// G_SMAX
    0U,	// G_UMIN
    0U,	// G_UMAX
    0U,	// G_ABS
    0U,	// G_LROUND
    0U,	// G_LLROUND
    0U,	// G_BR
    0U,	// G_BRJT
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// G_SHUFFLE_VECTOR
    0U,	// G_CTTZ
    0U,	// G_CTTZ_ZERO_UNDEF
    0U,	// G_CTLZ
    0U,	// G_CTLZ_ZERO_UNDEF
    0U,	// G_CTPOP
    0U,	// G_BSWAP
    0U,	// G_BITREVERSE
    0U,	// G_FCEIL
    0U,	// G_FCOS
    0U,	// G_FSIN
    0U,	// G_FSQRT
    0U,	// G_FFLOOR
    0U,	// G_FRINT
    0U,	// G_FNEARBYINT
    0U,	// G_ADDRSPACE_CAST
    0U,	// G_BLOCK_ADDR
    0U,	// G_JUMP_TABLE
    0U,	// G_DYN_STACKALLOC
    0U,	// G_STACKSAVE
    0U,	// G_STACKRESTORE
    0U,	// G_STRICT_FADD
    0U,	// G_STRICT_FSUB
    0U,	// G_STRICT_FMUL
    0U,	// G_STRICT_FDIV
    0U,	// G_STRICT_FREM
    0U,	// G_STRICT_FMA
    0U,	// G_STRICT_FSQRT
    0U,	// G_STRICT_FLDEXP
    0U,	// G_READ_REGISTER
    0U,	// G_WRITE_REGISTER
    0U,	// G_MEMCPY
    0U,	// G_MEMCPY_INLINE
    0U,	// G_MEMMOVE
    0U,	// G_MEMSET
    0U,	// G_BZERO
    0U,	// G_VECREDUCE_SEQ_FADD
    0U,	// G_VECREDUCE_SEQ_FMUL
    0U,	// G_VECREDUCE_FADD
    0U,	// G_VECREDUCE_FMUL
    0U,	// G_VECREDUCE_FMAX
    0U,	// G_VECREDUCE_FMIN
    0U,	// G_VECREDUCE_FMAXIMUM
    0U,	// G_VECREDUCE_FMINIMUM
    0U,	// G_VECREDUCE_ADD
    0U,	// G_VECREDUCE_MUL
    0U,	// G_VECREDUCE_AND
    0U,	// G_VECREDUCE_OR
    0U,	// G_VECREDUCE_XOR
    0U,	// G_VECREDUCE_SMAX
    0U,	// G_VECREDUCE_SMIN
    0U,	// G_VECREDUCE_UMAX
    0U,	// G_VECREDUCE_UMIN
    0U,	// G_SBFX
    0U,	// G_UBFX
    4447U,	// ABSDIFS_B_rr_v110
    4984U,	// ABSDIFS_H_rr
    5631U,	// ABSDIFS_rc
    5631U,	// ABSDIFS_rr
    4388U,	// ABSDIF_B_rr
    4809U,	// ABSDIF_H_rr
    536875647U,	// ABSDIF_rc
    4735U,	// ABSDIF_rr
    34607473U,	// ABSS_B_rr_v110
    34608107U,	// ABSS_H_rr
    34608675U,	// ABSS_rr
    33558856U,	// ABS_B_rr
    33559380U,	// ABS_H_rr
    33560037U,	// ABS_rr
    536875461U,	// ADDC_rc
    4549U,	// ADDC_rr
    1073746003U,	// ADDIH_A_rlc
    1073747004U,	// ADDIH_rlc
    1610617945U,	// ADDI_rlc
    2148538097U,	// ADDSC_AT_rr
    5873U,	// ADDSC_AT_rr_v110
    2148536346U,	// ADDSC_A_rr
    4122U,	// ADDSC_A_rr_v110
    4122U,	// ADDSC_A_srrs
    2684358682U,	// ADDSC_A_srrs_v110
    6207U,	// ADDS_BU_rr_v110
    4439U,	// ADDS_B_rr
    4976U,	// ADDS_H
    6274U,	// ADDS_HU
    6078U,	// ADDS_U
    536876990U,	// ADDS_U_rc
    536876537U,	// ADDS_rc
    5625U,	// ADDS_rr
    33560057U,	// ADDS_srr
    536877363U,	// ADDX_rc
    6451U,	// ADDX_rr
    4141U,	// ADD_A_rr
    35655725U,	// ADD_A_src
    33558573U,	// ADD_A_srr
    4375U,	// ADD_B_rr
    3291484762U,	// ADD_F_rrr
    4796U,	// ADD_H_rr
    536875487U,	// ADD_rc
    4575U,	// ADD_rr
    35656159U,	// ADD_src
    3758100959U,	// ADD_src_15a
    3758100959U,	// ADD_src_a15
    33559007U,	// ADD_srr
    4575U,	// ADD_srr_15a
    4575U,	// ADD_srr_a15
    5719U,	// ANDN_T
    536876255U,	// ANDN_rc
    5343U,	// ANDN_rr
    5715U,	// AND_ANDN_T
    5673U,	// AND_AND_T
    536876447U,	// AND_EQ_rc
    5535U,	// AND_EQ_rr
    536876875U,	// AND_GE_U_rc
    5963U,	// AND_GE_U_rr
    536875510U,	// AND_GE_rc
    4598U,	// AND_GE_rr
    536877036U,	// AND_LT_U_rc
    6124U,	// AND_LT_U_rr
    536876811U,	// AND_LT_rc
    5899U,	// AND_LT_rr
    536875564U,	// AND_NE_rc
    4652U,	// AND_NE_rr
    5795U,	// AND_NOR_T
    5767U,	// AND_OR_T
    5677U,	// AND_T
    536875505U,	// AND_rc
    4593U,	// AND_rr
    37753329U,	// AND_sc
    37753329U,	// AND_sc_v110
    33559025U,	// AND_srr
    33559025U,	// AND_srr_v110
    9682U,	// BISR_rc
    9682U,	// BISR_rc_v161
    13778U,	// BISR_sc
    13778U,	// BISR_sc_v110
    4626U,	// BMERGAE_rr_v110
    4626U,	// BMERGE_rr
    33560315U,	// BSPLIT_rr
    33560315U,	// BSPLIT_rr_v110
    5315416U,	// CACHEA_I_bo_bso
    5380952U,	// CACHEA_I_bo_c
    5446488U,	// CACHEA_I_bo_pos
    5314993U,	// CACHEA_I_bo_pre
    269144U,	// CACHEA_I_bo_r
    5315438U,	// CACHEA_WI_bo_bso
    5380974U,	// CACHEA_WI_bo_c
    5446510U,	// CACHEA_WI_bo_pos
    5315017U,	// CACHEA_WI_bo_pre
    269166U,	// CACHEA_WI_bo_r
    5315477U,	// CACHEA_W_bo_bso
    5381013U,	// CACHEA_W_bo_c
    5446549U,	// CACHEA_W_bo_pos
    5315060U,	// CACHEA_W_bo_pre
    269205U,	// CACHEA_W_bo_r
    5315427U,	// CACHEI_I_bo_bso
    5446499U,	// CACHEI_I_bo_pos
    5315005U,	// CACHEI_I_bo_pre
    5315450U,	// CACHEI_WI_bo_bso
    5446522U,	// CACHEI_WI_bo_pos
    5315030U,	// CACHEI_WI_bo_pre
    5315488U,	// CACHEI_W_bo_bso
    5446560U,	// CACHEI_W_bo_pos
    5315072U,	// CACHEI_W_bo_pre
    2148536436U,	// CADDN_A_rcr_v110
    607129716U,	// CADDN_A_rrr_v110
    2148537560U,	// CADDN_rcr
    607130840U,	// CADDN_rrr
    3758101720U,	// CADDN_src
    5336U,	// CADDN_srr_v110
    2148536364U,	// CADD_A_rcr_v110
    607129644U,	// CADD_A_rrr_v110
    2148536798U,	// CADD_rcr
    607130078U,	// CADD_rrr
    3758100958U,	// CADD_src
    4574U,	// CADD_srr_v110
    16633U,	// CALLA_b
    332911U,	// CALLI_rr
    332911U,	// CALLI_rr_v110
    17571U,	// CALL_b
    21667U,	// CALL_sb
    33558843U,	// CLO_B_rr_v110
    33559319U,	// CLO_H_rr
    33559806U,	// CLO_rr
    33558890U,	// CLS_B_rr_v110
    33559427U,	// CLS_H_rr
    33560072U,	// CLS_rr
    33558950U,	// CLZ_B_rr_v110
    33559605U,	// CLZ_H_rr
    33560929U,	// CLZ_rr
    3758101751U,	// CMOVN_src
    5367U,	// CMOVN_srr
    3758102726U,	// CMOV_src
    6342U,	// CMOV_srr
    107047863U,	// CMPSWAP_W_bo_bso
    107113399U,	// CMPSWAP_W_bo_c
    107178935U,	// CMPSWAP_W_bo_pos
    107047449U,	// CMPSWAP_W_bo_pre
    7760823U,	// CMPSWAP_W_bo_r
    4721U,	// CMP_F_rr
    2148538572U,	// CRC32B_W_rr
    2148538588U,	// CRC32L_W_rr
    2148536576U,	// CRC32_B_rr
    607130834U,	// CRCN_rrr
    607129707U,	// CSUBN_A__rrr_v110
    607130827U,	// CSUBN_rrr
    607129609U,	// CSUB_A__rrr_v110
    607130029U,	// CSUB_rrr
    3103U,	// DEBUG_sr
    3103U,	// DEBUG_sys
    5592U,	// DEXTR_rrpw
    5592U,	// DEXTR_rrrr
    4131U,	// DIFSC_A_rr_v110
    3095U,	// DISABLE_sys
    332314U,	// DISABLE_sys_1
    4728U,	// DIV_F_rr
    6160U,	// DIV_U_rr
    6337U,	// DIV_rr
    3072U,	// DSYNC_sys
    3358594172U,	// DVADJ_rrr
    3358594172U,	// DVADJ_rrr_v110
    33559676U,	// DVADJ_srr_v110
    6224U,	// DVINIT_BU_rr
    6224U,	// DVINIT_BU_rr_v110
    4480U,	// DVINIT_B_rr
    4480U,	// DVINIT_B_rr_v110
    6291U,	// DVINIT_HU_rr
    6291U,	// DVINIT_HU_rr_v110
    5125U,	// DVINIT_H_rr
    5125U,	// DVINIT_H_rr_v110
    6114U,	// DVINIT_U_rr
    6114U,	// DVINIT_U_rr_v110
    5891U,	// DVINIT_rr
    5891U,	// DVINIT_rr_v110
    3358594969U,	// DVSTEP_U_rrr
    3358594969U,	// DVSTEP_U_rrrv110
    33560473U,	// DVSTEP_Uv110
    3358594325U,	// DVSTEP_rrr
    3358594325U,	// DVSTEP_rrrv110
    33559829U,	// DVSTEPv110
    3088U,	// ENABLE_sys
    536875421U,	// EQANY_B_rc
    4509U,	// EQANY_B_rr
    536876076U,	// EQANY_H_rc
    5164U,	// EQANY_H_rr
    33558715U,	// EQZ_A_rr
    4238U,	// EQ_A_rr
    4418U,	// EQ_B_rr
    4894U,	// EQ_H_rr
    6382U,	// EQ_W_rr
    536876451U,	// EQ_rc
    5539U,	// EQ_rr
    3758101923U,	// EQ_src
    5539U,	// EQ_srr
    1073747875U,	// EXTR_U_rrpw
    6051U,	// EXTR_U_rrrr
    1073747875U,	// EXTR_U_rrrw
    1073747417U,	// EXTR_rrpw
    5593U,	// EXTR_rrrr
    1073747417U,	// EXTR_rrrw
    16632U,	// FCALLA_b
    332910U,	// FCALLA_i
    17570U,	// FCALL_b
    3131U,	// FRET_sr
    3131U,	// FRET_sys
    33559837U,	// FTOHP_rr
    33560918U,	// FTOIZ_rr
    33559670U,	// FTOI_rr
    6465U,	// FTOQ31Z_rr
    4097U,	// FTOQ31_rr
    33560951U,	// FTOUZ_rr
    33560749U,	// FTOU_rr
    4166U,	// GE_A_rr
    536876879U,	// GE_U_rc
    5967U,	// GE_U_rr
    536875514U,	// GE_rc
    4602U,	// GE_rr
    33559189U,	// HPTOF_rr
    1074795659U,	// IMASK_rcpw
    674239627U,	// IMASK_rcrw
    1074795659U,	// IMASK_rrpw
    1074795659U,	// IMASK_rrrw
    5932U,	// INSERT_rcpw
    5932U,	// INSERT_rcrr
    1073747756U,	// INSERT_rcrw
    5932U,	// INSERT_rrpw
    5932U,	// INSERT_rrrr
    5932U,	// INSERT_rrrw
    5759U,	// INSN_T
    5847U,	// INS_T
    3078U,	// ISYNC_sys
    33559183U,	// ITOF_rr
    3358595102U,	// IXMAX_U_rrr
    3358595338U,	// IXMAX_rrr
    3358594960U,	// IXMIN_U_rrr
    3358594277U,	// IXMIN_rrr
    16623U,	// JA_b
    1610616973U,	// JEQ_A_brr
    1612715446U,	// JEQ_brc
    1610618294U,	// JEQ_brr
    8394166U,	// JEQ_sbc1
    8394166U,	// JEQ_sbc2
    8394166U,	// JEQ_sbc_v110
    2147489206U,	// JEQ_sbr1
    2147489206U,	// JEQ_sbr2
    2147489206U,	// JEQ_sbr_v110
    9443658U,	// JGEZ_sbr
    9443658U,	// JGEZ_sbr_v110
    1621104488U,	// JGE_U_brc
    1610618728U,	// JGE_U_brr
    1612714509U,	// JGE_brc
    1610617357U,	// JGE_brr
    9443691U,	// JGTZ_sbr
    9443691U,	// JGTZ_sbr_v110
    332901U,	// JI_rr
    332901U,	// JI_rr_v110
    332901U,	// JI_sbr_v110
    332901U,	// JI_sr
    16627U,	// JLA_b
    9443664U,	// JLEZ_sbr
    9443664U,	// JLEZ_sbr_v110
    332905U,	// JLI_rr
    332905U,	// JLI_rr_v110
    9443697U,	// JLTZ_sbr
    9443697U,	// JLTZ_sbr_v110
    1621104649U,	// JLT_U_brc
    1610618889U,	// JLT_U_brr
    1621104418U,	// JLT_brc
    1610618658U,	// JLT_brr
    17566U,	// JL_b
    1621103082U,	// JNED_brc
    1610617322U,	// JNED_brr
    1621103711U,	// JNEI_brc
    1610617951U,	// JNEI_brr
    1610616908U,	// JNE_A_brr
    1612714563U,	// JNE_brc
    1610617411U,	// JNE_brr
    8393283U,	// JNE_sbc1
    8393283U,	// JNE_sbc2
    8393283U,	// JNE_sbc_v110
    2147488323U,	// JNE_sbr1
    2147488323U,	// JNE_sbr2
    2147488323U,	// JNE_sbr_v110
    11538612U,	// JNZ_A_brr
    9441460U,	// JNZ_A_sbr
    1610618602U,	// JNZ_T_brn
    2147489514U,	// JNZ_T_sbrn
    2147489514U,	// JNZ_T_sbrn_v110
    12589414U,	// JNZ_sb
    12589414U,	// JNZ_sb_v110
    9443686U,	// JNZ_sbr
    9443686U,	// JNZ_sbr_v110
    11538606U,	// JZ_A_brr
    9441454U,	// JZ_A_sbr
    1610618596U,	// JZ_T_brn
    2147489508U,	// JZ_T_sbrn
    2147489508U,	// JZ_T_sbrn_v110
    12589405U,	// JZ_sb
    12589405U,	// JZ_sb_v110
    9443677U,	// JZ_sbr
    9443677U,	// JZ_sbr_v110
    17536U,	// J_b
    21632U,	// J_sb
    21632U,	// J_sb_v110
    358679U,	// LDLCX_abs
    5315530U,	// LDLCX_bo_bso
    34612U,	// LDMST_abs
    107047821U,	// LDMST_bo_bso
    107113357U,	// LDMST_bo_c
    107178893U,	// LDMST_bo_pos
    107047403U,	// LDMST_bo_pre
    7760781U,	// LDMST_bo_r
    358693U,	// LDUCX_abs
    5315546U,	// LDUCX_bo_bso
    13635636U,	// LD_A_abs
    182915124U,	// LD_A_bo_bso
    16191540U,	// LD_A_bo_c
    185012276U,	// LD_A_bo_pos
    528436U,	// LD_A_bo_pre
    18288692U,	// LD_A_bo_r
    216469556U,	// LD_A_bol
    250023988U,	// LD_A_sc
    48697396U,	// LD_A_slr
    50794548U,	// LD_A_slr_post
    50794548U,	// LD_A_slr_post_v110
    48697396U,	// LD_A_slr_v110
    283578420U,	// LD_A_slro
    283578420U,	// LD_A_slro_v110
    283578420U,	// LD_A_sro
    283578420U,	// LD_A_sro_v110
    13637671U,	// LD_BU_abs
    182917159U,	// LD_BU_bo_bso
    16193575U,	// LD_BU_bo_c
    185014311U,	// LD_BU_bo_pos
    530471U,	// LD_BU_bo_pre
    18290727U,	// LD_BU_bo_r
    216471591U,	// LD_BU_bol
    48699431U,	// LD_BU_slr
    50796583U,	// LD_BU_slr_post
    50796583U,	// LD_BU_slr_post_v110
    48699431U,	// LD_BU_slr_v110
    283580455U,	// LD_BU_slro
    283580455U,	// LD_BU_slro_v110
    283580455U,	// LD_BU_sro
    283580455U,	// LD_BU_sro_v110
    13635870U,	// LD_B_abs
    182915358U,	// LD_B_bo_bso
    16191774U,	// LD_B_bo_c
    185012510U,	// LD_B_bo_pos
    528670U,	// LD_B_bo_pre
    18288926U,	// LD_B_bo_r
    216469790U,	// LD_B_bol
    50794782U,	// LD_B_slr_post_v110
    48697630U,	// LD_B_slr_v110
    283578654U,	// LD_B_slro_v110
    283578654U,	// LD_B_sro_v110
    13635794U,	// LD_DA_abs
    182915282U,	// LD_DA_bo_bso
    16191698U,	// LD_DA_bo_c
    185012434U,	// LD_DA_bo_pos
    528594U,	// LD_DA_bo_pre
    18288850U,	// LD_DA_bo_r
    13636043U,	// LD_D_abs
    182915531U,	// LD_D_bo_bso
    16191947U,	// LD_D_bo_c
    185012683U,	// LD_D_bo_pos
    528843U,	// LD_D_bo_pre
    18289099U,	// LD_D_bo_r
    13637738U,	// LD_HU_abs
    182917226U,	// LD_HU_bo_bso
    16193642U,	// LD_HU_bo_c
    185014378U,	// LD_HU_bo_pos
    530538U,	// LD_HU_bo_pre
    18290794U,	// LD_HU_bo_r
    216471658U,	// LD_HU_bol
    13636291U,	// LD_H_abs
    182915779U,	// LD_H_bo_bso
    16192195U,	// LD_H_bo_c
    185012931U,	// LD_H_bo_pos
    529091U,	// LD_H_bo_pre
    18289347U,	// LD_H_bo_r
    216470211U,	// LD_H_bol
    48698051U,	// LD_H_slr
    50795203U,	// LD_H_slr_post
    50795203U,	// LD_H_slr_post_v110
    48698051U,	// LD_H_slr_v110
    283579075U,	// LD_H_slro
    283579075U,	// LD_H_slro_v110
    283579075U,	// LD_H_sro
    283579075U,	// LD_H_sro_v110
    13636922U,	// LD_Q_abs
    182916410U,	// LD_Q_bo_bso
    16192826U,	// LD_Q_bo_c
    185013562U,	// LD_Q_bo_pos
    529722U,	// LD_Q_bo_pre
    18289978U,	// LD_Q_bo_r
    13637846U,	// LD_W_abs
    182917334U,	// LD_W_bo_bso
    16193750U,	// LD_W_bo_c
    185014486U,	// LD_W_bo_pos
    530646U,	// LD_W_bo_pre
    18290902U,	// LD_W_bo_r
    216471766U,	// LD_W_bol
    250026198U,	// LD_W_sc
    48699606U,	// LD_W_slr
    50796758U,	// LD_W_slr_post
    50796758U,	// LD_W_slr_post_v110
    48699606U,	// LD_W_slr_v110
    283580630U,	// LD_W_slro
    283580630U,	// LD_W_slro_v110
    283580630U,	// LD_W_sro
    283580630U,	// LD_W_sro_v110
    13635808U,	// LEA_abs
    182915296U,	// LEA_bo_bso
    216469728U,	// LEA_bol
    13635813U,	// LHA_abs
    39091U,	// LOOPU_brr
    11539748U,	// LOOP_brr
    18879780U,	// LOOP_sbr
    4244U,	// LT_A_rr
    4490U,	// LT_B
    6235U,	// LT_BU
    5135U,	// LT_H
    6302U,	// LT_HU
    536877040U,	// LT_U_rc
    6128U,	// LT_U_rr
    2684360688U,	// LT_U_srcv110
    6128U,	// LT_U_srrv110
    6388U,	// LT_W
    6330U,	// LT_WU
    536876815U,	// LT_rc
    5903U,	// LT_rr
    3758102287U,	// LT_src
    5903U,	// LT_srr
    607130528U,	// MADDMS_H_rrr1_LL
    607130528U,	// MADDMS_H_rrr1_LU
    607130528U,	// MADDMS_H_rrr1_UL
    607130528U,	// MADDMS_H_rrr1_UU
    2148538328U,	// MADDMS_U_rcr_v110
    607131608U,	// MADDMS_U_rrr2_v110
    2148537883U,	// MADDMS_rcr_v110
    607131163U,	// MADDMS_rrr2_v110
    607130356U,	// MADDM_H_rrr1_LL
    607130356U,	// MADDM_H_rrr1_LU
    607130356U,	// MADDM_H_rrr1_UL
    607130356U,	// MADDM_H_rrr1_UU
    607130356U,	// MADDM_H_rrr1_v110
    607130960U,	// MADDM_Q_rrr1_v110
    2148538239U,	// MADDM_U_rcr_v110
    607131519U,	// MADDM_U_rrr2_v110
    2148537534U,	// MADDM_rcr_v110
    607130814U,	// MADDM_rrr2_v110
    607130581U,	// MADDRS_H_rrr1_LL
    607130581U,	// MADDRS_H_rrr1_LU
    607130581U,	// MADDRS_H_rrr1_UL
    607130581U,	// MADDRS_H_rrr1_UL_2
    607130581U,	// MADDRS_H_rrr1_UU
    607130581U,	// MADDRS_H_rrr1_v110
    3291485583U,	// MADDRS_Q_rrr1_L_L
    3828356495U,	// MADDRS_Q_rrr1_U_U
    607131023U,	// MADDRS_Q_rrr1_v110
    607130424U,	// MADDR_H_rrr1_LL
    607130424U,	// MADDR_H_rrr1_LU
    607130424U,	// MADDR_H_rrr1_UL
    607130424U,	// MADDR_H_rrr1_UL_2
    607130424U,	// MADDR_H_rrr1_UU
    607130424U,	// MADDR_H_rrr1_v110
    3291485538U,	// MADDR_Q_rrr1_L_L
    3828356450U,	// MADDR_Q_rrr1_U_U
    607130978U,	// MADDR_Q_rrr1_v110
    607130547U,	// MADDSUMS_H_rrr1_LL
    607130547U,	// MADDSUMS_H_rrr1_LU
    607130547U,	// MADDSUMS_H_rrr1_UL
    607130547U,	// MADDSUMS_H_rrr1_UU
    607130373U,	// MADDSUM_H_rrr1_LL
    607130373U,	// MADDSUM_H_rrr1_LU
    607130373U,	// MADDSUM_H_rrr1_UL
    607130373U,	// MADDSUM_H_rrr1_UU
    607130591U,	// MADDSURS_H_rrr1_LL
    607130591U,	// MADDSURS_H_rrr1_LU
    607130591U,	// MADDSURS_H_rrr1_UL
    607130591U,	// MADDSURS_H_rrr1_UU
    607130441U,	// MADDSUR_H_rrr1_LL
    607130441U,	// MADDSUR_H_rrr1_LU
    607130441U,	// MADDSUR_H_rrr1_UL
    607130441U,	// MADDSUR_H_rrr1_UU
    607130611U,	// MADDSUS_H_rrr1_LL
    607130611U,	// MADDSUS_H_rrr1_LU
    607130611U,	// MADDSUS_H_rrr1_UL
    607130611U,	// MADDSUS_H_rrr1_UU
    607130651U,	// MADDSU_H_rrr1_LL
    607130651U,	// MADDSU_H_rrr1_LU
    607130651U,	// MADDSU_H_rrr1_UL
    607130651U,	// MADDSU_H_rrr1_UU
    607130479U,	// MADDS_H_rrr1_LL
    607130479U,	// MADDS_H_rrr1_LU
    607130479U,	// MADDS_H_rrr1_UL
    607130479U,	// MADDS_H_rrr1_UU
    607130479U,	// MADDS_H_rrr1_v110
    607131004U,	// MADDS_Q_rrr1
    607131004U,	// MADDS_Q_rrr1_L
    3291485564U,	// MADDS_Q_rrr1_L_L
    607131004U,	// MADDS_Q_rrr1_U
    607131004U,	// MADDS_Q_rrr1_UU2_v110
    3828356476U,	// MADDS_Q_rrr1_U_U
    607131004U,	// MADDS_Q_rrr1_e
    607131004U,	// MADDS_Q_rrr1_e_L
    3291485564U,	// MADDS_Q_rrr1_e_L_L
    607131004U,	// MADDS_Q_rrr1_e_U
    3828356476U,	// MADDS_Q_rrr1_e_U_U
    2148538301U,	// MADDS_U_rcr
    2148538301U,	// MADDS_U_rcr_e
    607131581U,	// MADDS_U_rrr2
    607131581U,	// MADDS_U_rrr2_e
    2148537848U,	// MADDS_rcr
    2148537848U,	// MADDS_rcr_e
    607131128U,	// MADDS_rrr2
    607131128U,	// MADDS_rrr2_e
    607130201U,	// MADD_F_rrr
    607130299U,	// MADD_H_rrr1_LL
    607130299U,	// MADD_H_rrr1_LU
    607130299U,	// MADD_H_rrr1_UL
    607130299U,	// MADD_H_rrr1_UU
    607130299U,	// MADD_H_rrr1_v110
    607130930U,	// MADD_Q_rrr1
    607130930U,	// MADD_Q_rrr1_L
    3291485490U,	// MADD_Q_rrr1_L_L
    607130930U,	// MADD_Q_rrr1_U
    607130930U,	// MADD_Q_rrr1_UU2_v110
    3828356402U,	// MADD_Q_rrr1_U_U
    607130930U,	// MADD_Q_rrr1_e
    607130930U,	// MADD_Q_rrr1_e_L
    3291485490U,	// MADD_Q_rrr1_e_L_L
    607130930U,	// MADD_Q_rrr1_e_U
    3828356402U,	// MADD_Q_rrr1_e_U_U
    2148538179U,	// MADD_U_rcr
    607131459U,	// MADD_U_rrr2
    2148536804U,	// MADD_rcr
    2148536804U,	// MADD_rcr_e
    607130084U,	// MADD_rrr2
    607130084U,	// MADD_rrr2_e
    4502U,	// MAX_B
    6242U,	// MAX_BU
    5157U,	// MAX_H
    6309U,	// MAX_HU
    536877088U,	// MAX_U_rc
    6176U,	// MAX_U_rr
    536877324U,	// MAX_rc
    6412U,	// MAX_rr
    19928507U,	// MFCR_rlc
    4404U,	// MIN_B
    6190U,	// MIN_BU
    4880U,	// MIN_H
    6257U,	// MIN_HU
    536876946U,	// MIN_U_rc
    6034U,	// MIN_U_rr
    536876263U,	// MIN_rc
    5351U,	// MIN_rr
    19927132U,	// MOVH_A_rlc
    19928135U,	// MOVH_rlc
    331970U,	// MOVZ_A_sr
    34607306U,	// MOV_AA_rr
    33558730U,	// MOV_AA_srr_srr
    33558730U,	// MOV_AA_srr_srr_v110
    34607264U,	// MOV_A_rr
    44044448U,	// MOV_A_src
    33558688U,	// MOV_A_srr
    33558688U,	// MOV_A_srr_v110
    34607575U,	// MOV_D_rr
    33558999U,	// MOV_D_srr_srr
    33558999U,	// MOV_D_srr_srr_v110
    19929111U,	// MOV_U_rlc
    20977863U,	// MOV_rlc
    19929287U,	// MOV_rlc_e
    34609351U,	// MOV_rr
    34609351U,	// MOV_rr_e
    6343U,	// MOV_rr_eab
    37755079U,	// MOV_sc
    37755079U,	// MOV_sc_v110
    35657927U,	// MOV_src
    35657927U,	// MOV_src_e
    33560775U,	// MOV_srr
    607130516U,	// MSUBADMS_H_rrr1_LL
    607130516U,	// MSUBADMS_H_rrr1_LU
    607130516U,	// MSUBADMS_H_rrr1_UL
    607130516U,	// MSUBADMS_H_rrr1_UU
    607130345U,	// MSUBADM_H_rrr1_LL
    607130345U,	// MSUBADM_H_rrr1_LU
    607130345U,	// MSUBADM_H_rrr1_UL
    607130345U,	// MSUBADM_H_rrr1_UU
    607130569U,	// MSUBADRS_H_rrr1_LL
    607130569U,	// MSUBADRS_H_rrr1_LU
    607130569U,	// MSUBADRS_H_rrr1_UL
    607130569U,	// MSUBADRS_H_rrr1_UU
    607130569U,	// MSUBADRS_H_rrr1_v110
    607130413U,	// MSUBADR_H_rrr1_LL
    607130413U,	// MSUBADR_H_rrr1_LU
    607130413U,	// MSUBADR_H_rrr1_UL
    607130413U,	// MSUBADR_H_rrr1_UU
    607130413U,	// MSUBADR_H_rrr1_v110
    607130468U,	// MSUBADS_H_rrr1_LL
    607130468U,	// MSUBADS_H_rrr1_LU
    607130468U,	// MSUBADS_H_rrr1_UL
    607130468U,	// MSUBADS_H_rrr1_UU
    607130289U,	// MSUBAD_H_rrr1_LL
    607130289U,	// MSUBAD_H_rrr1_LU
    607130289U,	// MSUBAD_H_rrr1_UL
    607130289U,	// MSUBAD_H_rrr1_UU
    607130506U,	// MSUBMS_H_rrr1_LL
    607130506U,	// MSUBMS_H_rrr1_LU
    607130506U,	// MSUBMS_H_rrr1_UL
    607130506U,	// MSUBMS_H_rrr1_UU
    2148538318U,	// MSUBMS_U_rcrv110
    607131598U,	// MSUBMS_U_rrr2v110
    2148537875U,	// MSUBMS_rcrv110
    607131155U,	// MSUBMS_rrr2v110
    607130336U,	// MSUBM_H_rrr1_LL
    607130336U,	// MSUBM_H_rrr1_LU
    607130336U,	// MSUBM_H_rrr1_UL
    607130336U,	// MSUBM_H_rrr1_UU
    607130336U,	// MSUBM_H_rrr1_v110
    607130951U,	// MSUBM_Q_rrr1_v110
    2148538230U,	// MSUBM_U_rcrv110
    607131510U,	// MSUBM_U_rrr2v110
    2148537527U,	// MSUBM_rcrv110
    607130807U,	// MSUBM_rrr2v110
    607130559U,	// MSUBRS_H_rrr1_LL
    607130559U,	// MSUBRS_H_rrr1_LU
    607130559U,	// MSUBRS_H_rrr1_UL
    607130559U,	// MSUBRS_H_rrr1_UL_2
    607130559U,	// MSUBRS_H_rrr1_UU
    607130559U,	// MSUBRS_H_rrr1_v110
    3291485573U,	// MSUBRS_Q_rrr1_L_L
    3828356485U,	// MSUBRS_Q_rrr1_U_U
    607131013U,	// MSUBRS_Q_rrr1_v110
    607130404U,	// MSUBR_H_rrr1_LL
    607130404U,	// MSUBR_H_rrr1_LU
    607130404U,	// MSUBR_H_rrr1_UL
    607130404U,	// MSUBR_H_rrr1_UL_2
    607130404U,	// MSUBR_H_rrr1_UU
    607130404U,	// MSUBR_H_rrr1_v110
    3291485529U,	// MSUBR_Q_rrr1_L_L
    3828356441U,	// MSUBR_Q_rrr1_U_U
    607130969U,	// MSUBR_Q_rrr1_v110
    607130459U,	// MSUBS_H_rrr1_LL
    607130459U,	// MSUBS_H_rrr1_LU
    607130459U,	// MSUBS_H_rrr1_UL
    607130459U,	// MSUBS_H_rrr1_UU
    607130459U,	// MSUBS_H_rrr1_v110
    607130995U,	// MSUBS_Q_rrr1
    607130995U,	// MSUBS_Q_rrr1_L
    3291485555U,	// MSUBS_Q_rrr1_L_L
    607130995U,	// MSUBS_Q_rrr1_U
    607130995U,	// MSUBS_Q_rrr1_UU2_v110
    3828356467U,	// MSUBS_Q_rrr1_U_U
    607130995U,	// MSUBS_Q_rrr1_e
    607130995U,	// MSUBS_Q_rrr1_e_L
    3291485555U,	// MSUBS_Q_rrr1_e_L_L
    607130995U,	// MSUBS_Q_rrr1_e_U
    3828356467U,	// MSUBS_Q_rrr1_e_U_U
    2148538283U,	// MSUBS_U_rcr
    2148538283U,	// MSUBS_U_rcr_e
    607131563U,	// MSUBS_U_rrr2
    607131563U,	// MSUBS_U_rrr2_e
    2148537834U,	// MSUBS_rcr
    2148537834U,	// MSUBS_rcr_e
    607131114U,	// MSUBS_rrr2
    607131114U,	// MSUBS_rrr2_e
    607130193U,	// MSUB_F_rrr
    607130281U,	// MSUB_H_rrr1_LL
    607130281U,	// MSUB_H_rrr1_LU
    607130281U,	// MSUB_H_rrr1_UL
    607130281U,	// MSUB_H_rrr1_UU
    607130281U,	// MSUB_H_rrr1_v110
    607130922U,	// MSUB_Q_rrr1
    607130922U,	// MSUB_Q_rrr1_L
    3291485482U,	// MSUB_Q_rrr1_L_L
    607130922U,	// MSUB_Q_rrr1_U
    607130922U,	// MSUB_Q_rrr1_UU2_v110
    3828356394U,	// MSUB_Q_rrr1_U_U
    607130922U,	// MSUB_Q_rrr1_e
    607130922U,	// MSUB_Q_rrr1_e_L
    3291485482U,	// MSUB_Q_rrr1_e_L_L
    607130922U,	// MSUB_Q_rrr1_e_U
    3828356394U,	// MSUB_Q_rrr1_e_U_U
    2148538171U,	// MSUB_U_rcr
    607131451U,	// MSUB_U_rrr2
    2148536755U,	// MSUB_rcr
    2148536755U,	// MSUB_rcr_e
    607130035U,	// MSUB_rrr2
    607130035U,	// MSUB_rrr2_e
    42433U,	// MTCR_rlc
    5034U,	// MULMS_H_rr1_LL2e
    5034U,	// MULMS_H_rr1_LU2e
    5034U,	// MULMS_H_rr1_UL2e
    5034U,	// MULMS_H_rr1_UU2e
    4861U,	// MULM_H_rr1_LL2e
    4861U,	// MULM_H_rr1_LU2e
    4861U,	// MULM_H_rr1_UL2e
    4861U,	// MULM_H_rr1_UU2e
    536876936U,	// MULM_U_rc
    6024U,	// MULM_U_rr
    536876229U,	// MULM_rc
    5317U,	// MULM_rr
    4929U,	// MULR_H_rr1_LL2e
    4929U,	// MULR_H_rr1_LU2e
    4929U,	// MULR_H_rr1_UL2e
    4929U,	// MULR_H_rr1_UU2e
    4929U,	// MULR_H_rr_v110
    301995371U,	// MULR_Q_rr1_2LL
    335549803U,	// MULR_Q_rr1_2UU
    5483U,	// MULR_Q_rr_v110
    536876998U,	// MULS_U_rc
    6086U,	// MULS_U_rr2
    6086U,	// MULS_U_rr_v110
    536876557U,	// MULS_rc
    5645U,	// MULS_rr2
    5645U,	// MULS_rr_v110
    4714U,	// MUL_F_rrr
    4825U,	// MUL_H_rr1_LL2e
    4825U,	// MUL_H_rr1_LU2e
    4825U,	// MUL_H_rr1_UL2e
    4825U,	// MUL_H_rr1_UU2e
    4825U,	// MUL_H_rr_v110
    5440U,	// MUL_Q_rr1_2
    301995328U,	// MUL_Q_rr1_2LL
    335549760U,	// MUL_Q_rr1_2UU
    5440U,	// MUL_Q_rr1_2_L
    5440U,	// MUL_Q_rr1_2_Le
    5440U,	// MUL_Q_rr1_2_U
    5440U,	// MUL_Q_rr1_2_Ue
    5440U,	// MUL_Q_rr1_2__e
    5440U,	// MUL_Q_rr_v110
    536876911U,	// MUL_U_rc
    5999U,	// MUL_U_rr2
    536876210U,	// MUL_rc
    536876210U,	// MUL_rc_e
    5298U,	// MUL_rr2
    5298U,	// MUL_rr2_e
    5298U,	// MUL_rr_v110
    33559730U,	// MUL_srr
    5707U,	// NAND_T
    536875504U,	// NAND_rc
    4592U,	// NAND_rr
    33558695U,	// NEZ_A
    4173U,	// NE_A
    536875568U,	// NE_rc
    4656U,	// NE_rr
    3127U,	// NOP_sr
    3127U,	// NOP_sys
    5799U,	// NOR_T
    536876488U,	// NOR_rc
    5576U,	// NOR_rr
    333256U,	// NOR_sr
    333256U,	// NOR_sr_v110
    333607U,	// NOT_sr_v162
    5752U,	// ORN_T
    536876274U,	// ORN_rc
    5362U,	// ORN_rr
    5738U,	// OR_ANDN_T
    5694U,	// OR_AND_T
    536876463U,	// OR_EQ_rc
    5551U,	// OR_EQ_rr
    536876895U,	// OR_GE_U_rc
    5983U,	// OR_GE_U_rr
    536875526U,	// OR_GE_rc
    4614U,	// OR_GE_rr
    536877056U,	// OR_LT_U_rc
    6144U,	// OR_LT_U_rr
    536876827U,	// OR_LT_rc
    5915U,	// OR_LT_rr
    536875580U,	// OR_NE_rc
    4668U,	// OR_NE_rr
    5816U,	// OR_NOR_T
    5786U,	// OR_OR_T
    5771U,	// OR_T
    5577U,	// OR_rc
    5577U,	// OR_rr
    37754313U,	// OR_sc
    37754313U,	// OR_sc_v110
    33560009U,	// OR_srr
    33560009U,	// OR_srr_v110
    3291485317U,	// PACK_rrr
    33560889U,	// PARITY_rr
    33560889U,	// PARITY_rr_v110
    33560826U,	// POPCNT_W_rr
    4743U,	// Q31TOF_rr
    33559137U,	// QSEED_F_rr
    332360U,	// RESTORE_sys
    3132U,	// RET_sr
    3132U,	// RET_sys
    3132U,	// RET_sys_v110
    3084U,	// RFE_sr
    3084U,	// RFE_sys_sys
    3084U,	// RFE_sys_sys_v110
    3123U,	// RFM_sys
    3159U,	// RSLCX_sys
    3154U,	// RSTV_sys
    536876980U,	// RSUBS_U_rc
    536876529U,	// RSUBS_rc
    536875449U,	// RSUB_rc
    332217U,	// RSUB_sr_sr
    332217U,	// RSUB_sr_sr_v110
    33560648U,	// SAT_BU_rr
    333896U,	// SAT_BU_sr
    333896U,	// SAT_BU_sr_v110
    33558905U,	// SAT_B_rr
    332153U,	// SAT_B_sr
    332153U,	// SAT_B_sr_v110
    33560715U,	// SAT_HU_rr
    333963U,	// SAT_HU_sr
    333963U,	// SAT_HU_sr_v110
    33559550U,	// SAT_H_rr
    332798U,	// SAT_H_sr
    332798U,	// SAT_H_sr_v110
    2148536445U,	// SELN_A_rcr_v110
    607129725U,	// SELN_A_rrr_v110
    2148537580U,	// SELN_rcr
    607130860U,	// SELN_rrr
    2148536420U,	// SEL_A_rcr_v110
    607129700U,	// SEL_A_rrr_v110
    2148537490U,	// SEL_rcr
    607130770U,	// SEL_rrr
    536876511U,	// SHAS_rc
    5599U,	// SHAS_rr
    536875273U,	// SHA_B_rc
    4361U,	// SHA_B_rr
    536875682U,	// SHA_H_rc
    4770U,	// SHA_H_rr
    536875242U,	// SHA_rc
    4330U,	// SHA_rr
    35655914U,	// SHA_src
    35655914U,	// SHA_src_v110
    536875555U,	// SHUFFLE_rc
    5727U,	// SH_ANDN_T
    5684U,	// SH_AND_T
    536875310U,	// SH_B_rc
    4398U,	// SH_B_rr
    536876455U,	// SH_EQ_rc
    5543U,	// SH_EQ_rr
    536876885U,	// SH_GE_U_rc
    5973U,	// SH_GE_U_rr
    536875518U,	// SH_GE_rc
    4606U,	// SH_GE_rr
    536875731U,	// SH_H_rc
    4819U,	// SH_H_rr
    536877046U,	// SH_LT_U_rc
    6134U,	// SH_LT_U_rr
    536876819U,	// SH_LT_rc
    5907U,	// SH_LT_rr
    5704U,	// SH_NAND_T
    536875572U,	// SH_NE_rc
    4660U,	// SH_NE_rr
    5806U,	// SH_NOR_T
    5749U,	// SH_ORN_T
    5777U,	// SH_OR_T
    5826U,	// SH_XNOR_T
    5837U,	// SH_XOR_T
    536876099U,	// SH_rc
    5187U,	// SH_rr
    35656771U,	// SH_src
    35656771U,	// SH_src_v110
    358686U,	// STLCX_abs
    5315538U,	// STLCX_bo_bso
    358700U,	// STUCX_abs
    5315554U,	// STUCX_bo_bso
    32922U,	// ST_A_abs
    107047732U,	// ST_A_bo_bso
    3294763828U,	// ST_A_bo_c
    107178804U,	// ST_A_bo_pos
    107047304U,	// ST_A_bo_pre
    33954612U,	// ST_A_bo_r
    22092596U,	// ST_A_bol
    4266804U,	// ST_A_sc
    10558260U,	// ST_A_sro
    10558260U,	// ST_A_sro_v110
    596788U,	// ST_A_ssr
    662324U,	// ST_A_ssr_pos
    662324U,	// ST_A_ssr_pos_v110
    596788U,	// ST_A_ssr_v110
    23141172U,	// ST_A_ssro
    23141172U,	// ST_A_ssro_v110
    33168U,	// ST_B_abs
    107047747U,	// ST_B_bo_bso
    3294763843U,	// ST_B_bo_c
    107178819U,	// ST_B_bo_pos
    107047321U,	// ST_B_bo_pre
    33954627U,	// ST_B_bo_r
    22092611U,	// ST_B_bol
    10558275U,	// ST_B_sro
    10558275U,	// ST_B_sro_v110
    596803U,	// ST_B_ssr
    662339U,	// ST_B_ssr_pos
    662339U,	// ST_B_ssr_pos_v110
    596803U,	// ST_B_ssr_v110
    23141187U,	// ST_B_ssro
    23141187U,	// ST_B_ssro_v110
    32985U,	// ST_DA_abs
    107047739U,	// ST_DA_bo_bso
    3294763835U,	// ST_DA_bo_c
    107178811U,	// ST_DA_bo_pos
    107047312U,	// ST_DA_bo_pre
    33954619U,	// ST_DA_bo_r
    33233U,	// ST_D_abs
    107047754U,	// ST_D_bo_bso
    3294763850U,	// ST_D_bo_c
    107178826U,	// ST_D_bo_pos
    107047329U,	// ST_D_bo_pre
    33954634U,	// ST_D_bo_r
    33813U,	// ST_H_abs
    107047761U,	// ST_H_bo_bso
    3294763857U,	// ST_H_bo_c
    107178833U,	// ST_H_bo_pos
    107047337U,	// ST_H_bo_pre
    33954641U,	// ST_H_bo_r
    22092625U,	// ST_H_bol
    10558289U,	// ST_H_sro
    10558289U,	// ST_H_sro_v110
    596817U,	// ST_H_ssr
    662353U,	// ST_H_ssr_pos
    662353U,	// ST_H_ssr_pos_v110
    596817U,	// ST_H_ssr_v110
    23141201U,	// ST_H_ssro
    23141201U,	// ST_H_ssro_v110
    34201U,	// ST_Q_abs
    107047814U,	// ST_Q_bo_bso
    3294763910U,	// ST_Q_bo_c
    107178886U,	// ST_Q_bo_pos
    107047395U,	// ST_Q_bo_pre
    33954694U,	// ST_Q_bo_r
    30430U,	// ST_T
    35076U,	// ST_W_abs
    107047875U,	// ST_W_bo_bso
    3294763971U,	// ST_W_bo_c
    107178947U,	// ST_W_bo_pos
    107047462U,	// ST_W_bo_pre
    33954755U,	// ST_W_bo_r
    22092739U,	// ST_W_bol
    4266947U,	// ST_W_sc
    10558403U,	// ST_W_sro
    10558403U,	// ST_W_sro_v110
    596931U,	// ST_W_ssr
    662467U,	// ST_W_ssr_pos
    662467U,	// ST_W_ssr_pos_v110
    596931U,	// ST_W_ssr_v110
    23141315U,	// ST_W_ssro
    23141315U,	// ST_W_ssro_v110
    4543U,	// SUBC_rr
    4113U,	// SUBSC_A_rr
    6198U,	// SUBS_BU_rr
    4431U,	// SUBS_B_rr
    6265U,	// SUBS_HU_rr
    4956U,	// SUBS_H_rr
    6060U,	// SUBS_U_rr
    5611U,	// SUBS_rr
    33560043U,	// SUBS_srr
    6417U,	// SUBX_rr
    4106U,	// SUB_A_rr
    37752842U,	// SUB_A_sc
    37752842U,	// SUB_A_sc_v110
    4368U,	// SUB_B_rr
    3291484754U,	// SUB_F_rrr
    4778U,	// SUB_H_rr
    4526U,	// SUB_rr
    33558958U,	// SUB_srr
    4526U,	// SUB_srr_15a
    4526U,	// SUB_srr_a15
    3165U,	// SVLCX_sys
    107047851U,	// SWAPMSK_W_bo_bso
    3294763947U,	// SWAPMSK_W_bo_c
    748459U,	// SWAPMSK_W_bo_i
    107178923U,	// SWAPMSK_W_bo_pos
    107047436U,	// SWAPMSK_W_bo_pre
    33954731U,	// SWAPMSK_W_bo_r
    32901U,	// SWAP_A_abs
    107047723U,	// SWAP_A_bo_bso
    3294763819U,	// SWAP_A_bo_c
    107178795U,	// SWAP_A_bo_pos
    107047294U,	// SWAP_A_bo_pre
    33954603U,	// SWAP_A_bo_r
    35046U,	// SWAP_W_abs
    107047866U,	// SWAP_W_bo_bso
    3294763962U,	// SWAP_W_bo_c
    748474U,	// SWAP_W_bo_i
    107178938U,	// SWAP_W_bo_pos
    107047452U,	// SWAP_W_bo_pre
    33954746U,	// SWAP_W_bo_r
    9385U,	// SYSCALL_rc
    333067U,	// TLBDEMAP_rr
    3050U,	// TLBFLUSH_A_rr
    3061U,	// TLBFLUSH_B_rr
    333059U,	// TLBMAP_rr
    331834U,	// TLBPROBE_A_rr
    332877U,	// TLBPROBE_I_rr
    3147U,	// TRAPSV_sys
    3141U,	// TRAPV_sys
    33559683U,	// UNPACK_rr_rr
    33559683U,	// UNPACK_rr_rr_v110
    332951U,	// UPDFL_rr
    33559196U,	// UTOF_rr
    3136U,	// WAIT_sys
    5829U,	// XNOR_T
    536876487U,	// XNOR_rc
    5575U,	// XNOR_rr
    536876462U,	// XOR_EQ_rc
    5550U,	// XOR_EQ_rr
    536876894U,	// XOR_GE_U_rc
    5982U,	// XOR_GE_U_rr
    536875525U,	// XOR_GE_rc
    4613U,	// XOR_GE_rr
    536877055U,	// XOR_LT_U_rc
    6143U,	// XOR_LT_U_rr
    536876826U,	// XOR_LT_rc
    5914U,	// XOR_LT_rr
    536875579U,	// XOR_NE_rc
    4667U,	// XOR_NE_rr
    5840U,	// XOR_T
    536876493U,	// XOR_rc
    5581U,	// XOR_rr
    33560013U,	// XOR_srr
  };

  static const uint16_t OpInfo1[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// INLINEASM_BR
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// ANNOTATION_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    0U,	// DBG_VALUE
    0U,	// DBG_VALUE_LIST
    0U,	// DBG_INSTR_REF
    0U,	// DBG_PHI
    0U,	// DBG_LABEL
    0U,	// REG_SEQUENCE
    0U,	// COPY
    0U,	// BUNDLE
    0U,	// LIFETIME_START
    0U,	// LIFETIME_END
    0U,	// PSEUDO_PROBE
    0U,	// ARITH_FENCE
    0U,	// STACKMAP
    0U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// PREALLOCATED_SETUP
    0U,	// PREALLOCATED_ARG
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    0U,	// PATCHABLE_FUNCTION_ENTER
    0U,	// PATCHABLE_RET
    0U,	// PATCHABLE_FUNCTION_EXIT
    0U,	// PATCHABLE_TAIL_CALL
    0U,	// PATCHABLE_EVENT_CALL
    0U,	// PATCHABLE_TYPED_EVENT_CALL
    0U,	// ICALL_BRANCH_FUNNEL
    0U,	// MEMBARRIER
    0U,	// JUMP_TABLE_DEBUG_INFO
    0U,	// G_ASSERT_SEXT
    0U,	// G_ASSERT_ZEXT
    0U,	// G_ASSERT_ALIGN
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_SDIVREM
    0U,	// G_UDIVREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_IMPLICIT_DEF
    0U,	// G_PHI
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_CONSTANT_POOL
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_MERGE_VALUES
    0U,	// G_BUILD_VECTOR
    0U,	// G_BUILD_VECTOR_TRUNC
    0U,	// G_CONCAT_VECTORS
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_FREEZE
    0U,	// G_CONSTANT_FOLD_BARRIER
    0U,	// G_INTRINSIC_FPTRUNC_ROUND
    0U,	// G_INTRINSIC_TRUNC
    0U,	// G_INTRINSIC_ROUND
    0U,	// G_INTRINSIC_LRINT
    0U,	// G_INTRINSIC_ROUNDEVEN
    0U,	// G_READCYCLECOUNTER
    0U,	// G_LOAD
    0U,	// G_SEXTLOAD
    0U,	// G_ZEXTLOAD
    0U,	// G_INDEXED_LOAD
    0U,	// G_INDEXED_SEXTLOAD
    0U,	// G_INDEXED_ZEXTLOAD
    0U,	// G_STORE
    0U,	// G_INDEXED_STORE
    0U,	// G_ATOMIC_CMPXCHG_WITH_SUCCESS
    0U,	// G_ATOMIC_CMPXCHG
    0U,	// G_ATOMICRMW_XCHG
    0U,	// G_ATOMICRMW_ADD
    0U,	// G_ATOMICRMW_SUB
    0U,	// G_ATOMICRMW_AND
    0U,	// G_ATOMICRMW_NAND
    0U,	// G_ATOMICRMW_OR
    0U,	// G_ATOMICRMW_XOR
    0U,	// G_ATOMICRMW_MAX
    0U,	// G_ATOMICRMW_MIN
    0U,	// G_ATOMICRMW_UMAX
    0U,	// G_ATOMICRMW_UMIN
    0U,	// G_ATOMICRMW_FADD
    0U,	// G_ATOMICRMW_FSUB
    0U,	// G_ATOMICRMW_FMAX
    0U,	// G_ATOMICRMW_FMIN
    0U,	// G_ATOMICRMW_UINC_WRAP
    0U,	// G_ATOMICRMW_UDEC_WRAP
    0U,	// G_FENCE
    0U,	// G_PREFETCH
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INVOKE_REGION_START
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_INTRINSIC_CONVERGENT
    0U,	// G_INTRINSIC_CONVERGENT_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_SEXT_INREG
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_FSHL
    0U,	// G_FSHR
    0U,	// G_ROTR
    0U,	// G_ROTL
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDO
    0U,	// G_UADDE
    0U,	// G_USUBO
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SADDE
    0U,	// G_SSUBO
    0U,	// G_SSUBE
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_UADDSAT
    0U,	// G_SADDSAT
    0U,	// G_USUBSAT
    0U,	// G_SSUBSAT
    0U,	// G_USHLSAT
    0U,	// G_SSHLSAT
    0U,	// G_SMULFIX
    0U,	// G_UMULFIX
    0U,	// G_SMULFIXSAT
    0U,	// G_UMULFIXSAT
    0U,	// G_SDIVFIX
    0U,	// G_UDIVFIX
    0U,	// G_SDIVFIXSAT
    0U,	// G_UDIVFIXSAT
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FMA
    0U,	// G_FMAD
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FPOWI
    0U,	// G_FEXP
    0U,	// G_FEXP2
    0U,	// G_FEXP10
    0U,	// G_FLOG
    0U,	// G_FLOG2
    0U,	// G_FLOG10
    0U,	// G_FLDEXP
    0U,	// G_FFREXP
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_FABS
    0U,	// G_FCOPYSIGN
    0U,	// G_IS_FPCLASS
    0U,	// G_FCANONICALIZE
    0U,	// G_FMINNUM
    0U,	// G_FMAXNUM
    0U,	// G_FMINNUM_IEEE
    0U,	// G_FMAXNUM_IEEE
    0U,	// G_FMINIMUM
    0U,	// G_FMAXIMUM
    0U,	// G_GET_FPENV
    0U,	// G_SET_FPENV
    0U,	// G_RESET_FPENV
    0U,	// G_GET_FPMODE
    0U,	// G_SET_FPMODE
    0U,	// G_RESET_FPMODE
    0U,	// G_PTR_ADD
    0U,	// G_PTRMASK
    0U,	// G_SMIN
    0U,	// G_SMAX
    0U,	// G_UMIN
    0U,	// G_UMAX
    0U,	// G_ABS
    0U,	// G_LROUND
    0U,	// G_LLROUND
    0U,	// G_BR
    0U,	// G_BRJT
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// G_SHUFFLE_VECTOR
    0U,	// G_CTTZ
    0U,	// G_CTTZ_ZERO_UNDEF
    0U,	// G_CTLZ
    0U,	// G_CTLZ_ZERO_UNDEF
    0U,	// G_CTPOP
    0U,	// G_BSWAP
    0U,	// G_BITREVERSE
    0U,	// G_FCEIL
    0U,	// G_FCOS
    0U,	// G_FSIN
    0U,	// G_FSQRT
    0U,	// G_FFLOOR
    0U,	// G_FRINT
    0U,	// G_FNEARBYINT
    0U,	// G_ADDRSPACE_CAST
    0U,	// G_BLOCK_ADDR
    0U,	// G_JUMP_TABLE
    0U,	// G_DYN_STACKALLOC
    0U,	// G_STACKSAVE
    0U,	// G_STACKRESTORE
    0U,	// G_STRICT_FADD
    0U,	// G_STRICT_FSUB
    0U,	// G_STRICT_FMUL
    0U,	// G_STRICT_FDIV
    0U,	// G_STRICT_FREM
    0U,	// G_STRICT_FMA
    0U,	// G_STRICT_FSQRT
    0U,	// G_STRICT_FLDEXP
    0U,	// G_READ_REGISTER
    0U,	// G_WRITE_REGISTER
    0U,	// G_MEMCPY
    0U,	// G_MEMCPY_INLINE
    0U,	// G_MEMMOVE
    0U,	// G_MEMSET
    0U,	// G_BZERO
    0U,	// G_VECREDUCE_SEQ_FADD
    0U,	// G_VECREDUCE_SEQ_FMUL
    0U,	// G_VECREDUCE_FADD
    0U,	// G_VECREDUCE_FMUL
    0U,	// G_VECREDUCE_FMAX
    0U,	// G_VECREDUCE_FMIN
    0U,	// G_VECREDUCE_FMAXIMUM
    0U,	// G_VECREDUCE_FMINIMUM
    0U,	// G_VECREDUCE_ADD
    0U,	// G_VECREDUCE_MUL
    0U,	// G_VECREDUCE_AND
    0U,	// G_VECREDUCE_OR
    0U,	// G_VECREDUCE_XOR
    0U,	// G_VECREDUCE_SMAX
    0U,	// G_VECREDUCE_SMIN
    0U,	// G_VECREDUCE_UMAX
    0U,	// G_VECREDUCE_UMIN
    0U,	// G_SBFX
    0U,	// G_UBFX
    0U,	// ABSDIFS_B_rr_v110
    0U,	// ABSDIFS_H_rr
    0U,	// ABSDIFS_rc
    0U,	// ABSDIFS_rr
    0U,	// ABSDIF_B_rr
    0U,	// ABSDIF_H_rr
    0U,	// ABSDIF_rc
    0U,	// ABSDIF_rr
    0U,	// ABSS_B_rr_v110
    0U,	// ABSS_H_rr
    0U,	// ABSS_rr
    0U,	// ABS_B_rr
    0U,	// ABS_H_rr
    0U,	// ABS_rr
    0U,	// ADDC_rc
    0U,	// ADDC_rr
    0U,	// ADDIH_A_rlc
    0U,	// ADDIH_rlc
    0U,	// ADDI_rlc
    0U,	// ADDSC_AT_rr
    0U,	// ADDSC_AT_rr_v110
    4U,	// ADDSC_A_rr
    4U,	// ADDSC_A_rr_v110
    4U,	// ADDSC_A_srrs
    0U,	// ADDSC_A_srrs_v110
    0U,	// ADDS_BU_rr_v110
    0U,	// ADDS_B_rr
    0U,	// ADDS_H
    0U,	// ADDS_HU
    0U,	// ADDS_U
    0U,	// ADDS_U_rc
    0U,	// ADDS_rc
    0U,	// ADDS_rr
    0U,	// ADDS_srr
    0U,	// ADDX_rc
    0U,	// ADDX_rr
    0U,	// ADD_A_rr
    0U,	// ADD_A_src
    0U,	// ADD_A_srr
    0U,	// ADD_B_rr
    0U,	// ADD_F_rrr
    0U,	// ADD_H_rr
    0U,	// ADD_rc
    0U,	// ADD_rr
    0U,	// ADD_src
    0U,	// ADD_src_15a
    0U,	// ADD_src_a15
    0U,	// ADD_srr
    0U,	// ADD_srr_15a
    0U,	// ADD_srr_a15
    1U,	// ANDN_T
    0U,	// ANDN_rc
    0U,	// ANDN_rr
    1U,	// AND_ANDN_T
    1U,	// AND_AND_T
    0U,	// AND_EQ_rc
    0U,	// AND_EQ_rr
    0U,	// AND_GE_U_rc
    0U,	// AND_GE_U_rr
    0U,	// AND_GE_rc
    0U,	// AND_GE_rr
    0U,	// AND_LT_U_rc
    0U,	// AND_LT_U_rr
    0U,	// AND_LT_rc
    0U,	// AND_LT_rr
    0U,	// AND_NE_rc
    0U,	// AND_NE_rr
    1U,	// AND_NOR_T
    1U,	// AND_OR_T
    1U,	// AND_T
    0U,	// AND_rc
    0U,	// AND_rr
    0U,	// AND_sc
    0U,	// AND_sc_v110
    0U,	// AND_srr
    0U,	// AND_srr_v110
    0U,	// BISR_rc
    0U,	// BISR_rc_v161
    0U,	// BISR_sc
    0U,	// BISR_sc_v110
    0U,	// BMERGAE_rr_v110
    0U,	// BMERGE_rr
    0U,	// BSPLIT_rr
    0U,	// BSPLIT_rr_v110
    0U,	// CACHEA_I_bo_bso
    0U,	// CACHEA_I_bo_c
    0U,	// CACHEA_I_bo_pos
    0U,	// CACHEA_I_bo_pre
    0U,	// CACHEA_I_bo_r
    0U,	// CACHEA_WI_bo_bso
    0U,	// CACHEA_WI_bo_c
    0U,	// CACHEA_WI_bo_pos
    0U,	// CACHEA_WI_bo_pre
    0U,	// CACHEA_WI_bo_r
    0U,	// CACHEA_W_bo_bso
    0U,	// CACHEA_W_bo_c
    0U,	// CACHEA_W_bo_pos
    0U,	// CACHEA_W_bo_pre
    0U,	// CACHEA_W_bo_r
    0U,	// CACHEI_I_bo_bso
    0U,	// CACHEI_I_bo_pos
    0U,	// CACHEI_I_bo_pre
    0U,	// CACHEI_WI_bo_bso
    0U,	// CACHEI_WI_bo_pos
    0U,	// CACHEI_WI_bo_pre
    0U,	// CACHEI_W_bo_bso
    0U,	// CACHEI_W_bo_pos
    0U,	// CACHEI_W_bo_pre
    68U,	// CADDN_A_rcr_v110
    137U,	// CADDN_A_rrr_v110
    68U,	// CADDN_rcr
    137U,	// CADDN_rrr
    0U,	// CADDN_src
    0U,	// CADDN_srr_v110
    68U,	// CADD_A_rcr_v110
    137U,	// CADD_A_rrr_v110
    68U,	// CADD_rcr
    137U,	// CADD_rrr
    0U,	// CADD_src
    0U,	// CADD_srr_v110
    0U,	// CALLA_b
    0U,	// CALLI_rr
    0U,	// CALLI_rr_v110
    0U,	// CALL_b
    0U,	// CALL_sb
    0U,	// CLO_B_rr_v110
    0U,	// CLO_H_rr
    0U,	// CLO_rr
    0U,	// CLS_B_rr_v110
    0U,	// CLS_H_rr
    0U,	// CLS_rr
    0U,	// CLZ_B_rr_v110
    0U,	// CLZ_H_rr
    0U,	// CLZ_rr
    0U,	// CMOVN_src
    0U,	// CMOVN_srr
    0U,	// CMOV_src
    0U,	// CMOV_srr
    0U,	// CMPSWAP_W_bo_bso
    0U,	// CMPSWAP_W_bo_c
    0U,	// CMPSWAP_W_bo_pos
    0U,	// CMPSWAP_W_bo_pre
    0U,	// CMPSWAP_W_bo_r
    0U,	// CMP_F_rr
    0U,	// CRC32B_W_rr
    0U,	// CRC32L_W_rr
    0U,	// CRC32_B_rr
    137U,	// CRCN_rrr
    137U,	// CSUBN_A__rrr_v110
    137U,	// CSUBN_rrr
    137U,	// CSUB_A__rrr_v110
    137U,	// CSUB_rrr
    0U,	// DEBUG_sr
    0U,	// DEBUG_sys
    196U,	// DEXTR_rrpw
    196U,	// DEXTR_rrrr
    4U,	// DIFSC_A_rr_v110
    0U,	// DISABLE_sys
    0U,	// DISABLE_sys_1
    0U,	// DIV_F_rr
    0U,	// DIV_U_rr
    0U,	// DIV_rr
    0U,	// DSYNC_sys
    0U,	// DVADJ_rrr
    0U,	// DVADJ_rrr_v110
    0U,	// DVADJ_srr_v110
    0U,	// DVINIT_BU_rr
    0U,	// DVINIT_BU_rr_v110
    0U,	// DVINIT_B_rr
    0U,	// DVINIT_B_rr_v110
    0U,	// DVINIT_HU_rr
    0U,	// DVINIT_HU_rr_v110
    0U,	// DVINIT_H_rr
    0U,	// DVINIT_H_rr_v110
    0U,	// DVINIT_U_rr
    0U,	// DVINIT_U_rr_v110
    0U,	// DVINIT_rr
    0U,	// DVINIT_rr_v110
    0U,	// DVSTEP_U_rrr
    0U,	// DVSTEP_U_rrrv110
    0U,	// DVSTEP_Uv110
    0U,	// DVSTEP_rrr
    0U,	// DVSTEP_rrrv110
    0U,	// DVSTEPv110
    0U,	// ENABLE_sys
    0U,	// EQANY_B_rc
    0U,	// EQANY_B_rr
    0U,	// EQANY_H_rc
    0U,	// EQANY_H_rr
    0U,	// EQZ_A_rr
    0U,	// EQ_A_rr
    0U,	// EQ_B_rr
    0U,	// EQ_H_rr
    0U,	// EQ_W_rr
    0U,	// EQ_rc
    0U,	// EQ_rr
    0U,	// EQ_src
    0U,	// EQ_srr
    13U,	// EXTR_U_rrpw
    0U,	// EXTR_U_rrrr
    13U,	// EXTR_U_rrrw
    13U,	// EXTR_rrpw
    0U,	// EXTR_rrrr
    13U,	// EXTR_rrrw
    0U,	// FCALLA_b
    0U,	// FCALLA_i
    0U,	// FCALL_b
    0U,	// FRET_sr
    0U,	// FRET_sys
    0U,	// FTOHP_rr
    0U,	// FTOIZ_rr
    0U,	// FTOI_rr
    0U,	// FTOQ31Z_rr
    0U,	// FTOQ31_rr
    0U,	// FTOUZ_rr
    0U,	// FTOU_rr
    0U,	// GE_A_rr
    0U,	// GE_U_rc
    0U,	// GE_U_rr
    0U,	// GE_rc
    0U,	// GE_rr
    0U,	// HPTOF_rr
    13U,	// IMASK_rcpw
    13U,	// IMASK_rcrw
    13U,	// IMASK_rrpw
    13U,	// IMASK_rrrw
    1220U,	// INSERT_rcpw
    196U,	// INSERT_rcrr
    2313U,	// INSERT_rcrw
    1220U,	// INSERT_rrpw
    196U,	// INSERT_rrrr
    1220U,	// INSERT_rrrw
    1U,	// INSN_T
    1U,	// INS_T
    0U,	// ISYNC_sys
    0U,	// ITOF_rr
    0U,	// IXMAX_U_rrr
    0U,	// IXMAX_rrr
    0U,	// IXMIN_U_rrr
    0U,	// IXMIN_rrr
    0U,	// JA_b
    1U,	// JEQ_A_brr
    1U,	// JEQ_brc
    1U,	// JEQ_brr
    0U,	// JEQ_sbc1
    0U,	// JEQ_sbc2
    0U,	// JEQ_sbc_v110
    1U,	// JEQ_sbr1
    1U,	// JEQ_sbr2
    1U,	// JEQ_sbr_v110
    0U,	// JGEZ_sbr
    0U,	// JGEZ_sbr_v110
    1U,	// JGE_U_brc
    1U,	// JGE_U_brr
    1U,	// JGE_brc
    1U,	// JGE_brr
    0U,	// JGTZ_sbr
    0U,	// JGTZ_sbr_v110
    0U,	// JI_rr
    0U,	// JI_rr_v110
    0U,	// JI_sbr_v110
    0U,	// JI_sr
    0U,	// JLA_b
    0U,	// JLEZ_sbr
    0U,	// JLEZ_sbr_v110
    0U,	// JLI_rr
    0U,	// JLI_rr_v110
    0U,	// JLTZ_sbr
    0U,	// JLTZ_sbr_v110
    1U,	// JLT_U_brc
    1U,	// JLT_U_brr
    1U,	// JLT_brc
    1U,	// JLT_brr
    0U,	// JL_b
    1U,	// JNED_brc
    1U,	// JNED_brr
    1U,	// JNEI_brc
    1U,	// JNEI_brr
    1U,	// JNE_A_brr
    1U,	// JNE_brc
    1U,	// JNE_brr
    0U,	// JNE_sbc1
    0U,	// JNE_sbc2
    0U,	// JNE_sbc_v110
    1U,	// JNE_sbr1
    1U,	// JNE_sbr2
    1U,	// JNE_sbr_v110
    0U,	// JNZ_A_brr
    0U,	// JNZ_A_sbr
    1U,	// JNZ_T_brn
    1U,	// JNZ_T_sbrn
    1U,	// JNZ_T_sbrn_v110
    0U,	// JNZ_sb
    0U,	// JNZ_sb_v110
    0U,	// JNZ_sbr
    0U,	// JNZ_sbr_v110
    0U,	// JZ_A_brr
    0U,	// JZ_A_sbr
    1U,	// JZ_T_brn
    1U,	// JZ_T_sbrn
    1U,	// JZ_T_sbrn_v110
    0U,	// JZ_sb
    0U,	// JZ_sb_v110
    0U,	// JZ_sbr
    0U,	// JZ_sbr_v110
    0U,	// J_b
    0U,	// J_sb
    0U,	// J_sb_v110
    0U,	// LDLCX_abs
    0U,	// LDLCX_bo_bso
    0U,	// LDMST_abs
    0U,	// LDMST_bo_bso
    0U,	// LDMST_bo_c
    0U,	// LDMST_bo_pos
    0U,	// LDMST_bo_pre
    0U,	// LDMST_bo_r
    0U,	// LDUCX_abs
    0U,	// LDUCX_bo_bso
    0U,	// LD_A_abs
    0U,	// LD_A_bo_bso
    0U,	// LD_A_bo_c
    0U,	// LD_A_bo_pos
    0U,	// LD_A_bo_pre
    0U,	// LD_A_bo_r
    0U,	// LD_A_bol
    0U,	// LD_A_sc
    0U,	// LD_A_slr
    0U,	// LD_A_slr_post
    0U,	// LD_A_slr_post_v110
    0U,	// LD_A_slr_v110
    0U,	// LD_A_slro
    0U,	// LD_A_slro_v110
    0U,	// LD_A_sro
    0U,	// LD_A_sro_v110
    0U,	// LD_BU_abs
    0U,	// LD_BU_bo_bso
    0U,	// LD_BU_bo_c
    0U,	// LD_BU_bo_pos
    0U,	// LD_BU_bo_pre
    0U,	// LD_BU_bo_r
    0U,	// LD_BU_bol
    0U,	// LD_BU_slr
    0U,	// LD_BU_slr_post
    0U,	// LD_BU_slr_post_v110
    0U,	// LD_BU_slr_v110
    0U,	// LD_BU_slro
    0U,	// LD_BU_slro_v110
    0U,	// LD_BU_sro
    0U,	// LD_BU_sro_v110
    0U,	// LD_B_abs
    0U,	// LD_B_bo_bso
    0U,	// LD_B_bo_c
    0U,	// LD_B_bo_pos
    0U,	// LD_B_bo_pre
    0U,	// LD_B_bo_r
    0U,	// LD_B_bol
    0U,	// LD_B_slr_post_v110
    0U,	// LD_B_slr_v110
    0U,	// LD_B_slro_v110
    0U,	// LD_B_sro_v110
    0U,	// LD_DA_abs
    0U,	// LD_DA_bo_bso
    0U,	// LD_DA_bo_c
    0U,	// LD_DA_bo_pos
    0U,	// LD_DA_bo_pre
    0U,	// LD_DA_bo_r
    0U,	// LD_D_abs
    0U,	// LD_D_bo_bso
    0U,	// LD_D_bo_c
    0U,	// LD_D_bo_pos
    0U,	// LD_D_bo_pre
    0U,	// LD_D_bo_r
    0U,	// LD_HU_abs
    0U,	// LD_HU_bo_bso
    0U,	// LD_HU_bo_c
    0U,	// LD_HU_bo_pos
    0U,	// LD_HU_bo_pre
    0U,	// LD_HU_bo_r
    0U,	// LD_HU_bol
    0U,	// LD_H_abs
    0U,	// LD_H_bo_bso
    0U,	// LD_H_bo_c
    0U,	// LD_H_bo_pos
    0U,	// LD_H_bo_pre
    0U,	// LD_H_bo_r
    0U,	// LD_H_bol
    0U,	// LD_H_slr
    0U,	// LD_H_slr_post
    0U,	// LD_H_slr_post_v110
    0U,	// LD_H_slr_v110
    0U,	// LD_H_slro
    0U,	// LD_H_slro_v110
    0U,	// LD_H_sro
    0U,	// LD_H_sro_v110
    0U,	// LD_Q_abs
    0U,	// LD_Q_bo_bso
    0U,	// LD_Q_bo_c
    0U,	// LD_Q_bo_pos
    0U,	// LD_Q_bo_pre
    0U,	// LD_Q_bo_r
    0U,	// LD_W_abs
    0U,	// LD_W_bo_bso
    0U,	// LD_W_bo_c
    0U,	// LD_W_bo_pos
    0U,	// LD_W_bo_pre
    0U,	// LD_W_bo_r
    0U,	// LD_W_bol
    0U,	// LD_W_sc
    0U,	// LD_W_slr
    0U,	// LD_W_slr_post
    0U,	// LD_W_slr_post_v110
    0U,	// LD_W_slr_v110
    0U,	// LD_W_slro
    0U,	// LD_W_slro_v110
    0U,	// LD_W_sro
    0U,	// LD_W_sro_v110
    0U,	// LEA_abs
    0U,	// LEA_bo_bso
    0U,	// LEA_bol
    0U,	// LHA_abs
    0U,	// LOOPU_brr
    0U,	// LOOP_brr
    0U,	// LOOP_sbr
    0U,	// LT_A_rr
    0U,	// LT_B
    0U,	// LT_BU
    0U,	// LT_H
    0U,	// LT_HU
    0U,	// LT_U_rc
    0U,	// LT_U_rr
    1U,	// LT_U_srcv110
    0U,	// LT_U_srrv110
    0U,	// LT_W
    0U,	// LT_WU
    0U,	// LT_rc
    0U,	// LT_rr
    0U,	// LT_src
    0U,	// LT_srr
    329U,	// MADDMS_H_rrr1_LL
    393U,	// MADDMS_H_rrr1_LU
    457U,	// MADDMS_H_rrr1_UL
    521U,	// MADDMS_H_rrr1_UU
    580U,	// MADDMS_U_rcr_v110
    137U,	// MADDMS_U_rrr2_v110
    68U,	// MADDMS_rcr_v110
    137U,	// MADDMS_rrr2_v110
    329U,	// MADDM_H_rrr1_LL
    393U,	// MADDM_H_rrr1_LU
    457U,	// MADDM_H_rrr1_UL
    521U,	// MADDM_H_rrr1_UU
    137U,	// MADDM_H_rrr1_v110
    137U,	// MADDM_Q_rrr1_v110
    580U,	// MADDM_U_rcr_v110
    137U,	// MADDM_U_rrr2_v110
    68U,	// MADDM_rcr_v110
    137U,	// MADDM_rrr2_v110
    329U,	// MADDRS_H_rrr1_LL
    393U,	// MADDRS_H_rrr1_LU
    457U,	// MADDRS_H_rrr1_UL
    457U,	// MADDRS_H_rrr1_UL_2
    521U,	// MADDRS_H_rrr1_UU
    3337U,	// MADDRS_H_rrr1_v110
    1U,	// MADDRS_Q_rrr1_L_L
    1U,	// MADDRS_Q_rrr1_U_U
    3337U,	// MADDRS_Q_rrr1_v110
    329U,	// MADDR_H_rrr1_LL
    393U,	// MADDR_H_rrr1_LU
    457U,	// MADDR_H_rrr1_UL
    457U,	// MADDR_H_rrr1_UL_2
    521U,	// MADDR_H_rrr1_UU
    3337U,	// MADDR_H_rrr1_v110
    1U,	// MADDR_Q_rrr1_L_L
    1U,	// MADDR_Q_rrr1_U_U
    3337U,	// MADDR_Q_rrr1_v110
    329U,	// MADDSUMS_H_rrr1_LL
    393U,	// MADDSUMS_H_rrr1_LU
    457U,	// MADDSUMS_H_rrr1_UL
    521U,	// MADDSUMS_H_rrr1_UU
    329U,	// MADDSUM_H_rrr1_LL
    393U,	// MADDSUM_H_rrr1_LU
    457U,	// MADDSUM_H_rrr1_UL
    521U,	// MADDSUM_H_rrr1_UU
    329U,	// MADDSURS_H_rrr1_LL
    393U,	// MADDSURS_H_rrr1_LU
    457U,	// MADDSURS_H_rrr1_UL
    521U,	// MADDSURS_H_rrr1_UU
    329U,	// MADDSUR_H_rrr1_LL
    393U,	// MADDSUR_H_rrr1_LU
    457U,	// MADDSUR_H_rrr1_UL
    521U,	// MADDSUR_H_rrr1_UU
    329U,	// MADDSUS_H_rrr1_LL
    393U,	// MADDSUS_H_rrr1_LU
    457U,	// MADDSUS_H_rrr1_UL
    521U,	// MADDSUS_H_rrr1_UU
    329U,	// MADDSU_H_rrr1_LL
    393U,	// MADDSU_H_rrr1_LU
    457U,	// MADDSU_H_rrr1_UL
    521U,	// MADDSU_H_rrr1_UU
    329U,	// MADDS_H_rrr1_LL
    393U,	// MADDS_H_rrr1_LU
    457U,	// MADDS_H_rrr1_UL
    521U,	// MADDS_H_rrr1_UU
    3337U,	// MADDS_H_rrr1_v110
    3337U,	// MADDS_Q_rrr1
    649U,	// MADDS_Q_rrr1_L
    1U,	// MADDS_Q_rrr1_L_L
    713U,	// MADDS_Q_rrr1_U
    3337U,	// MADDS_Q_rrr1_UU2_v110
    1U,	// MADDS_Q_rrr1_U_U
    3337U,	// MADDS_Q_rrr1_e
    649U,	// MADDS_Q_rrr1_e_L
    1U,	// MADDS_Q_rrr1_e_L_L
    713U,	// MADDS_Q_rrr1_e_U
    1U,	// MADDS_Q_rrr1_e_U_U
    68U,	// MADDS_U_rcr
    68U,	// MADDS_U_rcr_e
    137U,	// MADDS_U_rrr2
    137U,	// MADDS_U_rrr2_e
    68U,	// MADDS_rcr
    68U,	// MADDS_rcr_e
    137U,	// MADDS_rrr2
    137U,	// MADDS_rrr2_e
    137U,	// MADD_F_rrr
    329U,	// MADD_H_rrr1_LL
    393U,	// MADD_H_rrr1_LU
    457U,	// MADD_H_rrr1_UL
    521U,	// MADD_H_rrr1_UU
    3337U,	// MADD_H_rrr1_v110
    3337U,	// MADD_Q_rrr1
    649U,	// MADD_Q_rrr1_L
    1U,	// MADD_Q_rrr1_L_L
    713U,	// MADD_Q_rrr1_U
    3337U,	// MADD_Q_rrr1_UU2_v110
    1U,	// MADD_Q_rrr1_U_U
    3337U,	// MADD_Q_rrr1_e
    649U,	// MADD_Q_rrr1_e_L
    1U,	// MADD_Q_rrr1_e_L_L
    713U,	// MADD_Q_rrr1_e_U
    1U,	// MADD_Q_rrr1_e_U_U
    580U,	// MADD_U_rcr
    137U,	// MADD_U_rrr2
    68U,	// MADD_rcr
    68U,	// MADD_rcr_e
    137U,	// MADD_rrr2
    137U,	// MADD_rrr2_e
    0U,	// MAX_B
    0U,	// MAX_BU
    0U,	// MAX_H
    0U,	// MAX_HU
    0U,	// MAX_U_rc
    0U,	// MAX_U_rr
    0U,	// MAX_rc
    0U,	// MAX_rr
    0U,	// MFCR_rlc
    0U,	// MIN_B
    0U,	// MIN_BU
    0U,	// MIN_H
    0U,	// MIN_HU
    0U,	// MIN_U_rc
    0U,	// MIN_U_rr
    0U,	// MIN_rc
    0U,	// MIN_rr
    0U,	// MOVH_A_rlc
    0U,	// MOVH_rlc
    0U,	// MOVZ_A_sr
    0U,	// MOV_AA_rr
    0U,	// MOV_AA_srr_srr
    0U,	// MOV_AA_srr_srr_v110
    0U,	// MOV_A_rr
    0U,	// MOV_A_src
    0U,	// MOV_A_srr
    0U,	// MOV_A_srr_v110
    0U,	// MOV_D_rr
    0U,	// MOV_D_srr_srr
    0U,	// MOV_D_srr_srr_v110
    0U,	// MOV_U_rlc
    0U,	// MOV_rlc
    0U,	// MOV_rlc_e
    0U,	// MOV_rr
    0U,	// MOV_rr_e
    0U,	// MOV_rr_eab
    0U,	// MOV_sc
    0U,	// MOV_sc_v110
    0U,	// MOV_src
    0U,	// MOV_src_e
    0U,	// MOV_srr
    329U,	// MSUBADMS_H_rrr1_LL
    393U,	// MSUBADMS_H_rrr1_LU
    457U,	// MSUBADMS_H_rrr1_UL
    521U,	// MSUBADMS_H_rrr1_UU
    329U,	// MSUBADM_H_rrr1_LL
    393U,	// MSUBADM_H_rrr1_LU
    457U,	// MSUBADM_H_rrr1_UL
    521U,	// MSUBADM_H_rrr1_UU
    329U,	// MSUBADRS_H_rrr1_LL
    393U,	// MSUBADRS_H_rrr1_LU
    457U,	// MSUBADRS_H_rrr1_UL
    521U,	// MSUBADRS_H_rrr1_UU
    3337U,	// MSUBADRS_H_rrr1_v110
    329U,	// MSUBADR_H_rrr1_LL
    393U,	// MSUBADR_H_rrr1_LU
    457U,	// MSUBADR_H_rrr1_UL
    521U,	// MSUBADR_H_rrr1_UU
    3337U,	// MSUBADR_H_rrr1_v110
    329U,	// MSUBADS_H_rrr1_LL
    393U,	// MSUBADS_H_rrr1_LU
    457U,	// MSUBADS_H_rrr1_UL
    521U,	// MSUBADS_H_rrr1_UU
    329U,	// MSUBAD_H_rrr1_LL
    393U,	// MSUBAD_H_rrr1_LU
    457U,	// MSUBAD_H_rrr1_UL
    521U,	// MSUBAD_H_rrr1_UU
    329U,	// MSUBMS_H_rrr1_LL
    393U,	// MSUBMS_H_rrr1_LU
    457U,	// MSUBMS_H_rrr1_UL
    521U,	// MSUBMS_H_rrr1_UU
    68U,	// MSUBMS_U_rcrv110
    137U,	// MSUBMS_U_rrr2v110
    68U,	// MSUBMS_rcrv110
    137U,	// MSUBMS_rrr2v110
    329U,	// MSUBM_H_rrr1_LL
    393U,	// MSUBM_H_rrr1_LU
    457U,	// MSUBM_H_rrr1_UL
    521U,	// MSUBM_H_rrr1_UU
    137U,	// MSUBM_H_rrr1_v110
    137U,	// MSUBM_Q_rrr1_v110
    68U,	// MSUBM_U_rcrv110
    137U,	// MSUBM_U_rrr2v110
    68U,	// MSUBM_rcrv110
    137U,	// MSUBM_rrr2v110
    329U,	// MSUBRS_H_rrr1_LL
    393U,	// MSUBRS_H_rrr1_LU
    457U,	// MSUBRS_H_rrr1_UL
    457U,	// MSUBRS_H_rrr1_UL_2
    521U,	// MSUBRS_H_rrr1_UU
    3337U,	// MSUBRS_H_rrr1_v110
    1U,	// MSUBRS_Q_rrr1_L_L
    1U,	// MSUBRS_Q_rrr1_U_U
    3337U,	// MSUBRS_Q_rrr1_v110
    329U,	// MSUBR_H_rrr1_LL
    393U,	// MSUBR_H_rrr1_LU
    457U,	// MSUBR_H_rrr1_UL
    457U,	// MSUBR_H_rrr1_UL_2
    521U,	// MSUBR_H_rrr1_UU
    3337U,	// MSUBR_H_rrr1_v110
    1U,	// MSUBR_Q_rrr1_L_L
    1U,	// MSUBR_Q_rrr1_U_U
    3337U,	// MSUBR_Q_rrr1_v110
    329U,	// MSUBS_H_rrr1_LL
    393U,	// MSUBS_H_rrr1_LU
    457U,	// MSUBS_H_rrr1_UL
    521U,	// MSUBS_H_rrr1_UU
    3337U,	// MSUBS_H_rrr1_v110
    3337U,	// MSUBS_Q_rrr1
    649U,	// MSUBS_Q_rrr1_L
    1U,	// MSUBS_Q_rrr1_L_L
    713U,	// MSUBS_Q_rrr1_U
    3337U,	// MSUBS_Q_rrr1_UU2_v110
    1U,	// MSUBS_Q_rrr1_U_U
    3337U,	// MSUBS_Q_rrr1_e
    649U,	// MSUBS_Q_rrr1_e_L
    1U,	// MSUBS_Q_rrr1_e_L_L
    713U,	// MSUBS_Q_rrr1_e_U
    1U,	// MSUBS_Q_rrr1_e_U_U
    68U,	// MSUBS_U_rcr
    68U,	// MSUBS_U_rcr_e
    137U,	// MSUBS_U_rrr2
    137U,	// MSUBS_U_rrr2_e
    68U,	// MSUBS_rcr
    68U,	// MSUBS_rcr_e
    137U,	// MSUBS_rrr2
    137U,	// MSUBS_rrr2_e
    137U,	// MSUB_F_rrr
    329U,	// MSUB_H_rrr1_LL
    393U,	// MSUB_H_rrr1_LU
    457U,	// MSUB_H_rrr1_UL
    521U,	// MSUB_H_rrr1_UU
    3337U,	// MSUB_H_rrr1_v110
    3337U,	// MSUB_Q_rrr1
    649U,	// MSUB_Q_rrr1_L
    1U,	// MSUB_Q_rrr1_L_L
    713U,	// MSUB_Q_rrr1_U
    3337U,	// MSUB_Q_rrr1_UU2_v110
    1U,	// MSUB_Q_rrr1_U_U
    3337U,	// MSUB_Q_rrr1_e
    649U,	// MSUB_Q_rrr1_e_L
    1U,	// MSUB_Q_rrr1_e_L_L
    713U,	// MSUB_Q_rrr1_e_U
    1U,	// MSUB_Q_rrr1_e_U_U
    580U,	// MSUB_U_rcr
    137U,	// MSUB_U_rrr2
    68U,	// MSUB_rcr
    68U,	// MSUB_rcr_e
    137U,	// MSUB_rrr2
    137U,	// MSUB_rrr2_e
    0U,	// MTCR_rlc
    16U,	// MULMS_H_rr1_LL2e
    20U,	// MULMS_H_rr1_LU2e
    24U,	// MULMS_H_rr1_UL2e
    28U,	// MULMS_H_rr1_UU2e
    16U,	// MULM_H_rr1_LL2e
    20U,	// MULM_H_rr1_LU2e
    24U,	// MULM_H_rr1_UL2e
    28U,	// MULM_H_rr1_UU2e
    0U,	// MULM_U_rc
    0U,	// MULM_U_rr
    0U,	// MULM_rc
    0U,	// MULM_rr
    16U,	// MULR_H_rr1_LL2e
    20U,	// MULR_H_rr1_LU2e
    24U,	// MULR_H_rr1_UL2e
    28U,	// MULR_H_rr1_UU2e
    4U,	// MULR_H_rr_v110
    0U,	// MULR_Q_rr1_2LL
    0U,	// MULR_Q_rr1_2UU
    4U,	// MULR_Q_rr_v110
    0U,	// MULS_U_rc
    0U,	// MULS_U_rr2
    0U,	// MULS_U_rr_v110
    0U,	// MULS_rc
    0U,	// MULS_rr2
    0U,	// MULS_rr_v110
    0U,	// MUL_F_rrr
    16U,	// MUL_H_rr1_LL2e
    20U,	// MUL_H_rr1_LU2e
    24U,	// MUL_H_rr1_UL2e
    28U,	// MUL_H_rr1_UU2e
    4U,	// MUL_H_rr_v110
    4U,	// MUL_Q_rr1_2
    0U,	// MUL_Q_rr1_2LL
    0U,	// MUL_Q_rr1_2UU
    32U,	// MUL_Q_rr1_2_L
    32U,	// MUL_Q_rr1_2_Le
    36U,	// MUL_Q_rr1_2_U
    36U,	// MUL_Q_rr1_2_Ue
    4U,	// MUL_Q_rr1_2__e
    4U,	// MUL_Q_rr_v110
    0U,	// MUL_U_rc
    0U,	// MUL_U_rr2
    0U,	// MUL_rc
    0U,	// MUL_rc_e
    0U,	// MUL_rr2
    0U,	// MUL_rr2_e
    0U,	// MUL_rr_v110
    0U,	// MUL_srr
    1U,	// NAND_T
    0U,	// NAND_rc
    0U,	// NAND_rr
    0U,	// NEZ_A
    0U,	// NE_A
    0U,	// NE_rc
    0U,	// NE_rr
    0U,	// NOP_sr
    0U,	// NOP_sys
    1U,	// NOR_T
    0U,	// NOR_rc
    0U,	// NOR_rr
    0U,	// NOR_sr
    0U,	// NOR_sr_v110
    0U,	// NOT_sr_v162
    1U,	// ORN_T
    0U,	// ORN_rc
    0U,	// ORN_rr
    1U,	// OR_ANDN_T
    1U,	// OR_AND_T
    0U,	// OR_EQ_rc
    0U,	// OR_EQ_rr
    0U,	// OR_GE_U_rc
    0U,	// OR_GE_U_rr
    0U,	// OR_GE_rc
    0U,	// OR_GE_rr
    0U,	// OR_LT_U_rc
    0U,	// OR_LT_U_rr
    0U,	// OR_LT_rc
    0U,	// OR_LT_rr
    0U,	// OR_NE_rc
    0U,	// OR_NE_rr
    1U,	// OR_NOR_T
    1U,	// OR_OR_T
    1U,	// OR_T
    2U,	// OR_rc
    0U,	// OR_rr
    0U,	// OR_sc
    0U,	// OR_sc_v110
    0U,	// OR_srr
    0U,	// OR_srr_v110
    0U,	// PACK_rrr
    0U,	// PARITY_rr
    0U,	// PARITY_rr_v110
    0U,	// POPCNT_W_rr
    0U,	// Q31TOF_rr
    0U,	// QSEED_F_rr
    0U,	// RESTORE_sys
    0U,	// RET_sr
    0U,	// RET_sys
    0U,	// RET_sys_v110
    0U,	// RFE_sr
    0U,	// RFE_sys_sys
    0U,	// RFE_sys_sys_v110
    0U,	// RFM_sys
    0U,	// RSLCX_sys
    0U,	// RSTV_sys
    0U,	// RSUBS_U_rc
    0U,	// RSUBS_rc
    0U,	// RSUB_rc
    0U,	// RSUB_sr_sr
    0U,	// RSUB_sr_sr_v110
    0U,	// SAT_BU_rr
    0U,	// SAT_BU_sr
    0U,	// SAT_BU_sr_v110
    0U,	// SAT_B_rr
    0U,	// SAT_B_sr
    0U,	// SAT_B_sr_v110
    0U,	// SAT_HU_rr
    0U,	// SAT_HU_sr
    0U,	// SAT_HU_sr_v110
    0U,	// SAT_H_rr
    0U,	// SAT_H_sr
    0U,	// SAT_H_sr_v110
    68U,	// SELN_A_rcr_v110
    137U,	// SELN_A_rrr_v110
    68U,	// SELN_rcr
    137U,	// SELN_rrr
    68U,	// SEL_A_rcr_v110
    137U,	// SEL_A_rrr_v110
    68U,	// SEL_rcr
    137U,	// SEL_rrr
    0U,	// SHAS_rc
    0U,	// SHAS_rr
    0U,	// SHA_B_rc
    0U,	// SHA_B_rr
    0U,	// SHA_H_rc
    0U,	// SHA_H_rr
    0U,	// SHA_rc
    0U,	// SHA_rr
    0U,	// SHA_src
    0U,	// SHA_src_v110
    0U,	// SHUFFLE_rc
    1U,	// SH_ANDN_T
    1U,	// SH_AND_T
    0U,	// SH_B_rc
    0U,	// SH_B_rr
    0U,	// SH_EQ_rc
    0U,	// SH_EQ_rr
    0U,	// SH_GE_U_rc
    0U,	// SH_GE_U_rr
    0U,	// SH_GE_rc
    0U,	// SH_GE_rr
    0U,	// SH_H_rc
    0U,	// SH_H_rr
    0U,	// SH_LT_U_rc
    0U,	// SH_LT_U_rr
    0U,	// SH_LT_rc
    0U,	// SH_LT_rr
    1U,	// SH_NAND_T
    0U,	// SH_NE_rc
    0U,	// SH_NE_rr
    1U,	// SH_NOR_T
    1U,	// SH_ORN_T
    1U,	// SH_OR_T
    1U,	// SH_XNOR_T
    1U,	// SH_XOR_T
    0U,	// SH_rc
    0U,	// SH_rr
    0U,	// SH_src
    0U,	// SH_src_v110
    0U,	// STLCX_abs
    0U,	// STLCX_bo_bso
    0U,	// STUCX_abs
    0U,	// STUCX_bo_bso
    0U,	// ST_A_abs
    0U,	// ST_A_bo_bso
    0U,	// ST_A_bo_c
    0U,	// ST_A_bo_pos
    0U,	// ST_A_bo_pre
    0U,	// ST_A_bo_r
    0U,	// ST_A_bol
    0U,	// ST_A_sc
    0U,	// ST_A_sro
    0U,	// ST_A_sro_v110
    0U,	// ST_A_ssr
    0U,	// ST_A_ssr_pos
    0U,	// ST_A_ssr_pos_v110
    0U,	// ST_A_ssr_v110
    0U,	// ST_A_ssro
    0U,	// ST_A_ssro_v110
    0U,	// ST_B_abs
    0U,	// ST_B_bo_bso
    0U,	// ST_B_bo_c
    0U,	// ST_B_bo_pos
    0U,	// ST_B_bo_pre
    0U,	// ST_B_bo_r
    0U,	// ST_B_bol
    0U,	// ST_B_sro
    0U,	// ST_B_sro_v110
    0U,	// ST_B_ssr
    0U,	// ST_B_ssr_pos
    0U,	// ST_B_ssr_pos_v110
    0U,	// ST_B_ssr_v110
    0U,	// ST_B_ssro
    0U,	// ST_B_ssro_v110
    0U,	// ST_DA_abs
    0U,	// ST_DA_bo_bso
    0U,	// ST_DA_bo_c
    0U,	// ST_DA_bo_pos
    0U,	// ST_DA_bo_pre
    0U,	// ST_DA_bo_r
    0U,	// ST_D_abs
    0U,	// ST_D_bo_bso
    0U,	// ST_D_bo_c
    0U,	// ST_D_bo_pos
    0U,	// ST_D_bo_pre
    0U,	// ST_D_bo_r
    0U,	// ST_H_abs
    0U,	// ST_H_bo_bso
    0U,	// ST_H_bo_c
    0U,	// ST_H_bo_pos
    0U,	// ST_H_bo_pre
    0U,	// ST_H_bo_r
    0U,	// ST_H_bol
    0U,	// ST_H_sro
    0U,	// ST_H_sro_v110
    0U,	// ST_H_ssr
    0U,	// ST_H_ssr_pos
    0U,	// ST_H_ssr_pos_v110
    0U,	// ST_H_ssr_v110
    0U,	// ST_H_ssro
    0U,	// ST_H_ssro_v110
    0U,	// ST_Q_abs
    0U,	// ST_Q_bo_bso
    0U,	// ST_Q_bo_c
    0U,	// ST_Q_bo_pos
    0U,	// ST_Q_bo_pre
    0U,	// ST_Q_bo_r
    0U,	// ST_T
    0U,	// ST_W_abs
    0U,	// ST_W_bo_bso
    0U,	// ST_W_bo_c
    0U,	// ST_W_bo_pos
    0U,	// ST_W_bo_pre
    0U,	// ST_W_bo_r
    0U,	// ST_W_bol
    0U,	// ST_W_sc
    0U,	// ST_W_sro
    0U,	// ST_W_sro_v110
    0U,	// ST_W_ssr
    0U,	// ST_W_ssr_pos
    0U,	// ST_W_ssr_pos_v110
    0U,	// ST_W_ssr_v110
    0U,	// ST_W_ssro
    0U,	// ST_W_ssro_v110
    0U,	// SUBC_rr
    4U,	// SUBSC_A_rr
    0U,	// SUBS_BU_rr
    0U,	// SUBS_B_rr
    0U,	// SUBS_HU_rr
    0U,	// SUBS_H_rr
    0U,	// SUBS_U_rr
    0U,	// SUBS_rr
    0U,	// SUBS_srr
    0U,	// SUBX_rr
    0U,	// SUB_A_rr
    0U,	// SUB_A_sc
    0U,	// SUB_A_sc_v110
    0U,	// SUB_B_rr
    0U,	// SUB_F_rrr
    0U,	// SUB_H_rr
    0U,	// SUB_rr
    0U,	// SUB_srr
    0U,	// SUB_srr_15a
    0U,	// SUB_srr_a15
    0U,	// SVLCX_sys
    0U,	// SWAPMSK_W_bo_bso
    0U,	// SWAPMSK_W_bo_c
    0U,	// SWAPMSK_W_bo_i
    0U,	// SWAPMSK_W_bo_pos
    0U,	// SWAPMSK_W_bo_pre
    0U,	// SWAPMSK_W_bo_r
    0U,	// SWAP_A_abs
    0U,	// SWAP_A_bo_bso
    0U,	// SWAP_A_bo_c
    0U,	// SWAP_A_bo_pos
    0U,	// SWAP_A_bo_pre
    0U,	// SWAP_A_bo_r
    0U,	// SWAP_W_abs
    0U,	// SWAP_W_bo_bso
    0U,	// SWAP_W_bo_c
    0U,	// SWAP_W_bo_i
    0U,	// SWAP_W_bo_pos
    0U,	// SWAP_W_bo_pre
    0U,	// SWAP_W_bo_r
    0U,	// SYSCALL_rc
    0U,	// TLBDEMAP_rr
    0U,	// TLBFLUSH_A_rr
    0U,	// TLBFLUSH_B_rr
    0U,	// TLBMAP_rr
    0U,	// TLBPROBE_A_rr
    0U,	// TLBPROBE_I_rr
    0U,	// TRAPSV_sys
    0U,	// TRAPV_sys
    0U,	// UNPACK_rr_rr
    0U,	// UNPACK_rr_rr_v110
    0U,	// UPDFL_rr
    0U,	// UTOF_rr
    0U,	// WAIT_sys
    1U,	// XNOR_T
    0U,	// XNOR_rc
    0U,	// XNOR_rr
    0U,	// XOR_EQ_rc
    0U,	// XOR_EQ_rr
    0U,	// XOR_GE_U_rc
    0U,	// XOR_GE_U_rr
    0U,	// XOR_GE_rc
    0U,	// XOR_GE_rr
    0U,	// XOR_LT_U_rc
    0U,	// XOR_LT_U_rr
    0U,	// XOR_LT_rc
    0U,	// XOR_LT_rr
    0U,	// XOR_NE_rc
    0U,	// XOR_NE_rr
    1U,	// XOR_T
    0U,	// XOR_rc
    0U,	// XOR_rr
    0U,	// XOR_srr
  };

  // Emit the opcode for the instruction.
  uint64_t Bits = 0;
  Bits |= (uint64_t)OpInfo0[MCInst_getOpcode(MI)] << 0;
  Bits |= (uint64_t)OpInfo1[MCInst_getOpcode(MI)] << 32;
  MnemonicBitsInfo MBI = {
#ifndef CAPSTONE_DIET
    AsmStrs+(Bits & 4095)-1,
#else
    NULL,
#endif // CAPSTONE_DIET
    Bits
  };
  return MBI;
}

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
static void printInstruction(MCInst *MI, uint64_t Address, SStream *O) {
  SStream_concat0(O, "");
  MnemonicBitsInfo MnemonicInfo = getMnemonic(MI, O);

  SStream_concat0(O, MnemonicInfo.first);

  uint64_t Bits = MnemonicInfo.second;
  CS_ASSERT_RET(Bits != 0 && "Cannot print this instruction.");

  // Fragment 0 encoded into 4 bits for 11 unique commands.
  switch ((Bits >> 12) & 15) {
  default: CS_ASSERT_RET(0 && "Invalid command number.");
  case 0:
    // DBG_VALUE, DBG_VALUE_LIST, DBG_INSTR_REF, DBG_PHI, DBG_LABEL, BUNDLE, ...
    return;
    break;
  case 1:
    // ABSDIFS_B_rr_v110, ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ...
    printOperand(MI, 0, O);
    break;
  case 2:
    // BISR_rc, BISR_rc_v161, SYSCALL_rc
    printSExtImm_9(MI, 0, O);
    return;
    break;
  case 3:
    // BISR_sc, BISR_sc_v110
    printZExtImm_8(MI, 0, O);
    return;
    break;
  case 4:
    // CALLA_b, CALL_b, FCALLA_b, FCALL_b, JA_b, JLA_b, JL_b, J_b
    printDisp24Imm(MI, 0, O);
    return;
    break;
  case 5:
    // CALL_sb, J_sb, J_sb_v110
    printDisp8Imm(MI, 0, O);
    return;
    break;
  case 6:
    // CMPSWAP_W_bo_bso, CMPSWAP_W_bo_c, CMPSWAP_W_bo_pos, CMPSWAP_W_bo_pre, ...
    printOperand(MI, 1, O);
    break;
  case 7:
    // LDLCX_abs, LDUCX_abs, STLCX_abs, STUCX_abs, ST_T
    printOff18Imm(MI, 0, O);
    break;
  case 8:
    // LDMST_abs, ST_A_abs, ST_B_abs, ST_DA_abs, ST_D_abs, ST_H_abs, ST_Q_abs...
    printOff18Imm(MI, 1, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 0, O);
    return;
    break;
  case 9:
    // LOOPU_brr
    printDisp15Imm(MI, 0, O);
    return;
    break;
  case 10:
    // MTCR_rlc
    printSExtImm_16(MI, 0, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 1, O);
    return;
    break;
  }


  // Fragment 1 encoded into 4 bits for 12 unique commands.
  switch ((Bits >> 16) & 15) {
  default: CS_ASSERT_RET(0 && "Invalid command number.");
  case 0:
    // ABSDIFS_B_rr_v110, ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ...
    SStream_concat0(O, ", ");
    break;
  case 1:
    // CACHEA_I_bo_bso, CACHEA_I_bo_pre, CACHEA_WI_bo_bso, CACHEA_WI_bo_pre, ...
    SStream_concat1(O, ']');
    break;
  case 2:
    // CACHEA_I_bo_c, CACHEA_WI_bo_c, CACHEA_W_bo_c, CMPSWAP_W_bo_c, LDMST_bo...
    SStream_concat0(O, "+c]");
    break;
  case 3:
    // CACHEA_I_bo_pos, CACHEA_WI_bo_pos, CACHEA_W_bo_pos, CACHEI_I_bo_pos, C...
    SStream_concat0(O, "+]");
    break;
  case 4:
    // CACHEA_I_bo_r, CACHEA_WI_bo_r, CACHEA_W_bo_r
    SStream_concat0(O, "+r]");
    return;
    break;
  case 5:
    // CALLI_rr, CALLI_rr_v110, DISABLE_sys_1, FCALLA_i, JI_rr, JI_rr_v110, J...
    return;
    break;
  case 6:
    // CMPSWAP_W_bo_r, LDMST_bo_r, ST_A_bo_r, ST_B_bo_r, ST_DA_bo_r, ST_D_bo_...
    SStream_concat0(O, "+r], ");
    break;
  case 7:
    // LD_A_bo_bso, LD_A_bo_c, LD_A_bo_pos, LD_A_bo_r, LD_A_bol, LD_A_sc, LD_...
    SStream_concat0(O, ", [");
    printOperand(MI, 1, O);
    break;
  case 8:
    // LD_A_bo_pre, LD_BU_bo_pre, LD_B_bo_pre, LD_DA_bo_pre, LD_D_bo_pre, LD_...
    SStream_concat0(O, ", [+");
    printOperand(MI, 1, O);
    SStream_concat1(O, ']');
    printSExtImm_10(MI, 2, O);
    return;
    break;
  case 9:
    // ST_A_ssr, ST_A_ssr_v110, ST_B_ssr, ST_B_ssr_v110, ST_H_ssr, ST_H_ssr_v...
    SStream_concat0(O, "], ");
    printOperand(MI, 1, O);
    return;
    break;
  case 10:
    // ST_A_ssr_pos, ST_A_ssr_pos_v110, ST_B_ssr_pos, ST_B_ssr_pos_v110, ST_H...
    SStream_concat0(O, "+], ");
    printOperand(MI, 1, O);
    return;
    break;
  case 11:
    // SWAPMSK_W_bo_i, SWAP_W_bo_i
    SStream_concat0(O, "+i], ");
    printOperand(MI, 0, O);
    return;
    break;
  }


  // Fragment 2 encoded into 5 bits for 23 unique commands.
  switch ((Bits >> 20) & 31) {
  default: CS_ASSERT_RET(0 && "Invalid command number.");
  case 0:
    // ABSDIFS_B_rr_v110, ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ...
    printOperand(MI, 1, O);
    break;
  case 1:
    // ABSS_B_rr_v110, ABSS_H_rr, ABSS_rr, ADDSC_AT_rr, ADDSC_A_rr, CADDN_A_r...
    printOperand(MI, 2, O);
    break;
  case 2:
    // ADD_A_src, ADD_src, JEQ_brc, JGE_brc, JNE_brc, MOV_src, MOV_src_e, SHA...
    printSExtImm_4(MI, 1, O);
    break;
  case 3:
    // ADD_F_rrr, CADDN_A_rrr_v110, CADDN_rrr, CADD_A_rrr_v110, CADD_rrr, CRC...
    printOperand(MI, 3, O);
    SStream_concat0(O, ", ");
    break;
  case 4:
    // AND_sc, AND_sc_v110, MOV_sc, MOV_sc_v110, OR_sc, OR_sc_v110, ST_A_sc, ...
    printZExtImm_8(MI, 1, O);
    break;
  case 5:
    // CACHEA_I_bo_bso, CACHEA_I_bo_c, CACHEA_I_bo_pos, CACHEA_I_bo_pre, CACH...
    printSExtImm_10(MI, 1, O);
    return;
    break;
  case 6:
    // CMPSWAP_W_bo_bso, CMPSWAP_W_bo_c, CMPSWAP_W_bo_pos, CMPSWAP_W_bo_pre, ...
    printSExtImm_10(MI, 2, O);
    SStream_concat0(O, ", ");
    break;
  case 7:
    // CMPSWAP_W_bo_r, LDMST_bo_r
    printOperand(MI, 0, O);
    return;
    break;
  case 8:
    // JEQ_sbc1, JEQ_sbc2, JEQ_sbc_v110, JNE_sbc1, JNE_sbc2, JNE_sbc_v110
    printSExtImm_4(MI, 2, O);
    SStream_concat0(O, ", ");
    printDisp4Imm(MI, 1, O);
    return;
    break;
  case 9:
    // JGEZ_sbr, JGEZ_sbr_v110, JGTZ_sbr, JGTZ_sbr_v110, JLEZ_sbr, JLEZ_sbr_v...
    printDisp4Imm(MI, 1, O);
    return;
    break;
  case 10:
    // JGE_U_brc, JLT_U_brc, JLT_brc, JNED_brc, JNEI_brc, MOV_A_src, ST_A_sro...
    printZExtImm_4(MI, 1, O);
    break;
  case 11:
    // JNZ_A_brr, JZ_A_brr, LOOP_brr
    printDisp15Imm(MI, 1, O);
    return;
    break;
  case 12:
    // JNZ_sb, JNZ_sb_v110, JZ_sb, JZ_sb_v110
    printDisp8Imm(MI, 1, O);
    return;
    break;
  case 13:
    // LD_A_abs, LD_BU_abs, LD_B_abs, LD_DA_abs, LD_D_abs, LD_HU_abs, LD_H_ab...
    printOff18Imm(MI, 1, O);
    return;
    break;
  case 14:
    // LD_A_bo_bso, LD_A_bol, LD_A_sc, LD_A_slr, LD_A_slr_v110, LD_A_slro, LD...
    SStream_concat1(O, ']');
    break;
  case 15:
    // LD_A_bo_c, LD_BU_bo_c, LD_B_bo_c, LD_DA_bo_c, LD_D_bo_c, LD_HU_bo_c, L...
    SStream_concat0(O, "+c]");
    printSExtImm_10(MI, 2, O);
    return;
    break;
  case 16:
    // LD_A_bo_pos, LD_A_slr_post, LD_A_slr_post_v110, LD_BU_bo_pos, LD_BU_sl...
    SStream_concat0(O, "+]");
    break;
  case 17:
    // LD_A_bo_r, LD_BU_bo_r, LD_B_bo_r, LD_DA_bo_r, LD_D_bo_r, LD_HU_bo_r, L...
    SStream_concat0(O, "+r]");
    return;
    break;
  case 18:
    // LOOP_sbr
    printOExtImm_4(MI, 1, O);
    return;
    break;
  case 19:
    // MFCR_rlc, MOVH_A_rlc, MOVH_rlc, MOV_U_rlc, MOV_rlc_e
    printZExtImm_16(MI, 1, O);
    return;
    break;
  case 20:
    // MOV_rlc
    printSExtImm_16(MI, 1, O);
    return;
    break;
  case 21:
    // ST_A_bol, ST_B_bol, ST_H_bol, ST_W_bol
    printSExtImm_16(MI, 2, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 1, O);
    return;
    break;
  case 22:
    // ST_A_ssro, ST_A_ssro_v110, ST_B_ssro, ST_B_ssro_v110, ST_H_ssro, ST_H_...
    printZExtImm_4(MI, 2, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 1, O);
    return;
    break;
  }


  // Fragment 3 encoded into 4 bits for 11 unique commands.
  switch ((Bits >> 25) & 15) {
  default: CS_ASSERT_RET(0 && "Invalid command number.");
  case 0:
    // ABSDIFS_B_rr_v110, ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ...
    SStream_concat0(O, ", ");
    break;
  case 1:
    // ABSS_B_rr_v110, ABSS_H_rr, ABSS_rr, ABS_B_rr, ABS_H_rr, ABS_rr, ADDS_s...
    return;
    break;
  case 2:
    // ADD_F_rrr, CADDN_A_rrr_v110, CADDN_rrr, CADD_A_rrr_v110, CADD_rrr, CRC...
    printOperand(MI, 1, O);
    break;
  case 3:
    // CMPSWAP_W_bo_bso, CMPSWAP_W_bo_c, CMPSWAP_W_bo_pos, CMPSWAP_W_bo_pre, ...
    printOperand(MI, 0, O);
    return;
    break;
  case 4:
    // DVADJ_rrr, DVADJ_rrr_v110, DVSTEP_U_rrr, DVSTEP_U_rrrv110, DVSTEP_rrr,...
    printOperand(MI, 2, O);
    break;
  case 5:
    // LD_A_bo_bso, LD_A_bo_pos, LD_BU_bo_bso, LD_BU_bo_pos, LD_B_bo_bso, LD_...
    printSExtImm_10(MI, 2, O);
    return;
    break;
  case 6:
    // LD_A_bol, LD_BU_bol, LD_B_bol, LD_HU_bol, LD_H_bol, LD_W_bol, LEA_bol
    printSExtImm_16(MI, 2, O);
    return;
    break;
  case 7:
    // LD_A_sc, LD_W_sc
    printZExtImm_8(MI, 2, O);
    return;
    break;
  case 8:
    // LD_A_slro, LD_A_slro_v110, LD_A_sro, LD_A_sro_v110, LD_BU_slro, LD_BU_...
    printZExtImm_4(MI, 2, O);
    return;
    break;
  case 9:
    // MULR_Q_rr1_2LL, MUL_Q_rr1_2LL
    SStream_concat0(O, "l, ");
    printOperand(MI, 2, O);
    SStream_concat0(O, "l, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 10:
    // MULR_Q_rr1_2UU, MUL_Q_rr1_2UU
    SStream_concat0(O, "u, ");
    printOperand(MI, 2, O);
    SStream_concat0(O, "u, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  }


  // Fragment 4 encoded into 5 bits for 17 unique commands.
  switch ((Bits >> 29) & 31) {
  default: CS_ASSERT_RET(0 && "Invalid command number.");
  case 0:
    // ABSDIFS_B_rr_v110, ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ...
    printOperand(MI, 2, O);
    break;
  case 1:
    // ABSDIF_rc, ADDC_rc, ADDS_U_rc, ADDS_rc, ADDX_rc, ADD_rc, ANDN_rc, AND_...
    printSExtImm_9(MI, 2, O);
    return;
    break;
  case 2:
    // ADDIH_A_rlc, ADDIH_rlc
    printZExtImm_16(MI, 2, O);
    return;
    break;
  case 3:
    // ADDI_rlc
    printSExtImm_16(MI, 2, O);
    return;
    break;
  case 4:
    // ADDSC_AT_rr, ADDSC_A_rr, CADDN_A_rcr_v110, CADDN_rcr, CADD_A_rcr_v110,...
    printOperand(MI, 1, O);
    break;
  case 5:
    // ADDSC_A_srrs_v110
    printZExtImm_2(MI, 2, O);
    return;
    break;
  case 6:
    // ADD_F_rrr, DVADJ_rrr, DVADJ_rrr_v110, DVSTEP_U_rrr, DVSTEP_U_rrrv110, ...
    return;
    break;
  case 7:
    // ADD_src_15a, ADD_src_a15, CADDN_src, CADD_src, CMOVN_src, CMOV_src, EQ...
    printSExtImm_4(MI, 2, O);
    return;
    break;
  case 8:
    // ANDN_T, AND_ANDN_T, AND_AND_T, AND_NOR_T, AND_OR_T, AND_T, INSN_T, INS...
    printZExtImm_4(MI, 3, O);
    SStream_concat0(O, ", ");
    printOperand(MI, 2, O);
    SStream_concat0(O, ", ");
    printZExtImm_4(MI, 4, O);
    return;
    break;
  case 9:
    // CADDN_A_rrr_v110, CADDN_rrr, CADD_A_rrr_v110, CADD_rrr, CRCN_rrr, CSUB...
    SStream_concat0(O, ", ");
    break;
  case 10:
    // EXTR_U_rrpw, EXTR_U_rrrw, EXTR_rrpw, EXTR_rrrw, IMASK_rcpw, IMASK_rrpw...
    printOperand(MI, 3, O);
    SStream_concat0(O, ", ");
    break;
  case 11:
    // JEQ_A_brr, JEQ_brc, JEQ_brr, JGE_U_brc, JGE_U_brr, JGE_brc, JGE_brr, J...
    printDisp15Imm(MI, 2, O);
    return;
    break;
  case 12:
    // JEQ_sbr1, JEQ_sbr2, JEQ_sbr_v110, JNE_sbr1, JNE_sbr2, JNE_sbr_v110, JN...
    printDisp4Imm(MI, 2, O);
    return;
    break;
  case 13:
    // LT_U_srcv110
    printZExtImm_4(MI, 2, O);
    return;
    break;
  case 14:
    // MADDRS_Q_rrr1_L_L, MADDR_Q_rrr1_L_L, MADDS_Q_rrr1_L_L, MADDS_Q_rrr1_e_...
    SStream_concat0(O, "l, ");
    printOperand(MI, 2, O);
    SStream_concat0(O, "l, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 15:
    // MADDRS_Q_rrr1_U_U, MADDR_Q_rrr1_U_U, MADDS_Q_rrr1_U_U, MADDS_Q_rrr1_e_...
    SStream_concat0(O, "u, ");
    printOperand(MI, 2, O);
    SStream_concat0(O, "u, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 16:
    // OR_rc
    printZExtImm_9(MI, 2, O);
    return;
    break;
  }


  // Fragment 5 encoded into 4 bits for 10 unique commands.
  switch ((Bits >> 34) & 15) {
  default: CS_ASSERT_RET(0 && "Invalid command number.");
  case 0:
    // ABSDIFS_B_rr_v110, ABSDIFS_H_rr, ABSDIFS_rc, ABSDIFS_rr, ABSDIF_B_rr, ...
    return;
    break;
  case 1:
    // ADDSC_A_rr, ADDSC_A_rr_v110, ADDSC_A_srrs, CADDN_A_rcr_v110, CADDN_rcr...
    SStream_concat0(O, ", ");
    break;
  case 2:
    // CADDN_A_rrr_v110, CADDN_rrr, CADD_A_rrr_v110, CADD_rrr, CRCN_rrr, CSUB...
    printOperand(MI, 2, O);
    break;
  case 3:
    // EXTR_U_rrpw, EXTR_U_rrrw, EXTR_rrpw, EXTR_rrrw, IMASK_rcpw, IMASK_rcrw...
    printOperand(MI, 4, O);
    return;
    break;
  case 4:
    // MULMS_H_rr1_LL2e, MULM_H_rr1_LL2e, MULR_H_rr1_LL2e, MUL_H_rr1_LL2e
    SStream_concat0(O, "ll, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 5:
    // MULMS_H_rr1_LU2e, MULM_H_rr1_LU2e, MULR_H_rr1_LU2e, MUL_H_rr1_LU2e
    SStream_concat0(O, "lu, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 6:
    // MULMS_H_rr1_UL2e, MULM_H_rr1_UL2e, MULR_H_rr1_UL2e, MUL_H_rr1_UL2e
    SStream_concat0(O, "ul, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 7:
    // MULMS_H_rr1_UU2e, MULM_H_rr1_UU2e, MULR_H_rr1_UU2e, MUL_H_rr1_UU2e
    SStream_concat0(O, "uu, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 8:
    // MUL_Q_rr1_2_L, MUL_Q_rr1_2_Le
    SStream_concat0(O, "l, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 9:
    // MUL_Q_rr1_2_U, MUL_Q_rr1_2_Ue
    SStream_concat0(O, "u, ");
    printZExtImm_2(MI, 3, O);
    return;
    break;
  }


  // Fragment 6 encoded into 4 bits for 12 unique commands.
  switch ((Bits >> 38) & 15) {
  default: CS_ASSERT_RET(0 && "Invalid command number.");
  case 0:
    // ADDSC_A_rr, ADDSC_A_rr_v110, ADDSC_A_srrs, DIFSC_A_rr_v110, MULR_H_rr_...
    printZExtImm_2(MI, 3, O);
    return;
    break;
  case 1:
    // CADDN_A_rcr_v110, CADDN_rcr, CADD_A_rcr_v110, CADD_rcr, MADDMS_rcr_v11...
    printSExtImm_9(MI, 3, O);
    return;
    break;
  case 2:
    // CADDN_A_rrr_v110, CADDN_rrr, CADD_A_rrr_v110, CADD_rrr, CRCN_rrr, CSUB...
    return;
    break;
  case 3:
    // DEXTR_rrpw, DEXTR_rrrr, INSERT_rcpw, INSERT_rcrr, INSERT_rrpw, INSERT_...
    printOperand(MI, 3, O);
    break;
  case 4:
    // INSERT_rcrw, MADDRS_H_rrr1_v110, MADDRS_Q_rrr1_v110, MADDR_H_rrr1_v110...
    SStream_concat0(O, ", ");
    break;
  case 5:
    // MADDMS_H_rrr1_LL, MADDM_H_rrr1_LL, MADDRS_H_rrr1_LL, MADDR_H_rrr1_LL, ...
    SStream_concat0(O, "ll, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 6:
    // MADDMS_H_rrr1_LU, MADDM_H_rrr1_LU, MADDRS_H_rrr1_LU, MADDR_H_rrr1_LU, ...
    SStream_concat0(O, "lu, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 7:
    // MADDMS_H_rrr1_UL, MADDM_H_rrr1_UL, MADDRS_H_rrr1_UL, MADDRS_H_rrr1_UL_...
    SStream_concat0(O, "ul, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 8:
    // MADDMS_H_rrr1_UU, MADDM_H_rrr1_UU, MADDRS_H_rrr1_UU, MADDR_H_rrr1_UU, ...
    SStream_concat0(O, "uu, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 9:
    // MADDMS_U_rcr_v110, MADDM_U_rcr_v110, MADD_U_rcr, MSUB_U_rcr
    printZExtImm_9(MI, 3, O);
    return;
    break;
  case 10:
    // MADDS_Q_rrr1_L, MADDS_Q_rrr1_e_L, MADD_Q_rrr1_L, MADD_Q_rrr1_e_L, MSUB...
    SStream_concat0(O, "l, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  case 11:
    // MADDS_Q_rrr1_U, MADDS_Q_rrr1_e_U, MADD_Q_rrr1_U, MADD_Q_rrr1_e_U, MSUB...
    SStream_concat0(O, "u, ");
    printZExtImm_2(MI, 4, O);
    return;
    break;
  }


  // Fragment 7 encoded into 2 bits for 4 unique commands.
  switch ((Bits >> 42) & 3) {
  default: CS_ASSERT_RET(0 && "Invalid command number.");
  case 0:
    // DEXTR_rrpw, DEXTR_rrrr, INSERT_rcrr, INSERT_rrrr
    return;
    break;
  case 1:
    // INSERT_rcpw, INSERT_rrpw, INSERT_rrrw
    SStream_concat0(O, ", ");
    printOperand(MI, 4, O);
    return;
    break;
  case 2:
    // INSERT_rcrw
    printOperand(MI, 4, O);
    return;
    break;
  case 3:
    // MADDRS_H_rrr1_v110, MADDRS_Q_rrr1_v110, MADDR_H_rrr1_v110, MADDR_Q_rrr...
    printZExtImm_2(MI, 4, O);
    return;
    break;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
static const char *getRegisterName(unsigned RegNo) {
#ifndef CAPSTONE_DIET
  CS_ASSERT_RET_VAL(RegNo && RegNo < 61 && "Invalid register number!", NULL);

  static const char AsmStrs[] = {
  /* 0 */ "d10\0"
  /* 4 */ "e10\0"
  /* 8 */ "p10\0"
  /* 12 */ "a0\0"
  /* 15 */ "d0\0"
  /* 18 */ "e0\0"
  /* 21 */ "p0\0"
  /* 24 */ "A10_A11\0"
  /* 32 */ "a11\0"
  /* 36 */ "d11\0"
  /* 40 */ "A0_A1\0"
  /* 46 */ "a1\0"
  /* 49 */ "d1\0"
  /* 52 */ "a12\0"
  /* 56 */ "d12\0"
  /* 60 */ "e12\0"
  /* 64 */ "p12\0"
  /* 68 */ "a2\0"
  /* 71 */ "d2\0"
  /* 74 */ "e2\0"
  /* 77 */ "p2\0"
  /* 80 */ "A12_A13\0"
  /* 88 */ "a13\0"
  /* 92 */ "d13\0"
  /* 96 */ "A2_A3\0"
  /* 102 */ "a3\0"
  /* 105 */ "d3\0"
  /* 108 */ "a14\0"
  /* 112 */ "d14\0"
  /* 116 */ "e14\0"
  /* 120 */ "p14\0"
  /* 124 */ "a4\0"
  /* 127 */ "d4\0"
  /* 130 */ "e4\0"
  /* 133 */ "p4\0"
  /* 136 */ "A14_A15\0"
  /* 144 */ "a15\0"
  /* 148 */ "d15\0"
  /* 152 */ "A4_A5\0"
  /* 158 */ "a5\0"
  /* 161 */ "d5\0"
  /* 164 */ "a6\0"
  /* 167 */ "d6\0"
  /* 170 */ "e6\0"
  /* 173 */ "p6\0"
  /* 176 */ "A6_A7\0"
  /* 182 */ "a7\0"
  /* 185 */ "d7\0"
  /* 188 */ "a8\0"
  /* 191 */ "d8\0"
  /* 194 */ "e8\0"
  /* 197 */ "p8\0"
  /* 200 */ "A8_A9\0"
  /* 206 */ "a9\0"
  /* 209 */ "d9\0"
  /* 212 */ "pc\0"
  /* 215 */ "pcxi\0"
  /* 220 */ "sp\0"
  /* 223 */ "psw\0"
  /* 227 */ "fcx\0"
};
  static const uint8_t RegAsmOffset[] = {
    227, 212, 215, 223, 12, 46, 68, 102, 124, 158, 164, 182, 188, 206, 
    220, 32, 52, 88, 108, 144, 15, 49, 71, 105, 127, 161, 167, 185, 
    191, 209, 0, 36, 56, 92, 112, 148, 18, 74, 130, 170, 194, 4, 
    60, 116, 21, 77, 133, 173, 197, 8, 64, 120, 40, 96, 152, 176, 
    200, 24, 80, 136, 
  };

  CS_ASSERT_RET_VAL(*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!", NULL);
  return AsmStrs+RegAsmOffset[RegNo-1];
#else
  return NULL;
#endif // CAPSTONE_DIET
}
#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

static bool printAliasInstr(MCInst *MI, uint64_t Address, SStream *OS) {
#ifndef CAPSTONE_DIET
  return false;
#endif // CAPSTONE_DIET
}

#endif // PRINT_ALIAS_INSTR
