#include <stdint.h>

#include <stddef.h>

#include <string.h>
#include "riscv_ast.gen.inc"


#define RISCV_MAX_INSTRUCTION_STR_LEN 256 


void ast2str(struct ast *tree, char *buff) { 
  memset(buff, 0, RISCV_MAX_INSTRUCTION_STR_LEN); 
  switch (tree->ast_node_type) {
    case RISCV_UTYPE: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      switch (tree->ast_node.utype.op) { 
        case RISCV_LUI:{
          s0 = "lui";
          s0_len = 3;
          break;
        }
        case RISCV_AUIPC:{
          s0 = "auipc";
          s0_len = 5;
          break;
        }
      }
      spc( &s1, &s1_len);
      switch (tree->ast_node.utype.rd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      hex_bits_signed_20(tree->ast_node.utype.imm, &s4, &s4_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      }
    }
    break;
    case RISCV_JAL: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      s0 = "jal";
      s0_len = 3;
      spc( &s1, &s1_len);
      switch (tree->ast_node.riscv_jal.rd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      hex_bits_signed_21(tree->ast_node.riscv_jal.imm, &s4, &s4_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      }
    }
    break;
    case RISCV_JALR: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      s0 = "jalr";
      s0_len = 4;
      spc( &s1, &s1_len);
      switch (tree->ast_node.riscv_jalr.rd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      hex_bits_signed_12(tree->ast_node.riscv_jalr.imm, &s4, &s4_len);
      s5 = "(";
      s5_len = 1;
      switch (tree->ast_node.riscv_jalr.rs1) { 
        case 0x08:{
          s6 = "fp";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "s5";
          s6_len = 2;
          break;
        }
        case 0x01:{
          s6 = "ra";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "t1";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "s1";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "a6";
          s6_len = 2;
          break;
        }
        case 0x1B:{
          s6 = "s11";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "t3";
          s6_len = 2;
          break;
        }
        case 0x16:{
          s6 = "s6";
          s6_len = 2;
          break;
        }
        case 0x00:{
          s6 = "zero";
          s6_len = 4;
          break;
        }
        case 0x0A:{
          s6 = "a0";
          s6_len = 2;
          break;
        }
        case 0x1A:{
          s6 = "s10";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "s7";
          s6_len = 2;
          break;
        }
        case 0x0C:{
          s6 = "a2";
          s6_len = 2;
          break;
        }
        case 0x18:{
          s6 = "s8";
          s6_len = 2;
          break;
        }
        case 0x02:{
          s6 = "sp";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "t6";
          s6_len = 2;
          break;
        }
        case 0x0B:{
          s6 = "a1";
          s6_len = 2;
          break;
        }
        case 0x07:{
          s6 = "t2";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "s3";
          s6_len = 2;
          break;
        }
        case 0x04:{
          s6 = "tp";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "s9";
          s6_len = 2;
          break;
        }
        case 0x12:{
          s6 = "s2";
          s6_len = 2;
          break;
        }
        case 0x14:{
          s6 = "s4";
          s6_len = 2;
          break;
        }
        case 0x0E:{
          s6 = "a4";
          s6_len = 2;
          break;
        }
        case 0x1E:{
          s6 = "t5";
          s6_len = 2;
          break;
        }
        case 0x11:{
          s6 = "a7";
          s6_len = 2;
          break;
        }
        case 0x03:{
          s6 = "gp";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "t0";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "t4";
          s6_len = 2;
          break;
        }
        case 0x0D:{
          s6 = "a3";
          s6_len = 2;
          break;
        }
        case 0x0F:{
          s6 = "a5";
          s6_len = 2;
          break;
        }
      }
      s7 = ")";
      s7_len = 1;
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      }
    }
    break;
    case RISCV_BTYPE: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      switch (tree->ast_node.btype.op) { 
        case RISCV_BGEU:{
          s0 = "bgeu";
          s0_len = 4;
          break;
        }
        case RISCV_BLT:{
          s0 = "blt";
          s0_len = 3;
          break;
        }
        case RISCV_BGE:{
          s0 = "bge";
          s0_len = 3;
          break;
        }
        case RISCV_BLTU:{
          s0 = "bltu";
          s0_len = 4;
          break;
        }
        case RISCV_BNE:{
          s0 = "bne";
          s0_len = 3;
          break;
        }
        case RISCV_BEQ:{
          s0 = "beq";
          s0_len = 3;
          break;
        }
      }
      spc( &s1, &s1_len);
      switch (tree->ast_node.btype.rs1) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.btype.rs2) { 
        case 0x08:{
          s4 = "fp";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "s5";
          s4_len = 2;
          break;
        }
        case 0x01:{
          s4 = "ra";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "t1";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "a6";
          s4_len = 2;
          break;
        }
        case 0x1B:{
          s4 = "s11";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "t3";
          s4_len = 2;
          break;
        }
        case 0x16:{
          s4 = "s6";
          s4_len = 2;
          break;
        }
        case 0x00:{
          s4 = "zero";
          s4_len = 4;
          break;
        }
        case 0x0A:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x1A:{
          s4 = "s10";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "s7";
          s4_len = 2;
          break;
        }
        case 0x0C:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x18:{
          s4 = "s8";
          s4_len = 2;
          break;
        }
        case 0x02:{
          s4 = "sp";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "t6";
          s4_len = 2;
          break;
        }
        case 0x0B:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x07:{
          s4 = "t2";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "s3";
          s4_len = 2;
          break;
        }
        case 0x04:{
          s4 = "tp";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "s9";
          s4_len = 2;
          break;
        }
        case 0x12:{
          s4 = "s2";
          s4_len = 2;
          break;
        }
        case 0x14:{
          s4 = "s4";
          s4_len = 2;
          break;
        }
        case 0x0E:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x1E:{
          s4 = "t5";
          s4_len = 2;
          break;
        }
        case 0x11:{
          s4 = "a7";
          s4_len = 2;
          break;
        }
        case 0x03:{
          s4 = "gp";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "t0";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "t4";
          s4_len = 2;
          break;
        }
        case 0x0D:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x0F:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
      }
      sep( &s5, &s5_len);
      hex_bits_signed_13(tree->ast_node.btype.imm, &s6, &s6_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
    }
    break;
    case RISCV_ITYPE: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      switch (tree->ast_node.itype.op) { 
        case RISCV_ANDI:{
          s0 = "andi";
          s0_len = 4;
          break;
        }
        case RISCV_ADDI:{
          s0 = "addi";
          s0_len = 4;
          break;
        }
        case RISCV_XORI:{
          s0 = "xori";
          s0_len = 4;
          break;
        }
        case RISCV_SLTI:{
          s0 = "slti";
          s0_len = 4;
          break;
        }
        case RISCV_ORI:{
          s0 = "ori";
          s0_len = 3;
          break;
        }
        case RISCV_SLTIU:{
          s0 = "sltiu";
          s0_len = 5;
          break;
        }
      }
      spc( &s1, &s1_len);
      switch (tree->ast_node.itype.rd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.itype.rs1) { 
        case 0x08:{
          s4 = "fp";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "s5";
          s4_len = 2;
          break;
        }
        case 0x01:{
          s4 = "ra";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "t1";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "a6";
          s4_len = 2;
          break;
        }
        case 0x1B:{
          s4 = "s11";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "t3";
          s4_len = 2;
          break;
        }
        case 0x16:{
          s4 = "s6";
          s4_len = 2;
          break;
        }
        case 0x00:{
          s4 = "zero";
          s4_len = 4;
          break;
        }
        case 0x0A:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x1A:{
          s4 = "s10";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "s7";
          s4_len = 2;
          break;
        }
        case 0x0C:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x18:{
          s4 = "s8";
          s4_len = 2;
          break;
        }
        case 0x02:{
          s4 = "sp";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "t6";
          s4_len = 2;
          break;
        }
        case 0x0B:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x07:{
          s4 = "t2";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "s3";
          s4_len = 2;
          break;
        }
        case 0x04:{
          s4 = "tp";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "s9";
          s4_len = 2;
          break;
        }
        case 0x12:{
          s4 = "s2";
          s4_len = 2;
          break;
        }
        case 0x14:{
          s4 = "s4";
          s4_len = 2;
          break;
        }
        case 0x0E:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x1E:{
          s4 = "t5";
          s4_len = 2;
          break;
        }
        case 0x11:{
          s4 = "a7";
          s4_len = 2;
          break;
        }
        case 0x03:{
          s4 = "gp";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "t0";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "t4";
          s4_len = 2;
          break;
        }
        case 0x0D:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x0F:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
      }
      sep( &s5, &s5_len);
      hex_bits_signed_12(tree->ast_node.itype.imm, &s6, &s6_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
    }
    break;
    case RISCV_SHIFTIOP: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      switch (tree->ast_node.shiftiop.op) { 
        case RISCV_SRAI:{
          s0 = "srai";
          s0_len = 4;
          break;
        }
        case RISCV_SRLI:{
          s0 = "srli";
          s0_len = 4;
          break;
        }
        case RISCV_SLLI:{
          s0 = "slli";
          s0_len = 4;
          break;
        }
      }
      spc( &s1, &s1_len);
      switch (tree->ast_node.shiftiop.rd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.shiftiop.rs1) { 
        case 0x08:{
          s4 = "fp";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "s5";
          s4_len = 2;
          break;
        }
        case 0x01:{
          s4 = "ra";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "t1";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "a6";
          s4_len = 2;
          break;
        }
        case 0x1B:{
          s4 = "s11";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "t3";
          s4_len = 2;
          break;
        }
        case 0x16:{
          s4 = "s6";
          s4_len = 2;
          break;
        }
        case 0x00:{
          s4 = "zero";
          s4_len = 4;
          break;
        }
        case 0x0A:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x1A:{
          s4 = "s10";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "s7";
          s4_len = 2;
          break;
        }
        case 0x0C:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x18:{
          s4 = "s8";
          s4_len = 2;
          break;
        }
        case 0x02:{
          s4 = "sp";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "t6";
          s4_len = 2;
          break;
        }
        case 0x0B:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x07:{
          s4 = "t2";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "s3";
          s4_len = 2;
          break;
        }
        case 0x04:{
          s4 = "tp";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "s9";
          s4_len = 2;
          break;
        }
        case 0x12:{
          s4 = "s2";
          s4_len = 2;
          break;
        }
        case 0x14:{
          s4 = "s4";
          s4_len = 2;
          break;
        }
        case 0x0E:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x1E:{
          s4 = "t5";
          s4_len = 2;
          break;
        }
        case 0x11:{
          s4 = "a7";
          s4_len = 2;
          break;
        }
        case 0x03:{
          s4 = "gp";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "t0";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "t4";
          s4_len = 2;
          break;
        }
        case 0x0D:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x0F:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
      }
      sep( &s5, &s5_len);
      hex_bits_6(tree->ast_node.shiftiop.shamt, &s6, &s6_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
    }
    break;
    case RISCV_RTYPE: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      switch (tree->ast_node.rtype.op) { 
        case RISCV_SLL:{
          s0 = "sll";
          s0_len = 3;
          break;
        }
        case RISCV_SRL:{
          s0 = "srl";
          s0_len = 3;
          break;
        }
        case RISCV_SLTU:{
          s0 = "sltu";
          s0_len = 4;
          break;
        }
        case RISCV_ADD:{
          s0 = "add";
          s0_len = 3;
          break;
        }
        case RISCV_XOR:{
          s0 = "xor";
          s0_len = 3;
          break;
        }
        case RISCV_SLT:{
          s0 = "slt";
          s0_len = 3;
          break;
        }
        case RISCV_AND:{
          s0 = "and";
          s0_len = 3;
          break;
        }
        case RISCV_OR:{
          s0 = "or";
          s0_len = 2;
          break;
        }
        case RISCV_SRA:{
          s0 = "sra";
          s0_len = 3;
          break;
        }
        case RISCV_SUB:{
          s0 = "sub";
          s0_len = 3;
          break;
        }
      }
      spc( &s1, &s1_len);
      switch (tree->ast_node.rtype.rd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.rtype.rs1) { 
        case 0x08:{
          s4 = "fp";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "s5";
          s4_len = 2;
          break;
        }
        case 0x01:{
          s4 = "ra";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "t1";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "a6";
          s4_len = 2;
          break;
        }
        case 0x1B:{
          s4 = "s11";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "t3";
          s4_len = 2;
          break;
        }
        case 0x16:{
          s4 = "s6";
          s4_len = 2;
          break;
        }
        case 0x00:{
          s4 = "zero";
          s4_len = 4;
          break;
        }
        case 0x0A:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x1A:{
          s4 = "s10";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "s7";
          s4_len = 2;
          break;
        }
        case 0x0C:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x18:{
          s4 = "s8";
          s4_len = 2;
          break;
        }
        case 0x02:{
          s4 = "sp";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "t6";
          s4_len = 2;
          break;
        }
        case 0x0B:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x07:{
          s4 = "t2";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "s3";
          s4_len = 2;
          break;
        }
        case 0x04:{
          s4 = "tp";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "s9";
          s4_len = 2;
          break;
        }
        case 0x12:{
          s4 = "s2";
          s4_len = 2;
          break;
        }
        case 0x14:{
          s4 = "s4";
          s4_len = 2;
          break;
        }
        case 0x0E:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x1E:{
          s4 = "t5";
          s4_len = 2;
          break;
        }
        case 0x11:{
          s4 = "a7";
          s4_len = 2;
          break;
        }
        case 0x03:{
          s4 = "gp";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "t0";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "t4";
          s4_len = 2;
          break;
        }
        case 0x0D:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x0F:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.rtype.rs2) { 
        case 0x08:{
          s6 = "fp";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "s5";
          s6_len = 2;
          break;
        }
        case 0x01:{
          s6 = "ra";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "t1";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "s1";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "a6";
          s6_len = 2;
          break;
        }
        case 0x1B:{
          s6 = "s11";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "t3";
          s6_len = 2;
          break;
        }
        case 0x16:{
          s6 = "s6";
          s6_len = 2;
          break;
        }
        case 0x00:{
          s6 = "zero";
          s6_len = 4;
          break;
        }
        case 0x0A:{
          s6 = "a0";
          s6_len = 2;
          break;
        }
        case 0x1A:{
          s6 = "s10";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "s7";
          s6_len = 2;
          break;
        }
        case 0x0C:{
          s6 = "a2";
          s6_len = 2;
          break;
        }
        case 0x18:{
          s6 = "s8";
          s6_len = 2;
          break;
        }
        case 0x02:{
          s6 = "sp";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "t6";
          s6_len = 2;
          break;
        }
        case 0x0B:{
          s6 = "a1";
          s6_len = 2;
          break;
        }
        case 0x07:{
          s6 = "t2";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "s3";
          s6_len = 2;
          break;
        }
        case 0x04:{
          s6 = "tp";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "s9";
          s6_len = 2;
          break;
        }
        case 0x12:{
          s6 = "s2";
          s6_len = 2;
          break;
        }
        case 0x14:{
          s6 = "s4";
          s6_len = 2;
          break;
        }
        case 0x0E:{
          s6 = "a4";
          s6_len = 2;
          break;
        }
        case 0x1E:{
          s6 = "t5";
          s6_len = 2;
          break;
        }
        case 0x11:{
          s6 = "a7";
          s6_len = 2;
          break;
        }
        case 0x03:{
          s6 = "gp";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "t0";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "t4";
          s6_len = 2;
          break;
        }
        case 0x0D:{
          s6 = "a3";
          s6_len = 2;
          break;
        }
        case 0x0F:{
          s6 = "a5";
          s6_len = 2;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
    }
    break;
    case RISCV_LOAD: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      char *s8; size_t s8_len;
      char *s9; size_t s9_len;
      char *s10; size_t s10_len;
      char *s11; size_t s11_len;
      s0 = "l";
      s0_len = 1;
      switch (tree->ast_node.load.width) { 
        case RISCV_BYTE:{
          s1 = "b";
          s1_len = 1;
          break;
        }
        case RISCV_WORD:{
          s1 = "w";
          s1_len = 1;
          break;
        }
        case RISCV_DOUBLE:{
          s1 = "d";
          s1_len = 1;
          break;
        }
        case RISCV_HALF:{
          s1 = "h";
          s1_len = 1;
          break;
        }
      }
      if (tree->ast_node.load.is_unsigned) {
        s2 = "u"; 
        s2_len = 1;
      }
      else {
        s2 = ""; 
        s2_len = 0;
      } 
      if (tree->ast_node.load.aq) {
        s3 = ".aq"; 
        s3_len = 3;
      }
      else {
        s3 = ""; 
        s3_len = 0;
      } 
      if (tree->ast_node.load.rl) {
        s4 = ".rl"; 
        s4_len = 3;
      }
      else {
        s4 = ""; 
        s4_len = 0;
      } 
      spc( &s5, &s5_len);
      switch (tree->ast_node.load.rd) { 
        case 0x08:{
          s6 = "fp";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "s5";
          s6_len = 2;
          break;
        }
        case 0x01:{
          s6 = "ra";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "t1";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "s1";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "a6";
          s6_len = 2;
          break;
        }
        case 0x1B:{
          s6 = "s11";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "t3";
          s6_len = 2;
          break;
        }
        case 0x16:{
          s6 = "s6";
          s6_len = 2;
          break;
        }
        case 0x00:{
          s6 = "zero";
          s6_len = 4;
          break;
        }
        case 0x0A:{
          s6 = "a0";
          s6_len = 2;
          break;
        }
        case 0x1A:{
          s6 = "s10";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "s7";
          s6_len = 2;
          break;
        }
        case 0x0C:{
          s6 = "a2";
          s6_len = 2;
          break;
        }
        case 0x18:{
          s6 = "s8";
          s6_len = 2;
          break;
        }
        case 0x02:{
          s6 = "sp";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "t6";
          s6_len = 2;
          break;
        }
        case 0x0B:{
          s6 = "a1";
          s6_len = 2;
          break;
        }
        case 0x07:{
          s6 = "t2";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "s3";
          s6_len = 2;
          break;
        }
        case 0x04:{
          s6 = "tp";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "s9";
          s6_len = 2;
          break;
        }
        case 0x12:{
          s6 = "s2";
          s6_len = 2;
          break;
        }
        case 0x14:{
          s6 = "s4";
          s6_len = 2;
          break;
        }
        case 0x0E:{
          s6 = "a4";
          s6_len = 2;
          break;
        }
        case 0x1E:{
          s6 = "t5";
          s6_len = 2;
          break;
        }
        case 0x11:{
          s6 = "a7";
          s6_len = 2;
          break;
        }
        case 0x03:{
          s6 = "gp";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "t0";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "t4";
          s6_len = 2;
          break;
        }
        case 0x0D:{
          s6 = "a3";
          s6_len = 2;
          break;
        }
        case 0x0F:{
          s6 = "a5";
          s6_len = 2;
          break;
        }
      }
      sep( &s7, &s7_len);
      hex_bits_signed_12(tree->ast_node.load.imm, &s8, &s8_len);
      s9 = "(";
      s9_len = 1;
      switch (tree->ast_node.load.rs1) { 
        case 0x08:{
          s10 = "fp";
          s10_len = 2;
          break;
        }
        case 0x15:{
          s10 = "s5";
          s10_len = 2;
          break;
        }
        case 0x01:{
          s10 = "ra";
          s10_len = 2;
          break;
        }
        case 0x06:{
          s10 = "t1";
          s10_len = 2;
          break;
        }
        case 0x09:{
          s10 = "s1";
          s10_len = 2;
          break;
        }
        case 0x10:{
          s10 = "a6";
          s10_len = 2;
          break;
        }
        case 0x1B:{
          s10 = "s11";
          s10_len = 3;
          break;
        }
        case 0x1C:{
          s10 = "t3";
          s10_len = 2;
          break;
        }
        case 0x16:{
          s10 = "s6";
          s10_len = 2;
          break;
        }
        case 0x00:{
          s10 = "zero";
          s10_len = 4;
          break;
        }
        case 0x0A:{
          s10 = "a0";
          s10_len = 2;
          break;
        }
        case 0x1A:{
          s10 = "s10";
          s10_len = 3;
          break;
        }
        case 0x17:{
          s10 = "s7";
          s10_len = 2;
          break;
        }
        case 0x0C:{
          s10 = "a2";
          s10_len = 2;
          break;
        }
        case 0x18:{
          s10 = "s8";
          s10_len = 2;
          break;
        }
        case 0x02:{
          s10 = "sp";
          s10_len = 2;
          break;
        }
        case 0x1F:{
          s10 = "t6";
          s10_len = 2;
          break;
        }
        case 0x0B:{
          s10 = "a1";
          s10_len = 2;
          break;
        }
        case 0x07:{
          s10 = "t2";
          s10_len = 2;
          break;
        }
        case 0x13:{
          s10 = "s3";
          s10_len = 2;
          break;
        }
        case 0x04:{
          s10 = "tp";
          s10_len = 2;
          break;
        }
        case 0x19:{
          s10 = "s9";
          s10_len = 2;
          break;
        }
        case 0x12:{
          s10 = "s2";
          s10_len = 2;
          break;
        }
        case 0x14:{
          s10 = "s4";
          s10_len = 2;
          break;
        }
        case 0x0E:{
          s10 = "a4";
          s10_len = 2;
          break;
        }
        case 0x1E:{
          s10 = "t5";
          s10_len = 2;
          break;
        }
        case 0x11:{
          s10 = "a7";
          s10_len = 2;
          break;
        }
        case 0x03:{
          s10 = "gp";
          s10_len = 2;
          break;
        }
        case 0x05:{
          s10 = "t0";
          s10_len = 2;
          break;
        }
        case 0x1D:{
          s10 = "t4";
          s10_len = 2;
          break;
        }
        case 0x0D:{
          s10 = "a3";
          s10_len = 2;
          break;
        }
        case 0x0F:{
          s10 = "a5";
          s10_len = 2;
          break;
        }
      }
      s11 = ")";
      s11_len = 1;
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len, s8, s8_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len + s8_len, s9, s9_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len + s8_len + s9_len, s10, s10_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len + s8_len + s9_len + s10_len, s11, s11_len);
      }
    }
    break;
    case RISCV_STORE: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      char *s8; size_t s8_len;
      char *s9; size_t s9_len;
      char *s10; size_t s10_len;
      char *s11; size_t s11_len;
      char *s12; size_t s12_len;
      char *s13; size_t s13_len;
      s0 = "s";
      s0_len = 1;
      switch (tree->ast_node.store.width) { 
        case RISCV_BYTE:{
          s1 = "b";
          s1_len = 1;
          break;
        }
        case RISCV_WORD:{
          s1 = "w";
          s1_len = 1;
          break;
        }
        case RISCV_DOUBLE:{
          s1 = "d";
          s1_len = 1;
          break;
        }
        case RISCV_HALF:{
          s1 = "h";
          s1_len = 1;
          break;
        }
      }
      if (tree->ast_node.store.aq) {
        s2 = ".aq"; 
        s2_len = 3;
      }
      else {
        s2 = ""; 
        s2_len = 0;
      } 
      if (tree->ast_node.store.rl) {
        s3 = ".rl"; 
        s3_len = 3;
      }
      else {
        s3 = ""; 
        s3_len = 0;
      } 
      spc( &s4, &s4_len);
      switch (tree->ast_node.store.rs2) { 
        case 0x08:{
          s5 = "fp";
          s5_len = 2;
          break;
        }
        case 0x15:{
          s5 = "s5";
          s5_len = 2;
          break;
        }
        case 0x01:{
          s5 = "ra";
          s5_len = 2;
          break;
        }
        case 0x06:{
          s5 = "t1";
          s5_len = 2;
          break;
        }
        case 0x09:{
          s5 = "s1";
          s5_len = 2;
          break;
        }
        case 0x10:{
          s5 = "a6";
          s5_len = 2;
          break;
        }
        case 0x1B:{
          s5 = "s11";
          s5_len = 3;
          break;
        }
        case 0x1C:{
          s5 = "t3";
          s5_len = 2;
          break;
        }
        case 0x16:{
          s5 = "s6";
          s5_len = 2;
          break;
        }
        case 0x00:{
          s5 = "zero";
          s5_len = 4;
          break;
        }
        case 0x0A:{
          s5 = "a0";
          s5_len = 2;
          break;
        }
        case 0x1A:{
          s5 = "s10";
          s5_len = 3;
          break;
        }
        case 0x17:{
          s5 = "s7";
          s5_len = 2;
          break;
        }
        case 0x0C:{
          s5 = "a2";
          s5_len = 2;
          break;
        }
        case 0x18:{
          s5 = "s8";
          s5_len = 2;
          break;
        }
        case 0x02:{
          s5 = "sp";
          s5_len = 2;
          break;
        }
        case 0x1F:{
          s5 = "t6";
          s5_len = 2;
          break;
        }
        case 0x0B:{
          s5 = "a1";
          s5_len = 2;
          break;
        }
        case 0x07:{
          s5 = "t2";
          s5_len = 2;
          break;
        }
        case 0x13:{
          s5 = "s3";
          s5_len = 2;
          break;
        }
        case 0x04:{
          s5 = "tp";
          s5_len = 2;
          break;
        }
        case 0x19:{
          s5 = "s9";
          s5_len = 2;
          break;
        }
        case 0x12:{
          s5 = "s2";
          s5_len = 2;
          break;
        }
        case 0x14:{
          s5 = "s4";
          s5_len = 2;
          break;
        }
        case 0x0E:{
          s5 = "a4";
          s5_len = 2;
          break;
        }
        case 0x1E:{
          s5 = "t5";
          s5_len = 2;
          break;
        }
        case 0x11:{
          s5 = "a7";
          s5_len = 2;
          break;
        }
        case 0x03:{
          s5 = "gp";
          s5_len = 2;
          break;
        }
        case 0x05:{
          s5 = "t0";
          s5_len = 2;
          break;
        }
        case 0x1D:{
          s5 = "t4";
          s5_len = 2;
          break;
        }
        case 0x0D:{
          s5 = "a3";
          s5_len = 2;
          break;
        }
        case 0x0F:{
          s5 = "a5";
          s5_len = 2;
          break;
        }
      }
      sep( &s6, &s6_len);
      hex_bits_signed_12(tree->ast_node.store.imm, &s7, &s7_len);
      opt_spc( &s8, &s8_len);
      s9 = "(";
      s9_len = 1;
      opt_spc( &s10, &s10_len);
      switch (tree->ast_node.store.rs1) { 
        case 0x08:{
          s11 = "fp";
          s11_len = 2;
          break;
        }
        case 0x15:{
          s11 = "s5";
          s11_len = 2;
          break;
        }
        case 0x01:{
          s11 = "ra";
          s11_len = 2;
          break;
        }
        case 0x06:{
          s11 = "t1";
          s11_len = 2;
          break;
        }
        case 0x09:{
          s11 = "s1";
          s11_len = 2;
          break;
        }
        case 0x10:{
          s11 = "a6";
          s11_len = 2;
          break;
        }
        case 0x1B:{
          s11 = "s11";
          s11_len = 3;
          break;
        }
        case 0x1C:{
          s11 = "t3";
          s11_len = 2;
          break;
        }
        case 0x16:{
          s11 = "s6";
          s11_len = 2;
          break;
        }
        case 0x00:{
          s11 = "zero";
          s11_len = 4;
          break;
        }
        case 0x0A:{
          s11 = "a0";
          s11_len = 2;
          break;
        }
        case 0x1A:{
          s11 = "s10";
          s11_len = 3;
          break;
        }
        case 0x17:{
          s11 = "s7";
          s11_len = 2;
          break;
        }
        case 0x0C:{
          s11 = "a2";
          s11_len = 2;
          break;
        }
        case 0x18:{
          s11 = "s8";
          s11_len = 2;
          break;
        }
        case 0x02:{
          s11 = "sp";
          s11_len = 2;
          break;
        }
        case 0x1F:{
          s11 = "t6";
          s11_len = 2;
          break;
        }
        case 0x0B:{
          s11 = "a1";
          s11_len = 2;
          break;
        }
        case 0x07:{
          s11 = "t2";
          s11_len = 2;
          break;
        }
        case 0x13:{
          s11 = "s3";
          s11_len = 2;
          break;
        }
        case 0x04:{
          s11 = "tp";
          s11_len = 2;
          break;
        }
        case 0x19:{
          s11 = "s9";
          s11_len = 2;
          break;
        }
        case 0x12:{
          s11 = "s2";
          s11_len = 2;
          break;
        }
        case 0x14:{
          s11 = "s4";
          s11_len = 2;
          break;
        }
        case 0x0E:{
          s11 = "a4";
          s11_len = 2;
          break;
        }
        case 0x1E:{
          s11 = "t5";
          s11_len = 2;
          break;
        }
        case 0x11:{
          s11 = "a7";
          s11_len = 2;
          break;
        }
        case 0x03:{
          s11 = "gp";
          s11_len = 2;
          break;
        }
        case 0x05:{
          s11 = "t0";
          s11_len = 2;
          break;
        }
        case 0x1D:{
          s11 = "t4";
          s11_len = 2;
          break;
        }
        case 0x0D:{
          s11 = "a3";
          s11_len = 2;
          break;
        }
        case 0x0F:{
          s11 = "a5";
          s11_len = 2;
          break;
        }
      }
      opt_spc( &s12, &s12_len);
      s13 = ")";
      s13_len = 1;
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len, s8, s8_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len + s8_len, s9, s9_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len + s8_len + s9_len, s10, s10_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len + s8_len + s9_len + s10_len, s11, s11_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len + s8_len + s9_len + s10_len + s11_len, s12, s12_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len + s8_len + s9_len + s10_len + s11_len + s12_len, s13, s13_len);
      }
    }
    break;
    case RISCV_ADDIW: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      s0 = "addiw";
      s0_len = 5;
      spc( &s1, &s1_len);
      switch (tree->ast_node.addiw.rd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.addiw.rs1) { 
        case 0x08:{
          s4 = "fp";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "s5";
          s4_len = 2;
          break;
        }
        case 0x01:{
          s4 = "ra";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "t1";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "a6";
          s4_len = 2;
          break;
        }
        case 0x1B:{
          s4 = "s11";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "t3";
          s4_len = 2;
          break;
        }
        case 0x16:{
          s4 = "s6";
          s4_len = 2;
          break;
        }
        case 0x00:{
          s4 = "zero";
          s4_len = 4;
          break;
        }
        case 0x0A:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x1A:{
          s4 = "s10";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "s7";
          s4_len = 2;
          break;
        }
        case 0x0C:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x18:{
          s4 = "s8";
          s4_len = 2;
          break;
        }
        case 0x02:{
          s4 = "sp";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "t6";
          s4_len = 2;
          break;
        }
        case 0x0B:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x07:{
          s4 = "t2";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "s3";
          s4_len = 2;
          break;
        }
        case 0x04:{
          s4 = "tp";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "s9";
          s4_len = 2;
          break;
        }
        case 0x12:{
          s4 = "s2";
          s4_len = 2;
          break;
        }
        case 0x14:{
          s4 = "s4";
          s4_len = 2;
          break;
        }
        case 0x0E:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x1E:{
          s4 = "t5";
          s4_len = 2;
          break;
        }
        case 0x11:{
          s4 = "a7";
          s4_len = 2;
          break;
        }
        case 0x03:{
          s4 = "gp";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "t0";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "t4";
          s4_len = 2;
          break;
        }
        case 0x0D:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x0F:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
      }
      sep( &s5, &s5_len);
      hex_bits_signed_12(tree->ast_node.addiw.imm, &s6, &s6_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
    }
    break;
    case RISCV_RTYPEW: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      switch (tree->ast_node.rtypew.op) { 
        case RISCV_SRAW:{
          s0 = "sraw";
          s0_len = 4;
          break;
        }
        case RISCV_SUBW:{
          s0 = "subw";
          s0_len = 4;
          break;
        }
        case RISCV_SLLW:{
          s0 = "sllw";
          s0_len = 4;
          break;
        }
        case RISCV_SRLW:{
          s0 = "srlw";
          s0_len = 4;
          break;
        }
        case RISCV_ADDW:{
          s0 = "addw";
          s0_len = 4;
          break;
        }
      }
      spc( &s1, &s1_len);
      switch (tree->ast_node.rtypew.rd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.rtypew.rs1) { 
        case 0x08:{
          s4 = "fp";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "s5";
          s4_len = 2;
          break;
        }
        case 0x01:{
          s4 = "ra";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "t1";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "a6";
          s4_len = 2;
          break;
        }
        case 0x1B:{
          s4 = "s11";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "t3";
          s4_len = 2;
          break;
        }
        case 0x16:{
          s4 = "s6";
          s4_len = 2;
          break;
        }
        case 0x00:{
          s4 = "zero";
          s4_len = 4;
          break;
        }
        case 0x0A:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x1A:{
          s4 = "s10";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "s7";
          s4_len = 2;
          break;
        }
        case 0x0C:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x18:{
          s4 = "s8";
          s4_len = 2;
          break;
        }
        case 0x02:{
          s4 = "sp";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "t6";
          s4_len = 2;
          break;
        }
        case 0x0B:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x07:{
          s4 = "t2";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "s3";
          s4_len = 2;
          break;
        }
        case 0x04:{
          s4 = "tp";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "s9";
          s4_len = 2;
          break;
        }
        case 0x12:{
          s4 = "s2";
          s4_len = 2;
          break;
        }
        case 0x14:{
          s4 = "s4";
          s4_len = 2;
          break;
        }
        case 0x0E:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x1E:{
          s4 = "t5";
          s4_len = 2;
          break;
        }
        case 0x11:{
          s4 = "a7";
          s4_len = 2;
          break;
        }
        case 0x03:{
          s4 = "gp";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "t0";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "t4";
          s4_len = 2;
          break;
        }
        case 0x0D:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x0F:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.rtypew.rs2) { 
        case 0x08:{
          s6 = "fp";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "s5";
          s6_len = 2;
          break;
        }
        case 0x01:{
          s6 = "ra";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "t1";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "s1";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "a6";
          s6_len = 2;
          break;
        }
        case 0x1B:{
          s6 = "s11";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "t3";
          s6_len = 2;
          break;
        }
        case 0x16:{
          s6 = "s6";
          s6_len = 2;
          break;
        }
        case 0x00:{
          s6 = "zero";
          s6_len = 4;
          break;
        }
        case 0x0A:{
          s6 = "a0";
          s6_len = 2;
          break;
        }
        case 0x1A:{
          s6 = "s10";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "s7";
          s6_len = 2;
          break;
        }
        case 0x0C:{
          s6 = "a2";
          s6_len = 2;
          break;
        }
        case 0x18:{
          s6 = "s8";
          s6_len = 2;
          break;
        }
        case 0x02:{
          s6 = "sp";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "t6";
          s6_len = 2;
          break;
        }
        case 0x0B:{
          s6 = "a1";
          s6_len = 2;
          break;
        }
        case 0x07:{
          s6 = "t2";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "s3";
          s6_len = 2;
          break;
        }
        case 0x04:{
          s6 = "tp";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "s9";
          s6_len = 2;
          break;
        }
        case 0x12:{
          s6 = "s2";
          s6_len = 2;
          break;
        }
        case 0x14:{
          s6 = "s4";
          s6_len = 2;
          break;
        }
        case 0x0E:{
          s6 = "a4";
          s6_len = 2;
          break;
        }
        case 0x1E:{
          s6 = "t5";
          s6_len = 2;
          break;
        }
        case 0x11:{
          s6 = "a7";
          s6_len = 2;
          break;
        }
        case 0x03:{
          s6 = "gp";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "t0";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "t4";
          s6_len = 2;
          break;
        }
        case 0x0D:{
          s6 = "a3";
          s6_len = 2;
          break;
        }
        case 0x0F:{
          s6 = "a5";
          s6_len = 2;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
    }
    break;
    case RISCV_SHIFTIWOP: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      switch (tree->ast_node.shiftiwop.op) { 
        case RISCV_SRLIW:{
          s0 = "srliw";
          s0_len = 5;
          break;
        }
        case RISCV_SLLIW:{
          s0 = "slliw";
          s0_len = 5;
          break;
        }
        case RISCV_SRAIW:{
          s0 = "sraiw";
          s0_len = 5;
          break;
        }
      }
      spc( &s1, &s1_len);
      switch (tree->ast_node.shiftiwop.rd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.shiftiwop.rs1) { 
        case 0x08:{
          s4 = "fp";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "s5";
          s4_len = 2;
          break;
        }
        case 0x01:{
          s4 = "ra";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "t1";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "a6";
          s4_len = 2;
          break;
        }
        case 0x1B:{
          s4 = "s11";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "t3";
          s4_len = 2;
          break;
        }
        case 0x16:{
          s4 = "s6";
          s4_len = 2;
          break;
        }
        case 0x00:{
          s4 = "zero";
          s4_len = 4;
          break;
        }
        case 0x0A:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x1A:{
          s4 = "s10";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "s7";
          s4_len = 2;
          break;
        }
        case 0x0C:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x18:{
          s4 = "s8";
          s4_len = 2;
          break;
        }
        case 0x02:{
          s4 = "sp";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "t6";
          s4_len = 2;
          break;
        }
        case 0x0B:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x07:{
          s4 = "t2";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "s3";
          s4_len = 2;
          break;
        }
        case 0x04:{
          s4 = "tp";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "s9";
          s4_len = 2;
          break;
        }
        case 0x12:{
          s4 = "s2";
          s4_len = 2;
          break;
        }
        case 0x14:{
          s4 = "s4";
          s4_len = 2;
          break;
        }
        case 0x0E:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x1E:{
          s4 = "t5";
          s4_len = 2;
          break;
        }
        case 0x11:{
          s4 = "a7";
          s4_len = 2;
          break;
        }
        case 0x03:{
          s4 = "gp";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "t0";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "t4";
          s4_len = 2;
          break;
        }
        case 0x0D:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x0F:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
      }
      sep( &s5, &s5_len);
      hex_bits_5(tree->ast_node.shiftiwop.shamt, &s6, &s6_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
    }
    break;
    case RISCV_FENCE: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      s0 = "fence";
      s0_len = 5;
      spc( &s1, &s1_len);
      fence_bits(tree->ast_node.fence.pred, &s2, &s2_len);
      sep( &s3, &s3_len);
      fence_bits(tree->ast_node.fence.succ, &s4, &s4_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      }
    }
    break;
    case RISCV_FENCE_TSO: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      s0 = "fence.tso";
      s0_len = 9;
      spc( &s1, &s1_len);
      fence_bits(tree->ast_node.fence_tso.pred, &s2, &s2_len);
      sep( &s3, &s3_len);
      fence_bits(tree->ast_node.fence_tso.succ, &s4, &s4_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      }
    }
    break;
    case RISCV_FENCEI: {
{
            char *s0; size_t s0_len;
      s0 = "fence.i";
      s0_len = 7;
      memcpy(buff , s0, s0_len);
      }
    }
    break;
    case RISCV_ECALL: {
{
            char *s0; size_t s0_len;
      s0 = "ecall";
      s0_len = 5;
      memcpy(buff , s0, s0_len);
      }
    }
    break;
    case RISCV_MRET: {
{
            char *s0; size_t s0_len;
      s0 = "mret";
      s0_len = 4;
      memcpy(buff , s0, s0_len);
      }
    }
    break;
    case RISCV_SRET: {
{
            char *s0; size_t s0_len;
      s0 = "sret";
      s0_len = 4;
      memcpy(buff , s0, s0_len);
      }
    }
    break;
    case RISCV_EBREAK: {
{
            char *s0; size_t s0_len;
      s0 = "ebreak";
      s0_len = 6;
      memcpy(buff , s0, s0_len);
      }
    }
    break;
    case RISCV_WFI: {
{
            char *s0; size_t s0_len;
      s0 = "wfi";
      s0_len = 3;
      memcpy(buff , s0, s0_len);
      }
    }
    break;
    case RISCV_SFENCE_VMA: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      s0 = "sfence.vma";
      s0_len = 10;
      spc( &s1, &s1_len);
      switch (tree->ast_node.sfence_vma.rs1) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.sfence_vma.rs2) { 
        case 0x08:{
          s4 = "fp";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "s5";
          s4_len = 2;
          break;
        }
        case 0x01:{
          s4 = "ra";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "t1";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "a6";
          s4_len = 2;
          break;
        }
        case 0x1B:{
          s4 = "s11";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "t3";
          s4_len = 2;
          break;
        }
        case 0x16:{
          s4 = "s6";
          s4_len = 2;
          break;
        }
        case 0x00:{
          s4 = "zero";
          s4_len = 4;
          break;
        }
        case 0x0A:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x1A:{
          s4 = "s10";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "s7";
          s4_len = 2;
          break;
        }
        case 0x0C:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x18:{
          s4 = "s8";
          s4_len = 2;
          break;
        }
        case 0x02:{
          s4 = "sp";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "t6";
          s4_len = 2;
          break;
        }
        case 0x0B:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x07:{
          s4 = "t2";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "s3";
          s4_len = 2;
          break;
        }
        case 0x04:{
          s4 = "tp";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "s9";
          s4_len = 2;
          break;
        }
        case 0x12:{
          s4 = "s2";
          s4_len = 2;
          break;
        }
        case 0x14:{
          s4 = "s4";
          s4_len = 2;
          break;
        }
        case 0x0E:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x1E:{
          s4 = "t5";
          s4_len = 2;
          break;
        }
        case 0x11:{
          s4 = "a7";
          s4_len = 2;
          break;
        }
        case 0x03:{
          s4 = "gp";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "t0";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "t4";
          s4_len = 2;
          break;
        }
        case 0x0D:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x0F:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      }
    }
    break;
    case RISCV_LOADRES: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      char *s8; size_t s8_len;
      char *s9; size_t s9_len;
      s0 = "lr.";
      s0_len = 3;
      switch (tree->ast_node.loadres.width) { 
        case RISCV_BYTE:{
          s1 = "b";
          s1_len = 1;
          break;
        }
        case RISCV_WORD:{
          s1 = "w";
          s1_len = 1;
          break;
        }
        case RISCV_DOUBLE:{
          s1 = "d";
          s1_len = 1;
          break;
        }
        case RISCV_HALF:{
          s1 = "h";
          s1_len = 1;
          break;
        }
      }
      if (tree->ast_node.loadres.aq) {
        s2 = ".aq"; 
        s2_len = 3;
      }
      else {
        s2 = ""; 
        s2_len = 0;
      } 
      if (tree->ast_node.loadres.rl) {
        s3 = ".rl"; 
        s3_len = 3;
      }
      else {
        s3 = ""; 
        s3_len = 0;
      } 
      spc( &s4, &s4_len);
      switch (tree->ast_node.loadres.rd) { 
        case 0x08:{
          s5 = "fp";
          s5_len = 2;
          break;
        }
        case 0x15:{
          s5 = "s5";
          s5_len = 2;
          break;
        }
        case 0x01:{
          s5 = "ra";
          s5_len = 2;
          break;
        }
        case 0x06:{
          s5 = "t1";
          s5_len = 2;
          break;
        }
        case 0x09:{
          s5 = "s1";
          s5_len = 2;
          break;
        }
        case 0x10:{
          s5 = "a6";
          s5_len = 2;
          break;
        }
        case 0x1B:{
          s5 = "s11";
          s5_len = 3;
          break;
        }
        case 0x1C:{
          s5 = "t3";
          s5_len = 2;
          break;
        }
        case 0x16:{
          s5 = "s6";
          s5_len = 2;
          break;
        }
        case 0x00:{
          s5 = "zero";
          s5_len = 4;
          break;
        }
        case 0x0A:{
          s5 = "a0";
          s5_len = 2;
          break;
        }
        case 0x1A:{
          s5 = "s10";
          s5_len = 3;
          break;
        }
        case 0x17:{
          s5 = "s7";
          s5_len = 2;
          break;
        }
        case 0x0C:{
          s5 = "a2";
          s5_len = 2;
          break;
        }
        case 0x18:{
          s5 = "s8";
          s5_len = 2;
          break;
        }
        case 0x02:{
          s5 = "sp";
          s5_len = 2;
          break;
        }
        case 0x1F:{
          s5 = "t6";
          s5_len = 2;
          break;
        }
        case 0x0B:{
          s5 = "a1";
          s5_len = 2;
          break;
        }
        case 0x07:{
          s5 = "t2";
          s5_len = 2;
          break;
        }
        case 0x13:{
          s5 = "s3";
          s5_len = 2;
          break;
        }
        case 0x04:{
          s5 = "tp";
          s5_len = 2;
          break;
        }
        case 0x19:{
          s5 = "s9";
          s5_len = 2;
          break;
        }
        case 0x12:{
          s5 = "s2";
          s5_len = 2;
          break;
        }
        case 0x14:{
          s5 = "s4";
          s5_len = 2;
          break;
        }
        case 0x0E:{
          s5 = "a4";
          s5_len = 2;
          break;
        }
        case 0x1E:{
          s5 = "t5";
          s5_len = 2;
          break;
        }
        case 0x11:{
          s5 = "a7";
          s5_len = 2;
          break;
        }
        case 0x03:{
          s5 = "gp";
          s5_len = 2;
          break;
        }
        case 0x05:{
          s5 = "t0";
          s5_len = 2;
          break;
        }
        case 0x1D:{
          s5 = "t4";
          s5_len = 2;
          break;
        }
        case 0x0D:{
          s5 = "a3";
          s5_len = 2;
          break;
        }
        case 0x0F:{
          s5 = "a5";
          s5_len = 2;
          break;
        }
      }
      sep( &s6, &s6_len);
      s7 = "(";
      s7_len = 1;
      switch (tree->ast_node.loadres.rs1) { 
        case 0x08:{
          s8 = "fp";
          s8_len = 2;
          break;
        }
        case 0x15:{
          s8 = "s5";
          s8_len = 2;
          break;
        }
        case 0x01:{
          s8 = "ra";
          s8_len = 2;
          break;
        }
        case 0x06:{
          s8 = "t1";
          s8_len = 2;
          break;
        }
        case 0x09:{
          s8 = "s1";
          s8_len = 2;
          break;
        }
        case 0x10:{
          s8 = "a6";
          s8_len = 2;
          break;
        }
        case 0x1B:{
          s8 = "s11";
          s8_len = 3;
          break;
        }
        case 0x1C:{
          s8 = "t3";
          s8_len = 2;
          break;
        }
        case 0x16:{
          s8 = "s6";
          s8_len = 2;
          break;
        }
        case 0x00:{
          s8 = "zero";
          s8_len = 4;
          break;
        }
        case 0x0A:{
          s8 = "a0";
          s8_len = 2;
          break;
        }
        case 0x1A:{
          s8 = "s10";
          s8_len = 3;
          break;
        }
        case 0x17:{
          s8 = "s7";
          s8_len = 2;
          break;
        }
        case 0x0C:{
          s8 = "a2";
          s8_len = 2;
          break;
        }
        case 0x18:{
          s8 = "s8";
          s8_len = 2;
          break;
        }
        case 0x02:{
          s8 = "sp";
          s8_len = 2;
          break;
        }
        case 0x1F:{
          s8 = "t6";
          s8_len = 2;
          break;
        }
        case 0x0B:{
          s8 = "a1";
          s8_len = 2;
          break;
        }
        case 0x07:{
          s8 = "t2";
          s8_len = 2;
          break;
        }
        case 0x13:{
          s8 = "s3";
          s8_len = 2;
          break;
        }
        case 0x04:{
          s8 = "tp";
          s8_len = 2;
          break;
        }
        case 0x19:{
          s8 = "s9";
          s8_len = 2;
          break;
        }
        case 0x12:{
          s8 = "s2";
          s8_len = 2;
          break;
        }
        case 0x14:{
          s8 = "s4";
          s8_len = 2;
          break;
        }
        case 0x0E:{
          s8 = "a4";
          s8_len = 2;
          break;
        }
        case 0x1E:{
          s8 = "t5";
          s8_len = 2;
          break;
        }
        case 0x11:{
          s8 = "a7";
          s8_len = 2;
          break;
        }
        case 0x03:{
          s8 = "gp";
          s8_len = 2;
          break;
        }
        case 0x05:{
          s8 = "t0";
          s8_len = 2;
          break;
        }
        case 0x1D:{
          s8 = "t4";
          s8_len = 2;
          break;
        }
        case 0x0D:{
          s8 = "a3";
          s8_len = 2;
          break;
        }
        case 0x0F:{
          s8 = "a5";
          s8_len = 2;
          break;
        }
      }
      s9 = ")";
      s9_len = 1;
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len, s8, s8_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len + s8_len, s9, s9_len);
      }
    }
    break;
    case RISCV_STORECON: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      char *s8; size_t s8_len;
      char *s9; size_t s9_len;
      char *s10; size_t s10_len;
      char *s11; size_t s11_len;
      s0 = "sc.";
      s0_len = 3;
      switch (tree->ast_node.storecon.width) { 
        case RISCV_BYTE:{
          s1 = "b";
          s1_len = 1;
          break;
        }
        case RISCV_WORD:{
          s1 = "w";
          s1_len = 1;
          break;
        }
        case RISCV_DOUBLE:{
          s1 = "d";
          s1_len = 1;
          break;
        }
        case RISCV_HALF:{
          s1 = "h";
          s1_len = 1;
          break;
        }
      }
      if (tree->ast_node.storecon.aq) {
        s2 = ".aq"; 
        s2_len = 3;
      }
      else {
        s2 = ""; 
        s2_len = 0;
      } 
      if (tree->ast_node.storecon.rl) {
        s3 = ".rl"; 
        s3_len = 3;
      }
      else {
        s3 = ""; 
        s3_len = 0;
      } 
      spc( &s4, &s4_len);
      switch (tree->ast_node.storecon.rd) { 
        case 0x08:{
          s5 = "fp";
          s5_len = 2;
          break;
        }
        case 0x15:{
          s5 = "s5";
          s5_len = 2;
          break;
        }
        case 0x01:{
          s5 = "ra";
          s5_len = 2;
          break;
        }
        case 0x06:{
          s5 = "t1";
          s5_len = 2;
          break;
        }
        case 0x09:{
          s5 = "s1";
          s5_len = 2;
          break;
        }
        case 0x10:{
          s5 = "a6";
          s5_len = 2;
          break;
        }
        case 0x1B:{
          s5 = "s11";
          s5_len = 3;
          break;
        }
        case 0x1C:{
          s5 = "t3";
          s5_len = 2;
          break;
        }
        case 0x16:{
          s5 = "s6";
          s5_len = 2;
          break;
        }
        case 0x00:{
          s5 = "zero";
          s5_len = 4;
          break;
        }
        case 0x0A:{
          s5 = "a0";
          s5_len = 2;
          break;
        }
        case 0x1A:{
          s5 = "s10";
          s5_len = 3;
          break;
        }
        case 0x17:{
          s5 = "s7";
          s5_len = 2;
          break;
        }
        case 0x0C:{
          s5 = "a2";
          s5_len = 2;
          break;
        }
        case 0x18:{
          s5 = "s8";
          s5_len = 2;
          break;
        }
        case 0x02:{
          s5 = "sp";
          s5_len = 2;
          break;
        }
        case 0x1F:{
          s5 = "t6";
          s5_len = 2;
          break;
        }
        case 0x0B:{
          s5 = "a1";
          s5_len = 2;
          break;
        }
        case 0x07:{
          s5 = "t2";
          s5_len = 2;
          break;
        }
        case 0x13:{
          s5 = "s3";
          s5_len = 2;
          break;
        }
        case 0x04:{
          s5 = "tp";
          s5_len = 2;
          break;
        }
        case 0x19:{
          s5 = "s9";
          s5_len = 2;
          break;
        }
        case 0x12:{
          s5 = "s2";
          s5_len = 2;
          break;
        }
        case 0x14:{
          s5 = "s4";
          s5_len = 2;
          break;
        }
        case 0x0E:{
          s5 = "a4";
          s5_len = 2;
          break;
        }
        case 0x1E:{
          s5 = "t5";
          s5_len = 2;
          break;
        }
        case 0x11:{
          s5 = "a7";
          s5_len = 2;
          break;
        }
        case 0x03:{
          s5 = "gp";
          s5_len = 2;
          break;
        }
        case 0x05:{
          s5 = "t0";
          s5_len = 2;
          break;
        }
        case 0x1D:{
          s5 = "t4";
          s5_len = 2;
          break;
        }
        case 0x0D:{
          s5 = "a3";
          s5_len = 2;
          break;
        }
        case 0x0F:{
          s5 = "a5";
          s5_len = 2;
          break;
        }
      }
      sep( &s6, &s6_len);
      switch (tree->ast_node.storecon.rs2) { 
        case 0x08:{
          s7 = "fp";
          s7_len = 2;
          break;
        }
        case 0x15:{
          s7 = "s5";
          s7_len = 2;
          break;
        }
        case 0x01:{
          s7 = "ra";
          s7_len = 2;
          break;
        }
        case 0x06:{
          s7 = "t1";
          s7_len = 2;
          break;
        }
        case 0x09:{
          s7 = "s1";
          s7_len = 2;
          break;
        }
        case 0x10:{
          s7 = "a6";
          s7_len = 2;
          break;
        }
        case 0x1B:{
          s7 = "s11";
          s7_len = 3;
          break;
        }
        case 0x1C:{
          s7 = "t3";
          s7_len = 2;
          break;
        }
        case 0x16:{
          s7 = "s6";
          s7_len = 2;
          break;
        }
        case 0x00:{
          s7 = "zero";
          s7_len = 4;
          break;
        }
        case 0x0A:{
          s7 = "a0";
          s7_len = 2;
          break;
        }
        case 0x1A:{
          s7 = "s10";
          s7_len = 3;
          break;
        }
        case 0x17:{
          s7 = "s7";
          s7_len = 2;
          break;
        }
        case 0x0C:{
          s7 = "a2";
          s7_len = 2;
          break;
        }
        case 0x18:{
          s7 = "s8";
          s7_len = 2;
          break;
        }
        case 0x02:{
          s7 = "sp";
          s7_len = 2;
          break;
        }
        case 0x1F:{
          s7 = "t6";
          s7_len = 2;
          break;
        }
        case 0x0B:{
          s7 = "a1";
          s7_len = 2;
          break;
        }
        case 0x07:{
          s7 = "t2";
          s7_len = 2;
          break;
        }
        case 0x13:{
          s7 = "s3";
          s7_len = 2;
          break;
        }
        case 0x04:{
          s7 = "tp";
          s7_len = 2;
          break;
        }
        case 0x19:{
          s7 = "s9";
          s7_len = 2;
          break;
        }
        case 0x12:{
          s7 = "s2";
          s7_len = 2;
          break;
        }
        case 0x14:{
          s7 = "s4";
          s7_len = 2;
          break;
        }
        case 0x0E:{
          s7 = "a4";
          s7_len = 2;
          break;
        }
        case 0x1E:{
          s7 = "t5";
          s7_len = 2;
          break;
        }
        case 0x11:{
          s7 = "a7";
          s7_len = 2;
          break;
        }
        case 0x03:{
          s7 = "gp";
          s7_len = 2;
          break;
        }
        case 0x05:{
          s7 = "t0";
          s7_len = 2;
          break;
        }
        case 0x1D:{
          s7 = "t4";
          s7_len = 2;
          break;
        }
        case 0x0D:{
          s7 = "a3";
          s7_len = 2;
          break;
        }
        case 0x0F:{
          s7 = "a5";
          s7_len = 2;
          break;
        }
      }
      sep( &s8, &s8_len);
      s9 = "(";
      s9_len = 1;
      switch (tree->ast_node.storecon.rs1) { 
        case 0x08:{
          s10 = "fp";
          s10_len = 2;
          break;
        }
        case 0x15:{
          s10 = "s5";
          s10_len = 2;
          break;
        }
        case 0x01:{
          s10 = "ra";
          s10_len = 2;
          break;
        }
        case 0x06:{
          s10 = "t1";
          s10_len = 2;
          break;
        }
        case 0x09:{
          s10 = "s1";
          s10_len = 2;
          break;
        }
        case 0x10:{
          s10 = "a6";
          s10_len = 2;
          break;
        }
        case 0x1B:{
          s10 = "s11";
          s10_len = 3;
          break;
        }
        case 0x1C:{
          s10 = "t3";
          s10_len = 2;
          break;
        }
        case 0x16:{
          s10 = "s6";
          s10_len = 2;
          break;
        }
        case 0x00:{
          s10 = "zero";
          s10_len = 4;
          break;
        }
        case 0x0A:{
          s10 = "a0";
          s10_len = 2;
          break;
        }
        case 0x1A:{
          s10 = "s10";
          s10_len = 3;
          break;
        }
        case 0x17:{
          s10 = "s7";
          s10_len = 2;
          break;
        }
        case 0x0C:{
          s10 = "a2";
          s10_len = 2;
          break;
        }
        case 0x18:{
          s10 = "s8";
          s10_len = 2;
          break;
        }
        case 0x02:{
          s10 = "sp";
          s10_len = 2;
          break;
        }
        case 0x1F:{
          s10 = "t6";
          s10_len = 2;
          break;
        }
        case 0x0B:{
          s10 = "a1";
          s10_len = 2;
          break;
        }
        case 0x07:{
          s10 = "t2";
          s10_len = 2;
          break;
        }
        case 0x13:{
          s10 = "s3";
          s10_len = 2;
          break;
        }
        case 0x04:{
          s10 = "tp";
          s10_len = 2;
          break;
        }
        case 0x19:{
          s10 = "s9";
          s10_len = 2;
          break;
        }
        case 0x12:{
          s10 = "s2";
          s10_len = 2;
          break;
        }
        case 0x14:{
          s10 = "s4";
          s10_len = 2;
          break;
        }
        case 0x0E:{
          s10 = "a4";
          s10_len = 2;
          break;
        }
        case 0x1E:{
          s10 = "t5";
          s10_len = 2;
          break;
        }
        case 0x11:{
          s10 = "a7";
          s10_len = 2;
          break;
        }
        case 0x03:{
          s10 = "gp";
          s10_len = 2;
          break;
        }
        case 0x05:{
          s10 = "t0";
          s10_len = 2;
          break;
        }
        case 0x1D:{
          s10 = "t4";
          s10_len = 2;
          break;
        }
        case 0x0D:{
          s10 = "a3";
          s10_len = 2;
          break;
        }
        case 0x0F:{
          s10 = "a5";
          s10_len = 2;
          break;
        }
      }
      s11 = ")";
      s11_len = 1;
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len, s8, s8_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len + s8_len, s9, s9_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len + s8_len + s9_len, s10, s10_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len + s8_len + s9_len + s10_len, s11, s11_len);
      }
    }
    break;
    case RISCV_AMO: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      char *s8; size_t s8_len;
      char *s9; size_t s9_len;
      char *s10; size_t s10_len;
      char *s11; size_t s11_len;
      char *s12; size_t s12_len;
      switch (tree->ast_node.amo.op) { 
        case RISCV_AMOMIN:{
          s0 = "amomin";
          s0_len = 6;
          break;
        }
        case RISCV_AMOXOR:{
          s0 = "amoxor";
          s0_len = 6;
          break;
        }
        case RISCV_AMOADD:{
          s0 = "amoadd";
          s0_len = 6;
          break;
        }
        case RISCV_AMOOR:{
          s0 = "amoor";
          s0_len = 5;
          break;
        }
        case RISCV_AMOSWAP:{
          s0 = "amoswap";
          s0_len = 7;
          break;
        }
        case RISCV_AMOMAX:{
          s0 = "amomax";
          s0_len = 6;
          break;
        }
        case RISCV_AMOMINU:{
          s0 = "amominu";
          s0_len = 7;
          break;
        }
        case RISCV_AMOAND:{
          s0 = "amoand";
          s0_len = 6;
          break;
        }
        case RISCV_AMOMAXU:{
          s0 = "amomaxu";
          s0_len = 7;
          break;
        }
      }
      s1 = ".";
      s1_len = 1;
      switch (tree->ast_node.amo.width) { 
        case RISCV_BYTE:{
          s2 = "b";
          s2_len = 1;
          break;
        }
        case RISCV_WORD:{
          s2 = "w";
          s2_len = 1;
          break;
        }
        case RISCV_DOUBLE:{
          s2 = "d";
          s2_len = 1;
          break;
        }
        case RISCV_HALF:{
          s2 = "h";
          s2_len = 1;
          break;
        }
      }
      if (tree->ast_node.amo.aq) {
        s3 = ".aq"; 
        s3_len = 3;
      }
      else {
        s3 = ""; 
        s3_len = 0;
      } 
      if (tree->ast_node.amo.rl) {
        s4 = ".rl"; 
        s4_len = 3;
      }
      else {
        s4 = ""; 
        s4_len = 0;
      } 
      spc( &s5, &s5_len);
      switch (tree->ast_node.amo.rd) { 
        case 0x08:{
          s6 = "fp";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "s5";
          s6_len = 2;
          break;
        }
        case 0x01:{
          s6 = "ra";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "t1";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "s1";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "a6";
          s6_len = 2;
          break;
        }
        case 0x1B:{
          s6 = "s11";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "t3";
          s6_len = 2;
          break;
        }
        case 0x16:{
          s6 = "s6";
          s6_len = 2;
          break;
        }
        case 0x00:{
          s6 = "zero";
          s6_len = 4;
          break;
        }
        case 0x0A:{
          s6 = "a0";
          s6_len = 2;
          break;
        }
        case 0x1A:{
          s6 = "s10";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "s7";
          s6_len = 2;
          break;
        }
        case 0x0C:{
          s6 = "a2";
          s6_len = 2;
          break;
        }
        case 0x18:{
          s6 = "s8";
          s6_len = 2;
          break;
        }
        case 0x02:{
          s6 = "sp";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "t6";
          s6_len = 2;
          break;
        }
        case 0x0B:{
          s6 = "a1";
          s6_len = 2;
          break;
        }
        case 0x07:{
          s6 = "t2";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "s3";
          s6_len = 2;
          break;
        }
        case 0x04:{
          s6 = "tp";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "s9";
          s6_len = 2;
          break;
        }
        case 0x12:{
          s6 = "s2";
          s6_len = 2;
          break;
        }
        case 0x14:{
          s6 = "s4";
          s6_len = 2;
          break;
        }
        case 0x0E:{
          s6 = "a4";
          s6_len = 2;
          break;
        }
        case 0x1E:{
          s6 = "t5";
          s6_len = 2;
          break;
        }
        case 0x11:{
          s6 = "a7";
          s6_len = 2;
          break;
        }
        case 0x03:{
          s6 = "gp";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "t0";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "t4";
          s6_len = 2;
          break;
        }
        case 0x0D:{
          s6 = "a3";
          s6_len = 2;
          break;
        }
        case 0x0F:{
          s6 = "a5";
          s6_len = 2;
          break;
        }
      }
      sep( &s7, &s7_len);
      switch (tree->ast_node.amo.rs2) { 
        case 0x08:{
          s8 = "fp";
          s8_len = 2;
          break;
        }
        case 0x15:{
          s8 = "s5";
          s8_len = 2;
          break;
        }
        case 0x01:{
          s8 = "ra";
          s8_len = 2;
          break;
        }
        case 0x06:{
          s8 = "t1";
          s8_len = 2;
          break;
        }
        case 0x09:{
          s8 = "s1";
          s8_len = 2;
          break;
        }
        case 0x10:{
          s8 = "a6";
          s8_len = 2;
          break;
        }
        case 0x1B:{
          s8 = "s11";
          s8_len = 3;
          break;
        }
        case 0x1C:{
          s8 = "t3";
          s8_len = 2;
          break;
        }
        case 0x16:{
          s8 = "s6";
          s8_len = 2;
          break;
        }
        case 0x00:{
          s8 = "zero";
          s8_len = 4;
          break;
        }
        case 0x0A:{
          s8 = "a0";
          s8_len = 2;
          break;
        }
        case 0x1A:{
          s8 = "s10";
          s8_len = 3;
          break;
        }
        case 0x17:{
          s8 = "s7";
          s8_len = 2;
          break;
        }
        case 0x0C:{
          s8 = "a2";
          s8_len = 2;
          break;
        }
        case 0x18:{
          s8 = "s8";
          s8_len = 2;
          break;
        }
        case 0x02:{
          s8 = "sp";
          s8_len = 2;
          break;
        }
        case 0x1F:{
          s8 = "t6";
          s8_len = 2;
          break;
        }
        case 0x0B:{
          s8 = "a1";
          s8_len = 2;
          break;
        }
        case 0x07:{
          s8 = "t2";
          s8_len = 2;
          break;
        }
        case 0x13:{
          s8 = "s3";
          s8_len = 2;
          break;
        }
        case 0x04:{
          s8 = "tp";
          s8_len = 2;
          break;
        }
        case 0x19:{
          s8 = "s9";
          s8_len = 2;
          break;
        }
        case 0x12:{
          s8 = "s2";
          s8_len = 2;
          break;
        }
        case 0x14:{
          s8 = "s4";
          s8_len = 2;
          break;
        }
        case 0x0E:{
          s8 = "a4";
          s8_len = 2;
          break;
        }
        case 0x1E:{
          s8 = "t5";
          s8_len = 2;
          break;
        }
        case 0x11:{
          s8 = "a7";
          s8_len = 2;
          break;
        }
        case 0x03:{
          s8 = "gp";
          s8_len = 2;
          break;
        }
        case 0x05:{
          s8 = "t0";
          s8_len = 2;
          break;
        }
        case 0x1D:{
          s8 = "t4";
          s8_len = 2;
          break;
        }
        case 0x0D:{
          s8 = "a3";
          s8_len = 2;
          break;
        }
        case 0x0F:{
          s8 = "a5";
          s8_len = 2;
          break;
        }
      }
      sep( &s9, &s9_len);
      s10 = "(";
      s10_len = 1;
      switch (tree->ast_node.amo.rs1) { 
        case 0x08:{
          s11 = "fp";
          s11_len = 2;
          break;
        }
        case 0x15:{
          s11 = "s5";
          s11_len = 2;
          break;
        }
        case 0x01:{
          s11 = "ra";
          s11_len = 2;
          break;
        }
        case 0x06:{
          s11 = "t1";
          s11_len = 2;
          break;
        }
        case 0x09:{
          s11 = "s1";
          s11_len = 2;
          break;
        }
        case 0x10:{
          s11 = "a6";
          s11_len = 2;
          break;
        }
        case 0x1B:{
          s11 = "s11";
          s11_len = 3;
          break;
        }
        case 0x1C:{
          s11 = "t3";
          s11_len = 2;
          break;
        }
        case 0x16:{
          s11 = "s6";
          s11_len = 2;
          break;
        }
        case 0x00:{
          s11 = "zero";
          s11_len = 4;
          break;
        }
        case 0x0A:{
          s11 = "a0";
          s11_len = 2;
          break;
        }
        case 0x1A:{
          s11 = "s10";
          s11_len = 3;
          break;
        }
        case 0x17:{
          s11 = "s7";
          s11_len = 2;
          break;
        }
        case 0x0C:{
          s11 = "a2";
          s11_len = 2;
          break;
        }
        case 0x18:{
          s11 = "s8";
          s11_len = 2;
          break;
        }
        case 0x02:{
          s11 = "sp";
          s11_len = 2;
          break;
        }
        case 0x1F:{
          s11 = "t6";
          s11_len = 2;
          break;
        }
        case 0x0B:{
          s11 = "a1";
          s11_len = 2;
          break;
        }
        case 0x07:{
          s11 = "t2";
          s11_len = 2;
          break;
        }
        case 0x13:{
          s11 = "s3";
          s11_len = 2;
          break;
        }
        case 0x04:{
          s11 = "tp";
          s11_len = 2;
          break;
        }
        case 0x19:{
          s11 = "s9";
          s11_len = 2;
          break;
        }
        case 0x12:{
          s11 = "s2";
          s11_len = 2;
          break;
        }
        case 0x14:{
          s11 = "s4";
          s11_len = 2;
          break;
        }
        case 0x0E:{
          s11 = "a4";
          s11_len = 2;
          break;
        }
        case 0x1E:{
          s11 = "t5";
          s11_len = 2;
          break;
        }
        case 0x11:{
          s11 = "a7";
          s11_len = 2;
          break;
        }
        case 0x03:{
          s11 = "gp";
          s11_len = 2;
          break;
        }
        case 0x05:{
          s11 = "t0";
          s11_len = 2;
          break;
        }
        case 0x1D:{
          s11 = "t4";
          s11_len = 2;
          break;
        }
        case 0x0D:{
          s11 = "a3";
          s11_len = 2;
          break;
        }
        case 0x0F:{
          s11 = "a5";
          s11_len = 2;
          break;
        }
      }
      s12 = ")";
      s12_len = 1;
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len, s8, s8_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len + s8_len, s9, s9_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len + s8_len + s9_len, s10, s10_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len + s8_len + s9_len + s10_len, s11, s11_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len + s8_len + s9_len + s10_len + s11_len, s12, s12_len);
      }
    }
    break;
    case RISCV_C_NOP: {
{
            char *s0; size_t s0_len;
      s0 = "c.nop";
      s0_len = 5;
      memcpy(buff , s0, s0_len);
      }
    }
    break;
    case RISCV_C_ADDI4SPN: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      s0 = "c.addi4spn";
      s0_len = 10;
      spc( &s1, &s1_len);
      switch (tree->ast_node.c_addi4spn.rdc) { 
        case 0x7:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
        case 0x5:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x1:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x3:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x2:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x4:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x6:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x0:{
          s2 = "s0";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      hex_bits_10(tree->ast_node.c_addi4spn.nzimm << 2 | 0x0 << 0, &s4, &s4_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      }
    }
    break;
    case RISCV_C_LW: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      s0 = "c.lw";
      s0_len = 4;
      spc( &s1, &s1_len);
      switch (tree->ast_node.c_lw.rdc) { 
        case 0x7:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
        case 0x5:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x1:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x3:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x2:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x4:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x6:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x0:{
          s2 = "s0";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.c_lw.rsc) { 
        case 0x7:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
        case 0x5:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x1:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x3:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x2:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x4:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x6:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x0:{
          s4 = "s0";
          s4_len = 2;
          break;
        }
      }
      sep( &s5, &s5_len);
      hex_bits_7(tree->ast_node.c_lw.uimm << 2 | 0x0 << 0, &s6, &s6_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
    }
    break;
    case RISCV_C_LD: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      s0 = "c.ld";
      s0_len = 4;
      spc( &s1, &s1_len);
      switch (tree->ast_node.c_ld.rdc) { 
        case 0x7:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
        case 0x5:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x1:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x3:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x2:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x4:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x6:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x0:{
          s2 = "s0";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.c_ld.rsc) { 
        case 0x7:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
        case 0x5:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x1:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x3:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x2:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x4:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x6:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x0:{
          s4 = "s0";
          s4_len = 2;
          break;
        }
      }
      sep( &s5, &s5_len);
      hex_bits_8(tree->ast_node.c_ld.uimm << 3 | 0x0 << 0, &s6, &s6_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
    }
    break;
    case RISCV_C_SW: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      s0 = "c.sw";
      s0_len = 4;
      spc( &s1, &s1_len);
      switch (tree->ast_node.c_sw.rsc1) { 
        case 0x7:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
        case 0x5:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x1:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x3:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x2:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x4:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x6:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x0:{
          s2 = "s0";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.c_sw.rsc2) { 
        case 0x7:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
        case 0x5:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x1:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x3:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x2:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x4:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x6:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x0:{
          s4 = "s0";
          s4_len = 2;
          break;
        }
      }
      sep( &s5, &s5_len);
      hex_bits_7(tree->ast_node.c_sw.uimm << 2 | 0x0 << 0, &s6, &s6_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
    }
    break;
    case RISCV_C_SD: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      s0 = "c.sd";
      s0_len = 4;
      spc( &s1, &s1_len);
      switch (tree->ast_node.c_sd.rsc1) { 
        case 0x7:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
        case 0x5:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x1:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x3:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x2:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x4:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x6:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x0:{
          s2 = "s0";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.c_sd.rsc2) { 
        case 0x7:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
        case 0x5:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x1:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x3:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x2:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x4:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x6:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x0:{
          s4 = "s0";
          s4_len = 2;
          break;
        }
      }
      sep( &s5, &s5_len);
      hex_bits_8(tree->ast_node.c_sd.uimm << 3 | 0x0 << 0, &s6, &s6_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
    }
    break;
    case RISCV_C_ADDI: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      s0 = "c.addi";
      s0_len = 6;
      spc( &s1, &s1_len);
      switch (tree->ast_node.c_addi.rsd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      hex_bits_signed_6(tree->ast_node.c_addi.nzi, &s4, &s4_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      }
    }
    break;
    case RISCV_C_JAL: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      s0 = "c.jal";
      s0_len = 5;
      spc( &s1, &s1_len);
      hex_bits_signed_12(tree->ast_node.c_jal << 1 | 0x0 << 0, &s2, &s2_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      }
    }
    break;
    case RISCV_C_ADDIW: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      s0 = "c.addiw";
      s0_len = 7;
      spc( &s1, &s1_len);
      switch (tree->ast_node.c_addiw.rsd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      hex_bits_signed_6(tree->ast_node.c_addiw.imm, &s4, &s4_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      }
    }
    break;
    case RISCV_C_LI: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      s0 = "c.li";
      s0_len = 4;
      spc( &s1, &s1_len);
      switch (tree->ast_node.c_li.rd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      hex_bits_signed_6(tree->ast_node.c_li.imm, &s4, &s4_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      }
    }
    break;
    case RISCV_C_ADDI16SP: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      s0 = "c.addi16sp";
      s0_len = 10;
      spc( &s1, &s1_len);
      hex_bits_signed_6(tree->ast_node.c_addi16sp, &s2, &s2_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      }
    }
    break;
    case RISCV_C_LUI: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      s0 = "c.lui";
      s0_len = 5;
      spc( &s1, &s1_len);
      switch (tree->ast_node.c_lui.rd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      hex_bits_signed_6(tree->ast_node.c_lui.imm, &s4, &s4_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      }
    }
    break;
    case RISCV_C_SRLI: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      s0 = "c.srli";
      s0_len = 6;
      spc( &s1, &s1_len);
      switch (tree->ast_node.c_srli.rsd) { 
        case 0x7:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
        case 0x5:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x1:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x3:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x2:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x4:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x6:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x0:{
          s2 = "s0";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      hex_bits_6(tree->ast_node.c_srli.shamt, &s4, &s4_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      }
    }
    break;
    case RISCV_C_SRAI: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      s0 = "c.srai";
      s0_len = 6;
      spc( &s1, &s1_len);
      switch (tree->ast_node.c_srai.rsd) { 
        case 0x7:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
        case 0x5:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x1:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x3:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x2:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x4:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x6:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x0:{
          s2 = "s0";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      hex_bits_6(tree->ast_node.c_srai.shamt, &s4, &s4_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      }
    }
    break;
    case RISCV_C_ANDI: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      s0 = "c.andi";
      s0_len = 6;
      spc( &s1, &s1_len);
      switch (tree->ast_node.c_andi.rsd) { 
        case 0x7:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
        case 0x5:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x1:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x3:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x2:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x4:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x6:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x0:{
          s2 = "s0";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      hex_bits_signed_6(tree->ast_node.c_andi.imm, &s4, &s4_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      }
    }
    break;
    case RISCV_C_SUB: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      s0 = "c.sub";
      s0_len = 5;
      spc( &s1, &s1_len);
      switch (tree->ast_node.c_sub.rsd) { 
        case 0x7:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
        case 0x5:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x1:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x3:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x2:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x4:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x6:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x0:{
          s2 = "s0";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.c_sub.rs2) { 
        case 0x7:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
        case 0x5:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x1:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x3:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x2:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x4:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x6:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x0:{
          s4 = "s0";
          s4_len = 2;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      }
    }
    break;
    case RISCV_C_XOR: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      s0 = "c.xor";
      s0_len = 5;
      spc( &s1, &s1_len);
      switch (tree->ast_node.c_xor.rsd) { 
        case 0x7:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
        case 0x5:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x1:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x3:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x2:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x4:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x6:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x0:{
          s2 = "s0";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.c_xor.rs2) { 
        case 0x7:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
        case 0x5:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x1:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x3:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x2:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x4:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x6:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x0:{
          s4 = "s0";
          s4_len = 2;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      }
    }
    break;
    case RISCV_C_OR: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      s0 = "c.or";
      s0_len = 4;
      spc( &s1, &s1_len);
      switch (tree->ast_node.c_or.rsd) { 
        case 0x7:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
        case 0x5:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x1:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x3:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x2:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x4:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x6:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x0:{
          s2 = "s0";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.c_or.rs2) { 
        case 0x7:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
        case 0x5:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x1:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x3:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x2:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x4:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x6:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x0:{
          s4 = "s0";
          s4_len = 2;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      }
    }
    break;
    case RISCV_C_AND: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      s0 = "c.and";
      s0_len = 5;
      spc( &s1, &s1_len);
      switch (tree->ast_node.c_and.rsd) { 
        case 0x7:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
        case 0x5:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x1:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x3:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x2:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x4:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x6:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x0:{
          s2 = "s0";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.c_and.rs2) { 
        case 0x7:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
        case 0x5:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x1:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x3:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x2:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x4:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x6:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x0:{
          s4 = "s0";
          s4_len = 2;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      }
    }
    break;
    case RISCV_C_SUBW: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      s0 = "c.subw";
      s0_len = 6;
      spc( &s1, &s1_len);
      switch (tree->ast_node.c_subw.rsd) { 
        case 0x7:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
        case 0x5:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x1:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x3:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x2:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x4:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x6:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x0:{
          s2 = "s0";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.c_subw.rs2) { 
        case 0x7:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
        case 0x5:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x1:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x3:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x2:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x4:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x6:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x0:{
          s4 = "s0";
          s4_len = 2;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      }
    }
    break;
    case RISCV_C_ADDW: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      s0 = "c.addw";
      s0_len = 6;
      spc( &s1, &s1_len);
      switch (tree->ast_node.c_addw.rsd) { 
        case 0x7:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
        case 0x5:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x1:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x3:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x2:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x4:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x6:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x0:{
          s2 = "s0";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.c_addw.rs2) { 
        case 0x7:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
        case 0x5:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x1:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x3:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x2:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x4:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x6:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x0:{
          s4 = "s0";
          s4_len = 2;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      }
    }
    break;
    case RISCV_C_J: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      s0 = "c.j";
      s0_len = 3;
      spc( &s1, &s1_len);
      hex_bits_signed_11(tree->ast_node.c_j, &s2, &s2_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      }
    }
    break;
    case RISCV_C_BEQZ: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      s0 = "c.beqz";
      s0_len = 6;
      spc( &s1, &s1_len);
      switch (tree->ast_node.c_beqz.rs) { 
        case 0x7:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
        case 0x5:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x1:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x3:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x2:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x4:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x6:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x0:{
          s2 = "s0";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      hex_bits_signed_8(tree->ast_node.c_beqz.imm, &s4, &s4_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      }
    }
    break;
    case RISCV_C_BNEZ: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      s0 = "c.bnez";
      s0_len = 6;
      spc( &s1, &s1_len);
      switch (tree->ast_node.c_bnez.rs) { 
        case 0x7:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
        case 0x5:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x1:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x3:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x2:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x4:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x6:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x0:{
          s2 = "s0";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      hex_bits_signed_8(tree->ast_node.c_bnez.imm, &s4, &s4_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      }
    }
    break;
    case RISCV_C_SLLI: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      s0 = "c.slli";
      s0_len = 6;
      spc( &s1, &s1_len);
      switch (tree->ast_node.c_slli.rsd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      hex_bits_6(tree->ast_node.c_slli.shamt, &s4, &s4_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      }
    }
    break;
    case RISCV_C_LWSP: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      s0 = "c.lwsp";
      s0_len = 6;
      spc( &s1, &s1_len);
      switch (tree->ast_node.c_lwsp.rd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      hex_bits_6(tree->ast_node.c_lwsp.uimm, &s4, &s4_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      }
    }
    break;
    case RISCV_C_LDSP: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      s0 = "c.ldsp";
      s0_len = 6;
      spc( &s1, &s1_len);
      switch (tree->ast_node.c_ldsp.rd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      hex_bits_6(tree->ast_node.c_ldsp.uimm, &s4, &s4_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      }
    }
    break;
    case RISCV_C_SWSP: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      s0 = "c.swsp";
      s0_len = 6;
      spc( &s1, &s1_len);
      switch (tree->ast_node.c_swsp.rs2) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      hex_bits_6(tree->ast_node.c_swsp.uimm, &s4, &s4_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      }
    }
    break;
    case RISCV_C_SDSP: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      s0 = "c.sdsp";
      s0_len = 6;
      spc( &s1, &s1_len);
      switch (tree->ast_node.c_sdsp.rs2) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      hex_bits_6(tree->ast_node.c_sdsp.uimm, &s4, &s4_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      }
    }
    break;
    case RISCV_C_JR: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      s0 = "c.jr";
      s0_len = 4;
      spc( &s1, &s1_len);
      switch (tree->ast_node.c_jr) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      }
    }
    break;
    case RISCV_C_JALR: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      s0 = "c.jalr";
      s0_len = 6;
      spc( &s1, &s1_len);
      switch (tree->ast_node.c_jalr) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      }
    }
    break;
    case RISCV_C_MV: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      s0 = "c.mv";
      s0_len = 4;
      spc( &s1, &s1_len);
      switch (tree->ast_node.c_mv.rd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.c_mv.rs2) { 
        case 0x08:{
          s4 = "fp";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "s5";
          s4_len = 2;
          break;
        }
        case 0x01:{
          s4 = "ra";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "t1";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "a6";
          s4_len = 2;
          break;
        }
        case 0x1B:{
          s4 = "s11";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "t3";
          s4_len = 2;
          break;
        }
        case 0x16:{
          s4 = "s6";
          s4_len = 2;
          break;
        }
        case 0x00:{
          s4 = "zero";
          s4_len = 4;
          break;
        }
        case 0x0A:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x1A:{
          s4 = "s10";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "s7";
          s4_len = 2;
          break;
        }
        case 0x0C:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x18:{
          s4 = "s8";
          s4_len = 2;
          break;
        }
        case 0x02:{
          s4 = "sp";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "t6";
          s4_len = 2;
          break;
        }
        case 0x0B:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x07:{
          s4 = "t2";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "s3";
          s4_len = 2;
          break;
        }
        case 0x04:{
          s4 = "tp";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "s9";
          s4_len = 2;
          break;
        }
        case 0x12:{
          s4 = "s2";
          s4_len = 2;
          break;
        }
        case 0x14:{
          s4 = "s4";
          s4_len = 2;
          break;
        }
        case 0x0E:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x1E:{
          s4 = "t5";
          s4_len = 2;
          break;
        }
        case 0x11:{
          s4 = "a7";
          s4_len = 2;
          break;
        }
        case 0x03:{
          s4 = "gp";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "t0";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "t4";
          s4_len = 2;
          break;
        }
        case 0x0D:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x0F:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      }
    }
    break;
    case RISCV_C_EBREAK: {
{
            char *s0; size_t s0_len;
      s0 = "c.ebreak";
      s0_len = 8;
      memcpy(buff , s0, s0_len);
      }
    }
    break;
    case RISCV_C_ADD: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      s0 = "c.add";
      s0_len = 5;
      spc( &s1, &s1_len);
      switch (tree->ast_node.c_add.rsd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.c_add.rs2) { 
        case 0x08:{
          s4 = "fp";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "s5";
          s4_len = 2;
          break;
        }
        case 0x01:{
          s4 = "ra";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "t1";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "a6";
          s4_len = 2;
          break;
        }
        case 0x1B:{
          s4 = "s11";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "t3";
          s4_len = 2;
          break;
        }
        case 0x16:{
          s4 = "s6";
          s4_len = 2;
          break;
        }
        case 0x00:{
          s4 = "zero";
          s4_len = 4;
          break;
        }
        case 0x0A:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x1A:{
          s4 = "s10";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "s7";
          s4_len = 2;
          break;
        }
        case 0x0C:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x18:{
          s4 = "s8";
          s4_len = 2;
          break;
        }
        case 0x02:{
          s4 = "sp";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "t6";
          s4_len = 2;
          break;
        }
        case 0x0B:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x07:{
          s4 = "t2";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "s3";
          s4_len = 2;
          break;
        }
        case 0x04:{
          s4 = "tp";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "s9";
          s4_len = 2;
          break;
        }
        case 0x12:{
          s4 = "s2";
          s4_len = 2;
          break;
        }
        case 0x14:{
          s4 = "s4";
          s4_len = 2;
          break;
        }
        case 0x0E:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x1E:{
          s4 = "t5";
          s4_len = 2;
          break;
        }
        case 0x11:{
          s4 = "a7";
          s4_len = 2;
          break;
        }
        case 0x03:{
          s4 = "gp";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "t0";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "t4";
          s4_len = 2;
          break;
        }
        case 0x0D:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x0F:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      }
    }
    break;
    case RISCV_MUL: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;

/* TODO */
      spc( &s1, &s1_len);
      switch (tree->ast_node.mul.rd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.mul.rs1) { 
        case 0x08:{
          s4 = "fp";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "s5";
          s4_len = 2;
          break;
        }
        case 0x01:{
          s4 = "ra";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "t1";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "a6";
          s4_len = 2;
          break;
        }
        case 0x1B:{
          s4 = "s11";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "t3";
          s4_len = 2;
          break;
        }
        case 0x16:{
          s4 = "s6";
          s4_len = 2;
          break;
        }
        case 0x00:{
          s4 = "zero";
          s4_len = 4;
          break;
        }
        case 0x0A:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x1A:{
          s4 = "s10";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "s7";
          s4_len = 2;
          break;
        }
        case 0x0C:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x18:{
          s4 = "s8";
          s4_len = 2;
          break;
        }
        case 0x02:{
          s4 = "sp";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "t6";
          s4_len = 2;
          break;
        }
        case 0x0B:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x07:{
          s4 = "t2";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "s3";
          s4_len = 2;
          break;
        }
        case 0x04:{
          s4 = "tp";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "s9";
          s4_len = 2;
          break;
        }
        case 0x12:{
          s4 = "s2";
          s4_len = 2;
          break;
        }
        case 0x14:{
          s4 = "s4";
          s4_len = 2;
          break;
        }
        case 0x0E:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x1E:{
          s4 = "t5";
          s4_len = 2;
          break;
        }
        case 0x11:{
          s4 = "a7";
          s4_len = 2;
          break;
        }
        case 0x03:{
          s4 = "gp";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "t0";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "t4";
          s4_len = 2;
          break;
        }
        case 0x0D:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x0F:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.mul.rs2) { 
        case 0x08:{
          s6 = "fp";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "s5";
          s6_len = 2;
          break;
        }
        case 0x01:{
          s6 = "ra";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "t1";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "s1";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "a6";
          s6_len = 2;
          break;
        }
        case 0x1B:{
          s6 = "s11";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "t3";
          s6_len = 2;
          break;
        }
        case 0x16:{
          s6 = "s6";
          s6_len = 2;
          break;
        }
        case 0x00:{
          s6 = "zero";
          s6_len = 4;
          break;
        }
        case 0x0A:{
          s6 = "a0";
          s6_len = 2;
          break;
        }
        case 0x1A:{
          s6 = "s10";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "s7";
          s6_len = 2;
          break;
        }
        case 0x0C:{
          s6 = "a2";
          s6_len = 2;
          break;
        }
        case 0x18:{
          s6 = "s8";
          s6_len = 2;
          break;
        }
        case 0x02:{
          s6 = "sp";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "t6";
          s6_len = 2;
          break;
        }
        case 0x0B:{
          s6 = "a1";
          s6_len = 2;
          break;
        }
        case 0x07:{
          s6 = "t2";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "s3";
          s6_len = 2;
          break;
        }
        case 0x04:{
          s6 = "tp";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "s9";
          s6_len = 2;
          break;
        }
        case 0x12:{
          s6 = "s2";
          s6_len = 2;
          break;
        }
        case 0x14:{
          s6 = "s4";
          s6_len = 2;
          break;
        }
        case 0x0E:{
          s6 = "a4";
          s6_len = 2;
          break;
        }
        case 0x1E:{
          s6 = "t5";
          s6_len = 2;
          break;
        }
        case 0x11:{
          s6 = "a7";
          s6_len = 2;
          break;
        }
        case 0x03:{
          s6 = "gp";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "t0";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "t4";
          s6_len = 2;
          break;
        }
        case 0x0D:{
          s6 = "a3";
          s6_len = 2;
          break;
        }
        case 0x0F:{
          s6 = "a5";
          s6_len = 2;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
    }
    break;
    case RISCV_DIV: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      s0 = "div";
      s0_len = 3;
      if (tree->ast_node.div.s) {
        s1 = ""; 
        s1_len = 0;
      }
      else {
        s1 = "u"; 
        s1_len = 1;
      } 
      spc( &s2, &s2_len);
      switch (tree->ast_node.div.rd) { 
        case 0x08:{
          s3 = "fp";
          s3_len = 2;
          break;
        }
        case 0x15:{
          s3 = "s5";
          s3_len = 2;
          break;
        }
        case 0x01:{
          s3 = "ra";
          s3_len = 2;
          break;
        }
        case 0x06:{
          s3 = "t1";
          s3_len = 2;
          break;
        }
        case 0x09:{
          s3 = "s1";
          s3_len = 2;
          break;
        }
        case 0x10:{
          s3 = "a6";
          s3_len = 2;
          break;
        }
        case 0x1B:{
          s3 = "s11";
          s3_len = 3;
          break;
        }
        case 0x1C:{
          s3 = "t3";
          s3_len = 2;
          break;
        }
        case 0x16:{
          s3 = "s6";
          s3_len = 2;
          break;
        }
        case 0x00:{
          s3 = "zero";
          s3_len = 4;
          break;
        }
        case 0x0A:{
          s3 = "a0";
          s3_len = 2;
          break;
        }
        case 0x1A:{
          s3 = "s10";
          s3_len = 3;
          break;
        }
        case 0x17:{
          s3 = "s7";
          s3_len = 2;
          break;
        }
        case 0x0C:{
          s3 = "a2";
          s3_len = 2;
          break;
        }
        case 0x18:{
          s3 = "s8";
          s3_len = 2;
          break;
        }
        case 0x02:{
          s3 = "sp";
          s3_len = 2;
          break;
        }
        case 0x1F:{
          s3 = "t6";
          s3_len = 2;
          break;
        }
        case 0x0B:{
          s3 = "a1";
          s3_len = 2;
          break;
        }
        case 0x07:{
          s3 = "t2";
          s3_len = 2;
          break;
        }
        case 0x13:{
          s3 = "s3";
          s3_len = 2;
          break;
        }
        case 0x04:{
          s3 = "tp";
          s3_len = 2;
          break;
        }
        case 0x19:{
          s3 = "s9";
          s3_len = 2;
          break;
        }
        case 0x12:{
          s3 = "s2";
          s3_len = 2;
          break;
        }
        case 0x14:{
          s3 = "s4";
          s3_len = 2;
          break;
        }
        case 0x0E:{
          s3 = "a4";
          s3_len = 2;
          break;
        }
        case 0x1E:{
          s3 = "t5";
          s3_len = 2;
          break;
        }
        case 0x11:{
          s3 = "a7";
          s3_len = 2;
          break;
        }
        case 0x03:{
          s3 = "gp";
          s3_len = 2;
          break;
        }
        case 0x05:{
          s3 = "t0";
          s3_len = 2;
          break;
        }
        case 0x1D:{
          s3 = "t4";
          s3_len = 2;
          break;
        }
        case 0x0D:{
          s3 = "a3";
          s3_len = 2;
          break;
        }
        case 0x0F:{
          s3 = "a5";
          s3_len = 2;
          break;
        }
      }
      sep( &s4, &s4_len);
      switch (tree->ast_node.div.rs1) { 
        case 0x08:{
          s5 = "fp";
          s5_len = 2;
          break;
        }
        case 0x15:{
          s5 = "s5";
          s5_len = 2;
          break;
        }
        case 0x01:{
          s5 = "ra";
          s5_len = 2;
          break;
        }
        case 0x06:{
          s5 = "t1";
          s5_len = 2;
          break;
        }
        case 0x09:{
          s5 = "s1";
          s5_len = 2;
          break;
        }
        case 0x10:{
          s5 = "a6";
          s5_len = 2;
          break;
        }
        case 0x1B:{
          s5 = "s11";
          s5_len = 3;
          break;
        }
        case 0x1C:{
          s5 = "t3";
          s5_len = 2;
          break;
        }
        case 0x16:{
          s5 = "s6";
          s5_len = 2;
          break;
        }
        case 0x00:{
          s5 = "zero";
          s5_len = 4;
          break;
        }
        case 0x0A:{
          s5 = "a0";
          s5_len = 2;
          break;
        }
        case 0x1A:{
          s5 = "s10";
          s5_len = 3;
          break;
        }
        case 0x17:{
          s5 = "s7";
          s5_len = 2;
          break;
        }
        case 0x0C:{
          s5 = "a2";
          s5_len = 2;
          break;
        }
        case 0x18:{
          s5 = "s8";
          s5_len = 2;
          break;
        }
        case 0x02:{
          s5 = "sp";
          s5_len = 2;
          break;
        }
        case 0x1F:{
          s5 = "t6";
          s5_len = 2;
          break;
        }
        case 0x0B:{
          s5 = "a1";
          s5_len = 2;
          break;
        }
        case 0x07:{
          s5 = "t2";
          s5_len = 2;
          break;
        }
        case 0x13:{
          s5 = "s3";
          s5_len = 2;
          break;
        }
        case 0x04:{
          s5 = "tp";
          s5_len = 2;
          break;
        }
        case 0x19:{
          s5 = "s9";
          s5_len = 2;
          break;
        }
        case 0x12:{
          s5 = "s2";
          s5_len = 2;
          break;
        }
        case 0x14:{
          s5 = "s4";
          s5_len = 2;
          break;
        }
        case 0x0E:{
          s5 = "a4";
          s5_len = 2;
          break;
        }
        case 0x1E:{
          s5 = "t5";
          s5_len = 2;
          break;
        }
        case 0x11:{
          s5 = "a7";
          s5_len = 2;
          break;
        }
        case 0x03:{
          s5 = "gp";
          s5_len = 2;
          break;
        }
        case 0x05:{
          s5 = "t0";
          s5_len = 2;
          break;
        }
        case 0x1D:{
          s5 = "t4";
          s5_len = 2;
          break;
        }
        case 0x0D:{
          s5 = "a3";
          s5_len = 2;
          break;
        }
        case 0x0F:{
          s5 = "a5";
          s5_len = 2;
          break;
        }
      }
      sep( &s6, &s6_len);
      switch (tree->ast_node.div.rs2) { 
        case 0x08:{
          s7 = "fp";
          s7_len = 2;
          break;
        }
        case 0x15:{
          s7 = "s5";
          s7_len = 2;
          break;
        }
        case 0x01:{
          s7 = "ra";
          s7_len = 2;
          break;
        }
        case 0x06:{
          s7 = "t1";
          s7_len = 2;
          break;
        }
        case 0x09:{
          s7 = "s1";
          s7_len = 2;
          break;
        }
        case 0x10:{
          s7 = "a6";
          s7_len = 2;
          break;
        }
        case 0x1B:{
          s7 = "s11";
          s7_len = 3;
          break;
        }
        case 0x1C:{
          s7 = "t3";
          s7_len = 2;
          break;
        }
        case 0x16:{
          s7 = "s6";
          s7_len = 2;
          break;
        }
        case 0x00:{
          s7 = "zero";
          s7_len = 4;
          break;
        }
        case 0x0A:{
          s7 = "a0";
          s7_len = 2;
          break;
        }
        case 0x1A:{
          s7 = "s10";
          s7_len = 3;
          break;
        }
        case 0x17:{
          s7 = "s7";
          s7_len = 2;
          break;
        }
        case 0x0C:{
          s7 = "a2";
          s7_len = 2;
          break;
        }
        case 0x18:{
          s7 = "s8";
          s7_len = 2;
          break;
        }
        case 0x02:{
          s7 = "sp";
          s7_len = 2;
          break;
        }
        case 0x1F:{
          s7 = "t6";
          s7_len = 2;
          break;
        }
        case 0x0B:{
          s7 = "a1";
          s7_len = 2;
          break;
        }
        case 0x07:{
          s7 = "t2";
          s7_len = 2;
          break;
        }
        case 0x13:{
          s7 = "s3";
          s7_len = 2;
          break;
        }
        case 0x04:{
          s7 = "tp";
          s7_len = 2;
          break;
        }
        case 0x19:{
          s7 = "s9";
          s7_len = 2;
          break;
        }
        case 0x12:{
          s7 = "s2";
          s7_len = 2;
          break;
        }
        case 0x14:{
          s7 = "s4";
          s7_len = 2;
          break;
        }
        case 0x0E:{
          s7 = "a4";
          s7_len = 2;
          break;
        }
        case 0x1E:{
          s7 = "t5";
          s7_len = 2;
          break;
        }
        case 0x11:{
          s7 = "a7";
          s7_len = 2;
          break;
        }
        case 0x03:{
          s7 = "gp";
          s7_len = 2;
          break;
        }
        case 0x05:{
          s7 = "t0";
          s7_len = 2;
          break;
        }
        case 0x1D:{
          s7 = "t4";
          s7_len = 2;
          break;
        }
        case 0x0D:{
          s7 = "a3";
          s7_len = 2;
          break;
        }
        case 0x0F:{
          s7 = "a5";
          s7_len = 2;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      }
    }
    break;
    case RISCV_REM: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      s0 = "rem";
      s0_len = 3;
      if (tree->ast_node.rem.s) {
        s1 = ""; 
        s1_len = 0;
      }
      else {
        s1 = "u"; 
        s1_len = 1;
      } 
      spc( &s2, &s2_len);
      switch (tree->ast_node.rem.rd) { 
        case 0x08:{
          s3 = "fp";
          s3_len = 2;
          break;
        }
        case 0x15:{
          s3 = "s5";
          s3_len = 2;
          break;
        }
        case 0x01:{
          s3 = "ra";
          s3_len = 2;
          break;
        }
        case 0x06:{
          s3 = "t1";
          s3_len = 2;
          break;
        }
        case 0x09:{
          s3 = "s1";
          s3_len = 2;
          break;
        }
        case 0x10:{
          s3 = "a6";
          s3_len = 2;
          break;
        }
        case 0x1B:{
          s3 = "s11";
          s3_len = 3;
          break;
        }
        case 0x1C:{
          s3 = "t3";
          s3_len = 2;
          break;
        }
        case 0x16:{
          s3 = "s6";
          s3_len = 2;
          break;
        }
        case 0x00:{
          s3 = "zero";
          s3_len = 4;
          break;
        }
        case 0x0A:{
          s3 = "a0";
          s3_len = 2;
          break;
        }
        case 0x1A:{
          s3 = "s10";
          s3_len = 3;
          break;
        }
        case 0x17:{
          s3 = "s7";
          s3_len = 2;
          break;
        }
        case 0x0C:{
          s3 = "a2";
          s3_len = 2;
          break;
        }
        case 0x18:{
          s3 = "s8";
          s3_len = 2;
          break;
        }
        case 0x02:{
          s3 = "sp";
          s3_len = 2;
          break;
        }
        case 0x1F:{
          s3 = "t6";
          s3_len = 2;
          break;
        }
        case 0x0B:{
          s3 = "a1";
          s3_len = 2;
          break;
        }
        case 0x07:{
          s3 = "t2";
          s3_len = 2;
          break;
        }
        case 0x13:{
          s3 = "s3";
          s3_len = 2;
          break;
        }
        case 0x04:{
          s3 = "tp";
          s3_len = 2;
          break;
        }
        case 0x19:{
          s3 = "s9";
          s3_len = 2;
          break;
        }
        case 0x12:{
          s3 = "s2";
          s3_len = 2;
          break;
        }
        case 0x14:{
          s3 = "s4";
          s3_len = 2;
          break;
        }
        case 0x0E:{
          s3 = "a4";
          s3_len = 2;
          break;
        }
        case 0x1E:{
          s3 = "t5";
          s3_len = 2;
          break;
        }
        case 0x11:{
          s3 = "a7";
          s3_len = 2;
          break;
        }
        case 0x03:{
          s3 = "gp";
          s3_len = 2;
          break;
        }
        case 0x05:{
          s3 = "t0";
          s3_len = 2;
          break;
        }
        case 0x1D:{
          s3 = "t4";
          s3_len = 2;
          break;
        }
        case 0x0D:{
          s3 = "a3";
          s3_len = 2;
          break;
        }
        case 0x0F:{
          s3 = "a5";
          s3_len = 2;
          break;
        }
      }
      sep( &s4, &s4_len);
      switch (tree->ast_node.rem.rs1) { 
        case 0x08:{
          s5 = "fp";
          s5_len = 2;
          break;
        }
        case 0x15:{
          s5 = "s5";
          s5_len = 2;
          break;
        }
        case 0x01:{
          s5 = "ra";
          s5_len = 2;
          break;
        }
        case 0x06:{
          s5 = "t1";
          s5_len = 2;
          break;
        }
        case 0x09:{
          s5 = "s1";
          s5_len = 2;
          break;
        }
        case 0x10:{
          s5 = "a6";
          s5_len = 2;
          break;
        }
        case 0x1B:{
          s5 = "s11";
          s5_len = 3;
          break;
        }
        case 0x1C:{
          s5 = "t3";
          s5_len = 2;
          break;
        }
        case 0x16:{
          s5 = "s6";
          s5_len = 2;
          break;
        }
        case 0x00:{
          s5 = "zero";
          s5_len = 4;
          break;
        }
        case 0x0A:{
          s5 = "a0";
          s5_len = 2;
          break;
        }
        case 0x1A:{
          s5 = "s10";
          s5_len = 3;
          break;
        }
        case 0x17:{
          s5 = "s7";
          s5_len = 2;
          break;
        }
        case 0x0C:{
          s5 = "a2";
          s5_len = 2;
          break;
        }
        case 0x18:{
          s5 = "s8";
          s5_len = 2;
          break;
        }
        case 0x02:{
          s5 = "sp";
          s5_len = 2;
          break;
        }
        case 0x1F:{
          s5 = "t6";
          s5_len = 2;
          break;
        }
        case 0x0B:{
          s5 = "a1";
          s5_len = 2;
          break;
        }
        case 0x07:{
          s5 = "t2";
          s5_len = 2;
          break;
        }
        case 0x13:{
          s5 = "s3";
          s5_len = 2;
          break;
        }
        case 0x04:{
          s5 = "tp";
          s5_len = 2;
          break;
        }
        case 0x19:{
          s5 = "s9";
          s5_len = 2;
          break;
        }
        case 0x12:{
          s5 = "s2";
          s5_len = 2;
          break;
        }
        case 0x14:{
          s5 = "s4";
          s5_len = 2;
          break;
        }
        case 0x0E:{
          s5 = "a4";
          s5_len = 2;
          break;
        }
        case 0x1E:{
          s5 = "t5";
          s5_len = 2;
          break;
        }
        case 0x11:{
          s5 = "a7";
          s5_len = 2;
          break;
        }
        case 0x03:{
          s5 = "gp";
          s5_len = 2;
          break;
        }
        case 0x05:{
          s5 = "t0";
          s5_len = 2;
          break;
        }
        case 0x1D:{
          s5 = "t4";
          s5_len = 2;
          break;
        }
        case 0x0D:{
          s5 = "a3";
          s5_len = 2;
          break;
        }
        case 0x0F:{
          s5 = "a5";
          s5_len = 2;
          break;
        }
      }
      sep( &s6, &s6_len);
      switch (tree->ast_node.rem.rs2) { 
        case 0x08:{
          s7 = "fp";
          s7_len = 2;
          break;
        }
        case 0x15:{
          s7 = "s5";
          s7_len = 2;
          break;
        }
        case 0x01:{
          s7 = "ra";
          s7_len = 2;
          break;
        }
        case 0x06:{
          s7 = "t1";
          s7_len = 2;
          break;
        }
        case 0x09:{
          s7 = "s1";
          s7_len = 2;
          break;
        }
        case 0x10:{
          s7 = "a6";
          s7_len = 2;
          break;
        }
        case 0x1B:{
          s7 = "s11";
          s7_len = 3;
          break;
        }
        case 0x1C:{
          s7 = "t3";
          s7_len = 2;
          break;
        }
        case 0x16:{
          s7 = "s6";
          s7_len = 2;
          break;
        }
        case 0x00:{
          s7 = "zero";
          s7_len = 4;
          break;
        }
        case 0x0A:{
          s7 = "a0";
          s7_len = 2;
          break;
        }
        case 0x1A:{
          s7 = "s10";
          s7_len = 3;
          break;
        }
        case 0x17:{
          s7 = "s7";
          s7_len = 2;
          break;
        }
        case 0x0C:{
          s7 = "a2";
          s7_len = 2;
          break;
        }
        case 0x18:{
          s7 = "s8";
          s7_len = 2;
          break;
        }
        case 0x02:{
          s7 = "sp";
          s7_len = 2;
          break;
        }
        case 0x1F:{
          s7 = "t6";
          s7_len = 2;
          break;
        }
        case 0x0B:{
          s7 = "a1";
          s7_len = 2;
          break;
        }
        case 0x07:{
          s7 = "t2";
          s7_len = 2;
          break;
        }
        case 0x13:{
          s7 = "s3";
          s7_len = 2;
          break;
        }
        case 0x04:{
          s7 = "tp";
          s7_len = 2;
          break;
        }
        case 0x19:{
          s7 = "s9";
          s7_len = 2;
          break;
        }
        case 0x12:{
          s7 = "s2";
          s7_len = 2;
          break;
        }
        case 0x14:{
          s7 = "s4";
          s7_len = 2;
          break;
        }
        case 0x0E:{
          s7 = "a4";
          s7_len = 2;
          break;
        }
        case 0x1E:{
          s7 = "t5";
          s7_len = 2;
          break;
        }
        case 0x11:{
          s7 = "a7";
          s7_len = 2;
          break;
        }
        case 0x03:{
          s7 = "gp";
          s7_len = 2;
          break;
        }
        case 0x05:{
          s7 = "t0";
          s7_len = 2;
          break;
        }
        case 0x1D:{
          s7 = "t4";
          s7_len = 2;
          break;
        }
        case 0x0D:{
          s7 = "a3";
          s7_len = 2;
          break;
        }
        case 0x0F:{
          s7 = "a5";
          s7_len = 2;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      }
    }
    break;
    case RISCV_MULW: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      s0 = "mulw";
      s0_len = 4;
      spc( &s1, &s1_len);
      switch (tree->ast_node.mulw.rd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.mulw.rs1) { 
        case 0x08:{
          s4 = "fp";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "s5";
          s4_len = 2;
          break;
        }
        case 0x01:{
          s4 = "ra";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "t1";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "a6";
          s4_len = 2;
          break;
        }
        case 0x1B:{
          s4 = "s11";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "t3";
          s4_len = 2;
          break;
        }
        case 0x16:{
          s4 = "s6";
          s4_len = 2;
          break;
        }
        case 0x00:{
          s4 = "zero";
          s4_len = 4;
          break;
        }
        case 0x0A:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x1A:{
          s4 = "s10";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "s7";
          s4_len = 2;
          break;
        }
        case 0x0C:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x18:{
          s4 = "s8";
          s4_len = 2;
          break;
        }
        case 0x02:{
          s4 = "sp";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "t6";
          s4_len = 2;
          break;
        }
        case 0x0B:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x07:{
          s4 = "t2";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "s3";
          s4_len = 2;
          break;
        }
        case 0x04:{
          s4 = "tp";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "s9";
          s4_len = 2;
          break;
        }
        case 0x12:{
          s4 = "s2";
          s4_len = 2;
          break;
        }
        case 0x14:{
          s4 = "s4";
          s4_len = 2;
          break;
        }
        case 0x0E:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x1E:{
          s4 = "t5";
          s4_len = 2;
          break;
        }
        case 0x11:{
          s4 = "a7";
          s4_len = 2;
          break;
        }
        case 0x03:{
          s4 = "gp";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "t0";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "t4";
          s4_len = 2;
          break;
        }
        case 0x0D:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x0F:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.mulw.rs2) { 
        case 0x08:{
          s6 = "fp";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "s5";
          s6_len = 2;
          break;
        }
        case 0x01:{
          s6 = "ra";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "t1";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "s1";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "a6";
          s6_len = 2;
          break;
        }
        case 0x1B:{
          s6 = "s11";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "t3";
          s6_len = 2;
          break;
        }
        case 0x16:{
          s6 = "s6";
          s6_len = 2;
          break;
        }
        case 0x00:{
          s6 = "zero";
          s6_len = 4;
          break;
        }
        case 0x0A:{
          s6 = "a0";
          s6_len = 2;
          break;
        }
        case 0x1A:{
          s6 = "s10";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "s7";
          s6_len = 2;
          break;
        }
        case 0x0C:{
          s6 = "a2";
          s6_len = 2;
          break;
        }
        case 0x18:{
          s6 = "s8";
          s6_len = 2;
          break;
        }
        case 0x02:{
          s6 = "sp";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "t6";
          s6_len = 2;
          break;
        }
        case 0x0B:{
          s6 = "a1";
          s6_len = 2;
          break;
        }
        case 0x07:{
          s6 = "t2";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "s3";
          s6_len = 2;
          break;
        }
        case 0x04:{
          s6 = "tp";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "s9";
          s6_len = 2;
          break;
        }
        case 0x12:{
          s6 = "s2";
          s6_len = 2;
          break;
        }
        case 0x14:{
          s6 = "s4";
          s6_len = 2;
          break;
        }
        case 0x0E:{
          s6 = "a4";
          s6_len = 2;
          break;
        }
        case 0x1E:{
          s6 = "t5";
          s6_len = 2;
          break;
        }
        case 0x11:{
          s6 = "a7";
          s6_len = 2;
          break;
        }
        case 0x03:{
          s6 = "gp";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "t0";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "t4";
          s6_len = 2;
          break;
        }
        case 0x0D:{
          s6 = "a3";
          s6_len = 2;
          break;
        }
        case 0x0F:{
          s6 = "a5";
          s6_len = 2;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
    }
    break;
    case RISCV_DIVW: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      char *s8; size_t s8_len;
      s0 = "div";
      s0_len = 3;
      if (tree->ast_node.divw.s) {
        s1 = ""; 
        s1_len = 0;
      }
      else {
        s1 = "u"; 
        s1_len = 1;
      } 
      s2 = "w";
      s2_len = 1;
      spc( &s3, &s3_len);
      switch (tree->ast_node.divw.rd) { 
        case 0x08:{
          s4 = "fp";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "s5";
          s4_len = 2;
          break;
        }
        case 0x01:{
          s4 = "ra";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "t1";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "a6";
          s4_len = 2;
          break;
        }
        case 0x1B:{
          s4 = "s11";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "t3";
          s4_len = 2;
          break;
        }
        case 0x16:{
          s4 = "s6";
          s4_len = 2;
          break;
        }
        case 0x00:{
          s4 = "zero";
          s4_len = 4;
          break;
        }
        case 0x0A:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x1A:{
          s4 = "s10";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "s7";
          s4_len = 2;
          break;
        }
        case 0x0C:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x18:{
          s4 = "s8";
          s4_len = 2;
          break;
        }
        case 0x02:{
          s4 = "sp";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "t6";
          s4_len = 2;
          break;
        }
        case 0x0B:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x07:{
          s4 = "t2";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "s3";
          s4_len = 2;
          break;
        }
        case 0x04:{
          s4 = "tp";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "s9";
          s4_len = 2;
          break;
        }
        case 0x12:{
          s4 = "s2";
          s4_len = 2;
          break;
        }
        case 0x14:{
          s4 = "s4";
          s4_len = 2;
          break;
        }
        case 0x0E:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x1E:{
          s4 = "t5";
          s4_len = 2;
          break;
        }
        case 0x11:{
          s4 = "a7";
          s4_len = 2;
          break;
        }
        case 0x03:{
          s4 = "gp";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "t0";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "t4";
          s4_len = 2;
          break;
        }
        case 0x0D:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x0F:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.divw.rs1) { 
        case 0x08:{
          s6 = "fp";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "s5";
          s6_len = 2;
          break;
        }
        case 0x01:{
          s6 = "ra";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "t1";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "s1";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "a6";
          s6_len = 2;
          break;
        }
        case 0x1B:{
          s6 = "s11";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "t3";
          s6_len = 2;
          break;
        }
        case 0x16:{
          s6 = "s6";
          s6_len = 2;
          break;
        }
        case 0x00:{
          s6 = "zero";
          s6_len = 4;
          break;
        }
        case 0x0A:{
          s6 = "a0";
          s6_len = 2;
          break;
        }
        case 0x1A:{
          s6 = "s10";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "s7";
          s6_len = 2;
          break;
        }
        case 0x0C:{
          s6 = "a2";
          s6_len = 2;
          break;
        }
        case 0x18:{
          s6 = "s8";
          s6_len = 2;
          break;
        }
        case 0x02:{
          s6 = "sp";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "t6";
          s6_len = 2;
          break;
        }
        case 0x0B:{
          s6 = "a1";
          s6_len = 2;
          break;
        }
        case 0x07:{
          s6 = "t2";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "s3";
          s6_len = 2;
          break;
        }
        case 0x04:{
          s6 = "tp";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "s9";
          s6_len = 2;
          break;
        }
        case 0x12:{
          s6 = "s2";
          s6_len = 2;
          break;
        }
        case 0x14:{
          s6 = "s4";
          s6_len = 2;
          break;
        }
        case 0x0E:{
          s6 = "a4";
          s6_len = 2;
          break;
        }
        case 0x1E:{
          s6 = "t5";
          s6_len = 2;
          break;
        }
        case 0x11:{
          s6 = "a7";
          s6_len = 2;
          break;
        }
        case 0x03:{
          s6 = "gp";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "t0";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "t4";
          s6_len = 2;
          break;
        }
        case 0x0D:{
          s6 = "a3";
          s6_len = 2;
          break;
        }
        case 0x0F:{
          s6 = "a5";
          s6_len = 2;
          break;
        }
      }
      sep( &s7, &s7_len);
      switch (tree->ast_node.divw.rs2) { 
        case 0x08:{
          s8 = "fp";
          s8_len = 2;
          break;
        }
        case 0x15:{
          s8 = "s5";
          s8_len = 2;
          break;
        }
        case 0x01:{
          s8 = "ra";
          s8_len = 2;
          break;
        }
        case 0x06:{
          s8 = "t1";
          s8_len = 2;
          break;
        }
        case 0x09:{
          s8 = "s1";
          s8_len = 2;
          break;
        }
        case 0x10:{
          s8 = "a6";
          s8_len = 2;
          break;
        }
        case 0x1B:{
          s8 = "s11";
          s8_len = 3;
          break;
        }
        case 0x1C:{
          s8 = "t3";
          s8_len = 2;
          break;
        }
        case 0x16:{
          s8 = "s6";
          s8_len = 2;
          break;
        }
        case 0x00:{
          s8 = "zero";
          s8_len = 4;
          break;
        }
        case 0x0A:{
          s8 = "a0";
          s8_len = 2;
          break;
        }
        case 0x1A:{
          s8 = "s10";
          s8_len = 3;
          break;
        }
        case 0x17:{
          s8 = "s7";
          s8_len = 2;
          break;
        }
        case 0x0C:{
          s8 = "a2";
          s8_len = 2;
          break;
        }
        case 0x18:{
          s8 = "s8";
          s8_len = 2;
          break;
        }
        case 0x02:{
          s8 = "sp";
          s8_len = 2;
          break;
        }
        case 0x1F:{
          s8 = "t6";
          s8_len = 2;
          break;
        }
        case 0x0B:{
          s8 = "a1";
          s8_len = 2;
          break;
        }
        case 0x07:{
          s8 = "t2";
          s8_len = 2;
          break;
        }
        case 0x13:{
          s8 = "s3";
          s8_len = 2;
          break;
        }
        case 0x04:{
          s8 = "tp";
          s8_len = 2;
          break;
        }
        case 0x19:{
          s8 = "s9";
          s8_len = 2;
          break;
        }
        case 0x12:{
          s8 = "s2";
          s8_len = 2;
          break;
        }
        case 0x14:{
          s8 = "s4";
          s8_len = 2;
          break;
        }
        case 0x0E:{
          s8 = "a4";
          s8_len = 2;
          break;
        }
        case 0x1E:{
          s8 = "t5";
          s8_len = 2;
          break;
        }
        case 0x11:{
          s8 = "a7";
          s8_len = 2;
          break;
        }
        case 0x03:{
          s8 = "gp";
          s8_len = 2;
          break;
        }
        case 0x05:{
          s8 = "t0";
          s8_len = 2;
          break;
        }
        case 0x1D:{
          s8 = "t4";
          s8_len = 2;
          break;
        }
        case 0x0D:{
          s8 = "a3";
          s8_len = 2;
          break;
        }
        case 0x0F:{
          s8 = "a5";
          s8_len = 2;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len, s8, s8_len);
      }
    }
    break;
    case RISCV_REMW: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      char *s8; size_t s8_len;
      s0 = "rem";
      s0_len = 3;
      if (tree->ast_node.remw.s) {
        s1 = ""; 
        s1_len = 0;
      }
      else {
        s1 = "u"; 
        s1_len = 1;
      } 
      s2 = "w";
      s2_len = 1;
      spc( &s3, &s3_len);
      switch (tree->ast_node.remw.rd) { 
        case 0x08:{
          s4 = "fp";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "s5";
          s4_len = 2;
          break;
        }
        case 0x01:{
          s4 = "ra";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "t1";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "a6";
          s4_len = 2;
          break;
        }
        case 0x1B:{
          s4 = "s11";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "t3";
          s4_len = 2;
          break;
        }
        case 0x16:{
          s4 = "s6";
          s4_len = 2;
          break;
        }
        case 0x00:{
          s4 = "zero";
          s4_len = 4;
          break;
        }
        case 0x0A:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x1A:{
          s4 = "s10";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "s7";
          s4_len = 2;
          break;
        }
        case 0x0C:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x18:{
          s4 = "s8";
          s4_len = 2;
          break;
        }
        case 0x02:{
          s4 = "sp";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "t6";
          s4_len = 2;
          break;
        }
        case 0x0B:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x07:{
          s4 = "t2";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "s3";
          s4_len = 2;
          break;
        }
        case 0x04:{
          s4 = "tp";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "s9";
          s4_len = 2;
          break;
        }
        case 0x12:{
          s4 = "s2";
          s4_len = 2;
          break;
        }
        case 0x14:{
          s4 = "s4";
          s4_len = 2;
          break;
        }
        case 0x0E:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x1E:{
          s4 = "t5";
          s4_len = 2;
          break;
        }
        case 0x11:{
          s4 = "a7";
          s4_len = 2;
          break;
        }
        case 0x03:{
          s4 = "gp";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "t0";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "t4";
          s4_len = 2;
          break;
        }
        case 0x0D:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x0F:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.remw.rs1) { 
        case 0x08:{
          s6 = "fp";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "s5";
          s6_len = 2;
          break;
        }
        case 0x01:{
          s6 = "ra";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "t1";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "s1";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "a6";
          s6_len = 2;
          break;
        }
        case 0x1B:{
          s6 = "s11";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "t3";
          s6_len = 2;
          break;
        }
        case 0x16:{
          s6 = "s6";
          s6_len = 2;
          break;
        }
        case 0x00:{
          s6 = "zero";
          s6_len = 4;
          break;
        }
        case 0x0A:{
          s6 = "a0";
          s6_len = 2;
          break;
        }
        case 0x1A:{
          s6 = "s10";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "s7";
          s6_len = 2;
          break;
        }
        case 0x0C:{
          s6 = "a2";
          s6_len = 2;
          break;
        }
        case 0x18:{
          s6 = "s8";
          s6_len = 2;
          break;
        }
        case 0x02:{
          s6 = "sp";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "t6";
          s6_len = 2;
          break;
        }
        case 0x0B:{
          s6 = "a1";
          s6_len = 2;
          break;
        }
        case 0x07:{
          s6 = "t2";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "s3";
          s6_len = 2;
          break;
        }
        case 0x04:{
          s6 = "tp";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "s9";
          s6_len = 2;
          break;
        }
        case 0x12:{
          s6 = "s2";
          s6_len = 2;
          break;
        }
        case 0x14:{
          s6 = "s4";
          s6_len = 2;
          break;
        }
        case 0x0E:{
          s6 = "a4";
          s6_len = 2;
          break;
        }
        case 0x1E:{
          s6 = "t5";
          s6_len = 2;
          break;
        }
        case 0x11:{
          s6 = "a7";
          s6_len = 2;
          break;
        }
        case 0x03:{
          s6 = "gp";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "t0";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "t4";
          s6_len = 2;
          break;
        }
        case 0x0D:{
          s6 = "a3";
          s6_len = 2;
          break;
        }
        case 0x0F:{
          s6 = "a5";
          s6_len = 2;
          break;
        }
      }
      sep( &s7, &s7_len);
      switch (tree->ast_node.remw.rs2) { 
        case 0x08:{
          s8 = "fp";
          s8_len = 2;
          break;
        }
        case 0x15:{
          s8 = "s5";
          s8_len = 2;
          break;
        }
        case 0x01:{
          s8 = "ra";
          s8_len = 2;
          break;
        }
        case 0x06:{
          s8 = "t1";
          s8_len = 2;
          break;
        }
        case 0x09:{
          s8 = "s1";
          s8_len = 2;
          break;
        }
        case 0x10:{
          s8 = "a6";
          s8_len = 2;
          break;
        }
        case 0x1B:{
          s8 = "s11";
          s8_len = 3;
          break;
        }
        case 0x1C:{
          s8 = "t3";
          s8_len = 2;
          break;
        }
        case 0x16:{
          s8 = "s6";
          s8_len = 2;
          break;
        }
        case 0x00:{
          s8 = "zero";
          s8_len = 4;
          break;
        }
        case 0x0A:{
          s8 = "a0";
          s8_len = 2;
          break;
        }
        case 0x1A:{
          s8 = "s10";
          s8_len = 3;
          break;
        }
        case 0x17:{
          s8 = "s7";
          s8_len = 2;
          break;
        }
        case 0x0C:{
          s8 = "a2";
          s8_len = 2;
          break;
        }
        case 0x18:{
          s8 = "s8";
          s8_len = 2;
          break;
        }
        case 0x02:{
          s8 = "sp";
          s8_len = 2;
          break;
        }
        case 0x1F:{
          s8 = "t6";
          s8_len = 2;
          break;
        }
        case 0x0B:{
          s8 = "a1";
          s8_len = 2;
          break;
        }
        case 0x07:{
          s8 = "t2";
          s8_len = 2;
          break;
        }
        case 0x13:{
          s8 = "s3";
          s8_len = 2;
          break;
        }
        case 0x04:{
          s8 = "tp";
          s8_len = 2;
          break;
        }
        case 0x19:{
          s8 = "s9";
          s8_len = 2;
          break;
        }
        case 0x12:{
          s8 = "s2";
          s8_len = 2;
          break;
        }
        case 0x14:{
          s8 = "s4";
          s8_len = 2;
          break;
        }
        case 0x0E:{
          s8 = "a4";
          s8_len = 2;
          break;
        }
        case 0x1E:{
          s8 = "t5";
          s8_len = 2;
          break;
        }
        case 0x11:{
          s8 = "a7";
          s8_len = 2;
          break;
        }
        case 0x03:{
          s8 = "gp";
          s8_len = 2;
          break;
        }
        case 0x05:{
          s8 = "t0";
          s8_len = 2;
          break;
        }
        case 0x1D:{
          s8 = "t4";
          s8_len = 2;
          break;
        }
        case 0x0D:{
          s8 = "a3";
          s8_len = 2;
          break;
        }
        case 0x0F:{
          s8 = "a5";
          s8_len = 2;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len, s8, s8_len);
      }
    }
    break;
    case RISCV_CSR: {

      if (tree->ast_node.csr.is_imm == RISCV_true) { 
        char *s0; size_t s0_len;
        char *s1; size_t s1_len;
        char *s2; size_t s2_len;
        char *s3; size_t s3_len;
        char *s4; size_t s4_len;
        char *s5; size_t s5_len;
        char *s6; size_t s6_len;
        char *s7; size_t s7_len;
        switch (tree->ast_node.csr.op) { 
          case RISCV_CSRRS:{
            s0 = "csrrs";
            s0_len = 5;
            break;
          }
          case RISCV_CSRRW:{
            s0 = "csrrw";
            s0_len = 5;
            break;
          }
          case RISCV_CSRRC:{
            s0 = "csrrc";
            s0_len = 5;
            break;
          }
        }
        s1 = "i";
        s1_len = 1;
        spc( &s2, &s2_len);
        switch (tree->ast_node.csr.rd) { 
          case 0x08:{
            s3 = "fp";
            s3_len = 2;
            break;
          }
          case 0x15:{
            s3 = "s5";
            s3_len = 2;
            break;
          }
          case 0x01:{
            s3 = "ra";
            s3_len = 2;
            break;
          }
          case 0x06:{
            s3 = "t1";
            s3_len = 2;
            break;
          }
          case 0x09:{
            s3 = "s1";
            s3_len = 2;
            break;
          }
          case 0x10:{
            s3 = "a6";
            s3_len = 2;
            break;
          }
          case 0x1B:{
            s3 = "s11";
            s3_len = 3;
            break;
          }
          case 0x1C:{
            s3 = "t3";
            s3_len = 2;
            break;
          }
          case 0x16:{
            s3 = "s6";
            s3_len = 2;
            break;
          }
          case 0x00:{
            s3 = "zero";
            s3_len = 4;
            break;
          }
          case 0x0A:{
            s3 = "a0";
            s3_len = 2;
            break;
          }
          case 0x1A:{
            s3 = "s10";
            s3_len = 3;
            break;
          }
          case 0x17:{
            s3 = "s7";
            s3_len = 2;
            break;
          }
          case 0x0C:{
            s3 = "a2";
            s3_len = 2;
            break;
          }
          case 0x18:{
            s3 = "s8";
            s3_len = 2;
            break;
          }
          case 0x02:{
            s3 = "sp";
            s3_len = 2;
            break;
          }
          case 0x1F:{
            s3 = "t6";
            s3_len = 2;
            break;
          }
          case 0x0B:{
            s3 = "a1";
            s3_len = 2;
            break;
          }
          case 0x07:{
            s3 = "t2";
            s3_len = 2;
            break;
          }
          case 0x13:{
            s3 = "s3";
            s3_len = 2;
            break;
          }
          case 0x04:{
            s3 = "tp";
            s3_len = 2;
            break;
          }
          case 0x19:{
            s3 = "s9";
            s3_len = 2;
            break;
          }
          case 0x12:{
            s3 = "s2";
            s3_len = 2;
            break;
          }
          case 0x14:{
            s3 = "s4";
            s3_len = 2;
            break;
          }
          case 0x0E:{
            s3 = "a4";
            s3_len = 2;
            break;
          }
          case 0x1E:{
            s3 = "t5";
            s3_len = 2;
            break;
          }
          case 0x11:{
            s3 = "a7";
            s3_len = 2;
            break;
          }
          case 0x03:{
            s3 = "gp";
            s3_len = 2;
            break;
          }
          case 0x05:{
            s3 = "t0";
            s3_len = 2;
            break;
          }
          case 0x1D:{
            s3 = "t4";
            s3_len = 2;
            break;
          }
          case 0x0D:{
            s3 = "a3";
            s3_len = 2;
            break;
          }
          case 0x0F:{
            s3 = "a5";
            s3_len = 2;
            break;
          }
        }
        sep( &s4, &s4_len);
        csr_name_map(tree->ast_node.csr.csr, &s5, &s5_len);
        sep( &s6, &s6_len);
        hex_bits_5(tree->ast_node.csr.rs1, &s7, &s7_len);
        memcpy(buff , s0, s0_len);
        memcpy(buff  + s0_len, s1, s1_len);
        memcpy(buff  + s0_len + s1_len, s2, s2_len);
        memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      }
      if (tree->ast_node.csr.is_imm == RISCV_false) { 
        char *s0; size_t s0_len;
        char *s1; size_t s1_len;
        char *s2; size_t s2_len;
        char *s3; size_t s3_len;
        char *s4; size_t s4_len;
        char *s5; size_t s5_len;
        char *s6; size_t s6_len;
        switch (tree->ast_node.csr.op) { 
          case RISCV_CSRRS:{
            s0 = "csrrs";
            s0_len = 5;
            break;
          }
          case RISCV_CSRRW:{
            s0 = "csrrw";
            s0_len = 5;
            break;
          }
          case RISCV_CSRRC:{
            s0 = "csrrc";
            s0_len = 5;
            break;
          }
        }
        spc( &s1, &s1_len);
        switch (tree->ast_node.csr.rd) { 
          case 0x08:{
            s2 = "fp";
            s2_len = 2;
            break;
          }
          case 0x15:{
            s2 = "s5";
            s2_len = 2;
            break;
          }
          case 0x01:{
            s2 = "ra";
            s2_len = 2;
            break;
          }
          case 0x06:{
            s2 = "t1";
            s2_len = 2;
            break;
          }
          case 0x09:{
            s2 = "s1";
            s2_len = 2;
            break;
          }
          case 0x10:{
            s2 = "a6";
            s2_len = 2;
            break;
          }
          case 0x1B:{
            s2 = "s11";
            s2_len = 3;
            break;
          }
          case 0x1C:{
            s2 = "t3";
            s2_len = 2;
            break;
          }
          case 0x16:{
            s2 = "s6";
            s2_len = 2;
            break;
          }
          case 0x00:{
            s2 = "zero";
            s2_len = 4;
            break;
          }
          case 0x0A:{
            s2 = "a0";
            s2_len = 2;
            break;
          }
          case 0x1A:{
            s2 = "s10";
            s2_len = 3;
            break;
          }
          case 0x17:{
            s2 = "s7";
            s2_len = 2;
            break;
          }
          case 0x0C:{
            s2 = "a2";
            s2_len = 2;
            break;
          }
          case 0x18:{
            s2 = "s8";
            s2_len = 2;
            break;
          }
          case 0x02:{
            s2 = "sp";
            s2_len = 2;
            break;
          }
          case 0x1F:{
            s2 = "t6";
            s2_len = 2;
            break;
          }
          case 0x0B:{
            s2 = "a1";
            s2_len = 2;
            break;
          }
          case 0x07:{
            s2 = "t2";
            s2_len = 2;
            break;
          }
          case 0x13:{
            s2 = "s3";
            s2_len = 2;
            break;
          }
          case 0x04:{
            s2 = "tp";
            s2_len = 2;
            break;
          }
          case 0x19:{
            s2 = "s9";
            s2_len = 2;
            break;
          }
          case 0x12:{
            s2 = "s2";
            s2_len = 2;
            break;
          }
          case 0x14:{
            s2 = "s4";
            s2_len = 2;
            break;
          }
          case 0x0E:{
            s2 = "a4";
            s2_len = 2;
            break;
          }
          case 0x1E:{
            s2 = "t5";
            s2_len = 2;
            break;
          }
          case 0x11:{
            s2 = "a7";
            s2_len = 2;
            break;
          }
          case 0x03:{
            s2 = "gp";
            s2_len = 2;
            break;
          }
          case 0x05:{
            s2 = "t0";
            s2_len = 2;
            break;
          }
          case 0x1D:{
            s2 = "t4";
            s2_len = 2;
            break;
          }
          case 0x0D:{
            s2 = "a3";
            s2_len = 2;
            break;
          }
          case 0x0F:{
            s2 = "a5";
            s2_len = 2;
            break;
          }
        }
        sep( &s3, &s3_len);
        csr_name_map(tree->ast_node.csr.csr, &s4, &s4_len);
        sep( &s5, &s5_len);
        switch (tree->ast_node.csr.rs1) { 
          case 0x08:{
            s6 = "fp";
            s6_len = 2;
            break;
          }
          case 0x15:{
            s6 = "s5";
            s6_len = 2;
            break;
          }
          case 0x01:{
            s6 = "ra";
            s6_len = 2;
            break;
          }
          case 0x06:{
            s6 = "t1";
            s6_len = 2;
            break;
          }
          case 0x09:{
            s6 = "s1";
            s6_len = 2;
            break;
          }
          case 0x10:{
            s6 = "a6";
            s6_len = 2;
            break;
          }
          case 0x1B:{
            s6 = "s11";
            s6_len = 3;
            break;
          }
          case 0x1C:{
            s6 = "t3";
            s6_len = 2;
            break;
          }
          case 0x16:{
            s6 = "s6";
            s6_len = 2;
            break;
          }
          case 0x00:{
            s6 = "zero";
            s6_len = 4;
            break;
          }
          case 0x0A:{
            s6 = "a0";
            s6_len = 2;
            break;
          }
          case 0x1A:{
            s6 = "s10";
            s6_len = 3;
            break;
          }
          case 0x17:{
            s6 = "s7";
            s6_len = 2;
            break;
          }
          case 0x0C:{
            s6 = "a2";
            s6_len = 2;
            break;
          }
          case 0x18:{
            s6 = "s8";
            s6_len = 2;
            break;
          }
          case 0x02:{
            s6 = "sp";
            s6_len = 2;
            break;
          }
          case 0x1F:{
            s6 = "t6";
            s6_len = 2;
            break;
          }
          case 0x0B:{
            s6 = "a1";
            s6_len = 2;
            break;
          }
          case 0x07:{
            s6 = "t2";
            s6_len = 2;
            break;
          }
          case 0x13:{
            s6 = "s3";
            s6_len = 2;
            break;
          }
          case 0x04:{
            s6 = "tp";
            s6_len = 2;
            break;
          }
          case 0x19:{
            s6 = "s9";
            s6_len = 2;
            break;
          }
          case 0x12:{
            s6 = "s2";
            s6_len = 2;
            break;
          }
          case 0x14:{
            s6 = "s4";
            s6_len = 2;
            break;
          }
          case 0x0E:{
            s6 = "a4";
            s6_len = 2;
            break;
          }
          case 0x1E:{
            s6 = "t5";
            s6_len = 2;
            break;
          }
          case 0x11:{
            s6 = "a7";
            s6_len = 2;
            break;
          }
          case 0x03:{
            s6 = "gp";
            s6_len = 2;
            break;
          }
          case 0x05:{
            s6 = "t0";
            s6_len = 2;
            break;
          }
          case 0x1D:{
            s6 = "t4";
            s6_len = 2;
            break;
          }
          case 0x0D:{
            s6 = "a3";
            s6_len = 2;
            break;
          }
          case 0x0F:{
            s6 = "a5";
            s6_len = 2;
            break;
          }
        }
        memcpy(buff , s0, s0_len);
        memcpy(buff  + s0_len, s1, s1_len);
        memcpy(buff  + s0_len + s1_len, s2, s2_len);
        memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
    }
    break;
    case RISCV_URET: {
{
            char *s0; size_t s0_len;
      s0 = "uret";
      s0_len = 4;
      memcpy(buff , s0, s0_len);
      }
    }
    break;
    case RISCV_C_NOP_HINT: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      s0 = "c.nop.hint.";
      s0_len = 11;
      hex_bits_6(tree->ast_node.c_nop_hint, &s1, &s1_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      }
    }
    break;
    case RISCV_C_ADDI_HINT: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      s0 = "c.addi.hint.";
      s0_len = 12;
      switch (tree->ast_node.c_addi_hint) { 
        case 0x08:{
          s1 = "fp";
          s1_len = 2;
          break;
        }
        case 0x15:{
          s1 = "s5";
          s1_len = 2;
          break;
        }
        case 0x01:{
          s1 = "ra";
          s1_len = 2;
          break;
        }
        case 0x06:{
          s1 = "t1";
          s1_len = 2;
          break;
        }
        case 0x09:{
          s1 = "s1";
          s1_len = 2;
          break;
        }
        case 0x10:{
          s1 = "a6";
          s1_len = 2;
          break;
        }
        case 0x1B:{
          s1 = "s11";
          s1_len = 3;
          break;
        }
        case 0x1C:{
          s1 = "t3";
          s1_len = 2;
          break;
        }
        case 0x16:{
          s1 = "s6";
          s1_len = 2;
          break;
        }
        case 0x00:{
          s1 = "zero";
          s1_len = 4;
          break;
        }
        case 0x0A:{
          s1 = "a0";
          s1_len = 2;
          break;
        }
        case 0x1A:{
          s1 = "s10";
          s1_len = 3;
          break;
        }
        case 0x17:{
          s1 = "s7";
          s1_len = 2;
          break;
        }
        case 0x0C:{
          s1 = "a2";
          s1_len = 2;
          break;
        }
        case 0x18:{
          s1 = "s8";
          s1_len = 2;
          break;
        }
        case 0x02:{
          s1 = "sp";
          s1_len = 2;
          break;
        }
        case 0x1F:{
          s1 = "t6";
          s1_len = 2;
          break;
        }
        case 0x0B:{
          s1 = "a1";
          s1_len = 2;
          break;
        }
        case 0x07:{
          s1 = "t2";
          s1_len = 2;
          break;
        }
        case 0x13:{
          s1 = "s3";
          s1_len = 2;
          break;
        }
        case 0x04:{
          s1 = "tp";
          s1_len = 2;
          break;
        }
        case 0x19:{
          s1 = "s9";
          s1_len = 2;
          break;
        }
        case 0x12:{
          s1 = "s2";
          s1_len = 2;
          break;
        }
        case 0x14:{
          s1 = "s4";
          s1_len = 2;
          break;
        }
        case 0x0E:{
          s1 = "a4";
          s1_len = 2;
          break;
        }
        case 0x1E:{
          s1 = "t5";
          s1_len = 2;
          break;
        }
        case 0x11:{
          s1 = "a7";
          s1_len = 2;
          break;
        }
        case 0x03:{
          s1 = "gp";
          s1_len = 2;
          break;
        }
        case 0x05:{
          s1 = "t0";
          s1_len = 2;
          break;
        }
        case 0x1D:{
          s1 = "t4";
          s1_len = 2;
          break;
        }
        case 0x0D:{
          s1 = "a3";
          s1_len = 2;
          break;
        }
        case 0x0F:{
          s1 = "a5";
          s1_len = 2;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      }
    }
    break;
    case RISCV_C_LI_HINT: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      s0 = "c.li.hint.";
      s0_len = 10;
      hex_bits_6(tree->ast_node.c_li_hint, &s1, &s1_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      }
    }
    break;
    case RISCV_C_LUI_HINT: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      s0 = "c.lui.hint.";
      s0_len = 11;
      hex_bits_6(tree->ast_node.c_lui_hint, &s1, &s1_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      }
    }
    break;
    case RISCV_C_MV_HINT: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      s0 = "c.mv.hint.";
      s0_len = 10;
      switch (tree->ast_node.c_mv_hint) { 
        case 0x08:{
          s1 = "fp";
          s1_len = 2;
          break;
        }
        case 0x15:{
          s1 = "s5";
          s1_len = 2;
          break;
        }
        case 0x01:{
          s1 = "ra";
          s1_len = 2;
          break;
        }
        case 0x06:{
          s1 = "t1";
          s1_len = 2;
          break;
        }
        case 0x09:{
          s1 = "s1";
          s1_len = 2;
          break;
        }
        case 0x10:{
          s1 = "a6";
          s1_len = 2;
          break;
        }
        case 0x1B:{
          s1 = "s11";
          s1_len = 3;
          break;
        }
        case 0x1C:{
          s1 = "t3";
          s1_len = 2;
          break;
        }
        case 0x16:{
          s1 = "s6";
          s1_len = 2;
          break;
        }
        case 0x00:{
          s1 = "zero";
          s1_len = 4;
          break;
        }
        case 0x0A:{
          s1 = "a0";
          s1_len = 2;
          break;
        }
        case 0x1A:{
          s1 = "s10";
          s1_len = 3;
          break;
        }
        case 0x17:{
          s1 = "s7";
          s1_len = 2;
          break;
        }
        case 0x0C:{
          s1 = "a2";
          s1_len = 2;
          break;
        }
        case 0x18:{
          s1 = "s8";
          s1_len = 2;
          break;
        }
        case 0x02:{
          s1 = "sp";
          s1_len = 2;
          break;
        }
        case 0x1F:{
          s1 = "t6";
          s1_len = 2;
          break;
        }
        case 0x0B:{
          s1 = "a1";
          s1_len = 2;
          break;
        }
        case 0x07:{
          s1 = "t2";
          s1_len = 2;
          break;
        }
        case 0x13:{
          s1 = "s3";
          s1_len = 2;
          break;
        }
        case 0x04:{
          s1 = "tp";
          s1_len = 2;
          break;
        }
        case 0x19:{
          s1 = "s9";
          s1_len = 2;
          break;
        }
        case 0x12:{
          s1 = "s2";
          s1_len = 2;
          break;
        }
        case 0x14:{
          s1 = "s4";
          s1_len = 2;
          break;
        }
        case 0x0E:{
          s1 = "a4";
          s1_len = 2;
          break;
        }
        case 0x1E:{
          s1 = "t5";
          s1_len = 2;
          break;
        }
        case 0x11:{
          s1 = "a7";
          s1_len = 2;
          break;
        }
        case 0x03:{
          s1 = "gp";
          s1_len = 2;
          break;
        }
        case 0x05:{
          s1 = "t0";
          s1_len = 2;
          break;
        }
        case 0x1D:{
          s1 = "t4";
          s1_len = 2;
          break;
        }
        case 0x0D:{
          s1 = "a3";
          s1_len = 2;
          break;
        }
        case 0x0F:{
          s1 = "a5";
          s1_len = 2;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      }
    }
    break;
    case RISCV_C_ADD_HINT: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      s0 = "c.add.hint.";
      s0_len = 11;
      switch (tree->ast_node.c_add_hint) { 
        case 0x08:{
          s1 = "fp";
          s1_len = 2;
          break;
        }
        case 0x15:{
          s1 = "s5";
          s1_len = 2;
          break;
        }
        case 0x01:{
          s1 = "ra";
          s1_len = 2;
          break;
        }
        case 0x06:{
          s1 = "t1";
          s1_len = 2;
          break;
        }
        case 0x09:{
          s1 = "s1";
          s1_len = 2;
          break;
        }
        case 0x10:{
          s1 = "a6";
          s1_len = 2;
          break;
        }
        case 0x1B:{
          s1 = "s11";
          s1_len = 3;
          break;
        }
        case 0x1C:{
          s1 = "t3";
          s1_len = 2;
          break;
        }
        case 0x16:{
          s1 = "s6";
          s1_len = 2;
          break;
        }
        case 0x00:{
          s1 = "zero";
          s1_len = 4;
          break;
        }
        case 0x0A:{
          s1 = "a0";
          s1_len = 2;
          break;
        }
        case 0x1A:{
          s1 = "s10";
          s1_len = 3;
          break;
        }
        case 0x17:{
          s1 = "s7";
          s1_len = 2;
          break;
        }
        case 0x0C:{
          s1 = "a2";
          s1_len = 2;
          break;
        }
        case 0x18:{
          s1 = "s8";
          s1_len = 2;
          break;
        }
        case 0x02:{
          s1 = "sp";
          s1_len = 2;
          break;
        }
        case 0x1F:{
          s1 = "t6";
          s1_len = 2;
          break;
        }
        case 0x0B:{
          s1 = "a1";
          s1_len = 2;
          break;
        }
        case 0x07:{
          s1 = "t2";
          s1_len = 2;
          break;
        }
        case 0x13:{
          s1 = "s3";
          s1_len = 2;
          break;
        }
        case 0x04:{
          s1 = "tp";
          s1_len = 2;
          break;
        }
        case 0x19:{
          s1 = "s9";
          s1_len = 2;
          break;
        }
        case 0x12:{
          s1 = "s2";
          s1_len = 2;
          break;
        }
        case 0x14:{
          s1 = "s4";
          s1_len = 2;
          break;
        }
        case 0x0E:{
          s1 = "a4";
          s1_len = 2;
          break;
        }
        case 0x1E:{
          s1 = "t5";
          s1_len = 2;
          break;
        }
        case 0x11:{
          s1 = "a7";
          s1_len = 2;
          break;
        }
        case 0x03:{
          s1 = "gp";
          s1_len = 2;
          break;
        }
        case 0x05:{
          s1 = "t0";
          s1_len = 2;
          break;
        }
        case 0x1D:{
          s1 = "t4";
          s1_len = 2;
          break;
        }
        case 0x0D:{
          s1 = "a3";
          s1_len = 2;
          break;
        }
        case 0x0F:{
          s1 = "a5";
          s1_len = 2;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      }
    }
    break;
    case RISCV_C_SLLI_HINT: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      s0 = "c.slli.hint.";
      s0_len = 12;
      switch (tree->ast_node.c_slli_hint.rsd) { 
        case 0x08:{
          s1 = "fp";
          s1_len = 2;
          break;
        }
        case 0x15:{
          s1 = "s5";
          s1_len = 2;
          break;
        }
        case 0x01:{
          s1 = "ra";
          s1_len = 2;
          break;
        }
        case 0x06:{
          s1 = "t1";
          s1_len = 2;
          break;
        }
        case 0x09:{
          s1 = "s1";
          s1_len = 2;
          break;
        }
        case 0x10:{
          s1 = "a6";
          s1_len = 2;
          break;
        }
        case 0x1B:{
          s1 = "s11";
          s1_len = 3;
          break;
        }
        case 0x1C:{
          s1 = "t3";
          s1_len = 2;
          break;
        }
        case 0x16:{
          s1 = "s6";
          s1_len = 2;
          break;
        }
        case 0x00:{
          s1 = "zero";
          s1_len = 4;
          break;
        }
        case 0x0A:{
          s1 = "a0";
          s1_len = 2;
          break;
        }
        case 0x1A:{
          s1 = "s10";
          s1_len = 3;
          break;
        }
        case 0x17:{
          s1 = "s7";
          s1_len = 2;
          break;
        }
        case 0x0C:{
          s1 = "a2";
          s1_len = 2;
          break;
        }
        case 0x18:{
          s1 = "s8";
          s1_len = 2;
          break;
        }
        case 0x02:{
          s1 = "sp";
          s1_len = 2;
          break;
        }
        case 0x1F:{
          s1 = "t6";
          s1_len = 2;
          break;
        }
        case 0x0B:{
          s1 = "a1";
          s1_len = 2;
          break;
        }
        case 0x07:{
          s1 = "t2";
          s1_len = 2;
          break;
        }
        case 0x13:{
          s1 = "s3";
          s1_len = 2;
          break;
        }
        case 0x04:{
          s1 = "tp";
          s1_len = 2;
          break;
        }
        case 0x19:{
          s1 = "s9";
          s1_len = 2;
          break;
        }
        case 0x12:{
          s1 = "s2";
          s1_len = 2;
          break;
        }
        case 0x14:{
          s1 = "s4";
          s1_len = 2;
          break;
        }
        case 0x0E:{
          s1 = "a4";
          s1_len = 2;
          break;
        }
        case 0x1E:{
          s1 = "t5";
          s1_len = 2;
          break;
        }
        case 0x11:{
          s1 = "a7";
          s1_len = 2;
          break;
        }
        case 0x03:{
          s1 = "gp";
          s1_len = 2;
          break;
        }
        case 0x05:{
          s1 = "t0";
          s1_len = 2;
          break;
        }
        case 0x1D:{
          s1 = "t4";
          s1_len = 2;
          break;
        }
        case 0x0D:{
          s1 = "a3";
          s1_len = 2;
          break;
        }
        case 0x0F:{
          s1 = "a5";
          s1_len = 2;
          break;
        }
      }
      s2 = ".";
      s2_len = 1;
      hex_bits_6(tree->ast_node.c_slli_hint.shamt, &s3, &s3_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      }
    }
    break;
    case RISCV_C_SRLI_HINT: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      s0 = "c.srli.hint.";
      s0_len = 12;
      switch (tree->ast_node.c_srli_hint) { 
        case 0x7:{
          s1 = "a5";
          s1_len = 2;
          break;
        }
        case 0x5:{
          s1 = "a3";
          s1_len = 2;
          break;
        }
        case 0x1:{
          s1 = "s1";
          s1_len = 2;
          break;
        }
        case 0x3:{
          s1 = "a1";
          s1_len = 2;
          break;
        }
        case 0x2:{
          s1 = "a0";
          s1_len = 2;
          break;
        }
        case 0x4:{
          s1 = "a2";
          s1_len = 2;
          break;
        }
        case 0x6:{
          s1 = "a4";
          s1_len = 2;
          break;
        }
        case 0x0:{
          s1 = "s0";
          s1_len = 2;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      }
    }
    break;
    case RISCV_C_SRAI_HINT: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      s0 = "c.srai.hint.";
      s0_len = 12;
      switch (tree->ast_node.c_srai_hint) { 
        case 0x7:{
          s1 = "a5";
          s1_len = 2;
          break;
        }
        case 0x5:{
          s1 = "a3";
          s1_len = 2;
          break;
        }
        case 0x1:{
          s1 = "s1";
          s1_len = 2;
          break;
        }
        case 0x3:{
          s1 = "a1";
          s1_len = 2;
          break;
        }
        case 0x2:{
          s1 = "a0";
          s1_len = 2;
          break;
        }
        case 0x4:{
          s1 = "a2";
          s1_len = 2;
          break;
        }
        case 0x6:{
          s1 = "a4";
          s1_len = 2;
          break;
        }
        case 0x0:{
          s1 = "s0";
          s1_len = 2;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      }
    }
    break;
    case RISCV_FENCE_RESERVED: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      char *s8; size_t s8_len;
      char *s9; size_t s9_len;
      s0 = "fence.reserved.";
      s0_len = 15;
      fence_bits(tree->ast_node.fence_reserved.pred, &s1, &s1_len);
      s2 = ".";
      s2_len = 1;
      fence_bits(tree->ast_node.fence_reserved.succ, &s3, &s3_len);
      s4 = ".";
      s4_len = 1;
      switch (tree->ast_node.fence_reserved.rs) { 
        case 0x08:{
          s5 = "fp";
          s5_len = 2;
          break;
        }
        case 0x15:{
          s5 = "s5";
          s5_len = 2;
          break;
        }
        case 0x01:{
          s5 = "ra";
          s5_len = 2;
          break;
        }
        case 0x06:{
          s5 = "t1";
          s5_len = 2;
          break;
        }
        case 0x09:{
          s5 = "s1";
          s5_len = 2;
          break;
        }
        case 0x10:{
          s5 = "a6";
          s5_len = 2;
          break;
        }
        case 0x1B:{
          s5 = "s11";
          s5_len = 3;
          break;
        }
        case 0x1C:{
          s5 = "t3";
          s5_len = 2;
          break;
        }
        case 0x16:{
          s5 = "s6";
          s5_len = 2;
          break;
        }
        case 0x00:{
          s5 = "zero";
          s5_len = 4;
          break;
        }
        case 0x0A:{
          s5 = "a0";
          s5_len = 2;
          break;
        }
        case 0x1A:{
          s5 = "s10";
          s5_len = 3;
          break;
        }
        case 0x17:{
          s5 = "s7";
          s5_len = 2;
          break;
        }
        case 0x0C:{
          s5 = "a2";
          s5_len = 2;
          break;
        }
        case 0x18:{
          s5 = "s8";
          s5_len = 2;
          break;
        }
        case 0x02:{
          s5 = "sp";
          s5_len = 2;
          break;
        }
        case 0x1F:{
          s5 = "t6";
          s5_len = 2;
          break;
        }
        case 0x0B:{
          s5 = "a1";
          s5_len = 2;
          break;
        }
        case 0x07:{
          s5 = "t2";
          s5_len = 2;
          break;
        }
        case 0x13:{
          s5 = "s3";
          s5_len = 2;
          break;
        }
        case 0x04:{
          s5 = "tp";
          s5_len = 2;
          break;
        }
        case 0x19:{
          s5 = "s9";
          s5_len = 2;
          break;
        }
        case 0x12:{
          s5 = "s2";
          s5_len = 2;
          break;
        }
        case 0x14:{
          s5 = "s4";
          s5_len = 2;
          break;
        }
        case 0x0E:{
          s5 = "a4";
          s5_len = 2;
          break;
        }
        case 0x1E:{
          s5 = "t5";
          s5_len = 2;
          break;
        }
        case 0x11:{
          s5 = "a7";
          s5_len = 2;
          break;
        }
        case 0x03:{
          s5 = "gp";
          s5_len = 2;
          break;
        }
        case 0x05:{
          s5 = "t0";
          s5_len = 2;
          break;
        }
        case 0x1D:{
          s5 = "t4";
          s5_len = 2;
          break;
        }
        case 0x0D:{
          s5 = "a3";
          s5_len = 2;
          break;
        }
        case 0x0F:{
          s5 = "a5";
          s5_len = 2;
          break;
        }
      }
      s6 = ".";
      s6_len = 1;
      switch (tree->ast_node.fence_reserved.rd) { 
        case 0x08:{
          s7 = "fp";
          s7_len = 2;
          break;
        }
        case 0x15:{
          s7 = "s5";
          s7_len = 2;
          break;
        }
        case 0x01:{
          s7 = "ra";
          s7_len = 2;
          break;
        }
        case 0x06:{
          s7 = "t1";
          s7_len = 2;
          break;
        }
        case 0x09:{
          s7 = "s1";
          s7_len = 2;
          break;
        }
        case 0x10:{
          s7 = "a6";
          s7_len = 2;
          break;
        }
        case 0x1B:{
          s7 = "s11";
          s7_len = 3;
          break;
        }
        case 0x1C:{
          s7 = "t3";
          s7_len = 2;
          break;
        }
        case 0x16:{
          s7 = "s6";
          s7_len = 2;
          break;
        }
        case 0x00:{
          s7 = "zero";
          s7_len = 4;
          break;
        }
        case 0x0A:{
          s7 = "a0";
          s7_len = 2;
          break;
        }
        case 0x1A:{
          s7 = "s10";
          s7_len = 3;
          break;
        }
        case 0x17:{
          s7 = "s7";
          s7_len = 2;
          break;
        }
        case 0x0C:{
          s7 = "a2";
          s7_len = 2;
          break;
        }
        case 0x18:{
          s7 = "s8";
          s7_len = 2;
          break;
        }
        case 0x02:{
          s7 = "sp";
          s7_len = 2;
          break;
        }
        case 0x1F:{
          s7 = "t6";
          s7_len = 2;
          break;
        }
        case 0x0B:{
          s7 = "a1";
          s7_len = 2;
          break;
        }
        case 0x07:{
          s7 = "t2";
          s7_len = 2;
          break;
        }
        case 0x13:{
          s7 = "s3";
          s7_len = 2;
          break;
        }
        case 0x04:{
          s7 = "tp";
          s7_len = 2;
          break;
        }
        case 0x19:{
          s7 = "s9";
          s7_len = 2;
          break;
        }
        case 0x12:{
          s7 = "s2";
          s7_len = 2;
          break;
        }
        case 0x14:{
          s7 = "s4";
          s7_len = 2;
          break;
        }
        case 0x0E:{
          s7 = "a4";
          s7_len = 2;
          break;
        }
        case 0x1E:{
          s7 = "t5";
          s7_len = 2;
          break;
        }
        case 0x11:{
          s7 = "a7";
          s7_len = 2;
          break;
        }
        case 0x03:{
          s7 = "gp";
          s7_len = 2;
          break;
        }
        case 0x05:{
          s7 = "t0";
          s7_len = 2;
          break;
        }
        case 0x1D:{
          s7 = "t4";
          s7_len = 2;
          break;
        }
        case 0x0D:{
          s7 = "a3";
          s7_len = 2;
          break;
        }
        case 0x0F:{
          s7 = "a5";
          s7_len = 2;
          break;
        }
      }
      s8 = ".";
      s8_len = 1;
      hex_bits_4(tree->ast_node.fence_reserved.fm, &s9, &s9_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len, s8, s8_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len + s8_len, s9, s9_len);
      }
    }
    break;
    case RISCV_FENCEI_RESERVED: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      s0 = "fence.i.reserved.";
      s0_len = 17;
      switch (tree->ast_node.fencei_reserved.rd) { 
        case 0x08:{
          s1 = "fp";
          s1_len = 2;
          break;
        }
        case 0x15:{
          s1 = "s5";
          s1_len = 2;
          break;
        }
        case 0x01:{
          s1 = "ra";
          s1_len = 2;
          break;
        }
        case 0x06:{
          s1 = "t1";
          s1_len = 2;
          break;
        }
        case 0x09:{
          s1 = "s1";
          s1_len = 2;
          break;
        }
        case 0x10:{
          s1 = "a6";
          s1_len = 2;
          break;
        }
        case 0x1B:{
          s1 = "s11";
          s1_len = 3;
          break;
        }
        case 0x1C:{
          s1 = "t3";
          s1_len = 2;
          break;
        }
        case 0x16:{
          s1 = "s6";
          s1_len = 2;
          break;
        }
        case 0x00:{
          s1 = "zero";
          s1_len = 4;
          break;
        }
        case 0x0A:{
          s1 = "a0";
          s1_len = 2;
          break;
        }
        case 0x1A:{
          s1 = "s10";
          s1_len = 3;
          break;
        }
        case 0x17:{
          s1 = "s7";
          s1_len = 2;
          break;
        }
        case 0x0C:{
          s1 = "a2";
          s1_len = 2;
          break;
        }
        case 0x18:{
          s1 = "s8";
          s1_len = 2;
          break;
        }
        case 0x02:{
          s1 = "sp";
          s1_len = 2;
          break;
        }
        case 0x1F:{
          s1 = "t6";
          s1_len = 2;
          break;
        }
        case 0x0B:{
          s1 = "a1";
          s1_len = 2;
          break;
        }
        case 0x07:{
          s1 = "t2";
          s1_len = 2;
          break;
        }
        case 0x13:{
          s1 = "s3";
          s1_len = 2;
          break;
        }
        case 0x04:{
          s1 = "tp";
          s1_len = 2;
          break;
        }
        case 0x19:{
          s1 = "s9";
          s1_len = 2;
          break;
        }
        case 0x12:{
          s1 = "s2";
          s1_len = 2;
          break;
        }
        case 0x14:{
          s1 = "s4";
          s1_len = 2;
          break;
        }
        case 0x0E:{
          s1 = "a4";
          s1_len = 2;
          break;
        }
        case 0x1E:{
          s1 = "t5";
          s1_len = 2;
          break;
        }
        case 0x11:{
          s1 = "a7";
          s1_len = 2;
          break;
        }
        case 0x03:{
          s1 = "gp";
          s1_len = 2;
          break;
        }
        case 0x05:{
          s1 = "t0";
          s1_len = 2;
          break;
        }
        case 0x1D:{
          s1 = "t4";
          s1_len = 2;
          break;
        }
        case 0x0D:{
          s1 = "a3";
          s1_len = 2;
          break;
        }
        case 0x0F:{
          s1 = "a5";
          s1_len = 2;
          break;
        }
      }
      s2 = ".";
      s2_len = 1;
      switch (tree->ast_node.fencei_reserved.rs) { 
        case 0x08:{
          s3 = "fp";
          s3_len = 2;
          break;
        }
        case 0x15:{
          s3 = "s5";
          s3_len = 2;
          break;
        }
        case 0x01:{
          s3 = "ra";
          s3_len = 2;
          break;
        }
        case 0x06:{
          s3 = "t1";
          s3_len = 2;
          break;
        }
        case 0x09:{
          s3 = "s1";
          s3_len = 2;
          break;
        }
        case 0x10:{
          s3 = "a6";
          s3_len = 2;
          break;
        }
        case 0x1B:{
          s3 = "s11";
          s3_len = 3;
          break;
        }
        case 0x1C:{
          s3 = "t3";
          s3_len = 2;
          break;
        }
        case 0x16:{
          s3 = "s6";
          s3_len = 2;
          break;
        }
        case 0x00:{
          s3 = "zero";
          s3_len = 4;
          break;
        }
        case 0x0A:{
          s3 = "a0";
          s3_len = 2;
          break;
        }
        case 0x1A:{
          s3 = "s10";
          s3_len = 3;
          break;
        }
        case 0x17:{
          s3 = "s7";
          s3_len = 2;
          break;
        }
        case 0x0C:{
          s3 = "a2";
          s3_len = 2;
          break;
        }
        case 0x18:{
          s3 = "s8";
          s3_len = 2;
          break;
        }
        case 0x02:{
          s3 = "sp";
          s3_len = 2;
          break;
        }
        case 0x1F:{
          s3 = "t6";
          s3_len = 2;
          break;
        }
        case 0x0B:{
          s3 = "a1";
          s3_len = 2;
          break;
        }
        case 0x07:{
          s3 = "t2";
          s3_len = 2;
          break;
        }
        case 0x13:{
          s3 = "s3";
          s3_len = 2;
          break;
        }
        case 0x04:{
          s3 = "tp";
          s3_len = 2;
          break;
        }
        case 0x19:{
          s3 = "s9";
          s3_len = 2;
          break;
        }
        case 0x12:{
          s3 = "s2";
          s3_len = 2;
          break;
        }
        case 0x14:{
          s3 = "s4";
          s3_len = 2;
          break;
        }
        case 0x0E:{
          s3 = "a4";
          s3_len = 2;
          break;
        }
        case 0x1E:{
          s3 = "t5";
          s3_len = 2;
          break;
        }
        case 0x11:{
          s3 = "a7";
          s3_len = 2;
          break;
        }
        case 0x03:{
          s3 = "gp";
          s3_len = 2;
          break;
        }
        case 0x05:{
          s3 = "t0";
          s3_len = 2;
          break;
        }
        case 0x1D:{
          s3 = "t4";
          s3_len = 2;
          break;
        }
        case 0x0D:{
          s3 = "a3";
          s3_len = 2;
          break;
        }
        case 0x0F:{
          s3 = "a5";
          s3_len = 2;
          break;
        }
      }
      s4 = ".";
      s4_len = 1;
      hex_bits_12(tree->ast_node.fencei_reserved.imm, &s5, &s5_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      }
    }
    break;
    case RISCV_LOAD_FP: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      char *s8; size_t s8_len;
      char *s9; size_t s9_len;
      char *s10; size_t s10_len;
      char *s11; size_t s11_len;
      s0 = "fl";
      s0_len = 2;
      switch (tree->ast_node.load_fp.width) { 
        case RISCV_BYTE:{
          s1 = "b";
          s1_len = 1;
          break;
        }
        case RISCV_WORD:{
          s1 = "w";
          s1_len = 1;
          break;
        }
        case RISCV_DOUBLE:{
          s1 = "d";
          s1_len = 1;
          break;
        }
        case RISCV_HALF:{
          s1 = "h";
          s1_len = 1;
          break;
        }
      }
      spc( &s2, &s2_len);
      freg_or_reg_name(tree->ast_node.load_fp.rd, &s3, &s3_len);
      sep( &s4, &s4_len);
      hex_bits_signed_12(tree->ast_node.load_fp.imm, &s5, &s5_len);
      opt_spc( &s6, &s6_len);
      s7 = "(";
      s7_len = 1;
      opt_spc( &s8, &s8_len);
      switch (tree->ast_node.load_fp.rs1) { 
        case 0x08:{
          s9 = "fp";
          s9_len = 2;
          break;
        }
        case 0x15:{
          s9 = "s5";
          s9_len = 2;
          break;
        }
        case 0x01:{
          s9 = "ra";
          s9_len = 2;
          break;
        }
        case 0x06:{
          s9 = "t1";
          s9_len = 2;
          break;
        }
        case 0x09:{
          s9 = "s1";
          s9_len = 2;
          break;
        }
        case 0x10:{
          s9 = "a6";
          s9_len = 2;
          break;
        }
        case 0x1B:{
          s9 = "s11";
          s9_len = 3;
          break;
        }
        case 0x1C:{
          s9 = "t3";
          s9_len = 2;
          break;
        }
        case 0x16:{
          s9 = "s6";
          s9_len = 2;
          break;
        }
        case 0x00:{
          s9 = "zero";
          s9_len = 4;
          break;
        }
        case 0x0A:{
          s9 = "a0";
          s9_len = 2;
          break;
        }
        case 0x1A:{
          s9 = "s10";
          s9_len = 3;
          break;
        }
        case 0x17:{
          s9 = "s7";
          s9_len = 2;
          break;
        }
        case 0x0C:{
          s9 = "a2";
          s9_len = 2;
          break;
        }
        case 0x18:{
          s9 = "s8";
          s9_len = 2;
          break;
        }
        case 0x02:{
          s9 = "sp";
          s9_len = 2;
          break;
        }
        case 0x1F:{
          s9 = "t6";
          s9_len = 2;
          break;
        }
        case 0x0B:{
          s9 = "a1";
          s9_len = 2;
          break;
        }
        case 0x07:{
          s9 = "t2";
          s9_len = 2;
          break;
        }
        case 0x13:{
          s9 = "s3";
          s9_len = 2;
          break;
        }
        case 0x04:{
          s9 = "tp";
          s9_len = 2;
          break;
        }
        case 0x19:{
          s9 = "s9";
          s9_len = 2;
          break;
        }
        case 0x12:{
          s9 = "s2";
          s9_len = 2;
          break;
        }
        case 0x14:{
          s9 = "s4";
          s9_len = 2;
          break;
        }
        case 0x0E:{
          s9 = "a4";
          s9_len = 2;
          break;
        }
        case 0x1E:{
          s9 = "t5";
          s9_len = 2;
          break;
        }
        case 0x11:{
          s9 = "a7";
          s9_len = 2;
          break;
        }
        case 0x03:{
          s9 = "gp";
          s9_len = 2;
          break;
        }
        case 0x05:{
          s9 = "t0";
          s9_len = 2;
          break;
        }
        case 0x1D:{
          s9 = "t4";
          s9_len = 2;
          break;
        }
        case 0x0D:{
          s9 = "a3";
          s9_len = 2;
          break;
        }
        case 0x0F:{
          s9 = "a5";
          s9_len = 2;
          break;
        }
      }
      opt_spc( &s10, &s10_len);
      s11 = ")";
      s11_len = 1;
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len, s8, s8_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len + s8_len, s9, s9_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len + s8_len + s9_len, s10, s10_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len + s8_len + s9_len + s10_len, s11, s11_len);
      }
    }
    break;
    case RISCV_STORE_FP: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      char *s8; size_t s8_len;
      char *s9; size_t s9_len;
      char *s10; size_t s10_len;
      char *s11; size_t s11_len;
      s0 = "fs";
      s0_len = 2;
      switch (tree->ast_node.store_fp.width) { 
        case RISCV_BYTE:{
          s1 = "b";
          s1_len = 1;
          break;
        }
        case RISCV_WORD:{
          s1 = "w";
          s1_len = 1;
          break;
        }
        case RISCV_DOUBLE:{
          s1 = "d";
          s1_len = 1;
          break;
        }
        case RISCV_HALF:{
          s1 = "h";
          s1_len = 1;
          break;
        }
      }
      spc( &s2, &s2_len);
      switch (tree->ast_node.store_fp.rs2) { 
        case 0x08:{
          s3 = "fs0";
          s3_len = 3;
          break;
        }
        case 0x15:{
          s3 = "fs5";
          s3_len = 3;
          break;
        }
        case 0x01:{
          s3 = "ft1";
          s3_len = 3;
          break;
        }
        case 0x06:{
          s3 = "ft6";
          s3_len = 3;
          break;
        }
        case 0x09:{
          s3 = "fs1";
          s3_len = 3;
          break;
        }
        case 0x10:{
          s3 = "fa6";
          s3_len = 3;
          break;
        }
        case 0x1B:{
          s3 = "fs11";
          s3_len = 4;
          break;
        }
        case 0x1C:{
          s3 = "ft8";
          s3_len = 3;
          break;
        }
        case 0x16:{
          s3 = "fs6";
          s3_len = 3;
          break;
        }
        case 0x00:{
          s3 = "ft0";
          s3_len = 3;
          break;
        }
        case 0x0A:{
          s3 = "fa0";
          s3_len = 3;
          break;
        }
        case 0x1A:{
          s3 = "fs10";
          s3_len = 4;
          break;
        }
        case 0x17:{
          s3 = "fs7";
          s3_len = 3;
          break;
        }
        case 0x0C:{
          s3 = "fa2";
          s3_len = 3;
          break;
        }
        case 0x18:{
          s3 = "fs8";
          s3_len = 3;
          break;
        }
        case 0x02:{
          s3 = "ft2";
          s3_len = 3;
          break;
        }
        case 0x1F:{
          s3 = "ft11";
          s3_len = 4;
          break;
        }
        case 0x0B:{
          s3 = "fa1";
          s3_len = 3;
          break;
        }
        case 0x07:{
          s3 = "ft7";
          s3_len = 3;
          break;
        }
        case 0x13:{
          s3 = "fs3";
          s3_len = 3;
          break;
        }
        case 0x04:{
          s3 = "ft4";
          s3_len = 3;
          break;
        }
        case 0x19:{
          s3 = "fs9";
          s3_len = 3;
          break;
        }
        case 0x12:{
          s3 = "fs2";
          s3_len = 3;
          break;
        }
        case 0x14:{
          s3 = "fs4";
          s3_len = 3;
          break;
        }
        case 0x0E:{
          s3 = "fa4";
          s3_len = 3;
          break;
        }
        case 0x1E:{
          s3 = "ft10";
          s3_len = 4;
          break;
        }
        case 0x11:{
          s3 = "fa7";
          s3_len = 3;
          break;
        }
        case 0x03:{
          s3 = "ft3";
          s3_len = 3;
          break;
        }
        case 0x05:{
          s3 = "ft5";
          s3_len = 3;
          break;
        }
        case 0x1D:{
          s3 = "ft9";
          s3_len = 3;
          break;
        }
        case 0x0D:{
          s3 = "fa3";
          s3_len = 3;
          break;
        }
        case 0x0F:{
          s3 = "fa5";
          s3_len = 3;
          break;
        }
      }
      sep( &s4, &s4_len);
      hex_bits_signed_12(tree->ast_node.store_fp.imm, &s5, &s5_len);
      opt_spc( &s6, &s6_len);
      s7 = "(";
      s7_len = 1;
      opt_spc( &s8, &s8_len);
      switch (tree->ast_node.store_fp.rs1) { 
        case 0x08:{
          s9 = "fp";
          s9_len = 2;
          break;
        }
        case 0x15:{
          s9 = "s5";
          s9_len = 2;
          break;
        }
        case 0x01:{
          s9 = "ra";
          s9_len = 2;
          break;
        }
        case 0x06:{
          s9 = "t1";
          s9_len = 2;
          break;
        }
        case 0x09:{
          s9 = "s1";
          s9_len = 2;
          break;
        }
        case 0x10:{
          s9 = "a6";
          s9_len = 2;
          break;
        }
        case 0x1B:{
          s9 = "s11";
          s9_len = 3;
          break;
        }
        case 0x1C:{
          s9 = "t3";
          s9_len = 2;
          break;
        }
        case 0x16:{
          s9 = "s6";
          s9_len = 2;
          break;
        }
        case 0x00:{
          s9 = "zero";
          s9_len = 4;
          break;
        }
        case 0x0A:{
          s9 = "a0";
          s9_len = 2;
          break;
        }
        case 0x1A:{
          s9 = "s10";
          s9_len = 3;
          break;
        }
        case 0x17:{
          s9 = "s7";
          s9_len = 2;
          break;
        }
        case 0x0C:{
          s9 = "a2";
          s9_len = 2;
          break;
        }
        case 0x18:{
          s9 = "s8";
          s9_len = 2;
          break;
        }
        case 0x02:{
          s9 = "sp";
          s9_len = 2;
          break;
        }
        case 0x1F:{
          s9 = "t6";
          s9_len = 2;
          break;
        }
        case 0x0B:{
          s9 = "a1";
          s9_len = 2;
          break;
        }
        case 0x07:{
          s9 = "t2";
          s9_len = 2;
          break;
        }
        case 0x13:{
          s9 = "s3";
          s9_len = 2;
          break;
        }
        case 0x04:{
          s9 = "tp";
          s9_len = 2;
          break;
        }
        case 0x19:{
          s9 = "s9";
          s9_len = 2;
          break;
        }
        case 0x12:{
          s9 = "s2";
          s9_len = 2;
          break;
        }
        case 0x14:{
          s9 = "s4";
          s9_len = 2;
          break;
        }
        case 0x0E:{
          s9 = "a4";
          s9_len = 2;
          break;
        }
        case 0x1E:{
          s9 = "t5";
          s9_len = 2;
          break;
        }
        case 0x11:{
          s9 = "a7";
          s9_len = 2;
          break;
        }
        case 0x03:{
          s9 = "gp";
          s9_len = 2;
          break;
        }
        case 0x05:{
          s9 = "t0";
          s9_len = 2;
          break;
        }
        case 0x1D:{
          s9 = "t4";
          s9_len = 2;
          break;
        }
        case 0x0D:{
          s9 = "a3";
          s9_len = 2;
          break;
        }
        case 0x0F:{
          s9 = "a5";
          s9_len = 2;
          break;
        }
      }
      opt_spc( &s10, &s10_len);
      s11 = ")";
      s11_len = 1;
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len, s8, s8_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len + s8_len, s9, s9_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len + s8_len + s9_len, s10, s10_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len + s8_len + s9_len + s10_len, s11, s11_len);
      }
    }
    break;
    case RISCV_F_MADD_TYPE_S: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      char *s8; size_t s8_len;
      char *s9; size_t s9_len;
      char *s10; size_t s10_len;
      switch (tree->ast_node.f_madd_type_s.op) { 
        case RISCV_FMADD_S:{
          s0 = "fmadd.s";
          s0_len = 7;
          break;
        }
        case RISCV_FNMADD_S:{
          s0 = "fnmadd.s";
          s0_len = 8;
          break;
        }
        case RISCV_FNMSUB_S:{
          s0 = "fnmsub.s";
          s0_len = 8;
          break;
        }
        case RISCV_FMSUB_S:{
          s0 = "fmsub.s";
          s0_len = 7;
          break;
        }
      }
      spc( &s1, &s1_len);
      freg_or_reg_name(tree->ast_node.f_madd_type_s.rd, &s2, &s2_len);
      sep( &s3, &s3_len);
      freg_or_reg_name(tree->ast_node.f_madd_type_s.rs1, &s4, &s4_len);
      sep( &s5, &s5_len);
      freg_or_reg_name(tree->ast_node.f_madd_type_s.rs2, &s6, &s6_len);
      sep( &s7, &s7_len);
      freg_or_reg_name(tree->ast_node.f_madd_type_s.rs3, &s8, &s8_len);
      sep( &s9, &s9_len);
      switch (tree->ast_node.f_madd_type_s.rm) { 
        case RISCV_RM_RNE:{
          s10 = "rne";
          s10_len = 3;
          break;
        }
        case RISCV_RM_RTZ:{
          s10 = "rtz";
          s10_len = 3;
          break;
        }
        case RISCV_RM_RDN:{
          s10 = "rdn";
          s10_len = 3;
          break;
        }
        case RISCV_RM_RMM:{
          s10 = "rmm";
          s10_len = 3;
          break;
        }
        case RISCV_RM_RUP:{
          s10 = "rup";
          s10_len = 3;
          break;
        }
        case RISCV_RM_DYN:{
          s10 = "dyn";
          s10_len = 3;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len, s8, s8_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len + s8_len, s9, s9_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len + s8_len + s9_len, s10, s10_len);
      }
    }
    break;
    case RISCV_F_BIN_RM_TYPE_S: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      char *s8; size_t s8_len;
      switch (tree->ast_node.f_bin_rm_type_s.op) { 
        case RISCV_FDIV_S:{
          s0 = "fdiv.s";
          s0_len = 6;
          break;
        }
        case RISCV_FADD_S:{
          s0 = "fadd.s";
          s0_len = 6;
          break;
        }
        case RISCV_FMUL_S:{
          s0 = "fmul.s";
          s0_len = 6;
          break;
        }
        case RISCV_FSUB_S:{
          s0 = "fsub.s";
          s0_len = 6;
          break;
        }
      }
      spc( &s1, &s1_len);
      freg_or_reg_name(tree->ast_node.f_bin_rm_type_s.rd, &s2, &s2_len);
      sep( &s3, &s3_len);
      freg_or_reg_name(tree->ast_node.f_bin_rm_type_s.rs1, &s4, &s4_len);
      sep( &s5, &s5_len);
      freg_or_reg_name(tree->ast_node.f_bin_rm_type_s.rs2, &s6, &s6_len);
      sep( &s7, &s7_len);
      switch (tree->ast_node.f_bin_rm_type_s.rm) { 
        case RISCV_RM_RNE:{
          s8 = "rne";
          s8_len = 3;
          break;
        }
        case RISCV_RM_RTZ:{
          s8 = "rtz";
          s8_len = 3;
          break;
        }
        case RISCV_RM_RDN:{
          s8 = "rdn";
          s8_len = 3;
          break;
        }
        case RISCV_RM_RMM:{
          s8 = "rmm";
          s8_len = 3;
          break;
        }
        case RISCV_RM_RUP:{
          s8 = "rup";
          s8_len = 3;
          break;
        }
        case RISCV_RM_DYN:{
          s8 = "dyn";
          s8_len = 3;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len, s8, s8_len);
      }
    }
    break;
    case RISCV_F_UN_RM_TYPE_S: {

      if (tree->ast_node.f_un_rm_type_s.fcvt_s_lu == RISCV_FSQRT_S) { 
        char *s0; size_t s0_len;
        char *s1; size_t s1_len;
        char *s2; size_t s2_len;
        char *s3; size_t s3_len;
        char *s4; size_t s4_len;
        char *s5; size_t s5_len;
        char *s6; size_t s6_len;
        s0 = "fsqrt.s";
        s0_len = 7;
        spc( &s1, &s1_len);
        freg_or_reg_name(tree->ast_node.f_un_rm_type_s.rd, &s2, &s2_len);
        sep( &s3, &s3_len);
        freg_or_reg_name(tree->ast_node.f_un_rm_type_s.rs1, &s4, &s4_len);
        sep( &s5, &s5_len);
        switch (tree->ast_node.f_un_rm_type_s.rm) { 
          case RISCV_RM_RNE:{
            s6 = "rne";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RTZ:{
            s6 = "rtz";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RDN:{
            s6 = "rdn";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RMM:{
            s6 = "rmm";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RUP:{
            s6 = "rup";
            s6_len = 3;
            break;
          }
          case RISCV_RM_DYN:{
            s6 = "dyn";
            s6_len = 3;
            break;
          }
        }
        memcpy(buff , s0, s0_len);
        memcpy(buff  + s0_len, s1, s1_len);
        memcpy(buff  + s0_len + s1_len, s2, s2_len);
        memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
      if (tree->ast_node.f_un_rm_type_s.fcvt_s_lu == RISCV_FCVT_W_S) { 
        char *s0; size_t s0_len;
        char *s1; size_t s1_len;
        char *s2; size_t s2_len;
        char *s3; size_t s3_len;
        char *s4; size_t s4_len;
        char *s5; size_t s5_len;
        char *s6; size_t s6_len;
        s0 = "fcvt.w.s";
        s0_len = 8;
        spc( &s1, &s1_len);
        switch (tree->ast_node.f_un_rm_type_s.rd) { 
          case 0x08:{
            s2 = "fp";
            s2_len = 2;
            break;
          }
          case 0x15:{
            s2 = "s5";
            s2_len = 2;
            break;
          }
          case 0x01:{
            s2 = "ra";
            s2_len = 2;
            break;
          }
          case 0x06:{
            s2 = "t1";
            s2_len = 2;
            break;
          }
          case 0x09:{
            s2 = "s1";
            s2_len = 2;
            break;
          }
          case 0x10:{
            s2 = "a6";
            s2_len = 2;
            break;
          }
          case 0x1B:{
            s2 = "s11";
            s2_len = 3;
            break;
          }
          case 0x1C:{
            s2 = "t3";
            s2_len = 2;
            break;
          }
          case 0x16:{
            s2 = "s6";
            s2_len = 2;
            break;
          }
          case 0x00:{
            s2 = "zero";
            s2_len = 4;
            break;
          }
          case 0x0A:{
            s2 = "a0";
            s2_len = 2;
            break;
          }
          case 0x1A:{
            s2 = "s10";
            s2_len = 3;
            break;
          }
          case 0x17:{
            s2 = "s7";
            s2_len = 2;
            break;
          }
          case 0x0C:{
            s2 = "a2";
            s2_len = 2;
            break;
          }
          case 0x18:{
            s2 = "s8";
            s2_len = 2;
            break;
          }
          case 0x02:{
            s2 = "sp";
            s2_len = 2;
            break;
          }
          case 0x1F:{
            s2 = "t6";
            s2_len = 2;
            break;
          }
          case 0x0B:{
            s2 = "a1";
            s2_len = 2;
            break;
          }
          case 0x07:{
            s2 = "t2";
            s2_len = 2;
            break;
          }
          case 0x13:{
            s2 = "s3";
            s2_len = 2;
            break;
          }
          case 0x04:{
            s2 = "tp";
            s2_len = 2;
            break;
          }
          case 0x19:{
            s2 = "s9";
            s2_len = 2;
            break;
          }
          case 0x12:{
            s2 = "s2";
            s2_len = 2;
            break;
          }
          case 0x14:{
            s2 = "s4";
            s2_len = 2;
            break;
          }
          case 0x0E:{
            s2 = "a4";
            s2_len = 2;
            break;
          }
          case 0x1E:{
            s2 = "t5";
            s2_len = 2;
            break;
          }
          case 0x11:{
            s2 = "a7";
            s2_len = 2;
            break;
          }
          case 0x03:{
            s2 = "gp";
            s2_len = 2;
            break;
          }
          case 0x05:{
            s2 = "t0";
            s2_len = 2;
            break;
          }
          case 0x1D:{
            s2 = "t4";
            s2_len = 2;
            break;
          }
          case 0x0D:{
            s2 = "a3";
            s2_len = 2;
            break;
          }
          case 0x0F:{
            s2 = "a5";
            s2_len = 2;
            break;
          }
        }
        sep( &s3, &s3_len);
        freg_or_reg_name(tree->ast_node.f_un_rm_type_s.rs1, &s4, &s4_len);
        sep( &s5, &s5_len);
        switch (tree->ast_node.f_un_rm_type_s.rm) { 
          case RISCV_RM_RNE:{
            s6 = "rne";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RTZ:{
            s6 = "rtz";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RDN:{
            s6 = "rdn";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RMM:{
            s6 = "rmm";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RUP:{
            s6 = "rup";
            s6_len = 3;
            break;
          }
          case RISCV_RM_DYN:{
            s6 = "dyn";
            s6_len = 3;
            break;
          }
        }
        memcpy(buff , s0, s0_len);
        memcpy(buff  + s0_len, s1, s1_len);
        memcpy(buff  + s0_len + s1_len, s2, s2_len);
        memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
      if (tree->ast_node.f_un_rm_type_s.fcvt_s_lu == RISCV_FCVT_WU_S) { 
        char *s0; size_t s0_len;
        char *s1; size_t s1_len;
        char *s2; size_t s2_len;
        char *s3; size_t s3_len;
        char *s4; size_t s4_len;
        char *s5; size_t s5_len;
        char *s6; size_t s6_len;
        s0 = "fcvt.wu.s";
        s0_len = 9;
        spc( &s1, &s1_len);
        switch (tree->ast_node.f_un_rm_type_s.rd) { 
          case 0x08:{
            s2 = "fp";
            s2_len = 2;
            break;
          }
          case 0x15:{
            s2 = "s5";
            s2_len = 2;
            break;
          }
          case 0x01:{
            s2 = "ra";
            s2_len = 2;
            break;
          }
          case 0x06:{
            s2 = "t1";
            s2_len = 2;
            break;
          }
          case 0x09:{
            s2 = "s1";
            s2_len = 2;
            break;
          }
          case 0x10:{
            s2 = "a6";
            s2_len = 2;
            break;
          }
          case 0x1B:{
            s2 = "s11";
            s2_len = 3;
            break;
          }
          case 0x1C:{
            s2 = "t3";
            s2_len = 2;
            break;
          }
          case 0x16:{
            s2 = "s6";
            s2_len = 2;
            break;
          }
          case 0x00:{
            s2 = "zero";
            s2_len = 4;
            break;
          }
          case 0x0A:{
            s2 = "a0";
            s2_len = 2;
            break;
          }
          case 0x1A:{
            s2 = "s10";
            s2_len = 3;
            break;
          }
          case 0x17:{
            s2 = "s7";
            s2_len = 2;
            break;
          }
          case 0x0C:{
            s2 = "a2";
            s2_len = 2;
            break;
          }
          case 0x18:{
            s2 = "s8";
            s2_len = 2;
            break;
          }
          case 0x02:{
            s2 = "sp";
            s2_len = 2;
            break;
          }
          case 0x1F:{
            s2 = "t6";
            s2_len = 2;
            break;
          }
          case 0x0B:{
            s2 = "a1";
            s2_len = 2;
            break;
          }
          case 0x07:{
            s2 = "t2";
            s2_len = 2;
            break;
          }
          case 0x13:{
            s2 = "s3";
            s2_len = 2;
            break;
          }
          case 0x04:{
            s2 = "tp";
            s2_len = 2;
            break;
          }
          case 0x19:{
            s2 = "s9";
            s2_len = 2;
            break;
          }
          case 0x12:{
            s2 = "s2";
            s2_len = 2;
            break;
          }
          case 0x14:{
            s2 = "s4";
            s2_len = 2;
            break;
          }
          case 0x0E:{
            s2 = "a4";
            s2_len = 2;
            break;
          }
          case 0x1E:{
            s2 = "t5";
            s2_len = 2;
            break;
          }
          case 0x11:{
            s2 = "a7";
            s2_len = 2;
            break;
          }
          case 0x03:{
            s2 = "gp";
            s2_len = 2;
            break;
          }
          case 0x05:{
            s2 = "t0";
            s2_len = 2;
            break;
          }
          case 0x1D:{
            s2 = "t4";
            s2_len = 2;
            break;
          }
          case 0x0D:{
            s2 = "a3";
            s2_len = 2;
            break;
          }
          case 0x0F:{
            s2 = "a5";
            s2_len = 2;
            break;
          }
        }
        sep( &s3, &s3_len);
        freg_or_reg_name(tree->ast_node.f_un_rm_type_s.rs1, &s4, &s4_len);
        sep( &s5, &s5_len);
        switch (tree->ast_node.f_un_rm_type_s.rm) { 
          case RISCV_RM_RNE:{
            s6 = "rne";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RTZ:{
            s6 = "rtz";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RDN:{
            s6 = "rdn";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RMM:{
            s6 = "rmm";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RUP:{
            s6 = "rup";
            s6_len = 3;
            break;
          }
          case RISCV_RM_DYN:{
            s6 = "dyn";
            s6_len = 3;
            break;
          }
        }
        memcpy(buff , s0, s0_len);
        memcpy(buff  + s0_len, s1, s1_len);
        memcpy(buff  + s0_len + s1_len, s2, s2_len);
        memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
      if (tree->ast_node.f_un_rm_type_s.fcvt_s_lu == RISCV_FCVT_S_W) { 
        char *s0; size_t s0_len;
        char *s1; size_t s1_len;
        char *s2; size_t s2_len;
        char *s3; size_t s3_len;
        char *s4; size_t s4_len;
        char *s5; size_t s5_len;
        char *s6; size_t s6_len;
        s0 = "fcvt.s.w";
        s0_len = 8;
        spc( &s1, &s1_len);
        freg_or_reg_name(tree->ast_node.f_un_rm_type_s.rd, &s2, &s2_len);
        sep( &s3, &s3_len);
        switch (tree->ast_node.f_un_rm_type_s.rs1) { 
          case 0x08:{
            s4 = "fp";
            s4_len = 2;
            break;
          }
          case 0x15:{
            s4 = "s5";
            s4_len = 2;
            break;
          }
          case 0x01:{
            s4 = "ra";
            s4_len = 2;
            break;
          }
          case 0x06:{
            s4 = "t1";
            s4_len = 2;
            break;
          }
          case 0x09:{
            s4 = "s1";
            s4_len = 2;
            break;
          }
          case 0x10:{
            s4 = "a6";
            s4_len = 2;
            break;
          }
          case 0x1B:{
            s4 = "s11";
            s4_len = 3;
            break;
          }
          case 0x1C:{
            s4 = "t3";
            s4_len = 2;
            break;
          }
          case 0x16:{
            s4 = "s6";
            s4_len = 2;
            break;
          }
          case 0x00:{
            s4 = "zero";
            s4_len = 4;
            break;
          }
          case 0x0A:{
            s4 = "a0";
            s4_len = 2;
            break;
          }
          case 0x1A:{
            s4 = "s10";
            s4_len = 3;
            break;
          }
          case 0x17:{
            s4 = "s7";
            s4_len = 2;
            break;
          }
          case 0x0C:{
            s4 = "a2";
            s4_len = 2;
            break;
          }
          case 0x18:{
            s4 = "s8";
            s4_len = 2;
            break;
          }
          case 0x02:{
            s4 = "sp";
            s4_len = 2;
            break;
          }
          case 0x1F:{
            s4 = "t6";
            s4_len = 2;
            break;
          }
          case 0x0B:{
            s4 = "a1";
            s4_len = 2;
            break;
          }
          case 0x07:{
            s4 = "t2";
            s4_len = 2;
            break;
          }
          case 0x13:{
            s4 = "s3";
            s4_len = 2;
            break;
          }
          case 0x04:{
            s4 = "tp";
            s4_len = 2;
            break;
          }
          case 0x19:{
            s4 = "s9";
            s4_len = 2;
            break;
          }
          case 0x12:{
            s4 = "s2";
            s4_len = 2;
            break;
          }
          case 0x14:{
            s4 = "s4";
            s4_len = 2;
            break;
          }
          case 0x0E:{
            s4 = "a4";
            s4_len = 2;
            break;
          }
          case 0x1E:{
            s4 = "t5";
            s4_len = 2;
            break;
          }
          case 0x11:{
            s4 = "a7";
            s4_len = 2;
            break;
          }
          case 0x03:{
            s4 = "gp";
            s4_len = 2;
            break;
          }
          case 0x05:{
            s4 = "t0";
            s4_len = 2;
            break;
          }
          case 0x1D:{
            s4 = "t4";
            s4_len = 2;
            break;
          }
          case 0x0D:{
            s4 = "a3";
            s4_len = 2;
            break;
          }
          case 0x0F:{
            s4 = "a5";
            s4_len = 2;
            break;
          }
        }
        sep( &s5, &s5_len);
        switch (tree->ast_node.f_un_rm_type_s.rm) { 
          case RISCV_RM_RNE:{
            s6 = "rne";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RTZ:{
            s6 = "rtz";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RDN:{
            s6 = "rdn";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RMM:{
            s6 = "rmm";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RUP:{
            s6 = "rup";
            s6_len = 3;
            break;
          }
          case RISCV_RM_DYN:{
            s6 = "dyn";
            s6_len = 3;
            break;
          }
        }
        memcpy(buff , s0, s0_len);
        memcpy(buff  + s0_len, s1, s1_len);
        memcpy(buff  + s0_len + s1_len, s2, s2_len);
        memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
      if (tree->ast_node.f_un_rm_type_s.fcvt_s_lu == RISCV_FCVT_S_WU) { 
        char *s0; size_t s0_len;
        char *s1; size_t s1_len;
        char *s2; size_t s2_len;
        char *s3; size_t s3_len;
        char *s4; size_t s4_len;
        char *s5; size_t s5_len;
        char *s6; size_t s6_len;
        s0 = "fcvt.s.wu";
        s0_len = 9;
        spc( &s1, &s1_len);
        freg_or_reg_name(tree->ast_node.f_un_rm_type_s.rd, &s2, &s2_len);
        sep( &s3, &s3_len);
        switch (tree->ast_node.f_un_rm_type_s.rs1) { 
          case 0x08:{
            s4 = "fp";
            s4_len = 2;
            break;
          }
          case 0x15:{
            s4 = "s5";
            s4_len = 2;
            break;
          }
          case 0x01:{
            s4 = "ra";
            s4_len = 2;
            break;
          }
          case 0x06:{
            s4 = "t1";
            s4_len = 2;
            break;
          }
          case 0x09:{
            s4 = "s1";
            s4_len = 2;
            break;
          }
          case 0x10:{
            s4 = "a6";
            s4_len = 2;
            break;
          }
          case 0x1B:{
            s4 = "s11";
            s4_len = 3;
            break;
          }
          case 0x1C:{
            s4 = "t3";
            s4_len = 2;
            break;
          }
          case 0x16:{
            s4 = "s6";
            s4_len = 2;
            break;
          }
          case 0x00:{
            s4 = "zero";
            s4_len = 4;
            break;
          }
          case 0x0A:{
            s4 = "a0";
            s4_len = 2;
            break;
          }
          case 0x1A:{
            s4 = "s10";
            s4_len = 3;
            break;
          }
          case 0x17:{
            s4 = "s7";
            s4_len = 2;
            break;
          }
          case 0x0C:{
            s4 = "a2";
            s4_len = 2;
            break;
          }
          case 0x18:{
            s4 = "s8";
            s4_len = 2;
            break;
          }
          case 0x02:{
            s4 = "sp";
            s4_len = 2;
            break;
          }
          case 0x1F:{
            s4 = "t6";
            s4_len = 2;
            break;
          }
          case 0x0B:{
            s4 = "a1";
            s4_len = 2;
            break;
          }
          case 0x07:{
            s4 = "t2";
            s4_len = 2;
            break;
          }
          case 0x13:{
            s4 = "s3";
            s4_len = 2;
            break;
          }
          case 0x04:{
            s4 = "tp";
            s4_len = 2;
            break;
          }
          case 0x19:{
            s4 = "s9";
            s4_len = 2;
            break;
          }
          case 0x12:{
            s4 = "s2";
            s4_len = 2;
            break;
          }
          case 0x14:{
            s4 = "s4";
            s4_len = 2;
            break;
          }
          case 0x0E:{
            s4 = "a4";
            s4_len = 2;
            break;
          }
          case 0x1E:{
            s4 = "t5";
            s4_len = 2;
            break;
          }
          case 0x11:{
            s4 = "a7";
            s4_len = 2;
            break;
          }
          case 0x03:{
            s4 = "gp";
            s4_len = 2;
            break;
          }
          case 0x05:{
            s4 = "t0";
            s4_len = 2;
            break;
          }
          case 0x1D:{
            s4 = "t4";
            s4_len = 2;
            break;
          }
          case 0x0D:{
            s4 = "a3";
            s4_len = 2;
            break;
          }
          case 0x0F:{
            s4 = "a5";
            s4_len = 2;
            break;
          }
        }
        sep( &s5, &s5_len);
        switch (tree->ast_node.f_un_rm_type_s.rm) { 
          case RISCV_RM_RNE:{
            s6 = "rne";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RTZ:{
            s6 = "rtz";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RDN:{
            s6 = "rdn";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RMM:{
            s6 = "rmm";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RUP:{
            s6 = "rup";
            s6_len = 3;
            break;
          }
          case RISCV_RM_DYN:{
            s6 = "dyn";
            s6_len = 3;
            break;
          }
        }
        memcpy(buff , s0, s0_len);
        memcpy(buff  + s0_len, s1, s1_len);
        memcpy(buff  + s0_len + s1_len, s2, s2_len);
        memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
      if (tree->ast_node.f_un_rm_type_s.fcvt_s_lu == RISCV_FCVT_L_S) { 
        char *s0; size_t s0_len;
        char *s1; size_t s1_len;
        char *s2; size_t s2_len;
        char *s3; size_t s3_len;
        char *s4; size_t s4_len;
        char *s5; size_t s5_len;
        char *s6; size_t s6_len;
        s0 = "fcvt.l.s";
        s0_len = 8;
        spc( &s1, &s1_len);
        switch (tree->ast_node.f_un_rm_type_s.rd) { 
          case 0x08:{
            s2 = "fp";
            s2_len = 2;
            break;
          }
          case 0x15:{
            s2 = "s5";
            s2_len = 2;
            break;
          }
          case 0x01:{
            s2 = "ra";
            s2_len = 2;
            break;
          }
          case 0x06:{
            s2 = "t1";
            s2_len = 2;
            break;
          }
          case 0x09:{
            s2 = "s1";
            s2_len = 2;
            break;
          }
          case 0x10:{
            s2 = "a6";
            s2_len = 2;
            break;
          }
          case 0x1B:{
            s2 = "s11";
            s2_len = 3;
            break;
          }
          case 0x1C:{
            s2 = "t3";
            s2_len = 2;
            break;
          }
          case 0x16:{
            s2 = "s6";
            s2_len = 2;
            break;
          }
          case 0x00:{
            s2 = "zero";
            s2_len = 4;
            break;
          }
          case 0x0A:{
            s2 = "a0";
            s2_len = 2;
            break;
          }
          case 0x1A:{
            s2 = "s10";
            s2_len = 3;
            break;
          }
          case 0x17:{
            s2 = "s7";
            s2_len = 2;
            break;
          }
          case 0x0C:{
            s2 = "a2";
            s2_len = 2;
            break;
          }
          case 0x18:{
            s2 = "s8";
            s2_len = 2;
            break;
          }
          case 0x02:{
            s2 = "sp";
            s2_len = 2;
            break;
          }
          case 0x1F:{
            s2 = "t6";
            s2_len = 2;
            break;
          }
          case 0x0B:{
            s2 = "a1";
            s2_len = 2;
            break;
          }
          case 0x07:{
            s2 = "t2";
            s2_len = 2;
            break;
          }
          case 0x13:{
            s2 = "s3";
            s2_len = 2;
            break;
          }
          case 0x04:{
            s2 = "tp";
            s2_len = 2;
            break;
          }
          case 0x19:{
            s2 = "s9";
            s2_len = 2;
            break;
          }
          case 0x12:{
            s2 = "s2";
            s2_len = 2;
            break;
          }
          case 0x14:{
            s2 = "s4";
            s2_len = 2;
            break;
          }
          case 0x0E:{
            s2 = "a4";
            s2_len = 2;
            break;
          }
          case 0x1E:{
            s2 = "t5";
            s2_len = 2;
            break;
          }
          case 0x11:{
            s2 = "a7";
            s2_len = 2;
            break;
          }
          case 0x03:{
            s2 = "gp";
            s2_len = 2;
            break;
          }
          case 0x05:{
            s2 = "t0";
            s2_len = 2;
            break;
          }
          case 0x1D:{
            s2 = "t4";
            s2_len = 2;
            break;
          }
          case 0x0D:{
            s2 = "a3";
            s2_len = 2;
            break;
          }
          case 0x0F:{
            s2 = "a5";
            s2_len = 2;
            break;
          }
        }
        sep( &s3, &s3_len);
        freg_or_reg_name(tree->ast_node.f_un_rm_type_s.rs1, &s4, &s4_len);
        sep( &s5, &s5_len);
        switch (tree->ast_node.f_un_rm_type_s.rm) { 
          case RISCV_RM_RNE:{
            s6 = "rne";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RTZ:{
            s6 = "rtz";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RDN:{
            s6 = "rdn";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RMM:{
            s6 = "rmm";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RUP:{
            s6 = "rup";
            s6_len = 3;
            break;
          }
          case RISCV_RM_DYN:{
            s6 = "dyn";
            s6_len = 3;
            break;
          }
        }
        memcpy(buff , s0, s0_len);
        memcpy(buff  + s0_len, s1, s1_len);
        memcpy(buff  + s0_len + s1_len, s2, s2_len);
        memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
      if (tree->ast_node.f_un_rm_type_s.fcvt_s_lu == RISCV_FCVT_LU_S) { 
        char *s0; size_t s0_len;
        char *s1; size_t s1_len;
        char *s2; size_t s2_len;
        char *s3; size_t s3_len;
        char *s4; size_t s4_len;
        char *s5; size_t s5_len;
        char *s6; size_t s6_len;
        s0 = "fcvt.lu.s";
        s0_len = 9;
        spc( &s1, &s1_len);
        switch (tree->ast_node.f_un_rm_type_s.rd) { 
          case 0x08:{
            s2 = "fp";
            s2_len = 2;
            break;
          }
          case 0x15:{
            s2 = "s5";
            s2_len = 2;
            break;
          }
          case 0x01:{
            s2 = "ra";
            s2_len = 2;
            break;
          }
          case 0x06:{
            s2 = "t1";
            s2_len = 2;
            break;
          }
          case 0x09:{
            s2 = "s1";
            s2_len = 2;
            break;
          }
          case 0x10:{
            s2 = "a6";
            s2_len = 2;
            break;
          }
          case 0x1B:{
            s2 = "s11";
            s2_len = 3;
            break;
          }
          case 0x1C:{
            s2 = "t3";
            s2_len = 2;
            break;
          }
          case 0x16:{
            s2 = "s6";
            s2_len = 2;
            break;
          }
          case 0x00:{
            s2 = "zero";
            s2_len = 4;
            break;
          }
          case 0x0A:{
            s2 = "a0";
            s2_len = 2;
            break;
          }
          case 0x1A:{
            s2 = "s10";
            s2_len = 3;
            break;
          }
          case 0x17:{
            s2 = "s7";
            s2_len = 2;
            break;
          }
          case 0x0C:{
            s2 = "a2";
            s2_len = 2;
            break;
          }
          case 0x18:{
            s2 = "s8";
            s2_len = 2;
            break;
          }
          case 0x02:{
            s2 = "sp";
            s2_len = 2;
            break;
          }
          case 0x1F:{
            s2 = "t6";
            s2_len = 2;
            break;
          }
          case 0x0B:{
            s2 = "a1";
            s2_len = 2;
            break;
          }
          case 0x07:{
            s2 = "t2";
            s2_len = 2;
            break;
          }
          case 0x13:{
            s2 = "s3";
            s2_len = 2;
            break;
          }
          case 0x04:{
            s2 = "tp";
            s2_len = 2;
            break;
          }
          case 0x19:{
            s2 = "s9";
            s2_len = 2;
            break;
          }
          case 0x12:{
            s2 = "s2";
            s2_len = 2;
            break;
          }
          case 0x14:{
            s2 = "s4";
            s2_len = 2;
            break;
          }
          case 0x0E:{
            s2 = "a4";
            s2_len = 2;
            break;
          }
          case 0x1E:{
            s2 = "t5";
            s2_len = 2;
            break;
          }
          case 0x11:{
            s2 = "a7";
            s2_len = 2;
            break;
          }
          case 0x03:{
            s2 = "gp";
            s2_len = 2;
            break;
          }
          case 0x05:{
            s2 = "t0";
            s2_len = 2;
            break;
          }
          case 0x1D:{
            s2 = "t4";
            s2_len = 2;
            break;
          }
          case 0x0D:{
            s2 = "a3";
            s2_len = 2;
            break;
          }
          case 0x0F:{
            s2 = "a5";
            s2_len = 2;
            break;
          }
        }
        sep( &s3, &s3_len);
        freg_or_reg_name(tree->ast_node.f_un_rm_type_s.rs1, &s4, &s4_len);
        sep( &s5, &s5_len);
        switch (tree->ast_node.f_un_rm_type_s.rm) { 
          case RISCV_RM_RNE:{
            s6 = "rne";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RTZ:{
            s6 = "rtz";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RDN:{
            s6 = "rdn";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RMM:{
            s6 = "rmm";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RUP:{
            s6 = "rup";
            s6_len = 3;
            break;
          }
          case RISCV_RM_DYN:{
            s6 = "dyn";
            s6_len = 3;
            break;
          }
        }
        memcpy(buff , s0, s0_len);
        memcpy(buff  + s0_len, s1, s1_len);
        memcpy(buff  + s0_len + s1_len, s2, s2_len);
        memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
      if (tree->ast_node.f_un_rm_type_s.fcvt_s_lu == RISCV_FCVT_S_L) { 
        char *s0; size_t s0_len;
        char *s1; size_t s1_len;
        char *s2; size_t s2_len;
        char *s3; size_t s3_len;
        char *s4; size_t s4_len;
        char *s5; size_t s5_len;
        char *s6; size_t s6_len;
        s0 = "fcvt.s.l";
        s0_len = 8;
        spc( &s1, &s1_len);
        freg_or_reg_name(tree->ast_node.f_un_rm_type_s.rd, &s2, &s2_len);
        sep( &s3, &s3_len);
        switch (tree->ast_node.f_un_rm_type_s.rs1) { 
          case 0x08:{
            s4 = "fp";
            s4_len = 2;
            break;
          }
          case 0x15:{
            s4 = "s5";
            s4_len = 2;
            break;
          }
          case 0x01:{
            s4 = "ra";
            s4_len = 2;
            break;
          }
          case 0x06:{
            s4 = "t1";
            s4_len = 2;
            break;
          }
          case 0x09:{
            s4 = "s1";
            s4_len = 2;
            break;
          }
          case 0x10:{
            s4 = "a6";
            s4_len = 2;
            break;
          }
          case 0x1B:{
            s4 = "s11";
            s4_len = 3;
            break;
          }
          case 0x1C:{
            s4 = "t3";
            s4_len = 2;
            break;
          }
          case 0x16:{
            s4 = "s6";
            s4_len = 2;
            break;
          }
          case 0x00:{
            s4 = "zero";
            s4_len = 4;
            break;
          }
          case 0x0A:{
            s4 = "a0";
            s4_len = 2;
            break;
          }
          case 0x1A:{
            s4 = "s10";
            s4_len = 3;
            break;
          }
          case 0x17:{
            s4 = "s7";
            s4_len = 2;
            break;
          }
          case 0x0C:{
            s4 = "a2";
            s4_len = 2;
            break;
          }
          case 0x18:{
            s4 = "s8";
            s4_len = 2;
            break;
          }
          case 0x02:{
            s4 = "sp";
            s4_len = 2;
            break;
          }
          case 0x1F:{
            s4 = "t6";
            s4_len = 2;
            break;
          }
          case 0x0B:{
            s4 = "a1";
            s4_len = 2;
            break;
          }
          case 0x07:{
            s4 = "t2";
            s4_len = 2;
            break;
          }
          case 0x13:{
            s4 = "s3";
            s4_len = 2;
            break;
          }
          case 0x04:{
            s4 = "tp";
            s4_len = 2;
            break;
          }
          case 0x19:{
            s4 = "s9";
            s4_len = 2;
            break;
          }
          case 0x12:{
            s4 = "s2";
            s4_len = 2;
            break;
          }
          case 0x14:{
            s4 = "s4";
            s4_len = 2;
            break;
          }
          case 0x0E:{
            s4 = "a4";
            s4_len = 2;
            break;
          }
          case 0x1E:{
            s4 = "t5";
            s4_len = 2;
            break;
          }
          case 0x11:{
            s4 = "a7";
            s4_len = 2;
            break;
          }
          case 0x03:{
            s4 = "gp";
            s4_len = 2;
            break;
          }
          case 0x05:{
            s4 = "t0";
            s4_len = 2;
            break;
          }
          case 0x1D:{
            s4 = "t4";
            s4_len = 2;
            break;
          }
          case 0x0D:{
            s4 = "a3";
            s4_len = 2;
            break;
          }
          case 0x0F:{
            s4 = "a5";
            s4_len = 2;
            break;
          }
        }
        sep( &s5, &s5_len);
        switch (tree->ast_node.f_un_rm_type_s.rm) { 
          case RISCV_RM_RNE:{
            s6 = "rne";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RTZ:{
            s6 = "rtz";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RDN:{
            s6 = "rdn";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RMM:{
            s6 = "rmm";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RUP:{
            s6 = "rup";
            s6_len = 3;
            break;
          }
          case RISCV_RM_DYN:{
            s6 = "dyn";
            s6_len = 3;
            break;
          }
        }
        memcpy(buff , s0, s0_len);
        memcpy(buff  + s0_len, s1, s1_len);
        memcpy(buff  + s0_len + s1_len, s2, s2_len);
        memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
      if (tree->ast_node.f_un_rm_type_s.fcvt_s_lu == RISCV_FCVT_S_LU) { 
        char *s0; size_t s0_len;
        char *s1; size_t s1_len;
        char *s2; size_t s2_len;
        char *s3; size_t s3_len;
        char *s4; size_t s4_len;
        char *s5; size_t s5_len;
        char *s6; size_t s6_len;
        s0 = "fcvt.s.lu";
        s0_len = 9;
        spc( &s1, &s1_len);
        freg_or_reg_name(tree->ast_node.f_un_rm_type_s.rd, &s2, &s2_len);
        sep( &s3, &s3_len);
        switch (tree->ast_node.f_un_rm_type_s.rs1) { 
          case 0x08:{
            s4 = "fp";
            s4_len = 2;
            break;
          }
          case 0x15:{
            s4 = "s5";
            s4_len = 2;
            break;
          }
          case 0x01:{
            s4 = "ra";
            s4_len = 2;
            break;
          }
          case 0x06:{
            s4 = "t1";
            s4_len = 2;
            break;
          }
          case 0x09:{
            s4 = "s1";
            s4_len = 2;
            break;
          }
          case 0x10:{
            s4 = "a6";
            s4_len = 2;
            break;
          }
          case 0x1B:{
            s4 = "s11";
            s4_len = 3;
            break;
          }
          case 0x1C:{
            s4 = "t3";
            s4_len = 2;
            break;
          }
          case 0x16:{
            s4 = "s6";
            s4_len = 2;
            break;
          }
          case 0x00:{
            s4 = "zero";
            s4_len = 4;
            break;
          }
          case 0x0A:{
            s4 = "a0";
            s4_len = 2;
            break;
          }
          case 0x1A:{
            s4 = "s10";
            s4_len = 3;
            break;
          }
          case 0x17:{
            s4 = "s7";
            s4_len = 2;
            break;
          }
          case 0x0C:{
            s4 = "a2";
            s4_len = 2;
            break;
          }
          case 0x18:{
            s4 = "s8";
            s4_len = 2;
            break;
          }
          case 0x02:{
            s4 = "sp";
            s4_len = 2;
            break;
          }
          case 0x1F:{
            s4 = "t6";
            s4_len = 2;
            break;
          }
          case 0x0B:{
            s4 = "a1";
            s4_len = 2;
            break;
          }
          case 0x07:{
            s4 = "t2";
            s4_len = 2;
            break;
          }
          case 0x13:{
            s4 = "s3";
            s4_len = 2;
            break;
          }
          case 0x04:{
            s4 = "tp";
            s4_len = 2;
            break;
          }
          case 0x19:{
            s4 = "s9";
            s4_len = 2;
            break;
          }
          case 0x12:{
            s4 = "s2";
            s4_len = 2;
            break;
          }
          case 0x14:{
            s4 = "s4";
            s4_len = 2;
            break;
          }
          case 0x0E:{
            s4 = "a4";
            s4_len = 2;
            break;
          }
          case 0x1E:{
            s4 = "t5";
            s4_len = 2;
            break;
          }
          case 0x11:{
            s4 = "a7";
            s4_len = 2;
            break;
          }
          case 0x03:{
            s4 = "gp";
            s4_len = 2;
            break;
          }
          case 0x05:{
            s4 = "t0";
            s4_len = 2;
            break;
          }
          case 0x1D:{
            s4 = "t4";
            s4_len = 2;
            break;
          }
          case 0x0D:{
            s4 = "a3";
            s4_len = 2;
            break;
          }
          case 0x0F:{
            s4 = "a5";
            s4_len = 2;
            break;
          }
        }
        sep( &s5, &s5_len);
        switch (tree->ast_node.f_un_rm_type_s.rm) { 
          case RISCV_RM_RNE:{
            s6 = "rne";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RTZ:{
            s6 = "rtz";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RDN:{
            s6 = "rdn";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RMM:{
            s6 = "rmm";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RUP:{
            s6 = "rup";
            s6_len = 3;
            break;
          }
          case RISCV_RM_DYN:{
            s6 = "dyn";
            s6_len = 3;
            break;
          }
        }
        memcpy(buff , s0, s0_len);
        memcpy(buff  + s0_len, s1, s1_len);
        memcpy(buff  + s0_len + s1_len, s2, s2_len);
        memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
    }
    break;
    case RISCV_F_BIN_TYPE_S: {

      if (tree->ast_node.f_bin_type_s.fle_s == RISCV_FSGNJ_S) { 
        char *s0; size_t s0_len;
        char *s1; size_t s1_len;
        char *s2; size_t s2_len;
        char *s3; size_t s3_len;
        char *s4; size_t s4_len;
        char *s5; size_t s5_len;
        char *s6; size_t s6_len;
        s0 = "fsgnj.s";
        s0_len = 7;
        spc( &s1, &s1_len);
        freg_or_reg_name(tree->ast_node.f_bin_type_s.rd, &s2, &s2_len);
        sep( &s3, &s3_len);
        freg_or_reg_name(tree->ast_node.f_bin_type_s.rs1, &s4, &s4_len);
        sep( &s5, &s5_len);
        freg_or_reg_name(tree->ast_node.f_bin_type_s.rs2, &s6, &s6_len);
        memcpy(buff , s0, s0_len);
        memcpy(buff  + s0_len, s1, s1_len);
        memcpy(buff  + s0_len + s1_len, s2, s2_len);
        memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
      if (tree->ast_node.f_bin_type_s.fle_s == RISCV_FSGNJN_S) { 
        char *s0; size_t s0_len;
        char *s1; size_t s1_len;
        char *s2; size_t s2_len;
        char *s3; size_t s3_len;
        char *s4; size_t s4_len;
        char *s5; size_t s5_len;
        char *s6; size_t s6_len;
        s0 = "fsgnjn.s";
        s0_len = 8;
        spc( &s1, &s1_len);
        freg_or_reg_name(tree->ast_node.f_bin_type_s.rd, &s2, &s2_len);
        sep( &s3, &s3_len);
        freg_or_reg_name(tree->ast_node.f_bin_type_s.rs1, &s4, &s4_len);
        sep( &s5, &s5_len);
        freg_or_reg_name(tree->ast_node.f_bin_type_s.rs2, &s6, &s6_len);
        memcpy(buff , s0, s0_len);
        memcpy(buff  + s0_len, s1, s1_len);
        memcpy(buff  + s0_len + s1_len, s2, s2_len);
        memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
      if (tree->ast_node.f_bin_type_s.fle_s == RISCV_FSGNJX_S) { 
        char *s0; size_t s0_len;
        char *s1; size_t s1_len;
        char *s2; size_t s2_len;
        char *s3; size_t s3_len;
        char *s4; size_t s4_len;
        char *s5; size_t s5_len;
        char *s6; size_t s6_len;
        s0 = "fsgnjx.s";
        s0_len = 8;
        spc( &s1, &s1_len);
        freg_or_reg_name(tree->ast_node.f_bin_type_s.rd, &s2, &s2_len);
        sep( &s3, &s3_len);
        freg_or_reg_name(tree->ast_node.f_bin_type_s.rs1, &s4, &s4_len);
        sep( &s5, &s5_len);
        freg_or_reg_name(tree->ast_node.f_bin_type_s.rs2, &s6, &s6_len);
        memcpy(buff , s0, s0_len);
        memcpy(buff  + s0_len, s1, s1_len);
        memcpy(buff  + s0_len + s1_len, s2, s2_len);
        memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
      if (tree->ast_node.f_bin_type_s.fle_s == RISCV_FMIN_S) { 
        char *s0; size_t s0_len;
        char *s1; size_t s1_len;
        char *s2; size_t s2_len;
        char *s3; size_t s3_len;
        char *s4; size_t s4_len;
        char *s5; size_t s5_len;
        char *s6; size_t s6_len;
        s0 = "fmin.s";
        s0_len = 6;
        spc( &s1, &s1_len);
        freg_or_reg_name(tree->ast_node.f_bin_type_s.rd, &s2, &s2_len);
        sep( &s3, &s3_len);
        freg_or_reg_name(tree->ast_node.f_bin_type_s.rs1, &s4, &s4_len);
        sep( &s5, &s5_len);
        freg_or_reg_name(tree->ast_node.f_bin_type_s.rs2, &s6, &s6_len);
        memcpy(buff , s0, s0_len);
        memcpy(buff  + s0_len, s1, s1_len);
        memcpy(buff  + s0_len + s1_len, s2, s2_len);
        memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
      if (tree->ast_node.f_bin_type_s.fle_s == RISCV_FMAX_S) { 
        char *s0; size_t s0_len;
        char *s1; size_t s1_len;
        char *s2; size_t s2_len;
        char *s3; size_t s3_len;
        char *s4; size_t s4_len;
        char *s5; size_t s5_len;
        char *s6; size_t s6_len;
        s0 = "fmax.s";
        s0_len = 6;
        spc( &s1, &s1_len);
        freg_or_reg_name(tree->ast_node.f_bin_type_s.rd, &s2, &s2_len);
        sep( &s3, &s3_len);
        freg_or_reg_name(tree->ast_node.f_bin_type_s.rs1, &s4, &s4_len);
        sep( &s5, &s5_len);
        freg_or_reg_name(tree->ast_node.f_bin_type_s.rs2, &s6, &s6_len);
        memcpy(buff , s0, s0_len);
        memcpy(buff  + s0_len, s1, s1_len);
        memcpy(buff  + s0_len + s1_len, s2, s2_len);
        memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
      if (tree->ast_node.f_bin_type_s.fle_s == RISCV_FEQ_S) { 
        char *s0; size_t s0_len;
        char *s1; size_t s1_len;
        char *s2; size_t s2_len;
        char *s3; size_t s3_len;
        char *s4; size_t s4_len;
        char *s5; size_t s5_len;
        char *s6; size_t s6_len;
        s0 = "feq.s";
        s0_len = 5;
        spc( &s1, &s1_len);
        switch (tree->ast_node.f_bin_type_s.rd) { 
          case 0x08:{
            s2 = "fp";
            s2_len = 2;
            break;
          }
          case 0x15:{
            s2 = "s5";
            s2_len = 2;
            break;
          }
          case 0x01:{
            s2 = "ra";
            s2_len = 2;
            break;
          }
          case 0x06:{
            s2 = "t1";
            s2_len = 2;
            break;
          }
          case 0x09:{
            s2 = "s1";
            s2_len = 2;
            break;
          }
          case 0x10:{
            s2 = "a6";
            s2_len = 2;
            break;
          }
          case 0x1B:{
            s2 = "s11";
            s2_len = 3;
            break;
          }
          case 0x1C:{
            s2 = "t3";
            s2_len = 2;
            break;
          }
          case 0x16:{
            s2 = "s6";
            s2_len = 2;
            break;
          }
          case 0x00:{
            s2 = "zero";
            s2_len = 4;
            break;
          }
          case 0x0A:{
            s2 = "a0";
            s2_len = 2;
            break;
          }
          case 0x1A:{
            s2 = "s10";
            s2_len = 3;
            break;
          }
          case 0x17:{
            s2 = "s7";
            s2_len = 2;
            break;
          }
          case 0x0C:{
            s2 = "a2";
            s2_len = 2;
            break;
          }
          case 0x18:{
            s2 = "s8";
            s2_len = 2;
            break;
          }
          case 0x02:{
            s2 = "sp";
            s2_len = 2;
            break;
          }
          case 0x1F:{
            s2 = "t6";
            s2_len = 2;
            break;
          }
          case 0x0B:{
            s2 = "a1";
            s2_len = 2;
            break;
          }
          case 0x07:{
            s2 = "t2";
            s2_len = 2;
            break;
          }
          case 0x13:{
            s2 = "s3";
            s2_len = 2;
            break;
          }
          case 0x04:{
            s2 = "tp";
            s2_len = 2;
            break;
          }
          case 0x19:{
            s2 = "s9";
            s2_len = 2;
            break;
          }
          case 0x12:{
            s2 = "s2";
            s2_len = 2;
            break;
          }
          case 0x14:{
            s2 = "s4";
            s2_len = 2;
            break;
          }
          case 0x0E:{
            s2 = "a4";
            s2_len = 2;
            break;
          }
          case 0x1E:{
            s2 = "t5";
            s2_len = 2;
            break;
          }
          case 0x11:{
            s2 = "a7";
            s2_len = 2;
            break;
          }
          case 0x03:{
            s2 = "gp";
            s2_len = 2;
            break;
          }
          case 0x05:{
            s2 = "t0";
            s2_len = 2;
            break;
          }
          case 0x1D:{
            s2 = "t4";
            s2_len = 2;
            break;
          }
          case 0x0D:{
            s2 = "a3";
            s2_len = 2;
            break;
          }
          case 0x0F:{
            s2 = "a5";
            s2_len = 2;
            break;
          }
        }
        sep( &s3, &s3_len);
        freg_or_reg_name(tree->ast_node.f_bin_type_s.rs1, &s4, &s4_len);
        sep( &s5, &s5_len);
        freg_or_reg_name(tree->ast_node.f_bin_type_s.rs2, &s6, &s6_len);
        memcpy(buff , s0, s0_len);
        memcpy(buff  + s0_len, s1, s1_len);
        memcpy(buff  + s0_len + s1_len, s2, s2_len);
        memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
      if (tree->ast_node.f_bin_type_s.fle_s == RISCV_FLT_S) { 
        char *s0; size_t s0_len;
        char *s1; size_t s1_len;
        char *s2; size_t s2_len;
        char *s3; size_t s3_len;
        char *s4; size_t s4_len;
        char *s5; size_t s5_len;
        char *s6; size_t s6_len;
        s0 = "flt.s";
        s0_len = 5;
        spc( &s1, &s1_len);
        switch (tree->ast_node.f_bin_type_s.rd) { 
          case 0x08:{
            s2 = "fp";
            s2_len = 2;
            break;
          }
          case 0x15:{
            s2 = "s5";
            s2_len = 2;
            break;
          }
          case 0x01:{
            s2 = "ra";
            s2_len = 2;
            break;
          }
          case 0x06:{
            s2 = "t1";
            s2_len = 2;
            break;
          }
          case 0x09:{
            s2 = "s1";
            s2_len = 2;
            break;
          }
          case 0x10:{
            s2 = "a6";
            s2_len = 2;
            break;
          }
          case 0x1B:{
            s2 = "s11";
            s2_len = 3;
            break;
          }
          case 0x1C:{
            s2 = "t3";
            s2_len = 2;
            break;
          }
          case 0x16:{
            s2 = "s6";
            s2_len = 2;
            break;
          }
          case 0x00:{
            s2 = "zero";
            s2_len = 4;
            break;
          }
          case 0x0A:{
            s2 = "a0";
            s2_len = 2;
            break;
          }
          case 0x1A:{
            s2 = "s10";
            s2_len = 3;
            break;
          }
          case 0x17:{
            s2 = "s7";
            s2_len = 2;
            break;
          }
          case 0x0C:{
            s2 = "a2";
            s2_len = 2;
            break;
          }
          case 0x18:{
            s2 = "s8";
            s2_len = 2;
            break;
          }
          case 0x02:{
            s2 = "sp";
            s2_len = 2;
            break;
          }
          case 0x1F:{
            s2 = "t6";
            s2_len = 2;
            break;
          }
          case 0x0B:{
            s2 = "a1";
            s2_len = 2;
            break;
          }
          case 0x07:{
            s2 = "t2";
            s2_len = 2;
            break;
          }
          case 0x13:{
            s2 = "s3";
            s2_len = 2;
            break;
          }
          case 0x04:{
            s2 = "tp";
            s2_len = 2;
            break;
          }
          case 0x19:{
            s2 = "s9";
            s2_len = 2;
            break;
          }
          case 0x12:{
            s2 = "s2";
            s2_len = 2;
            break;
          }
          case 0x14:{
            s2 = "s4";
            s2_len = 2;
            break;
          }
          case 0x0E:{
            s2 = "a4";
            s2_len = 2;
            break;
          }
          case 0x1E:{
            s2 = "t5";
            s2_len = 2;
            break;
          }
          case 0x11:{
            s2 = "a7";
            s2_len = 2;
            break;
          }
          case 0x03:{
            s2 = "gp";
            s2_len = 2;
            break;
          }
          case 0x05:{
            s2 = "t0";
            s2_len = 2;
            break;
          }
          case 0x1D:{
            s2 = "t4";
            s2_len = 2;
            break;
          }
          case 0x0D:{
            s2 = "a3";
            s2_len = 2;
            break;
          }
          case 0x0F:{
            s2 = "a5";
            s2_len = 2;
            break;
          }
        }
        sep( &s3, &s3_len);
        freg_or_reg_name(tree->ast_node.f_bin_type_s.rs1, &s4, &s4_len);
        sep( &s5, &s5_len);
        freg_or_reg_name(tree->ast_node.f_bin_type_s.rs2, &s6, &s6_len);
        memcpy(buff , s0, s0_len);
        memcpy(buff  + s0_len, s1, s1_len);
        memcpy(buff  + s0_len + s1_len, s2, s2_len);
        memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
      if (tree->ast_node.f_bin_type_s.fle_s == RISCV_FLE_S) { 
        char *s0; size_t s0_len;
        char *s1; size_t s1_len;
        char *s2; size_t s2_len;
        char *s3; size_t s3_len;
        char *s4; size_t s4_len;
        char *s5; size_t s5_len;
        char *s6; size_t s6_len;
        s0 = "fle.s";
        s0_len = 5;
        spc( &s1, &s1_len);
        switch (tree->ast_node.f_bin_type_s.rd) { 
          case 0x08:{
            s2 = "fp";
            s2_len = 2;
            break;
          }
          case 0x15:{
            s2 = "s5";
            s2_len = 2;
            break;
          }
          case 0x01:{
            s2 = "ra";
            s2_len = 2;
            break;
          }
          case 0x06:{
            s2 = "t1";
            s2_len = 2;
            break;
          }
          case 0x09:{
            s2 = "s1";
            s2_len = 2;
            break;
          }
          case 0x10:{
            s2 = "a6";
            s2_len = 2;
            break;
          }
          case 0x1B:{
            s2 = "s11";
            s2_len = 3;
            break;
          }
          case 0x1C:{
            s2 = "t3";
            s2_len = 2;
            break;
          }
          case 0x16:{
            s2 = "s6";
            s2_len = 2;
            break;
          }
          case 0x00:{
            s2 = "zero";
            s2_len = 4;
            break;
          }
          case 0x0A:{
            s2 = "a0";
            s2_len = 2;
            break;
          }
          case 0x1A:{
            s2 = "s10";
            s2_len = 3;
            break;
          }
          case 0x17:{
            s2 = "s7";
            s2_len = 2;
            break;
          }
          case 0x0C:{
            s2 = "a2";
            s2_len = 2;
            break;
          }
          case 0x18:{
            s2 = "s8";
            s2_len = 2;
            break;
          }
          case 0x02:{
            s2 = "sp";
            s2_len = 2;
            break;
          }
          case 0x1F:{
            s2 = "t6";
            s2_len = 2;
            break;
          }
          case 0x0B:{
            s2 = "a1";
            s2_len = 2;
            break;
          }
          case 0x07:{
            s2 = "t2";
            s2_len = 2;
            break;
          }
          case 0x13:{
            s2 = "s3";
            s2_len = 2;
            break;
          }
          case 0x04:{
            s2 = "tp";
            s2_len = 2;
            break;
          }
          case 0x19:{
            s2 = "s9";
            s2_len = 2;
            break;
          }
          case 0x12:{
            s2 = "s2";
            s2_len = 2;
            break;
          }
          case 0x14:{
            s2 = "s4";
            s2_len = 2;
            break;
          }
          case 0x0E:{
            s2 = "a4";
            s2_len = 2;
            break;
          }
          case 0x1E:{
            s2 = "t5";
            s2_len = 2;
            break;
          }
          case 0x11:{
            s2 = "a7";
            s2_len = 2;
            break;
          }
          case 0x03:{
            s2 = "gp";
            s2_len = 2;
            break;
          }
          case 0x05:{
            s2 = "t0";
            s2_len = 2;
            break;
          }
          case 0x1D:{
            s2 = "t4";
            s2_len = 2;
            break;
          }
          case 0x0D:{
            s2 = "a3";
            s2_len = 2;
            break;
          }
          case 0x0F:{
            s2 = "a5";
            s2_len = 2;
            break;
          }
        }
        sep( &s3, &s3_len);
        freg_or_reg_name(tree->ast_node.f_bin_type_s.rs1, &s4, &s4_len);
        sep( &s5, &s5_len);
        freg_or_reg_name(tree->ast_node.f_bin_type_s.rs2, &s6, &s6_len);
        memcpy(buff , s0, s0_len);
        memcpy(buff  + s0_len, s1, s1_len);
        memcpy(buff  + s0_len + s1_len, s2, s2_len);
        memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
    }
    break;
    case RISCV_F_UN_TYPE_S: {

      if (tree->ast_node.f_un_type_s.fmv_w_x == RISCV_FMV_X_W) { 
        char *s0; size_t s0_len;
        char *s1; size_t s1_len;
        char *s2; size_t s2_len;
        char *s3; size_t s3_len;
        char *s4; size_t s4_len;
        s0 = "fmv.x.w";
        s0_len = 7;
        spc( &s1, &s1_len);
        switch (tree->ast_node.f_un_type_s.rd) { 
          case 0x08:{
            s2 = "fp";
            s2_len = 2;
            break;
          }
          case 0x15:{
            s2 = "s5";
            s2_len = 2;
            break;
          }
          case 0x01:{
            s2 = "ra";
            s2_len = 2;
            break;
          }
          case 0x06:{
            s2 = "t1";
            s2_len = 2;
            break;
          }
          case 0x09:{
            s2 = "s1";
            s2_len = 2;
            break;
          }
          case 0x10:{
            s2 = "a6";
            s2_len = 2;
            break;
          }
          case 0x1B:{
            s2 = "s11";
            s2_len = 3;
            break;
          }
          case 0x1C:{
            s2 = "t3";
            s2_len = 2;
            break;
          }
          case 0x16:{
            s2 = "s6";
            s2_len = 2;
            break;
          }
          case 0x00:{
            s2 = "zero";
            s2_len = 4;
            break;
          }
          case 0x0A:{
            s2 = "a0";
            s2_len = 2;
            break;
          }
          case 0x1A:{
            s2 = "s10";
            s2_len = 3;
            break;
          }
          case 0x17:{
            s2 = "s7";
            s2_len = 2;
            break;
          }
          case 0x0C:{
            s2 = "a2";
            s2_len = 2;
            break;
          }
          case 0x18:{
            s2 = "s8";
            s2_len = 2;
            break;
          }
          case 0x02:{
            s2 = "sp";
            s2_len = 2;
            break;
          }
          case 0x1F:{
            s2 = "t6";
            s2_len = 2;
            break;
          }
          case 0x0B:{
            s2 = "a1";
            s2_len = 2;
            break;
          }
          case 0x07:{
            s2 = "t2";
            s2_len = 2;
            break;
          }
          case 0x13:{
            s2 = "s3";
            s2_len = 2;
            break;
          }
          case 0x04:{
            s2 = "tp";
            s2_len = 2;
            break;
          }
          case 0x19:{
            s2 = "s9";
            s2_len = 2;
            break;
          }
          case 0x12:{
            s2 = "s2";
            s2_len = 2;
            break;
          }
          case 0x14:{
            s2 = "s4";
            s2_len = 2;
            break;
          }
          case 0x0E:{
            s2 = "a4";
            s2_len = 2;
            break;
          }
          case 0x1E:{
            s2 = "t5";
            s2_len = 2;
            break;
          }
          case 0x11:{
            s2 = "a7";
            s2_len = 2;
            break;
          }
          case 0x03:{
            s2 = "gp";
            s2_len = 2;
            break;
          }
          case 0x05:{
            s2 = "t0";
            s2_len = 2;
            break;
          }
          case 0x1D:{
            s2 = "t4";
            s2_len = 2;
            break;
          }
          case 0x0D:{
            s2 = "a3";
            s2_len = 2;
            break;
          }
          case 0x0F:{
            s2 = "a5";
            s2_len = 2;
            break;
          }
        }
        sep( &s3, &s3_len);
        switch (tree->ast_node.f_un_type_s.rs1) { 
          case 0x08:{
            s4 = "fs0";
            s4_len = 3;
            break;
          }
          case 0x15:{
            s4 = "fs5";
            s4_len = 3;
            break;
          }
          case 0x01:{
            s4 = "ft1";
            s4_len = 3;
            break;
          }
          case 0x06:{
            s4 = "ft6";
            s4_len = 3;
            break;
          }
          case 0x09:{
            s4 = "fs1";
            s4_len = 3;
            break;
          }
          case 0x10:{
            s4 = "fa6";
            s4_len = 3;
            break;
          }
          case 0x1B:{
            s4 = "fs11";
            s4_len = 4;
            break;
          }
          case 0x1C:{
            s4 = "ft8";
            s4_len = 3;
            break;
          }
          case 0x16:{
            s4 = "fs6";
            s4_len = 3;
            break;
          }
          case 0x00:{
            s4 = "ft0";
            s4_len = 3;
            break;
          }
          case 0x0A:{
            s4 = "fa0";
            s4_len = 3;
            break;
          }
          case 0x1A:{
            s4 = "fs10";
            s4_len = 4;
            break;
          }
          case 0x17:{
            s4 = "fs7";
            s4_len = 3;
            break;
          }
          case 0x0C:{
            s4 = "fa2";
            s4_len = 3;
            break;
          }
          case 0x18:{
            s4 = "fs8";
            s4_len = 3;
            break;
          }
          case 0x02:{
            s4 = "ft2";
            s4_len = 3;
            break;
          }
          case 0x1F:{
            s4 = "ft11";
            s4_len = 4;
            break;
          }
          case 0x0B:{
            s4 = "fa1";
            s4_len = 3;
            break;
          }
          case 0x07:{
            s4 = "ft7";
            s4_len = 3;
            break;
          }
          case 0x13:{
            s4 = "fs3";
            s4_len = 3;
            break;
          }
          case 0x04:{
            s4 = "ft4";
            s4_len = 3;
            break;
          }
          case 0x19:{
            s4 = "fs9";
            s4_len = 3;
            break;
          }
          case 0x12:{
            s4 = "fs2";
            s4_len = 3;
            break;
          }
          case 0x14:{
            s4 = "fs4";
            s4_len = 3;
            break;
          }
          case 0x0E:{
            s4 = "fa4";
            s4_len = 3;
            break;
          }
          case 0x1E:{
            s4 = "ft10";
            s4_len = 4;
            break;
          }
          case 0x11:{
            s4 = "fa7";
            s4_len = 3;
            break;
          }
          case 0x03:{
            s4 = "ft3";
            s4_len = 3;
            break;
          }
          case 0x05:{
            s4 = "ft5";
            s4_len = 3;
            break;
          }
          case 0x1D:{
            s4 = "ft9";
            s4_len = 3;
            break;
          }
          case 0x0D:{
            s4 = "fa3";
            s4_len = 3;
            break;
          }
          case 0x0F:{
            s4 = "fa5";
            s4_len = 3;
            break;
          }
        }
        memcpy(buff , s0, s0_len);
        memcpy(buff  + s0_len, s1, s1_len);
        memcpy(buff  + s0_len + s1_len, s2, s2_len);
        memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      }
      if (tree->ast_node.f_un_type_s.fmv_w_x == RISCV_FMV_W_X) { 
        char *s0; size_t s0_len;
        char *s1; size_t s1_len;
        char *s2; size_t s2_len;
        char *s3; size_t s3_len;
        char *s4; size_t s4_len;
        s0 = "fmv.w.x";
        s0_len = 7;
        spc( &s1, &s1_len);
        switch (tree->ast_node.f_un_type_s.rd) { 
          case 0x08:{
            s2 = "fs0";
            s2_len = 3;
            break;
          }
          case 0x15:{
            s2 = "fs5";
            s2_len = 3;
            break;
          }
          case 0x01:{
            s2 = "ft1";
            s2_len = 3;
            break;
          }
          case 0x06:{
            s2 = "ft6";
            s2_len = 3;
            break;
          }
          case 0x09:{
            s2 = "fs1";
            s2_len = 3;
            break;
          }
          case 0x10:{
            s2 = "fa6";
            s2_len = 3;
            break;
          }
          case 0x1B:{
            s2 = "fs11";
            s2_len = 4;
            break;
          }
          case 0x1C:{
            s2 = "ft8";
            s2_len = 3;
            break;
          }
          case 0x16:{
            s2 = "fs6";
            s2_len = 3;
            break;
          }
          case 0x00:{
            s2 = "ft0";
            s2_len = 3;
            break;
          }
          case 0x0A:{
            s2 = "fa0";
            s2_len = 3;
            break;
          }
          case 0x1A:{
            s2 = "fs10";
            s2_len = 4;
            break;
          }
          case 0x17:{
            s2 = "fs7";
            s2_len = 3;
            break;
          }
          case 0x0C:{
            s2 = "fa2";
            s2_len = 3;
            break;
          }
          case 0x18:{
            s2 = "fs8";
            s2_len = 3;
            break;
          }
          case 0x02:{
            s2 = "ft2";
            s2_len = 3;
            break;
          }
          case 0x1F:{
            s2 = "ft11";
            s2_len = 4;
            break;
          }
          case 0x0B:{
            s2 = "fa1";
            s2_len = 3;
            break;
          }
          case 0x07:{
            s2 = "ft7";
            s2_len = 3;
            break;
          }
          case 0x13:{
            s2 = "fs3";
            s2_len = 3;
            break;
          }
          case 0x04:{
            s2 = "ft4";
            s2_len = 3;
            break;
          }
          case 0x19:{
            s2 = "fs9";
            s2_len = 3;
            break;
          }
          case 0x12:{
            s2 = "fs2";
            s2_len = 3;
            break;
          }
          case 0x14:{
            s2 = "fs4";
            s2_len = 3;
            break;
          }
          case 0x0E:{
            s2 = "fa4";
            s2_len = 3;
            break;
          }
          case 0x1E:{
            s2 = "ft10";
            s2_len = 4;
            break;
          }
          case 0x11:{
            s2 = "fa7";
            s2_len = 3;
            break;
          }
          case 0x03:{
            s2 = "ft3";
            s2_len = 3;
            break;
          }
          case 0x05:{
            s2 = "ft5";
            s2_len = 3;
            break;
          }
          case 0x1D:{
            s2 = "ft9";
            s2_len = 3;
            break;
          }
          case 0x0D:{
            s2 = "fa3";
            s2_len = 3;
            break;
          }
          case 0x0F:{
            s2 = "fa5";
            s2_len = 3;
            break;
          }
        }
        sep( &s3, &s3_len);
        switch (tree->ast_node.f_un_type_s.rs1) { 
          case 0x08:{
            s4 = "fp";
            s4_len = 2;
            break;
          }
          case 0x15:{
            s4 = "s5";
            s4_len = 2;
            break;
          }
          case 0x01:{
            s4 = "ra";
            s4_len = 2;
            break;
          }
          case 0x06:{
            s4 = "t1";
            s4_len = 2;
            break;
          }
          case 0x09:{
            s4 = "s1";
            s4_len = 2;
            break;
          }
          case 0x10:{
            s4 = "a6";
            s4_len = 2;
            break;
          }
          case 0x1B:{
            s4 = "s11";
            s4_len = 3;
            break;
          }
          case 0x1C:{
            s4 = "t3";
            s4_len = 2;
            break;
          }
          case 0x16:{
            s4 = "s6";
            s4_len = 2;
            break;
          }
          case 0x00:{
            s4 = "zero";
            s4_len = 4;
            break;
          }
          case 0x0A:{
            s4 = "a0";
            s4_len = 2;
            break;
          }
          case 0x1A:{
            s4 = "s10";
            s4_len = 3;
            break;
          }
          case 0x17:{
            s4 = "s7";
            s4_len = 2;
            break;
          }
          case 0x0C:{
            s4 = "a2";
            s4_len = 2;
            break;
          }
          case 0x18:{
            s4 = "s8";
            s4_len = 2;
            break;
          }
          case 0x02:{
            s4 = "sp";
            s4_len = 2;
            break;
          }
          case 0x1F:{
            s4 = "t6";
            s4_len = 2;
            break;
          }
          case 0x0B:{
            s4 = "a1";
            s4_len = 2;
            break;
          }
          case 0x07:{
            s4 = "t2";
            s4_len = 2;
            break;
          }
          case 0x13:{
            s4 = "s3";
            s4_len = 2;
            break;
          }
          case 0x04:{
            s4 = "tp";
            s4_len = 2;
            break;
          }
          case 0x19:{
            s4 = "s9";
            s4_len = 2;
            break;
          }
          case 0x12:{
            s4 = "s2";
            s4_len = 2;
            break;
          }
          case 0x14:{
            s4 = "s4";
            s4_len = 2;
            break;
          }
          case 0x0E:{
            s4 = "a4";
            s4_len = 2;
            break;
          }
          case 0x1E:{
            s4 = "t5";
            s4_len = 2;
            break;
          }
          case 0x11:{
            s4 = "a7";
            s4_len = 2;
            break;
          }
          case 0x03:{
            s4 = "gp";
            s4_len = 2;
            break;
          }
          case 0x05:{
            s4 = "t0";
            s4_len = 2;
            break;
          }
          case 0x1D:{
            s4 = "t4";
            s4_len = 2;
            break;
          }
          case 0x0D:{
            s4 = "a3";
            s4_len = 2;
            break;
          }
          case 0x0F:{
            s4 = "a5";
            s4_len = 2;
            break;
          }
        }
        memcpy(buff , s0, s0_len);
        memcpy(buff  + s0_len, s1, s1_len);
        memcpy(buff  + s0_len + s1_len, s2, s2_len);
        memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      }
      if (tree->ast_node.f_un_type_s.fmv_w_x == RISCV_FCLASS_S) { 
        char *s0; size_t s0_len;
        char *s1; size_t s1_len;
        char *s2; size_t s2_len;
        char *s3; size_t s3_len;
        char *s4; size_t s4_len;
        s0 = "fclass.s";
        s0_len = 8;
        spc( &s1, &s1_len);
        switch (tree->ast_node.f_un_type_s.rd) { 
          case 0x08:{
            s2 = "fp";
            s2_len = 2;
            break;
          }
          case 0x15:{
            s2 = "s5";
            s2_len = 2;
            break;
          }
          case 0x01:{
            s2 = "ra";
            s2_len = 2;
            break;
          }
          case 0x06:{
            s2 = "t1";
            s2_len = 2;
            break;
          }
          case 0x09:{
            s2 = "s1";
            s2_len = 2;
            break;
          }
          case 0x10:{
            s2 = "a6";
            s2_len = 2;
            break;
          }
          case 0x1B:{
            s2 = "s11";
            s2_len = 3;
            break;
          }
          case 0x1C:{
            s2 = "t3";
            s2_len = 2;
            break;
          }
          case 0x16:{
            s2 = "s6";
            s2_len = 2;
            break;
          }
          case 0x00:{
            s2 = "zero";
            s2_len = 4;
            break;
          }
          case 0x0A:{
            s2 = "a0";
            s2_len = 2;
            break;
          }
          case 0x1A:{
            s2 = "s10";
            s2_len = 3;
            break;
          }
          case 0x17:{
            s2 = "s7";
            s2_len = 2;
            break;
          }
          case 0x0C:{
            s2 = "a2";
            s2_len = 2;
            break;
          }
          case 0x18:{
            s2 = "s8";
            s2_len = 2;
            break;
          }
          case 0x02:{
            s2 = "sp";
            s2_len = 2;
            break;
          }
          case 0x1F:{
            s2 = "t6";
            s2_len = 2;
            break;
          }
          case 0x0B:{
            s2 = "a1";
            s2_len = 2;
            break;
          }
          case 0x07:{
            s2 = "t2";
            s2_len = 2;
            break;
          }
          case 0x13:{
            s2 = "s3";
            s2_len = 2;
            break;
          }
          case 0x04:{
            s2 = "tp";
            s2_len = 2;
            break;
          }
          case 0x19:{
            s2 = "s9";
            s2_len = 2;
            break;
          }
          case 0x12:{
            s2 = "s2";
            s2_len = 2;
            break;
          }
          case 0x14:{
            s2 = "s4";
            s2_len = 2;
            break;
          }
          case 0x0E:{
            s2 = "a4";
            s2_len = 2;
            break;
          }
          case 0x1E:{
            s2 = "t5";
            s2_len = 2;
            break;
          }
          case 0x11:{
            s2 = "a7";
            s2_len = 2;
            break;
          }
          case 0x03:{
            s2 = "gp";
            s2_len = 2;
            break;
          }
          case 0x05:{
            s2 = "t0";
            s2_len = 2;
            break;
          }
          case 0x1D:{
            s2 = "t4";
            s2_len = 2;
            break;
          }
          case 0x0D:{
            s2 = "a3";
            s2_len = 2;
            break;
          }
          case 0x0F:{
            s2 = "a5";
            s2_len = 2;
            break;
          }
        }
        sep( &s3, &s3_len);
        freg_or_reg_name(tree->ast_node.f_un_type_s.rs1, &s4, &s4_len);
        memcpy(buff , s0, s0_len);
        memcpy(buff  + s0_len, s1, s1_len);
        memcpy(buff  + s0_len + s1_len, s2, s2_len);
        memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      }
    }
    break;
    case RISCV_C_FLWSP: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      s0 = "c.flwsp";
      s0_len = 7;
      spc( &s1, &s1_len);
      switch (tree->ast_node.c_flwsp.rd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      hex_bits_6(tree->ast_node.c_flwsp.imm, &s4, &s4_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      }
    }
    break;
    case RISCV_C_FSWSP: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      s0 = "c.fswsp";
      s0_len = 7;
      spc( &s1, &s1_len);
      switch (tree->ast_node.c_fswsp.rs2) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      hex_bits_6(tree->ast_node.c_fswsp.uimm, &s4, &s4_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      }
    }
    break;
    case RISCV_C_FLW: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      s0 = "c.flw";
      s0_len = 5;
      spc( &s1, &s1_len);
      switch (tree->ast_node.c_flw.rdc) { 
        case 0x7:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
        case 0x5:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x1:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x3:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x2:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x4:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x6:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x0:{
          s2 = "s0";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.c_flw.rsc) { 
        case 0x7:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
        case 0x5:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x1:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x3:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x2:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x4:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x6:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x0:{
          s4 = "s0";
          s4_len = 2;
          break;
        }
      }
      sep( &s5, &s5_len);
      hex_bits_7(tree->ast_node.c_flw.uimm << 2 | 0x0 << 0, &s6, &s6_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
    }
    break;
    case RISCV_C_FSW: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      s0 = "c.fsw";
      s0_len = 5;
      spc( &s1, &s1_len);
      switch (tree->ast_node.c_fsw.rsc1) { 
        case 0x7:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
        case 0x5:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x1:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x3:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x2:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x4:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x6:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x0:{
          s2 = "s0";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.c_fsw.rsc2) { 
        case 0x7:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
        case 0x5:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x1:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x3:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x2:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x4:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x6:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x0:{
          s4 = "s0";
          s4_len = 2;
          break;
        }
      }
      sep( &s5, &s5_len);
      hex_bits_7(tree->ast_node.c_fsw.uimm << 2 | 0x0 << 0, &s6, &s6_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
    }
    break;
    case RISCV_F_MADD_TYPE_D: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      char *s8; size_t s8_len;
      char *s9; size_t s9_len;
      char *s10; size_t s10_len;
      switch (tree->ast_node.f_madd_type_d.op) { 
        case RISCV_FMSUB_D:{
          s0 = "fmsub.d";
          s0_len = 7;
          break;
        }
        case RISCV_FNMSUB_D:{
          s0 = "fnmsub.d";
          s0_len = 8;
          break;
        }
        case RISCV_FNMADD_D:{
          s0 = "fnmadd.d";
          s0_len = 8;
          break;
        }
        case RISCV_FMADD_D:{
          s0 = "fmadd.d";
          s0_len = 7;
          break;
        }
      }
      spc( &s1, &s1_len);
      freg_or_reg_name(tree->ast_node.f_madd_type_d.rd, &s2, &s2_len);
      sep( &s3, &s3_len);
      freg_or_reg_name(tree->ast_node.f_madd_type_d.rs1, &s4, &s4_len);
      sep( &s5, &s5_len);
      freg_or_reg_name(tree->ast_node.f_madd_type_d.rs2, &s6, &s6_len);
      sep( &s7, &s7_len);
      freg_or_reg_name(tree->ast_node.f_madd_type_d.rs3, &s8, &s8_len);
      sep( &s9, &s9_len);
      switch (tree->ast_node.f_madd_type_d.rm) { 
        case RISCV_RM_RNE:{
          s10 = "rne";
          s10_len = 3;
          break;
        }
        case RISCV_RM_RTZ:{
          s10 = "rtz";
          s10_len = 3;
          break;
        }
        case RISCV_RM_RDN:{
          s10 = "rdn";
          s10_len = 3;
          break;
        }
        case RISCV_RM_RMM:{
          s10 = "rmm";
          s10_len = 3;
          break;
        }
        case RISCV_RM_RUP:{
          s10 = "rup";
          s10_len = 3;
          break;
        }
        case RISCV_RM_DYN:{
          s10 = "dyn";
          s10_len = 3;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len, s8, s8_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len + s8_len, s9, s9_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len + s8_len + s9_len, s10, s10_len);
      }
    }
    break;
    case RISCV_F_BIN_RM_TYPE_D: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      char *s8; size_t s8_len;
      switch (tree->ast_node.f_bin_rm_type_d.op) { 
        case RISCV_FMUL_D:{
          s0 = "fmul.d";
          s0_len = 6;
          break;
        }
        case RISCV_FADD_D:{
          s0 = "fadd.d";
          s0_len = 6;
          break;
        }
        case RISCV_FSUB_D:{
          s0 = "fsub.d";
          s0_len = 6;
          break;
        }
        case RISCV_FDIV_D:{
          s0 = "fdiv.d";
          s0_len = 6;
          break;
        }
      }
      spc( &s1, &s1_len);
      freg_or_reg_name(tree->ast_node.f_bin_rm_type_d.rd, &s2, &s2_len);
      sep( &s3, &s3_len);
      freg_or_reg_name(tree->ast_node.f_bin_rm_type_d.rs1, &s4, &s4_len);
      sep( &s5, &s5_len);
      freg_or_reg_name(tree->ast_node.f_bin_rm_type_d.rs2, &s6, &s6_len);
      sep( &s7, &s7_len);
      switch (tree->ast_node.f_bin_rm_type_d.rm) { 
        case RISCV_RM_RNE:{
          s8 = "rne";
          s8_len = 3;
          break;
        }
        case RISCV_RM_RTZ:{
          s8 = "rtz";
          s8_len = 3;
          break;
        }
        case RISCV_RM_RDN:{
          s8 = "rdn";
          s8_len = 3;
          break;
        }
        case RISCV_RM_RMM:{
          s8 = "rmm";
          s8_len = 3;
          break;
        }
        case RISCV_RM_RUP:{
          s8 = "rup";
          s8_len = 3;
          break;
        }
        case RISCV_RM_DYN:{
          s8 = "dyn";
          s8_len = 3;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len, s8, s8_len);
      }
    }
    break;
    case RISCV_F_UN_RM_TYPE_D: {

      if (tree->ast_node.f_un_rm_type_d.fcvt_d_lu == RISCV_FSQRT_D) { 
        char *s0; size_t s0_len;
        char *s1; size_t s1_len;
        char *s2; size_t s2_len;
        char *s3; size_t s3_len;
        char *s4; size_t s4_len;
        char *s5; size_t s5_len;
        char *s6; size_t s6_len;
        s0 = "fsqrt.d";
        s0_len = 7;
        spc( &s1, &s1_len);
        freg_or_reg_name(tree->ast_node.f_un_rm_type_d.rd, &s2, &s2_len);
        sep( &s3, &s3_len);
        freg_or_reg_name(tree->ast_node.f_un_rm_type_d.rs1, &s4, &s4_len);
        sep( &s5, &s5_len);
        switch (tree->ast_node.f_un_rm_type_d.rm) { 
          case RISCV_RM_RNE:{
            s6 = "rne";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RTZ:{
            s6 = "rtz";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RDN:{
            s6 = "rdn";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RMM:{
            s6 = "rmm";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RUP:{
            s6 = "rup";
            s6_len = 3;
            break;
          }
          case RISCV_RM_DYN:{
            s6 = "dyn";
            s6_len = 3;
            break;
          }
        }
        memcpy(buff , s0, s0_len);
        memcpy(buff  + s0_len, s1, s1_len);
        memcpy(buff  + s0_len + s1_len, s2, s2_len);
        memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
      if (tree->ast_node.f_un_rm_type_d.fcvt_d_lu == RISCV_FCVT_W_D) { 
        char *s0; size_t s0_len;
        char *s1; size_t s1_len;
        char *s2; size_t s2_len;
        char *s3; size_t s3_len;
        char *s4; size_t s4_len;
        char *s5; size_t s5_len;
        char *s6; size_t s6_len;
        s0 = "fcvt.w.d";
        s0_len = 8;
        spc( &s1, &s1_len);
        switch (tree->ast_node.f_un_rm_type_d.rd) { 
          case 0x08:{
            s2 = "fp";
            s2_len = 2;
            break;
          }
          case 0x15:{
            s2 = "s5";
            s2_len = 2;
            break;
          }
          case 0x01:{
            s2 = "ra";
            s2_len = 2;
            break;
          }
          case 0x06:{
            s2 = "t1";
            s2_len = 2;
            break;
          }
          case 0x09:{
            s2 = "s1";
            s2_len = 2;
            break;
          }
          case 0x10:{
            s2 = "a6";
            s2_len = 2;
            break;
          }
          case 0x1B:{
            s2 = "s11";
            s2_len = 3;
            break;
          }
          case 0x1C:{
            s2 = "t3";
            s2_len = 2;
            break;
          }
          case 0x16:{
            s2 = "s6";
            s2_len = 2;
            break;
          }
          case 0x00:{
            s2 = "zero";
            s2_len = 4;
            break;
          }
          case 0x0A:{
            s2 = "a0";
            s2_len = 2;
            break;
          }
          case 0x1A:{
            s2 = "s10";
            s2_len = 3;
            break;
          }
          case 0x17:{
            s2 = "s7";
            s2_len = 2;
            break;
          }
          case 0x0C:{
            s2 = "a2";
            s2_len = 2;
            break;
          }
          case 0x18:{
            s2 = "s8";
            s2_len = 2;
            break;
          }
          case 0x02:{
            s2 = "sp";
            s2_len = 2;
            break;
          }
          case 0x1F:{
            s2 = "t6";
            s2_len = 2;
            break;
          }
          case 0x0B:{
            s2 = "a1";
            s2_len = 2;
            break;
          }
          case 0x07:{
            s2 = "t2";
            s2_len = 2;
            break;
          }
          case 0x13:{
            s2 = "s3";
            s2_len = 2;
            break;
          }
          case 0x04:{
            s2 = "tp";
            s2_len = 2;
            break;
          }
          case 0x19:{
            s2 = "s9";
            s2_len = 2;
            break;
          }
          case 0x12:{
            s2 = "s2";
            s2_len = 2;
            break;
          }
          case 0x14:{
            s2 = "s4";
            s2_len = 2;
            break;
          }
          case 0x0E:{
            s2 = "a4";
            s2_len = 2;
            break;
          }
          case 0x1E:{
            s2 = "t5";
            s2_len = 2;
            break;
          }
          case 0x11:{
            s2 = "a7";
            s2_len = 2;
            break;
          }
          case 0x03:{
            s2 = "gp";
            s2_len = 2;
            break;
          }
          case 0x05:{
            s2 = "t0";
            s2_len = 2;
            break;
          }
          case 0x1D:{
            s2 = "t4";
            s2_len = 2;
            break;
          }
          case 0x0D:{
            s2 = "a3";
            s2_len = 2;
            break;
          }
          case 0x0F:{
            s2 = "a5";
            s2_len = 2;
            break;
          }
        }
        sep( &s3, &s3_len);
        freg_or_reg_name(tree->ast_node.f_un_rm_type_d.rs1, &s4, &s4_len);
        sep( &s5, &s5_len);
        switch (tree->ast_node.f_un_rm_type_d.rm) { 
          case RISCV_RM_RNE:{
            s6 = "rne";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RTZ:{
            s6 = "rtz";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RDN:{
            s6 = "rdn";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RMM:{
            s6 = "rmm";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RUP:{
            s6 = "rup";
            s6_len = 3;
            break;
          }
          case RISCV_RM_DYN:{
            s6 = "dyn";
            s6_len = 3;
            break;
          }
        }
        memcpy(buff , s0, s0_len);
        memcpy(buff  + s0_len, s1, s1_len);
        memcpy(buff  + s0_len + s1_len, s2, s2_len);
        memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
      if (tree->ast_node.f_un_rm_type_d.fcvt_d_lu == RISCV_FCVT_WU_D) { 
        char *s0; size_t s0_len;
        char *s1; size_t s1_len;
        char *s2; size_t s2_len;
        char *s3; size_t s3_len;
        char *s4; size_t s4_len;
        char *s5; size_t s5_len;
        char *s6; size_t s6_len;
        s0 = "fcvt.wu.d";
        s0_len = 9;
        spc( &s1, &s1_len);
        switch (tree->ast_node.f_un_rm_type_d.rd) { 
          case 0x08:{
            s2 = "fp";
            s2_len = 2;
            break;
          }
          case 0x15:{
            s2 = "s5";
            s2_len = 2;
            break;
          }
          case 0x01:{
            s2 = "ra";
            s2_len = 2;
            break;
          }
          case 0x06:{
            s2 = "t1";
            s2_len = 2;
            break;
          }
          case 0x09:{
            s2 = "s1";
            s2_len = 2;
            break;
          }
          case 0x10:{
            s2 = "a6";
            s2_len = 2;
            break;
          }
          case 0x1B:{
            s2 = "s11";
            s2_len = 3;
            break;
          }
          case 0x1C:{
            s2 = "t3";
            s2_len = 2;
            break;
          }
          case 0x16:{
            s2 = "s6";
            s2_len = 2;
            break;
          }
          case 0x00:{
            s2 = "zero";
            s2_len = 4;
            break;
          }
          case 0x0A:{
            s2 = "a0";
            s2_len = 2;
            break;
          }
          case 0x1A:{
            s2 = "s10";
            s2_len = 3;
            break;
          }
          case 0x17:{
            s2 = "s7";
            s2_len = 2;
            break;
          }
          case 0x0C:{
            s2 = "a2";
            s2_len = 2;
            break;
          }
          case 0x18:{
            s2 = "s8";
            s2_len = 2;
            break;
          }
          case 0x02:{
            s2 = "sp";
            s2_len = 2;
            break;
          }
          case 0x1F:{
            s2 = "t6";
            s2_len = 2;
            break;
          }
          case 0x0B:{
            s2 = "a1";
            s2_len = 2;
            break;
          }
          case 0x07:{
            s2 = "t2";
            s2_len = 2;
            break;
          }
          case 0x13:{
            s2 = "s3";
            s2_len = 2;
            break;
          }
          case 0x04:{
            s2 = "tp";
            s2_len = 2;
            break;
          }
          case 0x19:{
            s2 = "s9";
            s2_len = 2;
            break;
          }
          case 0x12:{
            s2 = "s2";
            s2_len = 2;
            break;
          }
          case 0x14:{
            s2 = "s4";
            s2_len = 2;
            break;
          }
          case 0x0E:{
            s2 = "a4";
            s2_len = 2;
            break;
          }
          case 0x1E:{
            s2 = "t5";
            s2_len = 2;
            break;
          }
          case 0x11:{
            s2 = "a7";
            s2_len = 2;
            break;
          }
          case 0x03:{
            s2 = "gp";
            s2_len = 2;
            break;
          }
          case 0x05:{
            s2 = "t0";
            s2_len = 2;
            break;
          }
          case 0x1D:{
            s2 = "t4";
            s2_len = 2;
            break;
          }
          case 0x0D:{
            s2 = "a3";
            s2_len = 2;
            break;
          }
          case 0x0F:{
            s2 = "a5";
            s2_len = 2;
            break;
          }
        }
        sep( &s3, &s3_len);
        freg_or_reg_name(tree->ast_node.f_un_rm_type_d.rs1, &s4, &s4_len);
        sep( &s5, &s5_len);
        switch (tree->ast_node.f_un_rm_type_d.rm) { 
          case RISCV_RM_RNE:{
            s6 = "rne";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RTZ:{
            s6 = "rtz";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RDN:{
            s6 = "rdn";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RMM:{
            s6 = "rmm";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RUP:{
            s6 = "rup";
            s6_len = 3;
            break;
          }
          case RISCV_RM_DYN:{
            s6 = "dyn";
            s6_len = 3;
            break;
          }
        }
        memcpy(buff , s0, s0_len);
        memcpy(buff  + s0_len, s1, s1_len);
        memcpy(buff  + s0_len + s1_len, s2, s2_len);
        memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
      if (tree->ast_node.f_un_rm_type_d.fcvt_d_lu == RISCV_FCVT_D_W) { 
        char *s0; size_t s0_len;
        char *s1; size_t s1_len;
        char *s2; size_t s2_len;
        char *s3; size_t s3_len;
        char *s4; size_t s4_len;
        char *s5; size_t s5_len;
        char *s6; size_t s6_len;
        s0 = "fcvt.d.w";
        s0_len = 8;
        spc( &s1, &s1_len);
        freg_or_reg_name(tree->ast_node.f_un_rm_type_d.rd, &s2, &s2_len);
        sep( &s3, &s3_len);
        switch (tree->ast_node.f_un_rm_type_d.rs1) { 
          case 0x08:{
            s4 = "fp";
            s4_len = 2;
            break;
          }
          case 0x15:{
            s4 = "s5";
            s4_len = 2;
            break;
          }
          case 0x01:{
            s4 = "ra";
            s4_len = 2;
            break;
          }
          case 0x06:{
            s4 = "t1";
            s4_len = 2;
            break;
          }
          case 0x09:{
            s4 = "s1";
            s4_len = 2;
            break;
          }
          case 0x10:{
            s4 = "a6";
            s4_len = 2;
            break;
          }
          case 0x1B:{
            s4 = "s11";
            s4_len = 3;
            break;
          }
          case 0x1C:{
            s4 = "t3";
            s4_len = 2;
            break;
          }
          case 0x16:{
            s4 = "s6";
            s4_len = 2;
            break;
          }
          case 0x00:{
            s4 = "zero";
            s4_len = 4;
            break;
          }
          case 0x0A:{
            s4 = "a0";
            s4_len = 2;
            break;
          }
          case 0x1A:{
            s4 = "s10";
            s4_len = 3;
            break;
          }
          case 0x17:{
            s4 = "s7";
            s4_len = 2;
            break;
          }
          case 0x0C:{
            s4 = "a2";
            s4_len = 2;
            break;
          }
          case 0x18:{
            s4 = "s8";
            s4_len = 2;
            break;
          }
          case 0x02:{
            s4 = "sp";
            s4_len = 2;
            break;
          }
          case 0x1F:{
            s4 = "t6";
            s4_len = 2;
            break;
          }
          case 0x0B:{
            s4 = "a1";
            s4_len = 2;
            break;
          }
          case 0x07:{
            s4 = "t2";
            s4_len = 2;
            break;
          }
          case 0x13:{
            s4 = "s3";
            s4_len = 2;
            break;
          }
          case 0x04:{
            s4 = "tp";
            s4_len = 2;
            break;
          }
          case 0x19:{
            s4 = "s9";
            s4_len = 2;
            break;
          }
          case 0x12:{
            s4 = "s2";
            s4_len = 2;
            break;
          }
          case 0x14:{
            s4 = "s4";
            s4_len = 2;
            break;
          }
          case 0x0E:{
            s4 = "a4";
            s4_len = 2;
            break;
          }
          case 0x1E:{
            s4 = "t5";
            s4_len = 2;
            break;
          }
          case 0x11:{
            s4 = "a7";
            s4_len = 2;
            break;
          }
          case 0x03:{
            s4 = "gp";
            s4_len = 2;
            break;
          }
          case 0x05:{
            s4 = "t0";
            s4_len = 2;
            break;
          }
          case 0x1D:{
            s4 = "t4";
            s4_len = 2;
            break;
          }
          case 0x0D:{
            s4 = "a3";
            s4_len = 2;
            break;
          }
          case 0x0F:{
            s4 = "a5";
            s4_len = 2;
            break;
          }
        }
        sep( &s5, &s5_len);
        switch (tree->ast_node.f_un_rm_type_d.rm) { 
          case RISCV_RM_RNE:{
            s6 = "rne";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RTZ:{
            s6 = "rtz";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RDN:{
            s6 = "rdn";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RMM:{
            s6 = "rmm";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RUP:{
            s6 = "rup";
            s6_len = 3;
            break;
          }
          case RISCV_RM_DYN:{
            s6 = "dyn";
            s6_len = 3;
            break;
          }
        }
        memcpy(buff , s0, s0_len);
        memcpy(buff  + s0_len, s1, s1_len);
        memcpy(buff  + s0_len + s1_len, s2, s2_len);
        memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
      if (tree->ast_node.f_un_rm_type_d.fcvt_d_lu == RISCV_FCVT_D_WU) { 
        char *s0; size_t s0_len;
        char *s1; size_t s1_len;
        char *s2; size_t s2_len;
        char *s3; size_t s3_len;
        char *s4; size_t s4_len;
        char *s5; size_t s5_len;
        char *s6; size_t s6_len;
        s0 = "fcvt.d.wu";
        s0_len = 9;
        spc( &s1, &s1_len);
        freg_or_reg_name(tree->ast_node.f_un_rm_type_d.rd, &s2, &s2_len);
        sep( &s3, &s3_len);
        switch (tree->ast_node.f_un_rm_type_d.rs1) { 
          case 0x08:{
            s4 = "fp";
            s4_len = 2;
            break;
          }
          case 0x15:{
            s4 = "s5";
            s4_len = 2;
            break;
          }
          case 0x01:{
            s4 = "ra";
            s4_len = 2;
            break;
          }
          case 0x06:{
            s4 = "t1";
            s4_len = 2;
            break;
          }
          case 0x09:{
            s4 = "s1";
            s4_len = 2;
            break;
          }
          case 0x10:{
            s4 = "a6";
            s4_len = 2;
            break;
          }
          case 0x1B:{
            s4 = "s11";
            s4_len = 3;
            break;
          }
          case 0x1C:{
            s4 = "t3";
            s4_len = 2;
            break;
          }
          case 0x16:{
            s4 = "s6";
            s4_len = 2;
            break;
          }
          case 0x00:{
            s4 = "zero";
            s4_len = 4;
            break;
          }
          case 0x0A:{
            s4 = "a0";
            s4_len = 2;
            break;
          }
          case 0x1A:{
            s4 = "s10";
            s4_len = 3;
            break;
          }
          case 0x17:{
            s4 = "s7";
            s4_len = 2;
            break;
          }
          case 0x0C:{
            s4 = "a2";
            s4_len = 2;
            break;
          }
          case 0x18:{
            s4 = "s8";
            s4_len = 2;
            break;
          }
          case 0x02:{
            s4 = "sp";
            s4_len = 2;
            break;
          }
          case 0x1F:{
            s4 = "t6";
            s4_len = 2;
            break;
          }
          case 0x0B:{
            s4 = "a1";
            s4_len = 2;
            break;
          }
          case 0x07:{
            s4 = "t2";
            s4_len = 2;
            break;
          }
          case 0x13:{
            s4 = "s3";
            s4_len = 2;
            break;
          }
          case 0x04:{
            s4 = "tp";
            s4_len = 2;
            break;
          }
          case 0x19:{
            s4 = "s9";
            s4_len = 2;
            break;
          }
          case 0x12:{
            s4 = "s2";
            s4_len = 2;
            break;
          }
          case 0x14:{
            s4 = "s4";
            s4_len = 2;
            break;
          }
          case 0x0E:{
            s4 = "a4";
            s4_len = 2;
            break;
          }
          case 0x1E:{
            s4 = "t5";
            s4_len = 2;
            break;
          }
          case 0x11:{
            s4 = "a7";
            s4_len = 2;
            break;
          }
          case 0x03:{
            s4 = "gp";
            s4_len = 2;
            break;
          }
          case 0x05:{
            s4 = "t0";
            s4_len = 2;
            break;
          }
          case 0x1D:{
            s4 = "t4";
            s4_len = 2;
            break;
          }
          case 0x0D:{
            s4 = "a3";
            s4_len = 2;
            break;
          }
          case 0x0F:{
            s4 = "a5";
            s4_len = 2;
            break;
          }
        }
        sep( &s5, &s5_len);
        switch (tree->ast_node.f_un_rm_type_d.rm) { 
          case RISCV_RM_RNE:{
            s6 = "rne";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RTZ:{
            s6 = "rtz";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RDN:{
            s6 = "rdn";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RMM:{
            s6 = "rmm";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RUP:{
            s6 = "rup";
            s6_len = 3;
            break;
          }
          case RISCV_RM_DYN:{
            s6 = "dyn";
            s6_len = 3;
            break;
          }
        }
        memcpy(buff , s0, s0_len);
        memcpy(buff  + s0_len, s1, s1_len);
        memcpy(buff  + s0_len + s1_len, s2, s2_len);
        memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
      if (tree->ast_node.f_un_rm_type_d.fcvt_d_lu == RISCV_FCVT_L_D) { 
        char *s0; size_t s0_len;
        char *s1; size_t s1_len;
        char *s2; size_t s2_len;
        char *s3; size_t s3_len;
        char *s4; size_t s4_len;
        char *s5; size_t s5_len;
        char *s6; size_t s6_len;
        s0 = "fcvt.l.d";
        s0_len = 8;
        spc( &s1, &s1_len);
        switch (tree->ast_node.f_un_rm_type_d.rd) { 
          case 0x08:{
            s2 = "fp";
            s2_len = 2;
            break;
          }
          case 0x15:{
            s2 = "s5";
            s2_len = 2;
            break;
          }
          case 0x01:{
            s2 = "ra";
            s2_len = 2;
            break;
          }
          case 0x06:{
            s2 = "t1";
            s2_len = 2;
            break;
          }
          case 0x09:{
            s2 = "s1";
            s2_len = 2;
            break;
          }
          case 0x10:{
            s2 = "a6";
            s2_len = 2;
            break;
          }
          case 0x1B:{
            s2 = "s11";
            s2_len = 3;
            break;
          }
          case 0x1C:{
            s2 = "t3";
            s2_len = 2;
            break;
          }
          case 0x16:{
            s2 = "s6";
            s2_len = 2;
            break;
          }
          case 0x00:{
            s2 = "zero";
            s2_len = 4;
            break;
          }
          case 0x0A:{
            s2 = "a0";
            s2_len = 2;
            break;
          }
          case 0x1A:{
            s2 = "s10";
            s2_len = 3;
            break;
          }
          case 0x17:{
            s2 = "s7";
            s2_len = 2;
            break;
          }
          case 0x0C:{
            s2 = "a2";
            s2_len = 2;
            break;
          }
          case 0x18:{
            s2 = "s8";
            s2_len = 2;
            break;
          }
          case 0x02:{
            s2 = "sp";
            s2_len = 2;
            break;
          }
          case 0x1F:{
            s2 = "t6";
            s2_len = 2;
            break;
          }
          case 0x0B:{
            s2 = "a1";
            s2_len = 2;
            break;
          }
          case 0x07:{
            s2 = "t2";
            s2_len = 2;
            break;
          }
          case 0x13:{
            s2 = "s3";
            s2_len = 2;
            break;
          }
          case 0x04:{
            s2 = "tp";
            s2_len = 2;
            break;
          }
          case 0x19:{
            s2 = "s9";
            s2_len = 2;
            break;
          }
          case 0x12:{
            s2 = "s2";
            s2_len = 2;
            break;
          }
          case 0x14:{
            s2 = "s4";
            s2_len = 2;
            break;
          }
          case 0x0E:{
            s2 = "a4";
            s2_len = 2;
            break;
          }
          case 0x1E:{
            s2 = "t5";
            s2_len = 2;
            break;
          }
          case 0x11:{
            s2 = "a7";
            s2_len = 2;
            break;
          }
          case 0x03:{
            s2 = "gp";
            s2_len = 2;
            break;
          }
          case 0x05:{
            s2 = "t0";
            s2_len = 2;
            break;
          }
          case 0x1D:{
            s2 = "t4";
            s2_len = 2;
            break;
          }
          case 0x0D:{
            s2 = "a3";
            s2_len = 2;
            break;
          }
          case 0x0F:{
            s2 = "a5";
            s2_len = 2;
            break;
          }
        }
        sep( &s3, &s3_len);
        freg_or_reg_name(tree->ast_node.f_un_rm_type_d.rs1, &s4, &s4_len);
        sep( &s5, &s5_len);
        switch (tree->ast_node.f_un_rm_type_d.rm) { 
          case RISCV_RM_RNE:{
            s6 = "rne";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RTZ:{
            s6 = "rtz";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RDN:{
            s6 = "rdn";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RMM:{
            s6 = "rmm";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RUP:{
            s6 = "rup";
            s6_len = 3;
            break;
          }
          case RISCV_RM_DYN:{
            s6 = "dyn";
            s6_len = 3;
            break;
          }
        }
        memcpy(buff , s0, s0_len);
        memcpy(buff  + s0_len, s1, s1_len);
        memcpy(buff  + s0_len + s1_len, s2, s2_len);
        memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
      if (tree->ast_node.f_un_rm_type_d.fcvt_d_lu == RISCV_FCVT_LU_D) { 
        char *s0; size_t s0_len;
        char *s1; size_t s1_len;
        char *s2; size_t s2_len;
        char *s3; size_t s3_len;
        char *s4; size_t s4_len;
        char *s5; size_t s5_len;
        char *s6; size_t s6_len;
        s0 = "fcvt.lu.d";
        s0_len = 9;
        spc( &s1, &s1_len);
        switch (tree->ast_node.f_un_rm_type_d.rd) { 
          case 0x08:{
            s2 = "fp";
            s2_len = 2;
            break;
          }
          case 0x15:{
            s2 = "s5";
            s2_len = 2;
            break;
          }
          case 0x01:{
            s2 = "ra";
            s2_len = 2;
            break;
          }
          case 0x06:{
            s2 = "t1";
            s2_len = 2;
            break;
          }
          case 0x09:{
            s2 = "s1";
            s2_len = 2;
            break;
          }
          case 0x10:{
            s2 = "a6";
            s2_len = 2;
            break;
          }
          case 0x1B:{
            s2 = "s11";
            s2_len = 3;
            break;
          }
          case 0x1C:{
            s2 = "t3";
            s2_len = 2;
            break;
          }
          case 0x16:{
            s2 = "s6";
            s2_len = 2;
            break;
          }
          case 0x00:{
            s2 = "zero";
            s2_len = 4;
            break;
          }
          case 0x0A:{
            s2 = "a0";
            s2_len = 2;
            break;
          }
          case 0x1A:{
            s2 = "s10";
            s2_len = 3;
            break;
          }
          case 0x17:{
            s2 = "s7";
            s2_len = 2;
            break;
          }
          case 0x0C:{
            s2 = "a2";
            s2_len = 2;
            break;
          }
          case 0x18:{
            s2 = "s8";
            s2_len = 2;
            break;
          }
          case 0x02:{
            s2 = "sp";
            s2_len = 2;
            break;
          }
          case 0x1F:{
            s2 = "t6";
            s2_len = 2;
            break;
          }
          case 0x0B:{
            s2 = "a1";
            s2_len = 2;
            break;
          }
          case 0x07:{
            s2 = "t2";
            s2_len = 2;
            break;
          }
          case 0x13:{
            s2 = "s3";
            s2_len = 2;
            break;
          }
          case 0x04:{
            s2 = "tp";
            s2_len = 2;
            break;
          }
          case 0x19:{
            s2 = "s9";
            s2_len = 2;
            break;
          }
          case 0x12:{
            s2 = "s2";
            s2_len = 2;
            break;
          }
          case 0x14:{
            s2 = "s4";
            s2_len = 2;
            break;
          }
          case 0x0E:{
            s2 = "a4";
            s2_len = 2;
            break;
          }
          case 0x1E:{
            s2 = "t5";
            s2_len = 2;
            break;
          }
          case 0x11:{
            s2 = "a7";
            s2_len = 2;
            break;
          }
          case 0x03:{
            s2 = "gp";
            s2_len = 2;
            break;
          }
          case 0x05:{
            s2 = "t0";
            s2_len = 2;
            break;
          }
          case 0x1D:{
            s2 = "t4";
            s2_len = 2;
            break;
          }
          case 0x0D:{
            s2 = "a3";
            s2_len = 2;
            break;
          }
          case 0x0F:{
            s2 = "a5";
            s2_len = 2;
            break;
          }
        }
        sep( &s3, &s3_len);
        freg_or_reg_name(tree->ast_node.f_un_rm_type_d.rs1, &s4, &s4_len);
        sep( &s5, &s5_len);
        switch (tree->ast_node.f_un_rm_type_d.rm) { 
          case RISCV_RM_RNE:{
            s6 = "rne";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RTZ:{
            s6 = "rtz";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RDN:{
            s6 = "rdn";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RMM:{
            s6 = "rmm";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RUP:{
            s6 = "rup";
            s6_len = 3;
            break;
          }
          case RISCV_RM_DYN:{
            s6 = "dyn";
            s6_len = 3;
            break;
          }
        }
        memcpy(buff , s0, s0_len);
        memcpy(buff  + s0_len, s1, s1_len);
        memcpy(buff  + s0_len + s1_len, s2, s2_len);
        memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
      if (tree->ast_node.f_un_rm_type_d.fcvt_d_lu == RISCV_FCVT_D_L) { 
        char *s0; size_t s0_len;
        char *s1; size_t s1_len;
        char *s2; size_t s2_len;
        char *s3; size_t s3_len;
        char *s4; size_t s4_len;
        char *s5; size_t s5_len;
        char *s6; size_t s6_len;
        s0 = "fcvt.d.l";
        s0_len = 8;
        spc( &s1, &s1_len);
        freg_or_reg_name(tree->ast_node.f_un_rm_type_d.rd, &s2, &s2_len);
        sep( &s3, &s3_len);
        switch (tree->ast_node.f_un_rm_type_d.rs1) { 
          case 0x08:{
            s4 = "fp";
            s4_len = 2;
            break;
          }
          case 0x15:{
            s4 = "s5";
            s4_len = 2;
            break;
          }
          case 0x01:{
            s4 = "ra";
            s4_len = 2;
            break;
          }
          case 0x06:{
            s4 = "t1";
            s4_len = 2;
            break;
          }
          case 0x09:{
            s4 = "s1";
            s4_len = 2;
            break;
          }
          case 0x10:{
            s4 = "a6";
            s4_len = 2;
            break;
          }
          case 0x1B:{
            s4 = "s11";
            s4_len = 3;
            break;
          }
          case 0x1C:{
            s4 = "t3";
            s4_len = 2;
            break;
          }
          case 0x16:{
            s4 = "s6";
            s4_len = 2;
            break;
          }
          case 0x00:{
            s4 = "zero";
            s4_len = 4;
            break;
          }
          case 0x0A:{
            s4 = "a0";
            s4_len = 2;
            break;
          }
          case 0x1A:{
            s4 = "s10";
            s4_len = 3;
            break;
          }
          case 0x17:{
            s4 = "s7";
            s4_len = 2;
            break;
          }
          case 0x0C:{
            s4 = "a2";
            s4_len = 2;
            break;
          }
          case 0x18:{
            s4 = "s8";
            s4_len = 2;
            break;
          }
          case 0x02:{
            s4 = "sp";
            s4_len = 2;
            break;
          }
          case 0x1F:{
            s4 = "t6";
            s4_len = 2;
            break;
          }
          case 0x0B:{
            s4 = "a1";
            s4_len = 2;
            break;
          }
          case 0x07:{
            s4 = "t2";
            s4_len = 2;
            break;
          }
          case 0x13:{
            s4 = "s3";
            s4_len = 2;
            break;
          }
          case 0x04:{
            s4 = "tp";
            s4_len = 2;
            break;
          }
          case 0x19:{
            s4 = "s9";
            s4_len = 2;
            break;
          }
          case 0x12:{
            s4 = "s2";
            s4_len = 2;
            break;
          }
          case 0x14:{
            s4 = "s4";
            s4_len = 2;
            break;
          }
          case 0x0E:{
            s4 = "a4";
            s4_len = 2;
            break;
          }
          case 0x1E:{
            s4 = "t5";
            s4_len = 2;
            break;
          }
          case 0x11:{
            s4 = "a7";
            s4_len = 2;
            break;
          }
          case 0x03:{
            s4 = "gp";
            s4_len = 2;
            break;
          }
          case 0x05:{
            s4 = "t0";
            s4_len = 2;
            break;
          }
          case 0x1D:{
            s4 = "t4";
            s4_len = 2;
            break;
          }
          case 0x0D:{
            s4 = "a3";
            s4_len = 2;
            break;
          }
          case 0x0F:{
            s4 = "a5";
            s4_len = 2;
            break;
          }
        }
        sep( &s5, &s5_len);
        switch (tree->ast_node.f_un_rm_type_d.rm) { 
          case RISCV_RM_RNE:{
            s6 = "rne";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RTZ:{
            s6 = "rtz";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RDN:{
            s6 = "rdn";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RMM:{
            s6 = "rmm";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RUP:{
            s6 = "rup";
            s6_len = 3;
            break;
          }
          case RISCV_RM_DYN:{
            s6 = "dyn";
            s6_len = 3;
            break;
          }
        }
        memcpy(buff , s0, s0_len);
        memcpy(buff  + s0_len, s1, s1_len);
        memcpy(buff  + s0_len + s1_len, s2, s2_len);
        memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
      if (tree->ast_node.f_un_rm_type_d.fcvt_d_lu == RISCV_FCVT_D_LU) { 
        char *s0; size_t s0_len;
        char *s1; size_t s1_len;
        char *s2; size_t s2_len;
        char *s3; size_t s3_len;
        char *s4; size_t s4_len;
        char *s5; size_t s5_len;
        char *s6; size_t s6_len;
        s0 = "fcvt.d.lu";
        s0_len = 9;
        spc( &s1, &s1_len);
        freg_or_reg_name(tree->ast_node.f_un_rm_type_d.rd, &s2, &s2_len);
        sep( &s3, &s3_len);
        switch (tree->ast_node.f_un_rm_type_d.rs1) { 
          case 0x08:{
            s4 = "fp";
            s4_len = 2;
            break;
          }
          case 0x15:{
            s4 = "s5";
            s4_len = 2;
            break;
          }
          case 0x01:{
            s4 = "ra";
            s4_len = 2;
            break;
          }
          case 0x06:{
            s4 = "t1";
            s4_len = 2;
            break;
          }
          case 0x09:{
            s4 = "s1";
            s4_len = 2;
            break;
          }
          case 0x10:{
            s4 = "a6";
            s4_len = 2;
            break;
          }
          case 0x1B:{
            s4 = "s11";
            s4_len = 3;
            break;
          }
          case 0x1C:{
            s4 = "t3";
            s4_len = 2;
            break;
          }
          case 0x16:{
            s4 = "s6";
            s4_len = 2;
            break;
          }
          case 0x00:{
            s4 = "zero";
            s4_len = 4;
            break;
          }
          case 0x0A:{
            s4 = "a0";
            s4_len = 2;
            break;
          }
          case 0x1A:{
            s4 = "s10";
            s4_len = 3;
            break;
          }
          case 0x17:{
            s4 = "s7";
            s4_len = 2;
            break;
          }
          case 0x0C:{
            s4 = "a2";
            s4_len = 2;
            break;
          }
          case 0x18:{
            s4 = "s8";
            s4_len = 2;
            break;
          }
          case 0x02:{
            s4 = "sp";
            s4_len = 2;
            break;
          }
          case 0x1F:{
            s4 = "t6";
            s4_len = 2;
            break;
          }
          case 0x0B:{
            s4 = "a1";
            s4_len = 2;
            break;
          }
          case 0x07:{
            s4 = "t2";
            s4_len = 2;
            break;
          }
          case 0x13:{
            s4 = "s3";
            s4_len = 2;
            break;
          }
          case 0x04:{
            s4 = "tp";
            s4_len = 2;
            break;
          }
          case 0x19:{
            s4 = "s9";
            s4_len = 2;
            break;
          }
          case 0x12:{
            s4 = "s2";
            s4_len = 2;
            break;
          }
          case 0x14:{
            s4 = "s4";
            s4_len = 2;
            break;
          }
          case 0x0E:{
            s4 = "a4";
            s4_len = 2;
            break;
          }
          case 0x1E:{
            s4 = "t5";
            s4_len = 2;
            break;
          }
          case 0x11:{
            s4 = "a7";
            s4_len = 2;
            break;
          }
          case 0x03:{
            s4 = "gp";
            s4_len = 2;
            break;
          }
          case 0x05:{
            s4 = "t0";
            s4_len = 2;
            break;
          }
          case 0x1D:{
            s4 = "t4";
            s4_len = 2;
            break;
          }
          case 0x0D:{
            s4 = "a3";
            s4_len = 2;
            break;
          }
          case 0x0F:{
            s4 = "a5";
            s4_len = 2;
            break;
          }
        }
        sep( &s5, &s5_len);
        switch (tree->ast_node.f_un_rm_type_d.rm) { 
          case RISCV_RM_RNE:{
            s6 = "rne";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RTZ:{
            s6 = "rtz";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RDN:{
            s6 = "rdn";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RMM:{
            s6 = "rmm";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RUP:{
            s6 = "rup";
            s6_len = 3;
            break;
          }
          case RISCV_RM_DYN:{
            s6 = "dyn";
            s6_len = 3;
            break;
          }
        }
        memcpy(buff , s0, s0_len);
        memcpy(buff  + s0_len, s1, s1_len);
        memcpy(buff  + s0_len + s1_len, s2, s2_len);
        memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
      if (tree->ast_node.f_un_rm_type_d.fcvt_d_lu == RISCV_FCVT_S_D) { 
        char *s0; size_t s0_len;
        char *s1; size_t s1_len;
        char *s2; size_t s2_len;
        char *s3; size_t s3_len;
        char *s4; size_t s4_len;
        char *s5; size_t s5_len;
        char *s6; size_t s6_len;
        s0 = "fcvt.s.d";
        s0_len = 8;
        spc( &s1, &s1_len);
        freg_or_reg_name(tree->ast_node.f_un_rm_type_d.rd, &s2, &s2_len);
        sep( &s3, &s3_len);
        freg_or_reg_name(tree->ast_node.f_un_rm_type_d.rs1, &s4, &s4_len);
        sep( &s5, &s5_len);
        switch (tree->ast_node.f_un_rm_type_d.rm) { 
          case RISCV_RM_RNE:{
            s6 = "rne";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RTZ:{
            s6 = "rtz";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RDN:{
            s6 = "rdn";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RMM:{
            s6 = "rmm";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RUP:{
            s6 = "rup";
            s6_len = 3;
            break;
          }
          case RISCV_RM_DYN:{
            s6 = "dyn";
            s6_len = 3;
            break;
          }
        }
        memcpy(buff , s0, s0_len);
        memcpy(buff  + s0_len, s1, s1_len);
        memcpy(buff  + s0_len + s1_len, s2, s2_len);
        memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
      if (tree->ast_node.f_un_rm_type_d.fcvt_d_lu == RISCV_FCVT_D_S) { 
        char *s0; size_t s0_len;
        char *s1; size_t s1_len;
        char *s2; size_t s2_len;
        char *s3; size_t s3_len;
        char *s4; size_t s4_len;
        char *s5; size_t s5_len;
        char *s6; size_t s6_len;
        s0 = "fcvt.d.s";
        s0_len = 8;
        spc( &s1, &s1_len);
        freg_or_reg_name(tree->ast_node.f_un_rm_type_d.rd, &s2, &s2_len);
        sep( &s3, &s3_len);
        freg_or_reg_name(tree->ast_node.f_un_rm_type_d.rs1, &s4, &s4_len);
        sep( &s5, &s5_len);
        switch (tree->ast_node.f_un_rm_type_d.rm) { 
          case RISCV_RM_RNE:{
            s6 = "rne";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RTZ:{
            s6 = "rtz";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RDN:{
            s6 = "rdn";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RMM:{
            s6 = "rmm";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RUP:{
            s6 = "rup";
            s6_len = 3;
            break;
          }
          case RISCV_RM_DYN:{
            s6 = "dyn";
            s6_len = 3;
            break;
          }
        }
        memcpy(buff , s0, s0_len);
        memcpy(buff  + s0_len, s1, s1_len);
        memcpy(buff  + s0_len + s1_len, s2, s2_len);
        memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
    }
    break;
    case RISCV_F_BIN_TYPE_D: {

      if (tree->ast_node.f_bin_type_d.fle_d == RISCV_FSGNJ_D) { 
        char *s0; size_t s0_len;
        char *s1; size_t s1_len;
        char *s2; size_t s2_len;
        char *s3; size_t s3_len;
        char *s4; size_t s4_len;
        char *s5; size_t s5_len;
        char *s6; size_t s6_len;
        s0 = "fsgnj.d";
        s0_len = 7;
        spc( &s1, &s1_len);
        freg_or_reg_name(tree->ast_node.f_bin_type_d.rd, &s2, &s2_len);
        sep( &s3, &s3_len);
        freg_or_reg_name(tree->ast_node.f_bin_type_d.rs1, &s4, &s4_len);
        sep( &s5, &s5_len);
        freg_or_reg_name(tree->ast_node.f_bin_type_d.rs2, &s6, &s6_len);
        memcpy(buff , s0, s0_len);
        memcpy(buff  + s0_len, s1, s1_len);
        memcpy(buff  + s0_len + s1_len, s2, s2_len);
        memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
      if (tree->ast_node.f_bin_type_d.fle_d == RISCV_FSGNJN_D) { 
        char *s0; size_t s0_len;
        char *s1; size_t s1_len;
        char *s2; size_t s2_len;
        char *s3; size_t s3_len;
        char *s4; size_t s4_len;
        char *s5; size_t s5_len;
        char *s6; size_t s6_len;
        s0 = "fsgnjn.d";
        s0_len = 8;
        spc( &s1, &s1_len);
        freg_or_reg_name(tree->ast_node.f_bin_type_d.rd, &s2, &s2_len);
        sep( &s3, &s3_len);
        freg_or_reg_name(tree->ast_node.f_bin_type_d.rs1, &s4, &s4_len);
        sep( &s5, &s5_len);
        freg_or_reg_name(tree->ast_node.f_bin_type_d.rs2, &s6, &s6_len);
        memcpy(buff , s0, s0_len);
        memcpy(buff  + s0_len, s1, s1_len);
        memcpy(buff  + s0_len + s1_len, s2, s2_len);
        memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
      if (tree->ast_node.f_bin_type_d.fle_d == RISCV_FSGNJX_D) { 
        char *s0; size_t s0_len;
        char *s1; size_t s1_len;
        char *s2; size_t s2_len;
        char *s3; size_t s3_len;
        char *s4; size_t s4_len;
        char *s5; size_t s5_len;
        char *s6; size_t s6_len;
        s0 = "fsgnjx.d";
        s0_len = 8;
        spc( &s1, &s1_len);
        freg_or_reg_name(tree->ast_node.f_bin_type_d.rd, &s2, &s2_len);
        sep( &s3, &s3_len);
        freg_or_reg_name(tree->ast_node.f_bin_type_d.rs1, &s4, &s4_len);
        sep( &s5, &s5_len);
        freg_or_reg_name(tree->ast_node.f_bin_type_d.rs2, &s6, &s6_len);
        memcpy(buff , s0, s0_len);
        memcpy(buff  + s0_len, s1, s1_len);
        memcpy(buff  + s0_len + s1_len, s2, s2_len);
        memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
      if (tree->ast_node.f_bin_type_d.fle_d == RISCV_FMIN_D) { 
        char *s0; size_t s0_len;
        char *s1; size_t s1_len;
        char *s2; size_t s2_len;
        char *s3; size_t s3_len;
        char *s4; size_t s4_len;
        char *s5; size_t s5_len;
        char *s6; size_t s6_len;
        s0 = "fmin.d";
        s0_len = 6;
        spc( &s1, &s1_len);
        freg_or_reg_name(tree->ast_node.f_bin_type_d.rd, &s2, &s2_len);
        sep( &s3, &s3_len);
        freg_or_reg_name(tree->ast_node.f_bin_type_d.rs1, &s4, &s4_len);
        sep( &s5, &s5_len);
        freg_or_reg_name(tree->ast_node.f_bin_type_d.rs2, &s6, &s6_len);
        memcpy(buff , s0, s0_len);
        memcpy(buff  + s0_len, s1, s1_len);
        memcpy(buff  + s0_len + s1_len, s2, s2_len);
        memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
      if (tree->ast_node.f_bin_type_d.fle_d == RISCV_FMAX_D) { 
        char *s0; size_t s0_len;
        char *s1; size_t s1_len;
        char *s2; size_t s2_len;
        char *s3; size_t s3_len;
        char *s4; size_t s4_len;
        char *s5; size_t s5_len;
        char *s6; size_t s6_len;
        s0 = "fmax.d";
        s0_len = 6;
        spc( &s1, &s1_len);
        freg_or_reg_name(tree->ast_node.f_bin_type_d.rd, &s2, &s2_len);
        sep( &s3, &s3_len);
        freg_or_reg_name(tree->ast_node.f_bin_type_d.rs1, &s4, &s4_len);
        sep( &s5, &s5_len);
        freg_or_reg_name(tree->ast_node.f_bin_type_d.rs2, &s6, &s6_len);
        memcpy(buff , s0, s0_len);
        memcpy(buff  + s0_len, s1, s1_len);
        memcpy(buff  + s0_len + s1_len, s2, s2_len);
        memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
      if (tree->ast_node.f_bin_type_d.fle_d == RISCV_FEQ_D) { 
        char *s0; size_t s0_len;
        char *s1; size_t s1_len;
        char *s2; size_t s2_len;
        char *s3; size_t s3_len;
        char *s4; size_t s4_len;
        char *s5; size_t s5_len;
        char *s6; size_t s6_len;
        s0 = "feq.d";
        s0_len = 5;
        spc( &s1, &s1_len);
        switch (tree->ast_node.f_bin_type_d.rd) { 
          case 0x08:{
            s2 = "fp";
            s2_len = 2;
            break;
          }
          case 0x15:{
            s2 = "s5";
            s2_len = 2;
            break;
          }
          case 0x01:{
            s2 = "ra";
            s2_len = 2;
            break;
          }
          case 0x06:{
            s2 = "t1";
            s2_len = 2;
            break;
          }
          case 0x09:{
            s2 = "s1";
            s2_len = 2;
            break;
          }
          case 0x10:{
            s2 = "a6";
            s2_len = 2;
            break;
          }
          case 0x1B:{
            s2 = "s11";
            s2_len = 3;
            break;
          }
          case 0x1C:{
            s2 = "t3";
            s2_len = 2;
            break;
          }
          case 0x16:{
            s2 = "s6";
            s2_len = 2;
            break;
          }
          case 0x00:{
            s2 = "zero";
            s2_len = 4;
            break;
          }
          case 0x0A:{
            s2 = "a0";
            s2_len = 2;
            break;
          }
          case 0x1A:{
            s2 = "s10";
            s2_len = 3;
            break;
          }
          case 0x17:{
            s2 = "s7";
            s2_len = 2;
            break;
          }
          case 0x0C:{
            s2 = "a2";
            s2_len = 2;
            break;
          }
          case 0x18:{
            s2 = "s8";
            s2_len = 2;
            break;
          }
          case 0x02:{
            s2 = "sp";
            s2_len = 2;
            break;
          }
          case 0x1F:{
            s2 = "t6";
            s2_len = 2;
            break;
          }
          case 0x0B:{
            s2 = "a1";
            s2_len = 2;
            break;
          }
          case 0x07:{
            s2 = "t2";
            s2_len = 2;
            break;
          }
          case 0x13:{
            s2 = "s3";
            s2_len = 2;
            break;
          }
          case 0x04:{
            s2 = "tp";
            s2_len = 2;
            break;
          }
          case 0x19:{
            s2 = "s9";
            s2_len = 2;
            break;
          }
          case 0x12:{
            s2 = "s2";
            s2_len = 2;
            break;
          }
          case 0x14:{
            s2 = "s4";
            s2_len = 2;
            break;
          }
          case 0x0E:{
            s2 = "a4";
            s2_len = 2;
            break;
          }
          case 0x1E:{
            s2 = "t5";
            s2_len = 2;
            break;
          }
          case 0x11:{
            s2 = "a7";
            s2_len = 2;
            break;
          }
          case 0x03:{
            s2 = "gp";
            s2_len = 2;
            break;
          }
          case 0x05:{
            s2 = "t0";
            s2_len = 2;
            break;
          }
          case 0x1D:{
            s2 = "t4";
            s2_len = 2;
            break;
          }
          case 0x0D:{
            s2 = "a3";
            s2_len = 2;
            break;
          }
          case 0x0F:{
            s2 = "a5";
            s2_len = 2;
            break;
          }
        }
        sep( &s3, &s3_len);
        freg_or_reg_name(tree->ast_node.f_bin_type_d.rs1, &s4, &s4_len);
        sep( &s5, &s5_len);
        freg_or_reg_name(tree->ast_node.f_bin_type_d.rs2, &s6, &s6_len);
        memcpy(buff , s0, s0_len);
        memcpy(buff  + s0_len, s1, s1_len);
        memcpy(buff  + s0_len + s1_len, s2, s2_len);
        memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
      if (tree->ast_node.f_bin_type_d.fle_d == RISCV_FLT_D) { 
        char *s0; size_t s0_len;
        char *s1; size_t s1_len;
        char *s2; size_t s2_len;
        char *s3; size_t s3_len;
        char *s4; size_t s4_len;
        char *s5; size_t s5_len;
        char *s6; size_t s6_len;
        s0 = "flt.d";
        s0_len = 5;
        spc( &s1, &s1_len);
        switch (tree->ast_node.f_bin_type_d.rd) { 
          case 0x08:{
            s2 = "fp";
            s2_len = 2;
            break;
          }
          case 0x15:{
            s2 = "s5";
            s2_len = 2;
            break;
          }
          case 0x01:{
            s2 = "ra";
            s2_len = 2;
            break;
          }
          case 0x06:{
            s2 = "t1";
            s2_len = 2;
            break;
          }
          case 0x09:{
            s2 = "s1";
            s2_len = 2;
            break;
          }
          case 0x10:{
            s2 = "a6";
            s2_len = 2;
            break;
          }
          case 0x1B:{
            s2 = "s11";
            s2_len = 3;
            break;
          }
          case 0x1C:{
            s2 = "t3";
            s2_len = 2;
            break;
          }
          case 0x16:{
            s2 = "s6";
            s2_len = 2;
            break;
          }
          case 0x00:{
            s2 = "zero";
            s2_len = 4;
            break;
          }
          case 0x0A:{
            s2 = "a0";
            s2_len = 2;
            break;
          }
          case 0x1A:{
            s2 = "s10";
            s2_len = 3;
            break;
          }
          case 0x17:{
            s2 = "s7";
            s2_len = 2;
            break;
          }
          case 0x0C:{
            s2 = "a2";
            s2_len = 2;
            break;
          }
          case 0x18:{
            s2 = "s8";
            s2_len = 2;
            break;
          }
          case 0x02:{
            s2 = "sp";
            s2_len = 2;
            break;
          }
          case 0x1F:{
            s2 = "t6";
            s2_len = 2;
            break;
          }
          case 0x0B:{
            s2 = "a1";
            s2_len = 2;
            break;
          }
          case 0x07:{
            s2 = "t2";
            s2_len = 2;
            break;
          }
          case 0x13:{
            s2 = "s3";
            s2_len = 2;
            break;
          }
          case 0x04:{
            s2 = "tp";
            s2_len = 2;
            break;
          }
          case 0x19:{
            s2 = "s9";
            s2_len = 2;
            break;
          }
          case 0x12:{
            s2 = "s2";
            s2_len = 2;
            break;
          }
          case 0x14:{
            s2 = "s4";
            s2_len = 2;
            break;
          }
          case 0x0E:{
            s2 = "a4";
            s2_len = 2;
            break;
          }
          case 0x1E:{
            s2 = "t5";
            s2_len = 2;
            break;
          }
          case 0x11:{
            s2 = "a7";
            s2_len = 2;
            break;
          }
          case 0x03:{
            s2 = "gp";
            s2_len = 2;
            break;
          }
          case 0x05:{
            s2 = "t0";
            s2_len = 2;
            break;
          }
          case 0x1D:{
            s2 = "t4";
            s2_len = 2;
            break;
          }
          case 0x0D:{
            s2 = "a3";
            s2_len = 2;
            break;
          }
          case 0x0F:{
            s2 = "a5";
            s2_len = 2;
            break;
          }
        }
        sep( &s3, &s3_len);
        freg_or_reg_name(tree->ast_node.f_bin_type_d.rs1, &s4, &s4_len);
        sep( &s5, &s5_len);
        freg_or_reg_name(tree->ast_node.f_bin_type_d.rs2, &s6, &s6_len);
        memcpy(buff , s0, s0_len);
        memcpy(buff  + s0_len, s1, s1_len);
        memcpy(buff  + s0_len + s1_len, s2, s2_len);
        memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
      if (tree->ast_node.f_bin_type_d.fle_d == RISCV_FLE_D) { 
        char *s0; size_t s0_len;
        char *s1; size_t s1_len;
        char *s2; size_t s2_len;
        char *s3; size_t s3_len;
        char *s4; size_t s4_len;
        char *s5; size_t s5_len;
        char *s6; size_t s6_len;
        s0 = "fle.d";
        s0_len = 5;
        spc( &s1, &s1_len);
        switch (tree->ast_node.f_bin_type_d.rd) { 
          case 0x08:{
            s2 = "fp";
            s2_len = 2;
            break;
          }
          case 0x15:{
            s2 = "s5";
            s2_len = 2;
            break;
          }
          case 0x01:{
            s2 = "ra";
            s2_len = 2;
            break;
          }
          case 0x06:{
            s2 = "t1";
            s2_len = 2;
            break;
          }
          case 0x09:{
            s2 = "s1";
            s2_len = 2;
            break;
          }
          case 0x10:{
            s2 = "a6";
            s2_len = 2;
            break;
          }
          case 0x1B:{
            s2 = "s11";
            s2_len = 3;
            break;
          }
          case 0x1C:{
            s2 = "t3";
            s2_len = 2;
            break;
          }
          case 0x16:{
            s2 = "s6";
            s2_len = 2;
            break;
          }
          case 0x00:{
            s2 = "zero";
            s2_len = 4;
            break;
          }
          case 0x0A:{
            s2 = "a0";
            s2_len = 2;
            break;
          }
          case 0x1A:{
            s2 = "s10";
            s2_len = 3;
            break;
          }
          case 0x17:{
            s2 = "s7";
            s2_len = 2;
            break;
          }
          case 0x0C:{
            s2 = "a2";
            s2_len = 2;
            break;
          }
          case 0x18:{
            s2 = "s8";
            s2_len = 2;
            break;
          }
          case 0x02:{
            s2 = "sp";
            s2_len = 2;
            break;
          }
          case 0x1F:{
            s2 = "t6";
            s2_len = 2;
            break;
          }
          case 0x0B:{
            s2 = "a1";
            s2_len = 2;
            break;
          }
          case 0x07:{
            s2 = "t2";
            s2_len = 2;
            break;
          }
          case 0x13:{
            s2 = "s3";
            s2_len = 2;
            break;
          }
          case 0x04:{
            s2 = "tp";
            s2_len = 2;
            break;
          }
          case 0x19:{
            s2 = "s9";
            s2_len = 2;
            break;
          }
          case 0x12:{
            s2 = "s2";
            s2_len = 2;
            break;
          }
          case 0x14:{
            s2 = "s4";
            s2_len = 2;
            break;
          }
          case 0x0E:{
            s2 = "a4";
            s2_len = 2;
            break;
          }
          case 0x1E:{
            s2 = "t5";
            s2_len = 2;
            break;
          }
          case 0x11:{
            s2 = "a7";
            s2_len = 2;
            break;
          }
          case 0x03:{
            s2 = "gp";
            s2_len = 2;
            break;
          }
          case 0x05:{
            s2 = "t0";
            s2_len = 2;
            break;
          }
          case 0x1D:{
            s2 = "t4";
            s2_len = 2;
            break;
          }
          case 0x0D:{
            s2 = "a3";
            s2_len = 2;
            break;
          }
          case 0x0F:{
            s2 = "a5";
            s2_len = 2;
            break;
          }
        }
        sep( &s3, &s3_len);
        freg_or_reg_name(tree->ast_node.f_bin_type_d.rs1, &s4, &s4_len);
        sep( &s5, &s5_len);
        freg_or_reg_name(tree->ast_node.f_bin_type_d.rs2, &s6, &s6_len);
        memcpy(buff , s0, s0_len);
        memcpy(buff  + s0_len, s1, s1_len);
        memcpy(buff  + s0_len + s1_len, s2, s2_len);
        memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
    }
    break;
    case RISCV_F_UN_TYPE_D: {

      if (tree->ast_node.f_un_type_d.fmv_d_x == RISCV_FMV_X_D) { 
        char *s0; size_t s0_len;
        char *s1; size_t s1_len;
        char *s2; size_t s2_len;
        char *s3; size_t s3_len;
        char *s4; size_t s4_len;
        s0 = "fmv.x.d";
        s0_len = 7;
        spc( &s1, &s1_len);
        switch (tree->ast_node.f_un_type_d.rd) { 
          case 0x08:{
            s2 = "fp";
            s2_len = 2;
            break;
          }
          case 0x15:{
            s2 = "s5";
            s2_len = 2;
            break;
          }
          case 0x01:{
            s2 = "ra";
            s2_len = 2;
            break;
          }
          case 0x06:{
            s2 = "t1";
            s2_len = 2;
            break;
          }
          case 0x09:{
            s2 = "s1";
            s2_len = 2;
            break;
          }
          case 0x10:{
            s2 = "a6";
            s2_len = 2;
            break;
          }
          case 0x1B:{
            s2 = "s11";
            s2_len = 3;
            break;
          }
          case 0x1C:{
            s2 = "t3";
            s2_len = 2;
            break;
          }
          case 0x16:{
            s2 = "s6";
            s2_len = 2;
            break;
          }
          case 0x00:{
            s2 = "zero";
            s2_len = 4;
            break;
          }
          case 0x0A:{
            s2 = "a0";
            s2_len = 2;
            break;
          }
          case 0x1A:{
            s2 = "s10";
            s2_len = 3;
            break;
          }
          case 0x17:{
            s2 = "s7";
            s2_len = 2;
            break;
          }
          case 0x0C:{
            s2 = "a2";
            s2_len = 2;
            break;
          }
          case 0x18:{
            s2 = "s8";
            s2_len = 2;
            break;
          }
          case 0x02:{
            s2 = "sp";
            s2_len = 2;
            break;
          }
          case 0x1F:{
            s2 = "t6";
            s2_len = 2;
            break;
          }
          case 0x0B:{
            s2 = "a1";
            s2_len = 2;
            break;
          }
          case 0x07:{
            s2 = "t2";
            s2_len = 2;
            break;
          }
          case 0x13:{
            s2 = "s3";
            s2_len = 2;
            break;
          }
          case 0x04:{
            s2 = "tp";
            s2_len = 2;
            break;
          }
          case 0x19:{
            s2 = "s9";
            s2_len = 2;
            break;
          }
          case 0x12:{
            s2 = "s2";
            s2_len = 2;
            break;
          }
          case 0x14:{
            s2 = "s4";
            s2_len = 2;
            break;
          }
          case 0x0E:{
            s2 = "a4";
            s2_len = 2;
            break;
          }
          case 0x1E:{
            s2 = "t5";
            s2_len = 2;
            break;
          }
          case 0x11:{
            s2 = "a7";
            s2_len = 2;
            break;
          }
          case 0x03:{
            s2 = "gp";
            s2_len = 2;
            break;
          }
          case 0x05:{
            s2 = "t0";
            s2_len = 2;
            break;
          }
          case 0x1D:{
            s2 = "t4";
            s2_len = 2;
            break;
          }
          case 0x0D:{
            s2 = "a3";
            s2_len = 2;
            break;
          }
          case 0x0F:{
            s2 = "a5";
            s2_len = 2;
            break;
          }
        }
        sep( &s3, &s3_len);
        switch (tree->ast_node.f_un_type_d.rs1) { 
          case 0x08:{
            s4 = "fs0";
            s4_len = 3;
            break;
          }
          case 0x15:{
            s4 = "fs5";
            s4_len = 3;
            break;
          }
          case 0x01:{
            s4 = "ft1";
            s4_len = 3;
            break;
          }
          case 0x06:{
            s4 = "ft6";
            s4_len = 3;
            break;
          }
          case 0x09:{
            s4 = "fs1";
            s4_len = 3;
            break;
          }
          case 0x10:{
            s4 = "fa6";
            s4_len = 3;
            break;
          }
          case 0x1B:{
            s4 = "fs11";
            s4_len = 4;
            break;
          }
          case 0x1C:{
            s4 = "ft8";
            s4_len = 3;
            break;
          }
          case 0x16:{
            s4 = "fs6";
            s4_len = 3;
            break;
          }
          case 0x00:{
            s4 = "ft0";
            s4_len = 3;
            break;
          }
          case 0x0A:{
            s4 = "fa0";
            s4_len = 3;
            break;
          }
          case 0x1A:{
            s4 = "fs10";
            s4_len = 4;
            break;
          }
          case 0x17:{
            s4 = "fs7";
            s4_len = 3;
            break;
          }
          case 0x0C:{
            s4 = "fa2";
            s4_len = 3;
            break;
          }
          case 0x18:{
            s4 = "fs8";
            s4_len = 3;
            break;
          }
          case 0x02:{
            s4 = "ft2";
            s4_len = 3;
            break;
          }
          case 0x1F:{
            s4 = "ft11";
            s4_len = 4;
            break;
          }
          case 0x0B:{
            s4 = "fa1";
            s4_len = 3;
            break;
          }
          case 0x07:{
            s4 = "ft7";
            s4_len = 3;
            break;
          }
          case 0x13:{
            s4 = "fs3";
            s4_len = 3;
            break;
          }
          case 0x04:{
            s4 = "ft4";
            s4_len = 3;
            break;
          }
          case 0x19:{
            s4 = "fs9";
            s4_len = 3;
            break;
          }
          case 0x12:{
            s4 = "fs2";
            s4_len = 3;
            break;
          }
          case 0x14:{
            s4 = "fs4";
            s4_len = 3;
            break;
          }
          case 0x0E:{
            s4 = "fa4";
            s4_len = 3;
            break;
          }
          case 0x1E:{
            s4 = "ft10";
            s4_len = 4;
            break;
          }
          case 0x11:{
            s4 = "fa7";
            s4_len = 3;
            break;
          }
          case 0x03:{
            s4 = "ft3";
            s4_len = 3;
            break;
          }
          case 0x05:{
            s4 = "ft5";
            s4_len = 3;
            break;
          }
          case 0x1D:{
            s4 = "ft9";
            s4_len = 3;
            break;
          }
          case 0x0D:{
            s4 = "fa3";
            s4_len = 3;
            break;
          }
          case 0x0F:{
            s4 = "fa5";
            s4_len = 3;
            break;
          }
        }
        memcpy(buff , s0, s0_len);
        memcpy(buff  + s0_len, s1, s1_len);
        memcpy(buff  + s0_len + s1_len, s2, s2_len);
        memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      }
      if (tree->ast_node.f_un_type_d.fmv_d_x == RISCV_FMV_D_X) { 
        char *s0; size_t s0_len;
        char *s1; size_t s1_len;
        char *s2; size_t s2_len;
        char *s3; size_t s3_len;
        char *s4; size_t s4_len;
        s0 = "fmv.d.x";
        s0_len = 7;
        spc( &s1, &s1_len);
        switch (tree->ast_node.f_un_type_d.rd) { 
          case 0x08:{
            s2 = "fs0";
            s2_len = 3;
            break;
          }
          case 0x15:{
            s2 = "fs5";
            s2_len = 3;
            break;
          }
          case 0x01:{
            s2 = "ft1";
            s2_len = 3;
            break;
          }
          case 0x06:{
            s2 = "ft6";
            s2_len = 3;
            break;
          }
          case 0x09:{
            s2 = "fs1";
            s2_len = 3;
            break;
          }
          case 0x10:{
            s2 = "fa6";
            s2_len = 3;
            break;
          }
          case 0x1B:{
            s2 = "fs11";
            s2_len = 4;
            break;
          }
          case 0x1C:{
            s2 = "ft8";
            s2_len = 3;
            break;
          }
          case 0x16:{
            s2 = "fs6";
            s2_len = 3;
            break;
          }
          case 0x00:{
            s2 = "ft0";
            s2_len = 3;
            break;
          }
          case 0x0A:{
            s2 = "fa0";
            s2_len = 3;
            break;
          }
          case 0x1A:{
            s2 = "fs10";
            s2_len = 4;
            break;
          }
          case 0x17:{
            s2 = "fs7";
            s2_len = 3;
            break;
          }
          case 0x0C:{
            s2 = "fa2";
            s2_len = 3;
            break;
          }
          case 0x18:{
            s2 = "fs8";
            s2_len = 3;
            break;
          }
          case 0x02:{
            s2 = "ft2";
            s2_len = 3;
            break;
          }
          case 0x1F:{
            s2 = "ft11";
            s2_len = 4;
            break;
          }
          case 0x0B:{
            s2 = "fa1";
            s2_len = 3;
            break;
          }
          case 0x07:{
            s2 = "ft7";
            s2_len = 3;
            break;
          }
          case 0x13:{
            s2 = "fs3";
            s2_len = 3;
            break;
          }
          case 0x04:{
            s2 = "ft4";
            s2_len = 3;
            break;
          }
          case 0x19:{
            s2 = "fs9";
            s2_len = 3;
            break;
          }
          case 0x12:{
            s2 = "fs2";
            s2_len = 3;
            break;
          }
          case 0x14:{
            s2 = "fs4";
            s2_len = 3;
            break;
          }
          case 0x0E:{
            s2 = "fa4";
            s2_len = 3;
            break;
          }
          case 0x1E:{
            s2 = "ft10";
            s2_len = 4;
            break;
          }
          case 0x11:{
            s2 = "fa7";
            s2_len = 3;
            break;
          }
          case 0x03:{
            s2 = "ft3";
            s2_len = 3;
            break;
          }
          case 0x05:{
            s2 = "ft5";
            s2_len = 3;
            break;
          }
          case 0x1D:{
            s2 = "ft9";
            s2_len = 3;
            break;
          }
          case 0x0D:{
            s2 = "fa3";
            s2_len = 3;
            break;
          }
          case 0x0F:{
            s2 = "fa5";
            s2_len = 3;
            break;
          }
        }
        sep( &s3, &s3_len);
        switch (tree->ast_node.f_un_type_d.rs1) { 
          case 0x08:{
            s4 = "fp";
            s4_len = 2;
            break;
          }
          case 0x15:{
            s4 = "s5";
            s4_len = 2;
            break;
          }
          case 0x01:{
            s4 = "ra";
            s4_len = 2;
            break;
          }
          case 0x06:{
            s4 = "t1";
            s4_len = 2;
            break;
          }
          case 0x09:{
            s4 = "s1";
            s4_len = 2;
            break;
          }
          case 0x10:{
            s4 = "a6";
            s4_len = 2;
            break;
          }
          case 0x1B:{
            s4 = "s11";
            s4_len = 3;
            break;
          }
          case 0x1C:{
            s4 = "t3";
            s4_len = 2;
            break;
          }
          case 0x16:{
            s4 = "s6";
            s4_len = 2;
            break;
          }
          case 0x00:{
            s4 = "zero";
            s4_len = 4;
            break;
          }
          case 0x0A:{
            s4 = "a0";
            s4_len = 2;
            break;
          }
          case 0x1A:{
            s4 = "s10";
            s4_len = 3;
            break;
          }
          case 0x17:{
            s4 = "s7";
            s4_len = 2;
            break;
          }
          case 0x0C:{
            s4 = "a2";
            s4_len = 2;
            break;
          }
          case 0x18:{
            s4 = "s8";
            s4_len = 2;
            break;
          }
          case 0x02:{
            s4 = "sp";
            s4_len = 2;
            break;
          }
          case 0x1F:{
            s4 = "t6";
            s4_len = 2;
            break;
          }
          case 0x0B:{
            s4 = "a1";
            s4_len = 2;
            break;
          }
          case 0x07:{
            s4 = "t2";
            s4_len = 2;
            break;
          }
          case 0x13:{
            s4 = "s3";
            s4_len = 2;
            break;
          }
          case 0x04:{
            s4 = "tp";
            s4_len = 2;
            break;
          }
          case 0x19:{
            s4 = "s9";
            s4_len = 2;
            break;
          }
          case 0x12:{
            s4 = "s2";
            s4_len = 2;
            break;
          }
          case 0x14:{
            s4 = "s4";
            s4_len = 2;
            break;
          }
          case 0x0E:{
            s4 = "a4";
            s4_len = 2;
            break;
          }
          case 0x1E:{
            s4 = "t5";
            s4_len = 2;
            break;
          }
          case 0x11:{
            s4 = "a7";
            s4_len = 2;
            break;
          }
          case 0x03:{
            s4 = "gp";
            s4_len = 2;
            break;
          }
          case 0x05:{
            s4 = "t0";
            s4_len = 2;
            break;
          }
          case 0x1D:{
            s4 = "t4";
            s4_len = 2;
            break;
          }
          case 0x0D:{
            s4 = "a3";
            s4_len = 2;
            break;
          }
          case 0x0F:{
            s4 = "a5";
            s4_len = 2;
            break;
          }
        }
        memcpy(buff , s0, s0_len);
        memcpy(buff  + s0_len, s1, s1_len);
        memcpy(buff  + s0_len + s1_len, s2, s2_len);
        memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      }
      if (tree->ast_node.f_un_type_d.fmv_d_x == RISCV_FCLASS_D) { 
        char *s0; size_t s0_len;
        char *s1; size_t s1_len;
        char *s2; size_t s2_len;
        char *s3; size_t s3_len;
        char *s4; size_t s4_len;
        s0 = "fclass.d";
        s0_len = 8;
        spc( &s1, &s1_len);
        switch (tree->ast_node.f_un_type_d.rd) { 
          case 0x08:{
            s2 = "fp";
            s2_len = 2;
            break;
          }
          case 0x15:{
            s2 = "s5";
            s2_len = 2;
            break;
          }
          case 0x01:{
            s2 = "ra";
            s2_len = 2;
            break;
          }
          case 0x06:{
            s2 = "t1";
            s2_len = 2;
            break;
          }
          case 0x09:{
            s2 = "s1";
            s2_len = 2;
            break;
          }
          case 0x10:{
            s2 = "a6";
            s2_len = 2;
            break;
          }
          case 0x1B:{
            s2 = "s11";
            s2_len = 3;
            break;
          }
          case 0x1C:{
            s2 = "t3";
            s2_len = 2;
            break;
          }
          case 0x16:{
            s2 = "s6";
            s2_len = 2;
            break;
          }
          case 0x00:{
            s2 = "zero";
            s2_len = 4;
            break;
          }
          case 0x0A:{
            s2 = "a0";
            s2_len = 2;
            break;
          }
          case 0x1A:{
            s2 = "s10";
            s2_len = 3;
            break;
          }
          case 0x17:{
            s2 = "s7";
            s2_len = 2;
            break;
          }
          case 0x0C:{
            s2 = "a2";
            s2_len = 2;
            break;
          }
          case 0x18:{
            s2 = "s8";
            s2_len = 2;
            break;
          }
          case 0x02:{
            s2 = "sp";
            s2_len = 2;
            break;
          }
          case 0x1F:{
            s2 = "t6";
            s2_len = 2;
            break;
          }
          case 0x0B:{
            s2 = "a1";
            s2_len = 2;
            break;
          }
          case 0x07:{
            s2 = "t2";
            s2_len = 2;
            break;
          }
          case 0x13:{
            s2 = "s3";
            s2_len = 2;
            break;
          }
          case 0x04:{
            s2 = "tp";
            s2_len = 2;
            break;
          }
          case 0x19:{
            s2 = "s9";
            s2_len = 2;
            break;
          }
          case 0x12:{
            s2 = "s2";
            s2_len = 2;
            break;
          }
          case 0x14:{
            s2 = "s4";
            s2_len = 2;
            break;
          }
          case 0x0E:{
            s2 = "a4";
            s2_len = 2;
            break;
          }
          case 0x1E:{
            s2 = "t5";
            s2_len = 2;
            break;
          }
          case 0x11:{
            s2 = "a7";
            s2_len = 2;
            break;
          }
          case 0x03:{
            s2 = "gp";
            s2_len = 2;
            break;
          }
          case 0x05:{
            s2 = "t0";
            s2_len = 2;
            break;
          }
          case 0x1D:{
            s2 = "t4";
            s2_len = 2;
            break;
          }
          case 0x0D:{
            s2 = "a3";
            s2_len = 2;
            break;
          }
          case 0x0F:{
            s2 = "a5";
            s2_len = 2;
            break;
          }
        }
        sep( &s3, &s3_len);
        freg_or_reg_name(tree->ast_node.f_un_type_d.rs1, &s4, &s4_len);
        memcpy(buff , s0, s0_len);
        memcpy(buff  + s0_len, s1, s1_len);
        memcpy(buff  + s0_len + s1_len, s2, s2_len);
        memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      }
    }
    break;
    case RISCV_C_FLDSP: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      s0 = "c.fldsp";
      s0_len = 7;
      spc( &s1, &s1_len);
      switch (tree->ast_node.c_fldsp.rd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      hex_bits_6(tree->ast_node.c_fldsp.uimm, &s4, &s4_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      }
    }
    break;
    case RISCV_C_FSDSP: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      s0 = "c.fsdsp";
      s0_len = 7;
      spc( &s1, &s1_len);
      switch (tree->ast_node.c_fsdsp.rs2) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      hex_bits_6(tree->ast_node.c_fsdsp.uimm, &s4, &s4_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      }
    }
    break;
    case RISCV_C_FLD: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      s0 = "c.fld";
      s0_len = 5;
      spc( &s1, &s1_len);
      switch (tree->ast_node.c_fld.rdc) { 
        case 0x7:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
        case 0x5:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x1:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x3:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x2:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x4:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x6:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x0:{
          s2 = "s0";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.c_fld.rsc) { 
        case 0x7:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
        case 0x5:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x1:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x3:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x2:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x4:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x6:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x0:{
          s4 = "s0";
          s4_len = 2;
          break;
        }
      }
      sep( &s5, &s5_len);
      hex_bits_8(tree->ast_node.c_fld.uimm << 3 | 0x0 << 0, &s6, &s6_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
    }
    break;
    case RISCV_C_FSD: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      s0 = "c.fsd";
      s0_len = 5;
      spc( &s1, &s1_len);
      switch (tree->ast_node.c_fsd.rsc1) { 
        case 0x7:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
        case 0x5:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x1:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x3:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x2:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x4:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x6:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x0:{
          s2 = "s0";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.c_fsd.rsc2) { 
        case 0x7:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
        case 0x5:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x1:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x3:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x2:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x4:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x6:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x0:{
          s4 = "s0";
          s4_len = 2;
          break;
        }
      }
      sep( &s5, &s5_len);
      hex_bits_8(tree->ast_node.c_fsd.uimm << 3 | 0x0 << 0, &s6, &s6_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
    }
    break;
    case RISCV_SINVAL_VMA: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      s0 = "sinval.vma";
      s0_len = 10;
      spc( &s1, &s1_len);
      switch (tree->ast_node.sinval_vma.rs1) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.sinval_vma.rs2) { 
        case 0x08:{
          s4 = "fp";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "s5";
          s4_len = 2;
          break;
        }
        case 0x01:{
          s4 = "ra";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "t1";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "a6";
          s4_len = 2;
          break;
        }
        case 0x1B:{
          s4 = "s11";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "t3";
          s4_len = 2;
          break;
        }
        case 0x16:{
          s4 = "s6";
          s4_len = 2;
          break;
        }
        case 0x00:{
          s4 = "zero";
          s4_len = 4;
          break;
        }
        case 0x0A:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x1A:{
          s4 = "s10";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "s7";
          s4_len = 2;
          break;
        }
        case 0x0C:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x18:{
          s4 = "s8";
          s4_len = 2;
          break;
        }
        case 0x02:{
          s4 = "sp";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "t6";
          s4_len = 2;
          break;
        }
        case 0x0B:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x07:{
          s4 = "t2";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "s3";
          s4_len = 2;
          break;
        }
        case 0x04:{
          s4 = "tp";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "s9";
          s4_len = 2;
          break;
        }
        case 0x12:{
          s4 = "s2";
          s4_len = 2;
          break;
        }
        case 0x14:{
          s4 = "s4";
          s4_len = 2;
          break;
        }
        case 0x0E:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x1E:{
          s4 = "t5";
          s4_len = 2;
          break;
        }
        case 0x11:{
          s4 = "a7";
          s4_len = 2;
          break;
        }
        case 0x03:{
          s4 = "gp";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "t0";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "t4";
          s4_len = 2;
          break;
        }
        case 0x0D:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x0F:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      }
    }
    break;
    case RISCV_SFENCE_W_INVAL: {
{
            char *s0; size_t s0_len;
      s0 = "sfence.w.inval";
      s0_len = 14;
      memcpy(buff , s0, s0_len);
      }
    }
    break;
    case RISCV_SFENCE_INVAL_IR: {
{
            char *s0; size_t s0_len;
      s0 = "sfence.inval.ir";
      s0_len = 15;
      memcpy(buff , s0, s0_len);
      }
    }
    break;
    case RISCV_SLLIUW: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      s0 = "slli.uw";
      s0_len = 7;
      spc( &s1, &s1_len);
      switch (tree->ast_node.riscv_slliuw.rd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.riscv_slliuw.rs1) { 
        case 0x08:{
          s4 = "fp";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "s5";
          s4_len = 2;
          break;
        }
        case 0x01:{
          s4 = "ra";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "t1";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "a6";
          s4_len = 2;
          break;
        }
        case 0x1B:{
          s4 = "s11";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "t3";
          s4_len = 2;
          break;
        }
        case 0x16:{
          s4 = "s6";
          s4_len = 2;
          break;
        }
        case 0x00:{
          s4 = "zero";
          s4_len = 4;
          break;
        }
        case 0x0A:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x1A:{
          s4 = "s10";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "s7";
          s4_len = 2;
          break;
        }
        case 0x0C:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x18:{
          s4 = "s8";
          s4_len = 2;
          break;
        }
        case 0x02:{
          s4 = "sp";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "t6";
          s4_len = 2;
          break;
        }
        case 0x0B:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x07:{
          s4 = "t2";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "s3";
          s4_len = 2;
          break;
        }
        case 0x04:{
          s4 = "tp";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "s9";
          s4_len = 2;
          break;
        }
        case 0x12:{
          s4 = "s2";
          s4_len = 2;
          break;
        }
        case 0x14:{
          s4 = "s4";
          s4_len = 2;
          break;
        }
        case 0x0E:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x1E:{
          s4 = "t5";
          s4_len = 2;
          break;
        }
        case 0x11:{
          s4 = "a7";
          s4_len = 2;
          break;
        }
        case 0x03:{
          s4 = "gp";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "t0";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "t4";
          s4_len = 2;
          break;
        }
        case 0x0D:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x0F:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
      }
      sep( &s5, &s5_len);
      hex_bits_6(tree->ast_node.riscv_slliuw.shamt, &s6, &s6_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
    }
    break;
    case RISCV_ZBA_RTYPEUW: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      switch (tree->ast_node.zba_rtypeuw.op) { 
        case RISCV_SH1ADDUW:{
          s0 = "sh1add.uw";
          s0_len = 9;
          break;
        }
        case RISCV_SH2ADDUW:{
          s0 = "sh2add.uw";
          s0_len = 9;
          break;
        }
        case RISCV_ADDUW:{
          s0 = "add.uw";
          s0_len = 6;
          break;
        }
        case RISCV_SH3ADDUW:{
          s0 = "sh3add.uw";
          s0_len = 9;
          break;
        }
      }
      spc( &s1, &s1_len);
      switch (tree->ast_node.zba_rtypeuw.rd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.zba_rtypeuw.rs1) { 
        case 0x08:{
          s4 = "fp";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "s5";
          s4_len = 2;
          break;
        }
        case 0x01:{
          s4 = "ra";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "t1";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "a6";
          s4_len = 2;
          break;
        }
        case 0x1B:{
          s4 = "s11";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "t3";
          s4_len = 2;
          break;
        }
        case 0x16:{
          s4 = "s6";
          s4_len = 2;
          break;
        }
        case 0x00:{
          s4 = "zero";
          s4_len = 4;
          break;
        }
        case 0x0A:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x1A:{
          s4 = "s10";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "s7";
          s4_len = 2;
          break;
        }
        case 0x0C:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x18:{
          s4 = "s8";
          s4_len = 2;
          break;
        }
        case 0x02:{
          s4 = "sp";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "t6";
          s4_len = 2;
          break;
        }
        case 0x0B:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x07:{
          s4 = "t2";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "s3";
          s4_len = 2;
          break;
        }
        case 0x04:{
          s4 = "tp";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "s9";
          s4_len = 2;
          break;
        }
        case 0x12:{
          s4 = "s2";
          s4_len = 2;
          break;
        }
        case 0x14:{
          s4 = "s4";
          s4_len = 2;
          break;
        }
        case 0x0E:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x1E:{
          s4 = "t5";
          s4_len = 2;
          break;
        }
        case 0x11:{
          s4 = "a7";
          s4_len = 2;
          break;
        }
        case 0x03:{
          s4 = "gp";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "t0";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "t4";
          s4_len = 2;
          break;
        }
        case 0x0D:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x0F:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.zba_rtypeuw.rs2) { 
        case 0x08:{
          s6 = "fp";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "s5";
          s6_len = 2;
          break;
        }
        case 0x01:{
          s6 = "ra";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "t1";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "s1";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "a6";
          s6_len = 2;
          break;
        }
        case 0x1B:{
          s6 = "s11";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "t3";
          s6_len = 2;
          break;
        }
        case 0x16:{
          s6 = "s6";
          s6_len = 2;
          break;
        }
        case 0x00:{
          s6 = "zero";
          s6_len = 4;
          break;
        }
        case 0x0A:{
          s6 = "a0";
          s6_len = 2;
          break;
        }
        case 0x1A:{
          s6 = "s10";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "s7";
          s6_len = 2;
          break;
        }
        case 0x0C:{
          s6 = "a2";
          s6_len = 2;
          break;
        }
        case 0x18:{
          s6 = "s8";
          s6_len = 2;
          break;
        }
        case 0x02:{
          s6 = "sp";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "t6";
          s6_len = 2;
          break;
        }
        case 0x0B:{
          s6 = "a1";
          s6_len = 2;
          break;
        }
        case 0x07:{
          s6 = "t2";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "s3";
          s6_len = 2;
          break;
        }
        case 0x04:{
          s6 = "tp";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "s9";
          s6_len = 2;
          break;
        }
        case 0x12:{
          s6 = "s2";
          s6_len = 2;
          break;
        }
        case 0x14:{
          s6 = "s4";
          s6_len = 2;
          break;
        }
        case 0x0E:{
          s6 = "a4";
          s6_len = 2;
          break;
        }
        case 0x1E:{
          s6 = "t5";
          s6_len = 2;
          break;
        }
        case 0x11:{
          s6 = "a7";
          s6_len = 2;
          break;
        }
        case 0x03:{
          s6 = "gp";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "t0";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "t4";
          s6_len = 2;
          break;
        }
        case 0x0D:{
          s6 = "a3";
          s6_len = 2;
          break;
        }
        case 0x0F:{
          s6 = "a5";
          s6_len = 2;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
    }
    break;
    case RISCV_ZBA_RTYPE: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      switch (tree->ast_node.zba_rtype.op) { 
        case RISCV_SH3ADD:{
          s0 = "sh3add";
          s0_len = 6;
          break;
        }
        case RISCV_SH2ADD:{
          s0 = "sh2add";
          s0_len = 6;
          break;
        }
        case RISCV_SH1ADD:{
          s0 = "sh1add";
          s0_len = 6;
          break;
        }
      }
      spc( &s1, &s1_len);
      switch (tree->ast_node.zba_rtype.rd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.zba_rtype.rs1) { 
        case 0x08:{
          s4 = "fp";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "s5";
          s4_len = 2;
          break;
        }
        case 0x01:{
          s4 = "ra";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "t1";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "a6";
          s4_len = 2;
          break;
        }
        case 0x1B:{
          s4 = "s11";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "t3";
          s4_len = 2;
          break;
        }
        case 0x16:{
          s4 = "s6";
          s4_len = 2;
          break;
        }
        case 0x00:{
          s4 = "zero";
          s4_len = 4;
          break;
        }
        case 0x0A:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x1A:{
          s4 = "s10";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "s7";
          s4_len = 2;
          break;
        }
        case 0x0C:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x18:{
          s4 = "s8";
          s4_len = 2;
          break;
        }
        case 0x02:{
          s4 = "sp";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "t6";
          s4_len = 2;
          break;
        }
        case 0x0B:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x07:{
          s4 = "t2";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "s3";
          s4_len = 2;
          break;
        }
        case 0x04:{
          s4 = "tp";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "s9";
          s4_len = 2;
          break;
        }
        case 0x12:{
          s4 = "s2";
          s4_len = 2;
          break;
        }
        case 0x14:{
          s4 = "s4";
          s4_len = 2;
          break;
        }
        case 0x0E:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x1E:{
          s4 = "t5";
          s4_len = 2;
          break;
        }
        case 0x11:{
          s4 = "a7";
          s4_len = 2;
          break;
        }
        case 0x03:{
          s4 = "gp";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "t0";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "t4";
          s4_len = 2;
          break;
        }
        case 0x0D:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x0F:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.zba_rtype.rs2) { 
        case 0x08:{
          s6 = "fp";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "s5";
          s6_len = 2;
          break;
        }
        case 0x01:{
          s6 = "ra";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "t1";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "s1";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "a6";
          s6_len = 2;
          break;
        }
        case 0x1B:{
          s6 = "s11";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "t3";
          s6_len = 2;
          break;
        }
        case 0x16:{
          s6 = "s6";
          s6_len = 2;
          break;
        }
        case 0x00:{
          s6 = "zero";
          s6_len = 4;
          break;
        }
        case 0x0A:{
          s6 = "a0";
          s6_len = 2;
          break;
        }
        case 0x1A:{
          s6 = "s10";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "s7";
          s6_len = 2;
          break;
        }
        case 0x0C:{
          s6 = "a2";
          s6_len = 2;
          break;
        }
        case 0x18:{
          s6 = "s8";
          s6_len = 2;
          break;
        }
        case 0x02:{
          s6 = "sp";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "t6";
          s6_len = 2;
          break;
        }
        case 0x0B:{
          s6 = "a1";
          s6_len = 2;
          break;
        }
        case 0x07:{
          s6 = "t2";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "s3";
          s6_len = 2;
          break;
        }
        case 0x04:{
          s6 = "tp";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "s9";
          s6_len = 2;
          break;
        }
        case 0x12:{
          s6 = "s2";
          s6_len = 2;
          break;
        }
        case 0x14:{
          s6 = "s4";
          s6_len = 2;
          break;
        }
        case 0x0E:{
          s6 = "a4";
          s6_len = 2;
          break;
        }
        case 0x1E:{
          s6 = "t5";
          s6_len = 2;
          break;
        }
        case 0x11:{
          s6 = "a7";
          s6_len = 2;
          break;
        }
        case 0x03:{
          s6 = "gp";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "t0";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "t4";
          s6_len = 2;
          break;
        }
        case 0x0D:{
          s6 = "a3";
          s6_len = 2;
          break;
        }
        case 0x0F:{
          s6 = "a5";
          s6_len = 2;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
    }
    break;
    case RISCV_RORIW: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      s0 = "roriw";
      s0_len = 5;
      spc( &s1, &s1_len);
      switch (tree->ast_node.riscv_roriw.rd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.riscv_roriw.rs1) { 
        case 0x08:{
          s4 = "fp";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "s5";
          s4_len = 2;
          break;
        }
        case 0x01:{
          s4 = "ra";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "t1";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "a6";
          s4_len = 2;
          break;
        }
        case 0x1B:{
          s4 = "s11";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "t3";
          s4_len = 2;
          break;
        }
        case 0x16:{
          s4 = "s6";
          s4_len = 2;
          break;
        }
        case 0x00:{
          s4 = "zero";
          s4_len = 4;
          break;
        }
        case 0x0A:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x1A:{
          s4 = "s10";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "s7";
          s4_len = 2;
          break;
        }
        case 0x0C:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x18:{
          s4 = "s8";
          s4_len = 2;
          break;
        }
        case 0x02:{
          s4 = "sp";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "t6";
          s4_len = 2;
          break;
        }
        case 0x0B:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x07:{
          s4 = "t2";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "s3";
          s4_len = 2;
          break;
        }
        case 0x04:{
          s4 = "tp";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "s9";
          s4_len = 2;
          break;
        }
        case 0x12:{
          s4 = "s2";
          s4_len = 2;
          break;
        }
        case 0x14:{
          s4 = "s4";
          s4_len = 2;
          break;
        }
        case 0x0E:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x1E:{
          s4 = "t5";
          s4_len = 2;
          break;
        }
        case 0x11:{
          s4 = "a7";
          s4_len = 2;
          break;
        }
        case 0x03:{
          s4 = "gp";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "t0";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "t4";
          s4_len = 2;
          break;
        }
        case 0x0D:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x0F:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
      }
      sep( &s5, &s5_len);
      hex_bits_5(tree->ast_node.riscv_roriw.shamt, &s6, &s6_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
    }
    break;
    case RISCV_RORI: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      s0 = "rori";
      s0_len = 4;
      spc( &s1, &s1_len);
      switch (tree->ast_node.riscv_rori.rd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.riscv_rori.rs1) { 
        case 0x08:{
          s4 = "fp";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "s5";
          s4_len = 2;
          break;
        }
        case 0x01:{
          s4 = "ra";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "t1";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "a6";
          s4_len = 2;
          break;
        }
        case 0x1B:{
          s4 = "s11";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "t3";
          s4_len = 2;
          break;
        }
        case 0x16:{
          s4 = "s6";
          s4_len = 2;
          break;
        }
        case 0x00:{
          s4 = "zero";
          s4_len = 4;
          break;
        }
        case 0x0A:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x1A:{
          s4 = "s10";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "s7";
          s4_len = 2;
          break;
        }
        case 0x0C:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x18:{
          s4 = "s8";
          s4_len = 2;
          break;
        }
        case 0x02:{
          s4 = "sp";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "t6";
          s4_len = 2;
          break;
        }
        case 0x0B:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x07:{
          s4 = "t2";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "s3";
          s4_len = 2;
          break;
        }
        case 0x04:{
          s4 = "tp";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "s9";
          s4_len = 2;
          break;
        }
        case 0x12:{
          s4 = "s2";
          s4_len = 2;
          break;
        }
        case 0x14:{
          s4 = "s4";
          s4_len = 2;
          break;
        }
        case 0x0E:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x1E:{
          s4 = "t5";
          s4_len = 2;
          break;
        }
        case 0x11:{
          s4 = "a7";
          s4_len = 2;
          break;
        }
        case 0x03:{
          s4 = "gp";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "t0";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "t4";
          s4_len = 2;
          break;
        }
        case 0x0D:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x0F:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
      }
      sep( &s5, &s5_len);
      hex_bits_6(tree->ast_node.riscv_rori.shamt, &s6, &s6_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
    }
    break;
    case RISCV_ZBB_RTYPEW: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      switch (tree->ast_node.zbb_rtypew.op) { 
        case RISCV_RORW:{
          s0 = "rorw";
          s0_len = 4;
          break;
        }
        case RISCV_ROLW:{
          s0 = "rolw";
          s0_len = 4;
          break;
        }
      }
      spc( &s1, &s1_len);
      switch (tree->ast_node.zbb_rtypew.rd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.zbb_rtypew.rs1) { 
        case 0x08:{
          s4 = "fp";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "s5";
          s4_len = 2;
          break;
        }
        case 0x01:{
          s4 = "ra";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "t1";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "a6";
          s4_len = 2;
          break;
        }
        case 0x1B:{
          s4 = "s11";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "t3";
          s4_len = 2;
          break;
        }
        case 0x16:{
          s4 = "s6";
          s4_len = 2;
          break;
        }
        case 0x00:{
          s4 = "zero";
          s4_len = 4;
          break;
        }
        case 0x0A:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x1A:{
          s4 = "s10";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "s7";
          s4_len = 2;
          break;
        }
        case 0x0C:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x18:{
          s4 = "s8";
          s4_len = 2;
          break;
        }
        case 0x02:{
          s4 = "sp";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "t6";
          s4_len = 2;
          break;
        }
        case 0x0B:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x07:{
          s4 = "t2";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "s3";
          s4_len = 2;
          break;
        }
        case 0x04:{
          s4 = "tp";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "s9";
          s4_len = 2;
          break;
        }
        case 0x12:{
          s4 = "s2";
          s4_len = 2;
          break;
        }
        case 0x14:{
          s4 = "s4";
          s4_len = 2;
          break;
        }
        case 0x0E:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x1E:{
          s4 = "t5";
          s4_len = 2;
          break;
        }
        case 0x11:{
          s4 = "a7";
          s4_len = 2;
          break;
        }
        case 0x03:{
          s4 = "gp";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "t0";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "t4";
          s4_len = 2;
          break;
        }
        case 0x0D:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x0F:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.zbb_rtypew.rs2) { 
        case 0x08:{
          s6 = "fp";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "s5";
          s6_len = 2;
          break;
        }
        case 0x01:{
          s6 = "ra";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "t1";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "s1";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "a6";
          s6_len = 2;
          break;
        }
        case 0x1B:{
          s6 = "s11";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "t3";
          s6_len = 2;
          break;
        }
        case 0x16:{
          s6 = "s6";
          s6_len = 2;
          break;
        }
        case 0x00:{
          s6 = "zero";
          s6_len = 4;
          break;
        }
        case 0x0A:{
          s6 = "a0";
          s6_len = 2;
          break;
        }
        case 0x1A:{
          s6 = "s10";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "s7";
          s6_len = 2;
          break;
        }
        case 0x0C:{
          s6 = "a2";
          s6_len = 2;
          break;
        }
        case 0x18:{
          s6 = "s8";
          s6_len = 2;
          break;
        }
        case 0x02:{
          s6 = "sp";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "t6";
          s6_len = 2;
          break;
        }
        case 0x0B:{
          s6 = "a1";
          s6_len = 2;
          break;
        }
        case 0x07:{
          s6 = "t2";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "s3";
          s6_len = 2;
          break;
        }
        case 0x04:{
          s6 = "tp";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "s9";
          s6_len = 2;
          break;
        }
        case 0x12:{
          s6 = "s2";
          s6_len = 2;
          break;
        }
        case 0x14:{
          s6 = "s4";
          s6_len = 2;
          break;
        }
        case 0x0E:{
          s6 = "a4";
          s6_len = 2;
          break;
        }
        case 0x1E:{
          s6 = "t5";
          s6_len = 2;
          break;
        }
        case 0x11:{
          s6 = "a7";
          s6_len = 2;
          break;
        }
        case 0x03:{
          s6 = "gp";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "t0";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "t4";
          s6_len = 2;
          break;
        }
        case 0x0D:{
          s6 = "a3";
          s6_len = 2;
          break;
        }
        case 0x0F:{
          s6 = "a5";
          s6_len = 2;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
    }
    break;
    case RISCV_ZBB_RTYPE: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      switch (tree->ast_node.zbb_rtype.op) { 
        case RISCV_ROR:{
          s0 = "ror";
          s0_len = 3;
          break;
        }
        case RISCV_MAXU:{
          s0 = "maxu";
          s0_len = 4;
          break;
        }
        case RISCV_MIN:{
          s0 = "min";
          s0_len = 3;
          break;
        }
        case RISCV_MAX:{
          s0 = "max";
          s0_len = 3;
          break;
        }
        case RISCV_ANDN:{
          s0 = "andn";
          s0_len = 4;
          break;
        }
        case RISCV_ORN:{
          s0 = "orn";
          s0_len = 3;
          break;
        }
        case RISCV_XNOR:{
          s0 = "xnor";
          s0_len = 4;
          break;
        }
        case RISCV_MINU:{
          s0 = "minu";
          s0_len = 4;
          break;
        }
        case RISCV_ROL:{
          s0 = "rol";
          s0_len = 3;
          break;
        }
      }
      spc( &s1, &s1_len);
      switch (tree->ast_node.zbb_rtype.rd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.zbb_rtype.rs1) { 
        case 0x08:{
          s4 = "fp";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "s5";
          s4_len = 2;
          break;
        }
        case 0x01:{
          s4 = "ra";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "t1";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "a6";
          s4_len = 2;
          break;
        }
        case 0x1B:{
          s4 = "s11";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "t3";
          s4_len = 2;
          break;
        }
        case 0x16:{
          s4 = "s6";
          s4_len = 2;
          break;
        }
        case 0x00:{
          s4 = "zero";
          s4_len = 4;
          break;
        }
        case 0x0A:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x1A:{
          s4 = "s10";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "s7";
          s4_len = 2;
          break;
        }
        case 0x0C:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x18:{
          s4 = "s8";
          s4_len = 2;
          break;
        }
        case 0x02:{
          s4 = "sp";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "t6";
          s4_len = 2;
          break;
        }
        case 0x0B:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x07:{
          s4 = "t2";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "s3";
          s4_len = 2;
          break;
        }
        case 0x04:{
          s4 = "tp";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "s9";
          s4_len = 2;
          break;
        }
        case 0x12:{
          s4 = "s2";
          s4_len = 2;
          break;
        }
        case 0x14:{
          s4 = "s4";
          s4_len = 2;
          break;
        }
        case 0x0E:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x1E:{
          s4 = "t5";
          s4_len = 2;
          break;
        }
        case 0x11:{
          s4 = "a7";
          s4_len = 2;
          break;
        }
        case 0x03:{
          s4 = "gp";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "t0";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "t4";
          s4_len = 2;
          break;
        }
        case 0x0D:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x0F:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.zbb_rtype.rs2) { 
        case 0x08:{
          s6 = "fp";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "s5";
          s6_len = 2;
          break;
        }
        case 0x01:{
          s6 = "ra";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "t1";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "s1";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "a6";
          s6_len = 2;
          break;
        }
        case 0x1B:{
          s6 = "s11";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "t3";
          s6_len = 2;
          break;
        }
        case 0x16:{
          s6 = "s6";
          s6_len = 2;
          break;
        }
        case 0x00:{
          s6 = "zero";
          s6_len = 4;
          break;
        }
        case 0x0A:{
          s6 = "a0";
          s6_len = 2;
          break;
        }
        case 0x1A:{
          s6 = "s10";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "s7";
          s6_len = 2;
          break;
        }
        case 0x0C:{
          s6 = "a2";
          s6_len = 2;
          break;
        }
        case 0x18:{
          s6 = "s8";
          s6_len = 2;
          break;
        }
        case 0x02:{
          s6 = "sp";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "t6";
          s6_len = 2;
          break;
        }
        case 0x0B:{
          s6 = "a1";
          s6_len = 2;
          break;
        }
        case 0x07:{
          s6 = "t2";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "s3";
          s6_len = 2;
          break;
        }
        case 0x04:{
          s6 = "tp";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "s9";
          s6_len = 2;
          break;
        }
        case 0x12:{
          s6 = "s2";
          s6_len = 2;
          break;
        }
        case 0x14:{
          s6 = "s4";
          s6_len = 2;
          break;
        }
        case 0x0E:{
          s6 = "a4";
          s6_len = 2;
          break;
        }
        case 0x1E:{
          s6 = "t5";
          s6_len = 2;
          break;
        }
        case 0x11:{
          s6 = "a7";
          s6_len = 2;
          break;
        }
        case 0x03:{
          s6 = "gp";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "t0";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "t4";
          s6_len = 2;
          break;
        }
        case 0x0D:{
          s6 = "a3";
          s6_len = 2;
          break;
        }
        case 0x0F:{
          s6 = "a5";
          s6_len = 2;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
    }
    break;
    case RISCV_ZBB_EXTOP: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      switch (tree->ast_node.zbb_extop.op) { 
        case RISCV_SEXTH:{
          s0 = "sext.h";
          s0_len = 6;
          break;
        }
        case RISCV_ZEXTH:{
          s0 = "zext.h";
          s0_len = 6;
          break;
        }
        case RISCV_SEXTB:{
          s0 = "sext.b";
          s0_len = 6;
          break;
        }
      }
      spc( &s1, &s1_len);
      switch (tree->ast_node.zbb_extop.rd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.zbb_extop.rs1) { 
        case 0x08:{
          s4 = "fp";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "s5";
          s4_len = 2;
          break;
        }
        case 0x01:{
          s4 = "ra";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "t1";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "a6";
          s4_len = 2;
          break;
        }
        case 0x1B:{
          s4 = "s11";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "t3";
          s4_len = 2;
          break;
        }
        case 0x16:{
          s4 = "s6";
          s4_len = 2;
          break;
        }
        case 0x00:{
          s4 = "zero";
          s4_len = 4;
          break;
        }
        case 0x0A:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x1A:{
          s4 = "s10";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "s7";
          s4_len = 2;
          break;
        }
        case 0x0C:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x18:{
          s4 = "s8";
          s4_len = 2;
          break;
        }
        case 0x02:{
          s4 = "sp";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "t6";
          s4_len = 2;
          break;
        }
        case 0x0B:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x07:{
          s4 = "t2";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "s3";
          s4_len = 2;
          break;
        }
        case 0x04:{
          s4 = "tp";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "s9";
          s4_len = 2;
          break;
        }
        case 0x12:{
          s4 = "s2";
          s4_len = 2;
          break;
        }
        case 0x14:{
          s4 = "s4";
          s4_len = 2;
          break;
        }
        case 0x0E:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x1E:{
          s4 = "t5";
          s4_len = 2;
          break;
        }
        case 0x11:{
          s4 = "a7";
          s4_len = 2;
          break;
        }
        case 0x03:{
          s4 = "gp";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "t0";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "t4";
          s4_len = 2;
          break;
        }
        case 0x0D:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x0F:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      }
    }
    break;
    case RISCV_REV8: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      s0 = "rev8";
      s0_len = 4;
      spc( &s1, &s1_len);
      switch (tree->ast_node.riscv_rev8.rd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.riscv_rev8.rs1) { 
        case 0x08:{
          s4 = "fp";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "s5";
          s4_len = 2;
          break;
        }
        case 0x01:{
          s4 = "ra";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "t1";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "a6";
          s4_len = 2;
          break;
        }
        case 0x1B:{
          s4 = "s11";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "t3";
          s4_len = 2;
          break;
        }
        case 0x16:{
          s4 = "s6";
          s4_len = 2;
          break;
        }
        case 0x00:{
          s4 = "zero";
          s4_len = 4;
          break;
        }
        case 0x0A:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x1A:{
          s4 = "s10";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "s7";
          s4_len = 2;
          break;
        }
        case 0x0C:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x18:{
          s4 = "s8";
          s4_len = 2;
          break;
        }
        case 0x02:{
          s4 = "sp";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "t6";
          s4_len = 2;
          break;
        }
        case 0x0B:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x07:{
          s4 = "t2";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "s3";
          s4_len = 2;
          break;
        }
        case 0x04:{
          s4 = "tp";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "s9";
          s4_len = 2;
          break;
        }
        case 0x12:{
          s4 = "s2";
          s4_len = 2;
          break;
        }
        case 0x14:{
          s4 = "s4";
          s4_len = 2;
          break;
        }
        case 0x0E:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x1E:{
          s4 = "t5";
          s4_len = 2;
          break;
        }
        case 0x11:{
          s4 = "a7";
          s4_len = 2;
          break;
        }
        case 0x03:{
          s4 = "gp";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "t0";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "t4";
          s4_len = 2;
          break;
        }
        case 0x0D:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x0F:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      }
    }
    break;
    case RISCV_ORCB: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      s0 = "orc.b";
      s0_len = 5;
      spc( &s1, &s1_len);
      switch (tree->ast_node.riscv_orcb.rd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.riscv_orcb.rs1) { 
        case 0x08:{
          s4 = "fp";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "s5";
          s4_len = 2;
          break;
        }
        case 0x01:{
          s4 = "ra";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "t1";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "a6";
          s4_len = 2;
          break;
        }
        case 0x1B:{
          s4 = "s11";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "t3";
          s4_len = 2;
          break;
        }
        case 0x16:{
          s4 = "s6";
          s4_len = 2;
          break;
        }
        case 0x00:{
          s4 = "zero";
          s4_len = 4;
          break;
        }
        case 0x0A:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x1A:{
          s4 = "s10";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "s7";
          s4_len = 2;
          break;
        }
        case 0x0C:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x18:{
          s4 = "s8";
          s4_len = 2;
          break;
        }
        case 0x02:{
          s4 = "sp";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "t6";
          s4_len = 2;
          break;
        }
        case 0x0B:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x07:{
          s4 = "t2";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "s3";
          s4_len = 2;
          break;
        }
        case 0x04:{
          s4 = "tp";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "s9";
          s4_len = 2;
          break;
        }
        case 0x12:{
          s4 = "s2";
          s4_len = 2;
          break;
        }
        case 0x14:{
          s4 = "s4";
          s4_len = 2;
          break;
        }
        case 0x0E:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x1E:{
          s4 = "t5";
          s4_len = 2;
          break;
        }
        case 0x11:{
          s4 = "a7";
          s4_len = 2;
          break;
        }
        case 0x03:{
          s4 = "gp";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "t0";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "t4";
          s4_len = 2;
          break;
        }
        case 0x0D:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x0F:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      }
    }
    break;
    case RISCV_CPOP: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      s0 = "cpop";
      s0_len = 4;
      spc( &s1, &s1_len);
      switch (tree->ast_node.riscv_cpop.rd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.riscv_cpop.rs1) { 
        case 0x08:{
          s4 = "fp";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "s5";
          s4_len = 2;
          break;
        }
        case 0x01:{
          s4 = "ra";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "t1";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "a6";
          s4_len = 2;
          break;
        }
        case 0x1B:{
          s4 = "s11";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "t3";
          s4_len = 2;
          break;
        }
        case 0x16:{
          s4 = "s6";
          s4_len = 2;
          break;
        }
        case 0x00:{
          s4 = "zero";
          s4_len = 4;
          break;
        }
        case 0x0A:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x1A:{
          s4 = "s10";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "s7";
          s4_len = 2;
          break;
        }
        case 0x0C:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x18:{
          s4 = "s8";
          s4_len = 2;
          break;
        }
        case 0x02:{
          s4 = "sp";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "t6";
          s4_len = 2;
          break;
        }
        case 0x0B:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x07:{
          s4 = "t2";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "s3";
          s4_len = 2;
          break;
        }
        case 0x04:{
          s4 = "tp";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "s9";
          s4_len = 2;
          break;
        }
        case 0x12:{
          s4 = "s2";
          s4_len = 2;
          break;
        }
        case 0x14:{
          s4 = "s4";
          s4_len = 2;
          break;
        }
        case 0x0E:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x1E:{
          s4 = "t5";
          s4_len = 2;
          break;
        }
        case 0x11:{
          s4 = "a7";
          s4_len = 2;
          break;
        }
        case 0x03:{
          s4 = "gp";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "t0";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "t4";
          s4_len = 2;
          break;
        }
        case 0x0D:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x0F:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      }
    }
    break;
    case RISCV_CPOPW: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      s0 = "cpopw";
      s0_len = 5;
      spc( &s1, &s1_len);
      switch (tree->ast_node.riscv_cpopw.rd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.riscv_cpopw.rs1) { 
        case 0x08:{
          s4 = "fp";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "s5";
          s4_len = 2;
          break;
        }
        case 0x01:{
          s4 = "ra";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "t1";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "a6";
          s4_len = 2;
          break;
        }
        case 0x1B:{
          s4 = "s11";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "t3";
          s4_len = 2;
          break;
        }
        case 0x16:{
          s4 = "s6";
          s4_len = 2;
          break;
        }
        case 0x00:{
          s4 = "zero";
          s4_len = 4;
          break;
        }
        case 0x0A:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x1A:{
          s4 = "s10";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "s7";
          s4_len = 2;
          break;
        }
        case 0x0C:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x18:{
          s4 = "s8";
          s4_len = 2;
          break;
        }
        case 0x02:{
          s4 = "sp";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "t6";
          s4_len = 2;
          break;
        }
        case 0x0B:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x07:{
          s4 = "t2";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "s3";
          s4_len = 2;
          break;
        }
        case 0x04:{
          s4 = "tp";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "s9";
          s4_len = 2;
          break;
        }
        case 0x12:{
          s4 = "s2";
          s4_len = 2;
          break;
        }
        case 0x14:{
          s4 = "s4";
          s4_len = 2;
          break;
        }
        case 0x0E:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x1E:{
          s4 = "t5";
          s4_len = 2;
          break;
        }
        case 0x11:{
          s4 = "a7";
          s4_len = 2;
          break;
        }
        case 0x03:{
          s4 = "gp";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "t0";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "t4";
          s4_len = 2;
          break;
        }
        case 0x0D:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x0F:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      }
    }
    break;
    case RISCV_CLZ: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      s0 = "clz";
      s0_len = 3;
      spc( &s1, &s1_len);
      switch (tree->ast_node.riscv_clz.rd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.riscv_clz.rs1) { 
        case 0x08:{
          s4 = "fp";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "s5";
          s4_len = 2;
          break;
        }
        case 0x01:{
          s4 = "ra";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "t1";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "a6";
          s4_len = 2;
          break;
        }
        case 0x1B:{
          s4 = "s11";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "t3";
          s4_len = 2;
          break;
        }
        case 0x16:{
          s4 = "s6";
          s4_len = 2;
          break;
        }
        case 0x00:{
          s4 = "zero";
          s4_len = 4;
          break;
        }
        case 0x0A:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x1A:{
          s4 = "s10";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "s7";
          s4_len = 2;
          break;
        }
        case 0x0C:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x18:{
          s4 = "s8";
          s4_len = 2;
          break;
        }
        case 0x02:{
          s4 = "sp";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "t6";
          s4_len = 2;
          break;
        }
        case 0x0B:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x07:{
          s4 = "t2";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "s3";
          s4_len = 2;
          break;
        }
        case 0x04:{
          s4 = "tp";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "s9";
          s4_len = 2;
          break;
        }
        case 0x12:{
          s4 = "s2";
          s4_len = 2;
          break;
        }
        case 0x14:{
          s4 = "s4";
          s4_len = 2;
          break;
        }
        case 0x0E:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x1E:{
          s4 = "t5";
          s4_len = 2;
          break;
        }
        case 0x11:{
          s4 = "a7";
          s4_len = 2;
          break;
        }
        case 0x03:{
          s4 = "gp";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "t0";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "t4";
          s4_len = 2;
          break;
        }
        case 0x0D:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x0F:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      }
    }
    break;
    case RISCV_CLZW: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      s0 = "clzw";
      s0_len = 4;
      spc( &s1, &s1_len);
      switch (tree->ast_node.riscv_clzw.rd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.riscv_clzw.rs1) { 
        case 0x08:{
          s4 = "fp";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "s5";
          s4_len = 2;
          break;
        }
        case 0x01:{
          s4 = "ra";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "t1";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "a6";
          s4_len = 2;
          break;
        }
        case 0x1B:{
          s4 = "s11";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "t3";
          s4_len = 2;
          break;
        }
        case 0x16:{
          s4 = "s6";
          s4_len = 2;
          break;
        }
        case 0x00:{
          s4 = "zero";
          s4_len = 4;
          break;
        }
        case 0x0A:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x1A:{
          s4 = "s10";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "s7";
          s4_len = 2;
          break;
        }
        case 0x0C:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x18:{
          s4 = "s8";
          s4_len = 2;
          break;
        }
        case 0x02:{
          s4 = "sp";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "t6";
          s4_len = 2;
          break;
        }
        case 0x0B:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x07:{
          s4 = "t2";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "s3";
          s4_len = 2;
          break;
        }
        case 0x04:{
          s4 = "tp";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "s9";
          s4_len = 2;
          break;
        }
        case 0x12:{
          s4 = "s2";
          s4_len = 2;
          break;
        }
        case 0x14:{
          s4 = "s4";
          s4_len = 2;
          break;
        }
        case 0x0E:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x1E:{
          s4 = "t5";
          s4_len = 2;
          break;
        }
        case 0x11:{
          s4 = "a7";
          s4_len = 2;
          break;
        }
        case 0x03:{
          s4 = "gp";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "t0";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "t4";
          s4_len = 2;
          break;
        }
        case 0x0D:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x0F:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      }
    }
    break;
    case RISCV_CTZ: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      s0 = "ctz";
      s0_len = 3;
      spc( &s1, &s1_len);
      switch (tree->ast_node.riscv_ctz.rd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.riscv_ctz.rs1) { 
        case 0x08:{
          s4 = "fp";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "s5";
          s4_len = 2;
          break;
        }
        case 0x01:{
          s4 = "ra";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "t1";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "a6";
          s4_len = 2;
          break;
        }
        case 0x1B:{
          s4 = "s11";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "t3";
          s4_len = 2;
          break;
        }
        case 0x16:{
          s4 = "s6";
          s4_len = 2;
          break;
        }
        case 0x00:{
          s4 = "zero";
          s4_len = 4;
          break;
        }
        case 0x0A:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x1A:{
          s4 = "s10";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "s7";
          s4_len = 2;
          break;
        }
        case 0x0C:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x18:{
          s4 = "s8";
          s4_len = 2;
          break;
        }
        case 0x02:{
          s4 = "sp";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "t6";
          s4_len = 2;
          break;
        }
        case 0x0B:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x07:{
          s4 = "t2";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "s3";
          s4_len = 2;
          break;
        }
        case 0x04:{
          s4 = "tp";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "s9";
          s4_len = 2;
          break;
        }
        case 0x12:{
          s4 = "s2";
          s4_len = 2;
          break;
        }
        case 0x14:{
          s4 = "s4";
          s4_len = 2;
          break;
        }
        case 0x0E:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x1E:{
          s4 = "t5";
          s4_len = 2;
          break;
        }
        case 0x11:{
          s4 = "a7";
          s4_len = 2;
          break;
        }
        case 0x03:{
          s4 = "gp";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "t0";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "t4";
          s4_len = 2;
          break;
        }
        case 0x0D:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x0F:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      }
    }
    break;
    case RISCV_CTZW: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      s0 = "ctzw";
      s0_len = 4;
      spc( &s1, &s1_len);
      switch (tree->ast_node.riscv_ctzw.rd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.riscv_ctzw.rs1) { 
        case 0x08:{
          s4 = "fp";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "s5";
          s4_len = 2;
          break;
        }
        case 0x01:{
          s4 = "ra";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "t1";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "a6";
          s4_len = 2;
          break;
        }
        case 0x1B:{
          s4 = "s11";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "t3";
          s4_len = 2;
          break;
        }
        case 0x16:{
          s4 = "s6";
          s4_len = 2;
          break;
        }
        case 0x00:{
          s4 = "zero";
          s4_len = 4;
          break;
        }
        case 0x0A:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x1A:{
          s4 = "s10";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "s7";
          s4_len = 2;
          break;
        }
        case 0x0C:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x18:{
          s4 = "s8";
          s4_len = 2;
          break;
        }
        case 0x02:{
          s4 = "sp";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "t6";
          s4_len = 2;
          break;
        }
        case 0x0B:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x07:{
          s4 = "t2";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "s3";
          s4_len = 2;
          break;
        }
        case 0x04:{
          s4 = "tp";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "s9";
          s4_len = 2;
          break;
        }
        case 0x12:{
          s4 = "s2";
          s4_len = 2;
          break;
        }
        case 0x14:{
          s4 = "s4";
          s4_len = 2;
          break;
        }
        case 0x0E:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x1E:{
          s4 = "t5";
          s4_len = 2;
          break;
        }
        case 0x11:{
          s4 = "a7";
          s4_len = 2;
          break;
        }
        case 0x03:{
          s4 = "gp";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "t0";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "t4";
          s4_len = 2;
          break;
        }
        case 0x0D:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x0F:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      }
    }
    break;
    case RISCV_CLMUL: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      s0 = "clmul";
      s0_len = 5;
      spc( &s1, &s1_len);
      switch (tree->ast_node.riscv_clmul.rd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.riscv_clmul.rs1) { 
        case 0x08:{
          s4 = "fp";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "s5";
          s4_len = 2;
          break;
        }
        case 0x01:{
          s4 = "ra";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "t1";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "a6";
          s4_len = 2;
          break;
        }
        case 0x1B:{
          s4 = "s11";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "t3";
          s4_len = 2;
          break;
        }
        case 0x16:{
          s4 = "s6";
          s4_len = 2;
          break;
        }
        case 0x00:{
          s4 = "zero";
          s4_len = 4;
          break;
        }
        case 0x0A:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x1A:{
          s4 = "s10";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "s7";
          s4_len = 2;
          break;
        }
        case 0x0C:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x18:{
          s4 = "s8";
          s4_len = 2;
          break;
        }
        case 0x02:{
          s4 = "sp";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "t6";
          s4_len = 2;
          break;
        }
        case 0x0B:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x07:{
          s4 = "t2";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "s3";
          s4_len = 2;
          break;
        }
        case 0x04:{
          s4 = "tp";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "s9";
          s4_len = 2;
          break;
        }
        case 0x12:{
          s4 = "s2";
          s4_len = 2;
          break;
        }
        case 0x14:{
          s4 = "s4";
          s4_len = 2;
          break;
        }
        case 0x0E:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x1E:{
          s4 = "t5";
          s4_len = 2;
          break;
        }
        case 0x11:{
          s4 = "a7";
          s4_len = 2;
          break;
        }
        case 0x03:{
          s4 = "gp";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "t0";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "t4";
          s4_len = 2;
          break;
        }
        case 0x0D:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x0F:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.riscv_clmul.rs2) { 
        case 0x08:{
          s6 = "fp";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "s5";
          s6_len = 2;
          break;
        }
        case 0x01:{
          s6 = "ra";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "t1";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "s1";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "a6";
          s6_len = 2;
          break;
        }
        case 0x1B:{
          s6 = "s11";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "t3";
          s6_len = 2;
          break;
        }
        case 0x16:{
          s6 = "s6";
          s6_len = 2;
          break;
        }
        case 0x00:{
          s6 = "zero";
          s6_len = 4;
          break;
        }
        case 0x0A:{
          s6 = "a0";
          s6_len = 2;
          break;
        }
        case 0x1A:{
          s6 = "s10";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "s7";
          s6_len = 2;
          break;
        }
        case 0x0C:{
          s6 = "a2";
          s6_len = 2;
          break;
        }
        case 0x18:{
          s6 = "s8";
          s6_len = 2;
          break;
        }
        case 0x02:{
          s6 = "sp";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "t6";
          s6_len = 2;
          break;
        }
        case 0x0B:{
          s6 = "a1";
          s6_len = 2;
          break;
        }
        case 0x07:{
          s6 = "t2";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "s3";
          s6_len = 2;
          break;
        }
        case 0x04:{
          s6 = "tp";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "s9";
          s6_len = 2;
          break;
        }
        case 0x12:{
          s6 = "s2";
          s6_len = 2;
          break;
        }
        case 0x14:{
          s6 = "s4";
          s6_len = 2;
          break;
        }
        case 0x0E:{
          s6 = "a4";
          s6_len = 2;
          break;
        }
        case 0x1E:{
          s6 = "t5";
          s6_len = 2;
          break;
        }
        case 0x11:{
          s6 = "a7";
          s6_len = 2;
          break;
        }
        case 0x03:{
          s6 = "gp";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "t0";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "t4";
          s6_len = 2;
          break;
        }
        case 0x0D:{
          s6 = "a3";
          s6_len = 2;
          break;
        }
        case 0x0F:{
          s6 = "a5";
          s6_len = 2;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
    }
    break;
    case RISCV_CLMULH: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      s0 = "clmulh";
      s0_len = 6;
      spc( &s1, &s1_len);
      switch (tree->ast_node.riscv_clmulh.rd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.riscv_clmulh.rs1) { 
        case 0x08:{
          s4 = "fp";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "s5";
          s4_len = 2;
          break;
        }
        case 0x01:{
          s4 = "ra";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "t1";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "a6";
          s4_len = 2;
          break;
        }
        case 0x1B:{
          s4 = "s11";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "t3";
          s4_len = 2;
          break;
        }
        case 0x16:{
          s4 = "s6";
          s4_len = 2;
          break;
        }
        case 0x00:{
          s4 = "zero";
          s4_len = 4;
          break;
        }
        case 0x0A:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x1A:{
          s4 = "s10";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "s7";
          s4_len = 2;
          break;
        }
        case 0x0C:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x18:{
          s4 = "s8";
          s4_len = 2;
          break;
        }
        case 0x02:{
          s4 = "sp";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "t6";
          s4_len = 2;
          break;
        }
        case 0x0B:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x07:{
          s4 = "t2";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "s3";
          s4_len = 2;
          break;
        }
        case 0x04:{
          s4 = "tp";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "s9";
          s4_len = 2;
          break;
        }
        case 0x12:{
          s4 = "s2";
          s4_len = 2;
          break;
        }
        case 0x14:{
          s4 = "s4";
          s4_len = 2;
          break;
        }
        case 0x0E:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x1E:{
          s4 = "t5";
          s4_len = 2;
          break;
        }
        case 0x11:{
          s4 = "a7";
          s4_len = 2;
          break;
        }
        case 0x03:{
          s4 = "gp";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "t0";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "t4";
          s4_len = 2;
          break;
        }
        case 0x0D:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x0F:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.riscv_clmulh.rs2) { 
        case 0x08:{
          s6 = "fp";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "s5";
          s6_len = 2;
          break;
        }
        case 0x01:{
          s6 = "ra";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "t1";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "s1";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "a6";
          s6_len = 2;
          break;
        }
        case 0x1B:{
          s6 = "s11";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "t3";
          s6_len = 2;
          break;
        }
        case 0x16:{
          s6 = "s6";
          s6_len = 2;
          break;
        }
        case 0x00:{
          s6 = "zero";
          s6_len = 4;
          break;
        }
        case 0x0A:{
          s6 = "a0";
          s6_len = 2;
          break;
        }
        case 0x1A:{
          s6 = "s10";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "s7";
          s6_len = 2;
          break;
        }
        case 0x0C:{
          s6 = "a2";
          s6_len = 2;
          break;
        }
        case 0x18:{
          s6 = "s8";
          s6_len = 2;
          break;
        }
        case 0x02:{
          s6 = "sp";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "t6";
          s6_len = 2;
          break;
        }
        case 0x0B:{
          s6 = "a1";
          s6_len = 2;
          break;
        }
        case 0x07:{
          s6 = "t2";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "s3";
          s6_len = 2;
          break;
        }
        case 0x04:{
          s6 = "tp";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "s9";
          s6_len = 2;
          break;
        }
        case 0x12:{
          s6 = "s2";
          s6_len = 2;
          break;
        }
        case 0x14:{
          s6 = "s4";
          s6_len = 2;
          break;
        }
        case 0x0E:{
          s6 = "a4";
          s6_len = 2;
          break;
        }
        case 0x1E:{
          s6 = "t5";
          s6_len = 2;
          break;
        }
        case 0x11:{
          s6 = "a7";
          s6_len = 2;
          break;
        }
        case 0x03:{
          s6 = "gp";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "t0";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "t4";
          s6_len = 2;
          break;
        }
        case 0x0D:{
          s6 = "a3";
          s6_len = 2;
          break;
        }
        case 0x0F:{
          s6 = "a5";
          s6_len = 2;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
    }
    break;
    case RISCV_CLMULR: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      s0 = "clmulr";
      s0_len = 6;
      spc( &s1, &s1_len);
      switch (tree->ast_node.riscv_clmulr.rd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.riscv_clmulr.rs1) { 
        case 0x08:{
          s4 = "fp";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "s5";
          s4_len = 2;
          break;
        }
        case 0x01:{
          s4 = "ra";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "t1";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "a6";
          s4_len = 2;
          break;
        }
        case 0x1B:{
          s4 = "s11";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "t3";
          s4_len = 2;
          break;
        }
        case 0x16:{
          s4 = "s6";
          s4_len = 2;
          break;
        }
        case 0x00:{
          s4 = "zero";
          s4_len = 4;
          break;
        }
        case 0x0A:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x1A:{
          s4 = "s10";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "s7";
          s4_len = 2;
          break;
        }
        case 0x0C:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x18:{
          s4 = "s8";
          s4_len = 2;
          break;
        }
        case 0x02:{
          s4 = "sp";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "t6";
          s4_len = 2;
          break;
        }
        case 0x0B:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x07:{
          s4 = "t2";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "s3";
          s4_len = 2;
          break;
        }
        case 0x04:{
          s4 = "tp";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "s9";
          s4_len = 2;
          break;
        }
        case 0x12:{
          s4 = "s2";
          s4_len = 2;
          break;
        }
        case 0x14:{
          s4 = "s4";
          s4_len = 2;
          break;
        }
        case 0x0E:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x1E:{
          s4 = "t5";
          s4_len = 2;
          break;
        }
        case 0x11:{
          s4 = "a7";
          s4_len = 2;
          break;
        }
        case 0x03:{
          s4 = "gp";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "t0";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "t4";
          s4_len = 2;
          break;
        }
        case 0x0D:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x0F:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.riscv_clmulr.rs2) { 
        case 0x08:{
          s6 = "fp";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "s5";
          s6_len = 2;
          break;
        }
        case 0x01:{
          s6 = "ra";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "t1";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "s1";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "a6";
          s6_len = 2;
          break;
        }
        case 0x1B:{
          s6 = "s11";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "t3";
          s6_len = 2;
          break;
        }
        case 0x16:{
          s6 = "s6";
          s6_len = 2;
          break;
        }
        case 0x00:{
          s6 = "zero";
          s6_len = 4;
          break;
        }
        case 0x0A:{
          s6 = "a0";
          s6_len = 2;
          break;
        }
        case 0x1A:{
          s6 = "s10";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "s7";
          s6_len = 2;
          break;
        }
        case 0x0C:{
          s6 = "a2";
          s6_len = 2;
          break;
        }
        case 0x18:{
          s6 = "s8";
          s6_len = 2;
          break;
        }
        case 0x02:{
          s6 = "sp";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "t6";
          s6_len = 2;
          break;
        }
        case 0x0B:{
          s6 = "a1";
          s6_len = 2;
          break;
        }
        case 0x07:{
          s6 = "t2";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "s3";
          s6_len = 2;
          break;
        }
        case 0x04:{
          s6 = "tp";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "s9";
          s6_len = 2;
          break;
        }
        case 0x12:{
          s6 = "s2";
          s6_len = 2;
          break;
        }
        case 0x14:{
          s6 = "s4";
          s6_len = 2;
          break;
        }
        case 0x0E:{
          s6 = "a4";
          s6_len = 2;
          break;
        }
        case 0x1E:{
          s6 = "t5";
          s6_len = 2;
          break;
        }
        case 0x11:{
          s6 = "a7";
          s6_len = 2;
          break;
        }
        case 0x03:{
          s6 = "gp";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "t0";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "t4";
          s6_len = 2;
          break;
        }
        case 0x0D:{
          s6 = "a3";
          s6_len = 2;
          break;
        }
        case 0x0F:{
          s6 = "a5";
          s6_len = 2;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
    }
    break;
    case RISCV_ZBS_IOP: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      switch (tree->ast_node.zbs_iop.op) { 
        case RISCV_BCLRI:{
          s0 = "bclri";
          s0_len = 5;
          break;
        }
        case RISCV_BINVI:{
          s0 = "binvi";
          s0_len = 5;
          break;
        }
        case RISCV_BSETI:{
          s0 = "bseti";
          s0_len = 5;
          break;
        }
        case RISCV_BEXTI:{
          s0 = "bexti";
          s0_len = 5;
          break;
        }
      }
      spc( &s1, &s1_len);
      switch (tree->ast_node.zbs_iop.rd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.zbs_iop.rs1) { 
        case 0x08:{
          s4 = "fp";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "s5";
          s4_len = 2;
          break;
        }
        case 0x01:{
          s4 = "ra";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "t1";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "a6";
          s4_len = 2;
          break;
        }
        case 0x1B:{
          s4 = "s11";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "t3";
          s4_len = 2;
          break;
        }
        case 0x16:{
          s4 = "s6";
          s4_len = 2;
          break;
        }
        case 0x00:{
          s4 = "zero";
          s4_len = 4;
          break;
        }
        case 0x0A:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x1A:{
          s4 = "s10";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "s7";
          s4_len = 2;
          break;
        }
        case 0x0C:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x18:{
          s4 = "s8";
          s4_len = 2;
          break;
        }
        case 0x02:{
          s4 = "sp";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "t6";
          s4_len = 2;
          break;
        }
        case 0x0B:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x07:{
          s4 = "t2";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "s3";
          s4_len = 2;
          break;
        }
        case 0x04:{
          s4 = "tp";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "s9";
          s4_len = 2;
          break;
        }
        case 0x12:{
          s4 = "s2";
          s4_len = 2;
          break;
        }
        case 0x14:{
          s4 = "s4";
          s4_len = 2;
          break;
        }
        case 0x0E:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x1E:{
          s4 = "t5";
          s4_len = 2;
          break;
        }
        case 0x11:{
          s4 = "a7";
          s4_len = 2;
          break;
        }
        case 0x03:{
          s4 = "gp";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "t0";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "t4";
          s4_len = 2;
          break;
        }
        case 0x0D:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x0F:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
      }
      sep( &s5, &s5_len);
      hex_bits_6(tree->ast_node.zbs_iop.shamt, &s6, &s6_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
    }
    break;
    case RISCV_ZBS_RTYPE: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      switch (tree->ast_node.zbs_rtype.op) { 
        case RISCV_BEXT:{
          s0 = "bext";
          s0_len = 4;
          break;
        }
        case RISCV_BINV:{
          s0 = "binv";
          s0_len = 4;
          break;
        }
        case RISCV_BSET:{
          s0 = "bset";
          s0_len = 4;
          break;
        }
        case RISCV_BCLR:{
          s0 = "bclr";
          s0_len = 4;
          break;
        }
      }
      spc( &s1, &s1_len);
      switch (tree->ast_node.zbs_rtype.rd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.zbs_rtype.rs1) { 
        case 0x08:{
          s4 = "fp";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "s5";
          s4_len = 2;
          break;
        }
        case 0x01:{
          s4 = "ra";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "t1";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "a6";
          s4_len = 2;
          break;
        }
        case 0x1B:{
          s4 = "s11";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "t3";
          s4_len = 2;
          break;
        }
        case 0x16:{
          s4 = "s6";
          s4_len = 2;
          break;
        }
        case 0x00:{
          s4 = "zero";
          s4_len = 4;
          break;
        }
        case 0x0A:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x1A:{
          s4 = "s10";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "s7";
          s4_len = 2;
          break;
        }
        case 0x0C:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x18:{
          s4 = "s8";
          s4_len = 2;
          break;
        }
        case 0x02:{
          s4 = "sp";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "t6";
          s4_len = 2;
          break;
        }
        case 0x0B:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x07:{
          s4 = "t2";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "s3";
          s4_len = 2;
          break;
        }
        case 0x04:{
          s4 = "tp";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "s9";
          s4_len = 2;
          break;
        }
        case 0x12:{
          s4 = "s2";
          s4_len = 2;
          break;
        }
        case 0x14:{
          s4 = "s4";
          s4_len = 2;
          break;
        }
        case 0x0E:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x1E:{
          s4 = "t5";
          s4_len = 2;
          break;
        }
        case 0x11:{
          s4 = "a7";
          s4_len = 2;
          break;
        }
        case 0x03:{
          s4 = "gp";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "t0";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "t4";
          s4_len = 2;
          break;
        }
        case 0x0D:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x0F:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.zbs_rtype.rs2) { 
        case 0x08:{
          s6 = "fp";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "s5";
          s6_len = 2;
          break;
        }
        case 0x01:{
          s6 = "ra";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "t1";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "s1";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "a6";
          s6_len = 2;
          break;
        }
        case 0x1B:{
          s6 = "s11";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "t3";
          s6_len = 2;
          break;
        }
        case 0x16:{
          s6 = "s6";
          s6_len = 2;
          break;
        }
        case 0x00:{
          s6 = "zero";
          s6_len = 4;
          break;
        }
        case 0x0A:{
          s6 = "a0";
          s6_len = 2;
          break;
        }
        case 0x1A:{
          s6 = "s10";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "s7";
          s6_len = 2;
          break;
        }
        case 0x0C:{
          s6 = "a2";
          s6_len = 2;
          break;
        }
        case 0x18:{
          s6 = "s8";
          s6_len = 2;
          break;
        }
        case 0x02:{
          s6 = "sp";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "t6";
          s6_len = 2;
          break;
        }
        case 0x0B:{
          s6 = "a1";
          s6_len = 2;
          break;
        }
        case 0x07:{
          s6 = "t2";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "s3";
          s6_len = 2;
          break;
        }
        case 0x04:{
          s6 = "tp";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "s9";
          s6_len = 2;
          break;
        }
        case 0x12:{
          s6 = "s2";
          s6_len = 2;
          break;
        }
        case 0x14:{
          s6 = "s4";
          s6_len = 2;
          break;
        }
        case 0x0E:{
          s6 = "a4";
          s6_len = 2;
          break;
        }
        case 0x1E:{
          s6 = "t5";
          s6_len = 2;
          break;
        }
        case 0x11:{
          s6 = "a7";
          s6_len = 2;
          break;
        }
        case 0x03:{
          s6 = "gp";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "t0";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "t4";
          s6_len = 2;
          break;
        }
        case 0x0D:{
          s6 = "a3";
          s6_len = 2;
          break;
        }
        case 0x0F:{
          s6 = "a5";
          s6_len = 2;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
    }
    break;
    case RISCV_C_LBU: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      char *s8; size_t s8_len;
      char *s9; size_t s9_len;
      char *s10; size_t s10_len;
      s0 = "c.lbu";
      s0_len = 5;
      spc( &s1, &s1_len);
      switch (tree->ast_node.c_lbu.rdc) { 
        case 0x7:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
        case 0x5:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x1:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x3:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x2:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x4:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x6:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x0:{
          s2 = "s0";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      hex_bits_2(tree->ast_node.c_lbu.uimm, &s4, &s4_len);
      opt_spc( &s5, &s5_len);
      s6 = "(";
      s6_len = 1;
      opt_spc( &s7, &s7_len);
      switch (tree->ast_node.c_lbu.rs1c) { 
        case 0x7:{
          s8 = "a5";
          s8_len = 2;
          break;
        }
        case 0x5:{
          s8 = "a3";
          s8_len = 2;
          break;
        }
        case 0x1:{
          s8 = "s1";
          s8_len = 2;
          break;
        }
        case 0x3:{
          s8 = "a1";
          s8_len = 2;
          break;
        }
        case 0x2:{
          s8 = "a0";
          s8_len = 2;
          break;
        }
        case 0x4:{
          s8 = "a2";
          s8_len = 2;
          break;
        }
        case 0x6:{
          s8 = "a4";
          s8_len = 2;
          break;
        }
        case 0x0:{
          s8 = "s0";
          s8_len = 2;
          break;
        }
      }
      opt_spc( &s9, &s9_len);
      s10 = ")";
      s10_len = 1;
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len, s8, s8_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len + s8_len, s9, s9_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len + s8_len + s9_len, s10, s10_len);
      }
    }
    break;
    case RISCV_C_LHU: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      char *s8; size_t s8_len;
      char *s9; size_t s9_len;
      char *s10; size_t s10_len;
      s0 = "c.lhu";
      s0_len = 5;
      spc( &s1, &s1_len);
      switch (tree->ast_node.c_lhu.rdc) { 
        case 0x7:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
        case 0x5:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x1:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x3:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x2:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x4:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x6:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x0:{
          s2 = "s0";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      hex_bits_2(tree->ast_node.c_lhu.uimm, &s4, &s4_len);
      opt_spc( &s5, &s5_len);
      s6 = "(";
      s6_len = 1;
      opt_spc( &s7, &s7_len);
      switch (tree->ast_node.c_lhu.rs1c) { 
        case 0x7:{
          s8 = "a5";
          s8_len = 2;
          break;
        }
        case 0x5:{
          s8 = "a3";
          s8_len = 2;
          break;
        }
        case 0x1:{
          s8 = "s1";
          s8_len = 2;
          break;
        }
        case 0x3:{
          s8 = "a1";
          s8_len = 2;
          break;
        }
        case 0x2:{
          s8 = "a0";
          s8_len = 2;
          break;
        }
        case 0x4:{
          s8 = "a2";
          s8_len = 2;
          break;
        }
        case 0x6:{
          s8 = "a4";
          s8_len = 2;
          break;
        }
        case 0x0:{
          s8 = "s0";
          s8_len = 2;
          break;
        }
      }
      opt_spc( &s9, &s9_len);
      s10 = ")";
      s10_len = 1;
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len, s8, s8_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len + s8_len, s9, s9_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len + s8_len + s9_len, s10, s10_len);
      }
    }
    break;
    case RISCV_C_LH: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      char *s8; size_t s8_len;
      char *s9; size_t s9_len;
      char *s10; size_t s10_len;
      s0 = "c.lh";
      s0_len = 4;
      spc( &s1, &s1_len);
      switch (tree->ast_node.c_lh.rdc) { 
        case 0x7:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
        case 0x5:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x1:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x3:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x2:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x4:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x6:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x0:{
          s2 = "s0";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      hex_bits_2(tree->ast_node.c_lh.uimm, &s4, &s4_len);
      opt_spc( &s5, &s5_len);
      s6 = "(";
      s6_len = 1;
      opt_spc( &s7, &s7_len);
      switch (tree->ast_node.c_lh.rs1c) { 
        case 0x7:{
          s8 = "a5";
          s8_len = 2;
          break;
        }
        case 0x5:{
          s8 = "a3";
          s8_len = 2;
          break;
        }
        case 0x1:{
          s8 = "s1";
          s8_len = 2;
          break;
        }
        case 0x3:{
          s8 = "a1";
          s8_len = 2;
          break;
        }
        case 0x2:{
          s8 = "a0";
          s8_len = 2;
          break;
        }
        case 0x4:{
          s8 = "a2";
          s8_len = 2;
          break;
        }
        case 0x6:{
          s8 = "a4";
          s8_len = 2;
          break;
        }
        case 0x0:{
          s8 = "s0";
          s8_len = 2;
          break;
        }
      }
      opt_spc( &s9, &s9_len);
      s10 = ")";
      s10_len = 1;
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len, s8, s8_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len + s8_len, s9, s9_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len + s8_len + s9_len, s10, s10_len);
      }
    }
    break;
    case RISCV_C_SB: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      char *s8; size_t s8_len;
      char *s9; size_t s9_len;
      char *s10; size_t s10_len;
      s0 = "c.sb";
      s0_len = 4;
      spc( &s1, &s1_len);
      switch (tree->ast_node.c_sb.rs2c) { 
        case 0x7:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
        case 0x5:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x1:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x3:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x2:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x4:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x6:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x0:{
          s2 = "s0";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      hex_bits_2(tree->ast_node.c_sb.uimm, &s4, &s4_len);
      opt_spc( &s5, &s5_len);
      s6 = "(";
      s6_len = 1;
      opt_spc( &s7, &s7_len);
      switch (tree->ast_node.c_sb.rs1c) { 
        case 0x7:{
          s8 = "a5";
          s8_len = 2;
          break;
        }
        case 0x5:{
          s8 = "a3";
          s8_len = 2;
          break;
        }
        case 0x1:{
          s8 = "s1";
          s8_len = 2;
          break;
        }
        case 0x3:{
          s8 = "a1";
          s8_len = 2;
          break;
        }
        case 0x2:{
          s8 = "a0";
          s8_len = 2;
          break;
        }
        case 0x4:{
          s8 = "a2";
          s8_len = 2;
          break;
        }
        case 0x6:{
          s8 = "a4";
          s8_len = 2;
          break;
        }
        case 0x0:{
          s8 = "s0";
          s8_len = 2;
          break;
        }
      }
      opt_spc( &s9, &s9_len);
      s10 = ")";
      s10_len = 1;
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len, s8, s8_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len + s8_len, s9, s9_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len + s8_len + s9_len, s10, s10_len);
      }
    }
    break;
    case RISCV_C_SH: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      char *s8; size_t s8_len;
      char *s9; size_t s9_len;
      char *s10; size_t s10_len;
      s0 = "c.sh";
      s0_len = 4;
      spc( &s1, &s1_len);
      switch (tree->ast_node.c_sh.rs1c) { 
        case 0x7:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
        case 0x5:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x1:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x3:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x2:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x4:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x6:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x0:{
          s2 = "s0";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      hex_bits_2(tree->ast_node.c_sh.uimm, &s4, &s4_len);
      opt_spc( &s5, &s5_len);
      s6 = "(";
      s6_len = 1;
      opt_spc( &s7, &s7_len);
      switch (tree->ast_node.c_sh.rs2c) { 
        case 0x7:{
          s8 = "a5";
          s8_len = 2;
          break;
        }
        case 0x5:{
          s8 = "a3";
          s8_len = 2;
          break;
        }
        case 0x1:{
          s8 = "s1";
          s8_len = 2;
          break;
        }
        case 0x3:{
          s8 = "a1";
          s8_len = 2;
          break;
        }
        case 0x2:{
          s8 = "a0";
          s8_len = 2;
          break;
        }
        case 0x4:{
          s8 = "a2";
          s8_len = 2;
          break;
        }
        case 0x6:{
          s8 = "a4";
          s8_len = 2;
          break;
        }
        case 0x0:{
          s8 = "s0";
          s8_len = 2;
          break;
        }
      }
      opt_spc( &s9, &s9_len);
      s10 = ")";
      s10_len = 1;
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len, s8, s8_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len + s8_len, s9, s9_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len + s8_len + s9_len, s10, s10_len);
      }
    }
    break;
    case RISCV_C_ZEXT_B: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      s0 = "c.zext.b";
      s0_len = 8;
      spc( &s1, &s1_len);
      switch (tree->ast_node.c_zext_b) { 
        case 0x7:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
        case 0x5:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x1:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x3:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x2:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x4:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x6:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x0:{
          s2 = "s0";
          s2_len = 2;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      }
    }
    break;
    case RISCV_C_SEXT_B: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      s0 = "c.sext.b";
      s0_len = 8;
      spc( &s1, &s1_len);
      switch (tree->ast_node.c_sext_b) { 
        case 0x7:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
        case 0x5:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x1:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x3:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x2:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x4:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x6:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x0:{
          s2 = "s0";
          s2_len = 2;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      }
    }
    break;
    case RISCV_C_ZEXT_H: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      s0 = "c.zext.h";
      s0_len = 8;
      spc( &s1, &s1_len);
      switch (tree->ast_node.c_zext_h) { 
        case 0x7:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
        case 0x5:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x1:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x3:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x2:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x4:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x6:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x0:{
          s2 = "s0";
          s2_len = 2;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      }
    }
    break;
    case RISCV_C_SEXT_H: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      s0 = "c.sext.h";
      s0_len = 8;
      spc( &s1, &s1_len);
      switch (tree->ast_node.c_sext_h) { 
        case 0x7:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
        case 0x5:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x1:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x3:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x2:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x4:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x6:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x0:{
          s2 = "s0";
          s2_len = 2;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      }
    }
    break;
    case RISCV_C_ZEXT_W: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      s0 = "c.zext.w";
      s0_len = 8;
      spc( &s1, &s1_len);
      switch (tree->ast_node.c_zext_w) { 
        case 0x7:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
        case 0x5:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x1:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x3:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x2:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x4:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x6:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x0:{
          s2 = "s0";
          s2_len = 2;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      }
    }
    break;
    case RISCV_C_NOT: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      s0 = "c.not";
      s0_len = 5;
      spc( &s1, &s1_len);
      switch (tree->ast_node.c_not) { 
        case 0x7:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
        case 0x5:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x1:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x3:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x2:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x4:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x6:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x0:{
          s2 = "s0";
          s2_len = 2;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      }
    }
    break;
    case RISCV_C_MUL: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      s0 = "c.mul";
      s0_len = 5;
      spc( &s1, &s1_len);
      switch (tree->ast_node.c_mul.rsdc) { 
        case 0x7:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
        case 0x5:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x1:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x3:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x2:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x4:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x6:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x0:{
          s2 = "s0";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.c_mul.rs2c) { 
        case 0x7:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
        case 0x5:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x1:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x3:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x2:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x4:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x6:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x0:{
          s4 = "s0";
          s4_len = 2;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      }
    }
    break;
    case RISCV_F_BIN_RM_TYPE_H: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      char *s8; size_t s8_len;
      switch (tree->ast_node.f_bin_rm_type_h.op) { 
        case RISCV_FDIV_H:{
          s0 = "fdiv.h";
          s0_len = 6;
          break;
        }
        case RISCV_FADD_H:{
          s0 = "fadd.h";
          s0_len = 6;
          break;
        }
        case RISCV_FMUL_H:{
          s0 = "fmul.h";
          s0_len = 6;
          break;
        }
        case RISCV_FSUB_H:{
          s0 = "fsub.h";
          s0_len = 6;
          break;
        }
      }
      spc( &s1, &s1_len);
      freg_or_reg_name(tree->ast_node.f_bin_rm_type_h.rd, &s2, &s2_len);
      sep( &s3, &s3_len);
      freg_or_reg_name(tree->ast_node.f_bin_rm_type_h.rs1, &s4, &s4_len);
      sep( &s5, &s5_len);
      freg_or_reg_name(tree->ast_node.f_bin_rm_type_h.rs2, &s6, &s6_len);
      sep( &s7, &s7_len);
      switch (tree->ast_node.f_bin_rm_type_h.rm) { 
        case RISCV_RM_RNE:{
          s8 = "rne";
          s8_len = 3;
          break;
        }
        case RISCV_RM_RTZ:{
          s8 = "rtz";
          s8_len = 3;
          break;
        }
        case RISCV_RM_RDN:{
          s8 = "rdn";
          s8_len = 3;
          break;
        }
        case RISCV_RM_RMM:{
          s8 = "rmm";
          s8_len = 3;
          break;
        }
        case RISCV_RM_RUP:{
          s8 = "rup";
          s8_len = 3;
          break;
        }
        case RISCV_RM_DYN:{
          s8 = "dyn";
          s8_len = 3;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len, s8, s8_len);
      }
    }
    break;
    case RISCV_F_MADD_TYPE_H: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      char *s8; size_t s8_len;
      char *s9; size_t s9_len;
      char *s10; size_t s10_len;
      switch (tree->ast_node.f_madd_type_h.op) { 
        case RISCV_FNMSUB_H:{
          s0 = "fnmsub.h";
          s0_len = 8;
          break;
        }
        case RISCV_FMSUB_H:{
          s0 = "fmsub.h";
          s0_len = 7;
          break;
        }
        case RISCV_FNMADD_H:{
          s0 = "fnmadd.h";
          s0_len = 8;
          break;
        }
        case RISCV_FMADD_H:{
          s0 = "fmadd.h";
          s0_len = 7;
          break;
        }
      }
      spc( &s1, &s1_len);
      freg_or_reg_name(tree->ast_node.f_madd_type_h.rd, &s2, &s2_len);
      sep( &s3, &s3_len);
      freg_or_reg_name(tree->ast_node.f_madd_type_h.rs1, &s4, &s4_len);
      sep( &s5, &s5_len);
      freg_or_reg_name(tree->ast_node.f_madd_type_h.rs2, &s6, &s6_len);
      sep( &s7, &s7_len);
      freg_or_reg_name(tree->ast_node.f_madd_type_h.rs3, &s8, &s8_len);
      sep( &s9, &s9_len);
      switch (tree->ast_node.f_madd_type_h.rm) { 
        case RISCV_RM_RNE:{
          s10 = "rne";
          s10_len = 3;
          break;
        }
        case RISCV_RM_RTZ:{
          s10 = "rtz";
          s10_len = 3;
          break;
        }
        case RISCV_RM_RDN:{
          s10 = "rdn";
          s10_len = 3;
          break;
        }
        case RISCV_RM_RMM:{
          s10 = "rmm";
          s10_len = 3;
          break;
        }
        case RISCV_RM_RUP:{
          s10 = "rup";
          s10_len = 3;
          break;
        }
        case RISCV_RM_DYN:{
          s10 = "dyn";
          s10_len = 3;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len, s8, s8_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len + s8_len, s9, s9_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len + s8_len + s9_len, s10, s10_len);
      }
    }
    break;
    case RISCV_F_BIN_TYPE_H: {

      if (tree->ast_node.f_bin_type_h.fle_h == RISCV_FSGNJ_H) { 
        char *s0; size_t s0_len;
        char *s1; size_t s1_len;
        char *s2; size_t s2_len;
        char *s3; size_t s3_len;
        char *s4; size_t s4_len;
        char *s5; size_t s5_len;
        char *s6; size_t s6_len;
        s0 = "fsgnj.h";
        s0_len = 7;
        spc( &s1, &s1_len);
        freg_or_reg_name(tree->ast_node.f_bin_type_h.rd, &s2, &s2_len);
        sep( &s3, &s3_len);
        freg_or_reg_name(tree->ast_node.f_bin_type_h.rs1, &s4, &s4_len);
        sep( &s5, &s5_len);
        freg_or_reg_name(tree->ast_node.f_bin_type_h.rs2, &s6, &s6_len);
        memcpy(buff , s0, s0_len);
        memcpy(buff  + s0_len, s1, s1_len);
        memcpy(buff  + s0_len + s1_len, s2, s2_len);
        memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
      if (tree->ast_node.f_bin_type_h.fle_h == RISCV_FSGNJN_H) { 
        char *s0; size_t s0_len;
        char *s1; size_t s1_len;
        char *s2; size_t s2_len;
        char *s3; size_t s3_len;
        char *s4; size_t s4_len;
        char *s5; size_t s5_len;
        char *s6; size_t s6_len;
        s0 = "fsgnjn.h";
        s0_len = 8;
        spc( &s1, &s1_len);
        freg_or_reg_name(tree->ast_node.f_bin_type_h.rd, &s2, &s2_len);
        sep( &s3, &s3_len);
        freg_or_reg_name(tree->ast_node.f_bin_type_h.rs1, &s4, &s4_len);
        sep( &s5, &s5_len);
        freg_or_reg_name(tree->ast_node.f_bin_type_h.rs2, &s6, &s6_len);
        memcpy(buff , s0, s0_len);
        memcpy(buff  + s0_len, s1, s1_len);
        memcpy(buff  + s0_len + s1_len, s2, s2_len);
        memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
      if (tree->ast_node.f_bin_type_h.fle_h == RISCV_FSGNJX_H) { 
        char *s0; size_t s0_len;
        char *s1; size_t s1_len;
        char *s2; size_t s2_len;
        char *s3; size_t s3_len;
        char *s4; size_t s4_len;
        char *s5; size_t s5_len;
        char *s6; size_t s6_len;
        s0 = "fsgnjx.h";
        s0_len = 8;
        spc( &s1, &s1_len);
        freg_or_reg_name(tree->ast_node.f_bin_type_h.rd, &s2, &s2_len);
        sep( &s3, &s3_len);
        freg_or_reg_name(tree->ast_node.f_bin_type_h.rs1, &s4, &s4_len);
        sep( &s5, &s5_len);
        freg_or_reg_name(tree->ast_node.f_bin_type_h.rs2, &s6, &s6_len);
        memcpy(buff , s0, s0_len);
        memcpy(buff  + s0_len, s1, s1_len);
        memcpy(buff  + s0_len + s1_len, s2, s2_len);
        memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
      if (tree->ast_node.f_bin_type_h.fle_h == RISCV_FMIN_H) { 
        char *s0; size_t s0_len;
        char *s1; size_t s1_len;
        char *s2; size_t s2_len;
        char *s3; size_t s3_len;
        char *s4; size_t s4_len;
        char *s5; size_t s5_len;
        char *s6; size_t s6_len;
        s0 = "fmin.h";
        s0_len = 6;
        spc( &s1, &s1_len);
        freg_or_reg_name(tree->ast_node.f_bin_type_h.rd, &s2, &s2_len);
        sep( &s3, &s3_len);
        freg_or_reg_name(tree->ast_node.f_bin_type_h.rs1, &s4, &s4_len);
        sep( &s5, &s5_len);
        freg_or_reg_name(tree->ast_node.f_bin_type_h.rs2, &s6, &s6_len);
        memcpy(buff , s0, s0_len);
        memcpy(buff  + s0_len, s1, s1_len);
        memcpy(buff  + s0_len + s1_len, s2, s2_len);
        memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
      if (tree->ast_node.f_bin_type_h.fle_h == RISCV_FMAX_H) { 
        char *s0; size_t s0_len;
        char *s1; size_t s1_len;
        char *s2; size_t s2_len;
        char *s3; size_t s3_len;
        char *s4; size_t s4_len;
        char *s5; size_t s5_len;
        char *s6; size_t s6_len;
        s0 = "fmax.h";
        s0_len = 6;
        spc( &s1, &s1_len);
        freg_or_reg_name(tree->ast_node.f_bin_type_h.rd, &s2, &s2_len);
        sep( &s3, &s3_len);
        freg_or_reg_name(tree->ast_node.f_bin_type_h.rs1, &s4, &s4_len);
        sep( &s5, &s5_len);
        freg_or_reg_name(tree->ast_node.f_bin_type_h.rs2, &s6, &s6_len);
        memcpy(buff , s0, s0_len);
        memcpy(buff  + s0_len, s1, s1_len);
        memcpy(buff  + s0_len + s1_len, s2, s2_len);
        memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
      if (tree->ast_node.f_bin_type_h.fle_h == RISCV_FEQ_H) { 
        char *s0; size_t s0_len;
        char *s1; size_t s1_len;
        char *s2; size_t s2_len;
        char *s3; size_t s3_len;
        char *s4; size_t s4_len;
        char *s5; size_t s5_len;
        char *s6; size_t s6_len;
        s0 = "feq.h";
        s0_len = 5;
        spc( &s1, &s1_len);
        switch (tree->ast_node.f_bin_type_h.rd) { 
          case 0x08:{
            s2 = "fp";
            s2_len = 2;
            break;
          }
          case 0x15:{
            s2 = "s5";
            s2_len = 2;
            break;
          }
          case 0x01:{
            s2 = "ra";
            s2_len = 2;
            break;
          }
          case 0x06:{
            s2 = "t1";
            s2_len = 2;
            break;
          }
          case 0x09:{
            s2 = "s1";
            s2_len = 2;
            break;
          }
          case 0x10:{
            s2 = "a6";
            s2_len = 2;
            break;
          }
          case 0x1B:{
            s2 = "s11";
            s2_len = 3;
            break;
          }
          case 0x1C:{
            s2 = "t3";
            s2_len = 2;
            break;
          }
          case 0x16:{
            s2 = "s6";
            s2_len = 2;
            break;
          }
          case 0x00:{
            s2 = "zero";
            s2_len = 4;
            break;
          }
          case 0x0A:{
            s2 = "a0";
            s2_len = 2;
            break;
          }
          case 0x1A:{
            s2 = "s10";
            s2_len = 3;
            break;
          }
          case 0x17:{
            s2 = "s7";
            s2_len = 2;
            break;
          }
          case 0x0C:{
            s2 = "a2";
            s2_len = 2;
            break;
          }
          case 0x18:{
            s2 = "s8";
            s2_len = 2;
            break;
          }
          case 0x02:{
            s2 = "sp";
            s2_len = 2;
            break;
          }
          case 0x1F:{
            s2 = "t6";
            s2_len = 2;
            break;
          }
          case 0x0B:{
            s2 = "a1";
            s2_len = 2;
            break;
          }
          case 0x07:{
            s2 = "t2";
            s2_len = 2;
            break;
          }
          case 0x13:{
            s2 = "s3";
            s2_len = 2;
            break;
          }
          case 0x04:{
            s2 = "tp";
            s2_len = 2;
            break;
          }
          case 0x19:{
            s2 = "s9";
            s2_len = 2;
            break;
          }
          case 0x12:{
            s2 = "s2";
            s2_len = 2;
            break;
          }
          case 0x14:{
            s2 = "s4";
            s2_len = 2;
            break;
          }
          case 0x0E:{
            s2 = "a4";
            s2_len = 2;
            break;
          }
          case 0x1E:{
            s2 = "t5";
            s2_len = 2;
            break;
          }
          case 0x11:{
            s2 = "a7";
            s2_len = 2;
            break;
          }
          case 0x03:{
            s2 = "gp";
            s2_len = 2;
            break;
          }
          case 0x05:{
            s2 = "t0";
            s2_len = 2;
            break;
          }
          case 0x1D:{
            s2 = "t4";
            s2_len = 2;
            break;
          }
          case 0x0D:{
            s2 = "a3";
            s2_len = 2;
            break;
          }
          case 0x0F:{
            s2 = "a5";
            s2_len = 2;
            break;
          }
        }
        sep( &s3, &s3_len);
        freg_or_reg_name(tree->ast_node.f_bin_type_h.rs1, &s4, &s4_len);
        sep( &s5, &s5_len);
        freg_or_reg_name(tree->ast_node.f_bin_type_h.rs2, &s6, &s6_len);
        memcpy(buff , s0, s0_len);
        memcpy(buff  + s0_len, s1, s1_len);
        memcpy(buff  + s0_len + s1_len, s2, s2_len);
        memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
      if (tree->ast_node.f_bin_type_h.fle_h == RISCV_FLT_H) { 
        char *s0; size_t s0_len;
        char *s1; size_t s1_len;
        char *s2; size_t s2_len;
        char *s3; size_t s3_len;
        char *s4; size_t s4_len;
        char *s5; size_t s5_len;
        char *s6; size_t s6_len;
        s0 = "flt.h";
        s0_len = 5;
        spc( &s1, &s1_len);
        switch (tree->ast_node.f_bin_type_h.rd) { 
          case 0x08:{
            s2 = "fp";
            s2_len = 2;
            break;
          }
          case 0x15:{
            s2 = "s5";
            s2_len = 2;
            break;
          }
          case 0x01:{
            s2 = "ra";
            s2_len = 2;
            break;
          }
          case 0x06:{
            s2 = "t1";
            s2_len = 2;
            break;
          }
          case 0x09:{
            s2 = "s1";
            s2_len = 2;
            break;
          }
          case 0x10:{
            s2 = "a6";
            s2_len = 2;
            break;
          }
          case 0x1B:{
            s2 = "s11";
            s2_len = 3;
            break;
          }
          case 0x1C:{
            s2 = "t3";
            s2_len = 2;
            break;
          }
          case 0x16:{
            s2 = "s6";
            s2_len = 2;
            break;
          }
          case 0x00:{
            s2 = "zero";
            s2_len = 4;
            break;
          }
          case 0x0A:{
            s2 = "a0";
            s2_len = 2;
            break;
          }
          case 0x1A:{
            s2 = "s10";
            s2_len = 3;
            break;
          }
          case 0x17:{
            s2 = "s7";
            s2_len = 2;
            break;
          }
          case 0x0C:{
            s2 = "a2";
            s2_len = 2;
            break;
          }
          case 0x18:{
            s2 = "s8";
            s2_len = 2;
            break;
          }
          case 0x02:{
            s2 = "sp";
            s2_len = 2;
            break;
          }
          case 0x1F:{
            s2 = "t6";
            s2_len = 2;
            break;
          }
          case 0x0B:{
            s2 = "a1";
            s2_len = 2;
            break;
          }
          case 0x07:{
            s2 = "t2";
            s2_len = 2;
            break;
          }
          case 0x13:{
            s2 = "s3";
            s2_len = 2;
            break;
          }
          case 0x04:{
            s2 = "tp";
            s2_len = 2;
            break;
          }
          case 0x19:{
            s2 = "s9";
            s2_len = 2;
            break;
          }
          case 0x12:{
            s2 = "s2";
            s2_len = 2;
            break;
          }
          case 0x14:{
            s2 = "s4";
            s2_len = 2;
            break;
          }
          case 0x0E:{
            s2 = "a4";
            s2_len = 2;
            break;
          }
          case 0x1E:{
            s2 = "t5";
            s2_len = 2;
            break;
          }
          case 0x11:{
            s2 = "a7";
            s2_len = 2;
            break;
          }
          case 0x03:{
            s2 = "gp";
            s2_len = 2;
            break;
          }
          case 0x05:{
            s2 = "t0";
            s2_len = 2;
            break;
          }
          case 0x1D:{
            s2 = "t4";
            s2_len = 2;
            break;
          }
          case 0x0D:{
            s2 = "a3";
            s2_len = 2;
            break;
          }
          case 0x0F:{
            s2 = "a5";
            s2_len = 2;
            break;
          }
        }
        sep( &s3, &s3_len);
        freg_or_reg_name(tree->ast_node.f_bin_type_h.rs1, &s4, &s4_len);
        sep( &s5, &s5_len);
        freg_or_reg_name(tree->ast_node.f_bin_type_h.rs2, &s6, &s6_len);
        memcpy(buff , s0, s0_len);
        memcpy(buff  + s0_len, s1, s1_len);
        memcpy(buff  + s0_len + s1_len, s2, s2_len);
        memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
      if (tree->ast_node.f_bin_type_h.fle_h == RISCV_FLE_H) { 
        char *s0; size_t s0_len;
        char *s1; size_t s1_len;
        char *s2; size_t s2_len;
        char *s3; size_t s3_len;
        char *s4; size_t s4_len;
        char *s5; size_t s5_len;
        char *s6; size_t s6_len;
        s0 = "fle.h";
        s0_len = 5;
        spc( &s1, &s1_len);
        switch (tree->ast_node.f_bin_type_h.rd) { 
          case 0x08:{
            s2 = "fp";
            s2_len = 2;
            break;
          }
          case 0x15:{
            s2 = "s5";
            s2_len = 2;
            break;
          }
          case 0x01:{
            s2 = "ra";
            s2_len = 2;
            break;
          }
          case 0x06:{
            s2 = "t1";
            s2_len = 2;
            break;
          }
          case 0x09:{
            s2 = "s1";
            s2_len = 2;
            break;
          }
          case 0x10:{
            s2 = "a6";
            s2_len = 2;
            break;
          }
          case 0x1B:{
            s2 = "s11";
            s2_len = 3;
            break;
          }
          case 0x1C:{
            s2 = "t3";
            s2_len = 2;
            break;
          }
          case 0x16:{
            s2 = "s6";
            s2_len = 2;
            break;
          }
          case 0x00:{
            s2 = "zero";
            s2_len = 4;
            break;
          }
          case 0x0A:{
            s2 = "a0";
            s2_len = 2;
            break;
          }
          case 0x1A:{
            s2 = "s10";
            s2_len = 3;
            break;
          }
          case 0x17:{
            s2 = "s7";
            s2_len = 2;
            break;
          }
          case 0x0C:{
            s2 = "a2";
            s2_len = 2;
            break;
          }
          case 0x18:{
            s2 = "s8";
            s2_len = 2;
            break;
          }
          case 0x02:{
            s2 = "sp";
            s2_len = 2;
            break;
          }
          case 0x1F:{
            s2 = "t6";
            s2_len = 2;
            break;
          }
          case 0x0B:{
            s2 = "a1";
            s2_len = 2;
            break;
          }
          case 0x07:{
            s2 = "t2";
            s2_len = 2;
            break;
          }
          case 0x13:{
            s2 = "s3";
            s2_len = 2;
            break;
          }
          case 0x04:{
            s2 = "tp";
            s2_len = 2;
            break;
          }
          case 0x19:{
            s2 = "s9";
            s2_len = 2;
            break;
          }
          case 0x12:{
            s2 = "s2";
            s2_len = 2;
            break;
          }
          case 0x14:{
            s2 = "s4";
            s2_len = 2;
            break;
          }
          case 0x0E:{
            s2 = "a4";
            s2_len = 2;
            break;
          }
          case 0x1E:{
            s2 = "t5";
            s2_len = 2;
            break;
          }
          case 0x11:{
            s2 = "a7";
            s2_len = 2;
            break;
          }
          case 0x03:{
            s2 = "gp";
            s2_len = 2;
            break;
          }
          case 0x05:{
            s2 = "t0";
            s2_len = 2;
            break;
          }
          case 0x1D:{
            s2 = "t4";
            s2_len = 2;
            break;
          }
          case 0x0D:{
            s2 = "a3";
            s2_len = 2;
            break;
          }
          case 0x0F:{
            s2 = "a5";
            s2_len = 2;
            break;
          }
        }
        sep( &s3, &s3_len);
        freg_or_reg_name(tree->ast_node.f_bin_type_h.rs1, &s4, &s4_len);
        sep( &s5, &s5_len);
        freg_or_reg_name(tree->ast_node.f_bin_type_h.rs2, &s6, &s6_len);
        memcpy(buff , s0, s0_len);
        memcpy(buff  + s0_len, s1, s1_len);
        memcpy(buff  + s0_len + s1_len, s2, s2_len);
        memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
    }
    break;
    case RISCV_F_UN_RM_TYPE_H: {

      if (tree->ast_node.f_un_rm_type_h.fcvt_h_lu == RISCV_FSQRT_H) { 
        char *s0; size_t s0_len;
        char *s1; size_t s1_len;
        char *s2; size_t s2_len;
        char *s3; size_t s3_len;
        char *s4; size_t s4_len;
        char *s5; size_t s5_len;
        char *s6; size_t s6_len;
        s0 = "fsqrt.h";
        s0_len = 7;
        spc( &s1, &s1_len);
        freg_or_reg_name(tree->ast_node.f_un_rm_type_h.rd, &s2, &s2_len);
        sep( &s3, &s3_len);
        freg_or_reg_name(tree->ast_node.f_un_rm_type_h.rs1, &s4, &s4_len);
        sep( &s5, &s5_len);
        switch (tree->ast_node.f_un_rm_type_h.rm) { 
          case RISCV_RM_RNE:{
            s6 = "rne";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RTZ:{
            s6 = "rtz";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RDN:{
            s6 = "rdn";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RMM:{
            s6 = "rmm";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RUP:{
            s6 = "rup";
            s6_len = 3;
            break;
          }
          case RISCV_RM_DYN:{
            s6 = "dyn";
            s6_len = 3;
            break;
          }
        }
        memcpy(buff , s0, s0_len);
        memcpy(buff  + s0_len, s1, s1_len);
        memcpy(buff  + s0_len + s1_len, s2, s2_len);
        memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
      if (tree->ast_node.f_un_rm_type_h.fcvt_h_lu == RISCV_FCVT_W_H) { 
        char *s0; size_t s0_len;
        char *s1; size_t s1_len;
        char *s2; size_t s2_len;
        char *s3; size_t s3_len;
        char *s4; size_t s4_len;
        char *s5; size_t s5_len;
        char *s6; size_t s6_len;
        s0 = "fcvt.w.h";
        s0_len = 8;
        spc( &s1, &s1_len);
        switch (tree->ast_node.f_un_rm_type_h.rd) { 
          case 0x08:{
            s2 = "fp";
            s2_len = 2;
            break;
          }
          case 0x15:{
            s2 = "s5";
            s2_len = 2;
            break;
          }
          case 0x01:{
            s2 = "ra";
            s2_len = 2;
            break;
          }
          case 0x06:{
            s2 = "t1";
            s2_len = 2;
            break;
          }
          case 0x09:{
            s2 = "s1";
            s2_len = 2;
            break;
          }
          case 0x10:{
            s2 = "a6";
            s2_len = 2;
            break;
          }
          case 0x1B:{
            s2 = "s11";
            s2_len = 3;
            break;
          }
          case 0x1C:{
            s2 = "t3";
            s2_len = 2;
            break;
          }
          case 0x16:{
            s2 = "s6";
            s2_len = 2;
            break;
          }
          case 0x00:{
            s2 = "zero";
            s2_len = 4;
            break;
          }
          case 0x0A:{
            s2 = "a0";
            s2_len = 2;
            break;
          }
          case 0x1A:{
            s2 = "s10";
            s2_len = 3;
            break;
          }
          case 0x17:{
            s2 = "s7";
            s2_len = 2;
            break;
          }
          case 0x0C:{
            s2 = "a2";
            s2_len = 2;
            break;
          }
          case 0x18:{
            s2 = "s8";
            s2_len = 2;
            break;
          }
          case 0x02:{
            s2 = "sp";
            s2_len = 2;
            break;
          }
          case 0x1F:{
            s2 = "t6";
            s2_len = 2;
            break;
          }
          case 0x0B:{
            s2 = "a1";
            s2_len = 2;
            break;
          }
          case 0x07:{
            s2 = "t2";
            s2_len = 2;
            break;
          }
          case 0x13:{
            s2 = "s3";
            s2_len = 2;
            break;
          }
          case 0x04:{
            s2 = "tp";
            s2_len = 2;
            break;
          }
          case 0x19:{
            s2 = "s9";
            s2_len = 2;
            break;
          }
          case 0x12:{
            s2 = "s2";
            s2_len = 2;
            break;
          }
          case 0x14:{
            s2 = "s4";
            s2_len = 2;
            break;
          }
          case 0x0E:{
            s2 = "a4";
            s2_len = 2;
            break;
          }
          case 0x1E:{
            s2 = "t5";
            s2_len = 2;
            break;
          }
          case 0x11:{
            s2 = "a7";
            s2_len = 2;
            break;
          }
          case 0x03:{
            s2 = "gp";
            s2_len = 2;
            break;
          }
          case 0x05:{
            s2 = "t0";
            s2_len = 2;
            break;
          }
          case 0x1D:{
            s2 = "t4";
            s2_len = 2;
            break;
          }
          case 0x0D:{
            s2 = "a3";
            s2_len = 2;
            break;
          }
          case 0x0F:{
            s2 = "a5";
            s2_len = 2;
            break;
          }
        }
        sep( &s3, &s3_len);
        freg_or_reg_name(tree->ast_node.f_un_rm_type_h.rs1, &s4, &s4_len);
        sep( &s5, &s5_len);
        switch (tree->ast_node.f_un_rm_type_h.rm) { 
          case RISCV_RM_RNE:{
            s6 = "rne";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RTZ:{
            s6 = "rtz";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RDN:{
            s6 = "rdn";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RMM:{
            s6 = "rmm";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RUP:{
            s6 = "rup";
            s6_len = 3;
            break;
          }
          case RISCV_RM_DYN:{
            s6 = "dyn";
            s6_len = 3;
            break;
          }
        }
        memcpy(buff , s0, s0_len);
        memcpy(buff  + s0_len, s1, s1_len);
        memcpy(buff  + s0_len + s1_len, s2, s2_len);
        memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
      if (tree->ast_node.f_un_rm_type_h.fcvt_h_lu == RISCV_FCVT_WU_H) { 
        char *s0; size_t s0_len;
        char *s1; size_t s1_len;
        char *s2; size_t s2_len;
        char *s3; size_t s3_len;
        char *s4; size_t s4_len;
        char *s5; size_t s5_len;
        char *s6; size_t s6_len;
        s0 = "fcvt.wu.h";
        s0_len = 9;
        spc( &s1, &s1_len);
        switch (tree->ast_node.f_un_rm_type_h.rd) { 
          case 0x08:{
            s2 = "fp";
            s2_len = 2;
            break;
          }
          case 0x15:{
            s2 = "s5";
            s2_len = 2;
            break;
          }
          case 0x01:{
            s2 = "ra";
            s2_len = 2;
            break;
          }
          case 0x06:{
            s2 = "t1";
            s2_len = 2;
            break;
          }
          case 0x09:{
            s2 = "s1";
            s2_len = 2;
            break;
          }
          case 0x10:{
            s2 = "a6";
            s2_len = 2;
            break;
          }
          case 0x1B:{
            s2 = "s11";
            s2_len = 3;
            break;
          }
          case 0x1C:{
            s2 = "t3";
            s2_len = 2;
            break;
          }
          case 0x16:{
            s2 = "s6";
            s2_len = 2;
            break;
          }
          case 0x00:{
            s2 = "zero";
            s2_len = 4;
            break;
          }
          case 0x0A:{
            s2 = "a0";
            s2_len = 2;
            break;
          }
          case 0x1A:{
            s2 = "s10";
            s2_len = 3;
            break;
          }
          case 0x17:{
            s2 = "s7";
            s2_len = 2;
            break;
          }
          case 0x0C:{
            s2 = "a2";
            s2_len = 2;
            break;
          }
          case 0x18:{
            s2 = "s8";
            s2_len = 2;
            break;
          }
          case 0x02:{
            s2 = "sp";
            s2_len = 2;
            break;
          }
          case 0x1F:{
            s2 = "t6";
            s2_len = 2;
            break;
          }
          case 0x0B:{
            s2 = "a1";
            s2_len = 2;
            break;
          }
          case 0x07:{
            s2 = "t2";
            s2_len = 2;
            break;
          }
          case 0x13:{
            s2 = "s3";
            s2_len = 2;
            break;
          }
          case 0x04:{
            s2 = "tp";
            s2_len = 2;
            break;
          }
          case 0x19:{
            s2 = "s9";
            s2_len = 2;
            break;
          }
          case 0x12:{
            s2 = "s2";
            s2_len = 2;
            break;
          }
          case 0x14:{
            s2 = "s4";
            s2_len = 2;
            break;
          }
          case 0x0E:{
            s2 = "a4";
            s2_len = 2;
            break;
          }
          case 0x1E:{
            s2 = "t5";
            s2_len = 2;
            break;
          }
          case 0x11:{
            s2 = "a7";
            s2_len = 2;
            break;
          }
          case 0x03:{
            s2 = "gp";
            s2_len = 2;
            break;
          }
          case 0x05:{
            s2 = "t0";
            s2_len = 2;
            break;
          }
          case 0x1D:{
            s2 = "t4";
            s2_len = 2;
            break;
          }
          case 0x0D:{
            s2 = "a3";
            s2_len = 2;
            break;
          }
          case 0x0F:{
            s2 = "a5";
            s2_len = 2;
            break;
          }
        }
        sep( &s3, &s3_len);
        freg_or_reg_name(tree->ast_node.f_un_rm_type_h.rs1, &s4, &s4_len);
        sep( &s5, &s5_len);
        switch (tree->ast_node.f_un_rm_type_h.rm) { 
          case RISCV_RM_RNE:{
            s6 = "rne";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RTZ:{
            s6 = "rtz";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RDN:{
            s6 = "rdn";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RMM:{
            s6 = "rmm";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RUP:{
            s6 = "rup";
            s6_len = 3;
            break;
          }
          case RISCV_RM_DYN:{
            s6 = "dyn";
            s6_len = 3;
            break;
          }
        }
        memcpy(buff , s0, s0_len);
        memcpy(buff  + s0_len, s1, s1_len);
        memcpy(buff  + s0_len + s1_len, s2, s2_len);
        memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
      if (tree->ast_node.f_un_rm_type_h.fcvt_h_lu == RISCV_FCVT_H_W) { 
        char *s0; size_t s0_len;
        char *s1; size_t s1_len;
        char *s2; size_t s2_len;
        char *s3; size_t s3_len;
        char *s4; size_t s4_len;
        char *s5; size_t s5_len;
        char *s6; size_t s6_len;
        s0 = "fcvt.h.w";
        s0_len = 8;
        spc( &s1, &s1_len);
        freg_or_reg_name(tree->ast_node.f_un_rm_type_h.rd, &s2, &s2_len);
        sep( &s3, &s3_len);
        switch (tree->ast_node.f_un_rm_type_h.rs1) { 
          case 0x08:{
            s4 = "fp";
            s4_len = 2;
            break;
          }
          case 0x15:{
            s4 = "s5";
            s4_len = 2;
            break;
          }
          case 0x01:{
            s4 = "ra";
            s4_len = 2;
            break;
          }
          case 0x06:{
            s4 = "t1";
            s4_len = 2;
            break;
          }
          case 0x09:{
            s4 = "s1";
            s4_len = 2;
            break;
          }
          case 0x10:{
            s4 = "a6";
            s4_len = 2;
            break;
          }
          case 0x1B:{
            s4 = "s11";
            s4_len = 3;
            break;
          }
          case 0x1C:{
            s4 = "t3";
            s4_len = 2;
            break;
          }
          case 0x16:{
            s4 = "s6";
            s4_len = 2;
            break;
          }
          case 0x00:{
            s4 = "zero";
            s4_len = 4;
            break;
          }
          case 0x0A:{
            s4 = "a0";
            s4_len = 2;
            break;
          }
          case 0x1A:{
            s4 = "s10";
            s4_len = 3;
            break;
          }
          case 0x17:{
            s4 = "s7";
            s4_len = 2;
            break;
          }
          case 0x0C:{
            s4 = "a2";
            s4_len = 2;
            break;
          }
          case 0x18:{
            s4 = "s8";
            s4_len = 2;
            break;
          }
          case 0x02:{
            s4 = "sp";
            s4_len = 2;
            break;
          }
          case 0x1F:{
            s4 = "t6";
            s4_len = 2;
            break;
          }
          case 0x0B:{
            s4 = "a1";
            s4_len = 2;
            break;
          }
          case 0x07:{
            s4 = "t2";
            s4_len = 2;
            break;
          }
          case 0x13:{
            s4 = "s3";
            s4_len = 2;
            break;
          }
          case 0x04:{
            s4 = "tp";
            s4_len = 2;
            break;
          }
          case 0x19:{
            s4 = "s9";
            s4_len = 2;
            break;
          }
          case 0x12:{
            s4 = "s2";
            s4_len = 2;
            break;
          }
          case 0x14:{
            s4 = "s4";
            s4_len = 2;
            break;
          }
          case 0x0E:{
            s4 = "a4";
            s4_len = 2;
            break;
          }
          case 0x1E:{
            s4 = "t5";
            s4_len = 2;
            break;
          }
          case 0x11:{
            s4 = "a7";
            s4_len = 2;
            break;
          }
          case 0x03:{
            s4 = "gp";
            s4_len = 2;
            break;
          }
          case 0x05:{
            s4 = "t0";
            s4_len = 2;
            break;
          }
          case 0x1D:{
            s4 = "t4";
            s4_len = 2;
            break;
          }
          case 0x0D:{
            s4 = "a3";
            s4_len = 2;
            break;
          }
          case 0x0F:{
            s4 = "a5";
            s4_len = 2;
            break;
          }
        }
        sep( &s5, &s5_len);
        switch (tree->ast_node.f_un_rm_type_h.rm) { 
          case RISCV_RM_RNE:{
            s6 = "rne";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RTZ:{
            s6 = "rtz";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RDN:{
            s6 = "rdn";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RMM:{
            s6 = "rmm";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RUP:{
            s6 = "rup";
            s6_len = 3;
            break;
          }
          case RISCV_RM_DYN:{
            s6 = "dyn";
            s6_len = 3;
            break;
          }
        }
        memcpy(buff , s0, s0_len);
        memcpy(buff  + s0_len, s1, s1_len);
        memcpy(buff  + s0_len + s1_len, s2, s2_len);
        memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
      if (tree->ast_node.f_un_rm_type_h.fcvt_h_lu == RISCV_FCVT_H_WU) { 
        char *s0; size_t s0_len;
        char *s1; size_t s1_len;
        char *s2; size_t s2_len;
        char *s3; size_t s3_len;
        char *s4; size_t s4_len;
        char *s5; size_t s5_len;
        char *s6; size_t s6_len;
        s0 = "fcvt.h.wu";
        s0_len = 9;
        spc( &s1, &s1_len);
        freg_or_reg_name(tree->ast_node.f_un_rm_type_h.rd, &s2, &s2_len);
        sep( &s3, &s3_len);
        switch (tree->ast_node.f_un_rm_type_h.rs1) { 
          case 0x08:{
            s4 = "fp";
            s4_len = 2;
            break;
          }
          case 0x15:{
            s4 = "s5";
            s4_len = 2;
            break;
          }
          case 0x01:{
            s4 = "ra";
            s4_len = 2;
            break;
          }
          case 0x06:{
            s4 = "t1";
            s4_len = 2;
            break;
          }
          case 0x09:{
            s4 = "s1";
            s4_len = 2;
            break;
          }
          case 0x10:{
            s4 = "a6";
            s4_len = 2;
            break;
          }
          case 0x1B:{
            s4 = "s11";
            s4_len = 3;
            break;
          }
          case 0x1C:{
            s4 = "t3";
            s4_len = 2;
            break;
          }
          case 0x16:{
            s4 = "s6";
            s4_len = 2;
            break;
          }
          case 0x00:{
            s4 = "zero";
            s4_len = 4;
            break;
          }
          case 0x0A:{
            s4 = "a0";
            s4_len = 2;
            break;
          }
          case 0x1A:{
            s4 = "s10";
            s4_len = 3;
            break;
          }
          case 0x17:{
            s4 = "s7";
            s4_len = 2;
            break;
          }
          case 0x0C:{
            s4 = "a2";
            s4_len = 2;
            break;
          }
          case 0x18:{
            s4 = "s8";
            s4_len = 2;
            break;
          }
          case 0x02:{
            s4 = "sp";
            s4_len = 2;
            break;
          }
          case 0x1F:{
            s4 = "t6";
            s4_len = 2;
            break;
          }
          case 0x0B:{
            s4 = "a1";
            s4_len = 2;
            break;
          }
          case 0x07:{
            s4 = "t2";
            s4_len = 2;
            break;
          }
          case 0x13:{
            s4 = "s3";
            s4_len = 2;
            break;
          }
          case 0x04:{
            s4 = "tp";
            s4_len = 2;
            break;
          }
          case 0x19:{
            s4 = "s9";
            s4_len = 2;
            break;
          }
          case 0x12:{
            s4 = "s2";
            s4_len = 2;
            break;
          }
          case 0x14:{
            s4 = "s4";
            s4_len = 2;
            break;
          }
          case 0x0E:{
            s4 = "a4";
            s4_len = 2;
            break;
          }
          case 0x1E:{
            s4 = "t5";
            s4_len = 2;
            break;
          }
          case 0x11:{
            s4 = "a7";
            s4_len = 2;
            break;
          }
          case 0x03:{
            s4 = "gp";
            s4_len = 2;
            break;
          }
          case 0x05:{
            s4 = "t0";
            s4_len = 2;
            break;
          }
          case 0x1D:{
            s4 = "t4";
            s4_len = 2;
            break;
          }
          case 0x0D:{
            s4 = "a3";
            s4_len = 2;
            break;
          }
          case 0x0F:{
            s4 = "a5";
            s4_len = 2;
            break;
          }
        }
        sep( &s5, &s5_len);
        switch (tree->ast_node.f_un_rm_type_h.rm) { 
          case RISCV_RM_RNE:{
            s6 = "rne";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RTZ:{
            s6 = "rtz";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RDN:{
            s6 = "rdn";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RMM:{
            s6 = "rmm";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RUP:{
            s6 = "rup";
            s6_len = 3;
            break;
          }
          case RISCV_RM_DYN:{
            s6 = "dyn";
            s6_len = 3;
            break;
          }
        }
        memcpy(buff , s0, s0_len);
        memcpy(buff  + s0_len, s1, s1_len);
        memcpy(buff  + s0_len + s1_len, s2, s2_len);
        memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
      if (tree->ast_node.f_un_rm_type_h.fcvt_h_lu == RISCV_FCVT_L_H) { 
        char *s0; size_t s0_len;
        char *s1; size_t s1_len;
        char *s2; size_t s2_len;
        char *s3; size_t s3_len;
        char *s4; size_t s4_len;
        char *s5; size_t s5_len;
        char *s6; size_t s6_len;
        s0 = "fcvt.l.h";
        s0_len = 8;
        spc( &s1, &s1_len);
        switch (tree->ast_node.f_un_rm_type_h.rd) { 
          case 0x08:{
            s2 = "fp";
            s2_len = 2;
            break;
          }
          case 0x15:{
            s2 = "s5";
            s2_len = 2;
            break;
          }
          case 0x01:{
            s2 = "ra";
            s2_len = 2;
            break;
          }
          case 0x06:{
            s2 = "t1";
            s2_len = 2;
            break;
          }
          case 0x09:{
            s2 = "s1";
            s2_len = 2;
            break;
          }
          case 0x10:{
            s2 = "a6";
            s2_len = 2;
            break;
          }
          case 0x1B:{
            s2 = "s11";
            s2_len = 3;
            break;
          }
          case 0x1C:{
            s2 = "t3";
            s2_len = 2;
            break;
          }
          case 0x16:{
            s2 = "s6";
            s2_len = 2;
            break;
          }
          case 0x00:{
            s2 = "zero";
            s2_len = 4;
            break;
          }
          case 0x0A:{
            s2 = "a0";
            s2_len = 2;
            break;
          }
          case 0x1A:{
            s2 = "s10";
            s2_len = 3;
            break;
          }
          case 0x17:{
            s2 = "s7";
            s2_len = 2;
            break;
          }
          case 0x0C:{
            s2 = "a2";
            s2_len = 2;
            break;
          }
          case 0x18:{
            s2 = "s8";
            s2_len = 2;
            break;
          }
          case 0x02:{
            s2 = "sp";
            s2_len = 2;
            break;
          }
          case 0x1F:{
            s2 = "t6";
            s2_len = 2;
            break;
          }
          case 0x0B:{
            s2 = "a1";
            s2_len = 2;
            break;
          }
          case 0x07:{
            s2 = "t2";
            s2_len = 2;
            break;
          }
          case 0x13:{
            s2 = "s3";
            s2_len = 2;
            break;
          }
          case 0x04:{
            s2 = "tp";
            s2_len = 2;
            break;
          }
          case 0x19:{
            s2 = "s9";
            s2_len = 2;
            break;
          }
          case 0x12:{
            s2 = "s2";
            s2_len = 2;
            break;
          }
          case 0x14:{
            s2 = "s4";
            s2_len = 2;
            break;
          }
          case 0x0E:{
            s2 = "a4";
            s2_len = 2;
            break;
          }
          case 0x1E:{
            s2 = "t5";
            s2_len = 2;
            break;
          }
          case 0x11:{
            s2 = "a7";
            s2_len = 2;
            break;
          }
          case 0x03:{
            s2 = "gp";
            s2_len = 2;
            break;
          }
          case 0x05:{
            s2 = "t0";
            s2_len = 2;
            break;
          }
          case 0x1D:{
            s2 = "t4";
            s2_len = 2;
            break;
          }
          case 0x0D:{
            s2 = "a3";
            s2_len = 2;
            break;
          }
          case 0x0F:{
            s2 = "a5";
            s2_len = 2;
            break;
          }
        }
        sep( &s3, &s3_len);
        freg_or_reg_name(tree->ast_node.f_un_rm_type_h.rs1, &s4, &s4_len);
        sep( &s5, &s5_len);
        switch (tree->ast_node.f_un_rm_type_h.rm) { 
          case RISCV_RM_RNE:{
            s6 = "rne";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RTZ:{
            s6 = "rtz";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RDN:{
            s6 = "rdn";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RMM:{
            s6 = "rmm";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RUP:{
            s6 = "rup";
            s6_len = 3;
            break;
          }
          case RISCV_RM_DYN:{
            s6 = "dyn";
            s6_len = 3;
            break;
          }
        }
        memcpy(buff , s0, s0_len);
        memcpy(buff  + s0_len, s1, s1_len);
        memcpy(buff  + s0_len + s1_len, s2, s2_len);
        memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
      if (tree->ast_node.f_un_rm_type_h.fcvt_h_lu == RISCV_FCVT_LU_H) { 
        char *s0; size_t s0_len;
        char *s1; size_t s1_len;
        char *s2; size_t s2_len;
        char *s3; size_t s3_len;
        char *s4; size_t s4_len;
        char *s5; size_t s5_len;
        char *s6; size_t s6_len;
        s0 = "fcvt.lu.h";
        s0_len = 9;
        spc( &s1, &s1_len);
        switch (tree->ast_node.f_un_rm_type_h.rd) { 
          case 0x08:{
            s2 = "fp";
            s2_len = 2;
            break;
          }
          case 0x15:{
            s2 = "s5";
            s2_len = 2;
            break;
          }
          case 0x01:{
            s2 = "ra";
            s2_len = 2;
            break;
          }
          case 0x06:{
            s2 = "t1";
            s2_len = 2;
            break;
          }
          case 0x09:{
            s2 = "s1";
            s2_len = 2;
            break;
          }
          case 0x10:{
            s2 = "a6";
            s2_len = 2;
            break;
          }
          case 0x1B:{
            s2 = "s11";
            s2_len = 3;
            break;
          }
          case 0x1C:{
            s2 = "t3";
            s2_len = 2;
            break;
          }
          case 0x16:{
            s2 = "s6";
            s2_len = 2;
            break;
          }
          case 0x00:{
            s2 = "zero";
            s2_len = 4;
            break;
          }
          case 0x0A:{
            s2 = "a0";
            s2_len = 2;
            break;
          }
          case 0x1A:{
            s2 = "s10";
            s2_len = 3;
            break;
          }
          case 0x17:{
            s2 = "s7";
            s2_len = 2;
            break;
          }
          case 0x0C:{
            s2 = "a2";
            s2_len = 2;
            break;
          }
          case 0x18:{
            s2 = "s8";
            s2_len = 2;
            break;
          }
          case 0x02:{
            s2 = "sp";
            s2_len = 2;
            break;
          }
          case 0x1F:{
            s2 = "t6";
            s2_len = 2;
            break;
          }
          case 0x0B:{
            s2 = "a1";
            s2_len = 2;
            break;
          }
          case 0x07:{
            s2 = "t2";
            s2_len = 2;
            break;
          }
          case 0x13:{
            s2 = "s3";
            s2_len = 2;
            break;
          }
          case 0x04:{
            s2 = "tp";
            s2_len = 2;
            break;
          }
          case 0x19:{
            s2 = "s9";
            s2_len = 2;
            break;
          }
          case 0x12:{
            s2 = "s2";
            s2_len = 2;
            break;
          }
          case 0x14:{
            s2 = "s4";
            s2_len = 2;
            break;
          }
          case 0x0E:{
            s2 = "a4";
            s2_len = 2;
            break;
          }
          case 0x1E:{
            s2 = "t5";
            s2_len = 2;
            break;
          }
          case 0x11:{
            s2 = "a7";
            s2_len = 2;
            break;
          }
          case 0x03:{
            s2 = "gp";
            s2_len = 2;
            break;
          }
          case 0x05:{
            s2 = "t0";
            s2_len = 2;
            break;
          }
          case 0x1D:{
            s2 = "t4";
            s2_len = 2;
            break;
          }
          case 0x0D:{
            s2 = "a3";
            s2_len = 2;
            break;
          }
          case 0x0F:{
            s2 = "a5";
            s2_len = 2;
            break;
          }
        }
        sep( &s3, &s3_len);
        freg_or_reg_name(tree->ast_node.f_un_rm_type_h.rs1, &s4, &s4_len);
        sep( &s5, &s5_len);
        switch (tree->ast_node.f_un_rm_type_h.rm) { 
          case RISCV_RM_RNE:{
            s6 = "rne";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RTZ:{
            s6 = "rtz";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RDN:{
            s6 = "rdn";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RMM:{
            s6 = "rmm";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RUP:{
            s6 = "rup";
            s6_len = 3;
            break;
          }
          case RISCV_RM_DYN:{
            s6 = "dyn";
            s6_len = 3;
            break;
          }
        }
        memcpy(buff , s0, s0_len);
        memcpy(buff  + s0_len, s1, s1_len);
        memcpy(buff  + s0_len + s1_len, s2, s2_len);
        memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
      if (tree->ast_node.f_un_rm_type_h.fcvt_h_lu == RISCV_FCVT_H_L) { 
        char *s0; size_t s0_len;
        char *s1; size_t s1_len;
        char *s2; size_t s2_len;
        char *s3; size_t s3_len;
        char *s4; size_t s4_len;
        char *s5; size_t s5_len;
        char *s6; size_t s6_len;
        s0 = "fcvt.h.l";
        s0_len = 8;
        spc( &s1, &s1_len);
        freg_or_reg_name(tree->ast_node.f_un_rm_type_h.rd, &s2, &s2_len);
        sep( &s3, &s3_len);
        switch (tree->ast_node.f_un_rm_type_h.rs1) { 
          case 0x08:{
            s4 = "fp";
            s4_len = 2;
            break;
          }
          case 0x15:{
            s4 = "s5";
            s4_len = 2;
            break;
          }
          case 0x01:{
            s4 = "ra";
            s4_len = 2;
            break;
          }
          case 0x06:{
            s4 = "t1";
            s4_len = 2;
            break;
          }
          case 0x09:{
            s4 = "s1";
            s4_len = 2;
            break;
          }
          case 0x10:{
            s4 = "a6";
            s4_len = 2;
            break;
          }
          case 0x1B:{
            s4 = "s11";
            s4_len = 3;
            break;
          }
          case 0x1C:{
            s4 = "t3";
            s4_len = 2;
            break;
          }
          case 0x16:{
            s4 = "s6";
            s4_len = 2;
            break;
          }
          case 0x00:{
            s4 = "zero";
            s4_len = 4;
            break;
          }
          case 0x0A:{
            s4 = "a0";
            s4_len = 2;
            break;
          }
          case 0x1A:{
            s4 = "s10";
            s4_len = 3;
            break;
          }
          case 0x17:{
            s4 = "s7";
            s4_len = 2;
            break;
          }
          case 0x0C:{
            s4 = "a2";
            s4_len = 2;
            break;
          }
          case 0x18:{
            s4 = "s8";
            s4_len = 2;
            break;
          }
          case 0x02:{
            s4 = "sp";
            s4_len = 2;
            break;
          }
          case 0x1F:{
            s4 = "t6";
            s4_len = 2;
            break;
          }
          case 0x0B:{
            s4 = "a1";
            s4_len = 2;
            break;
          }
          case 0x07:{
            s4 = "t2";
            s4_len = 2;
            break;
          }
          case 0x13:{
            s4 = "s3";
            s4_len = 2;
            break;
          }
          case 0x04:{
            s4 = "tp";
            s4_len = 2;
            break;
          }
          case 0x19:{
            s4 = "s9";
            s4_len = 2;
            break;
          }
          case 0x12:{
            s4 = "s2";
            s4_len = 2;
            break;
          }
          case 0x14:{
            s4 = "s4";
            s4_len = 2;
            break;
          }
          case 0x0E:{
            s4 = "a4";
            s4_len = 2;
            break;
          }
          case 0x1E:{
            s4 = "t5";
            s4_len = 2;
            break;
          }
          case 0x11:{
            s4 = "a7";
            s4_len = 2;
            break;
          }
          case 0x03:{
            s4 = "gp";
            s4_len = 2;
            break;
          }
          case 0x05:{
            s4 = "t0";
            s4_len = 2;
            break;
          }
          case 0x1D:{
            s4 = "t4";
            s4_len = 2;
            break;
          }
          case 0x0D:{
            s4 = "a3";
            s4_len = 2;
            break;
          }
          case 0x0F:{
            s4 = "a5";
            s4_len = 2;
            break;
          }
        }
        sep( &s5, &s5_len);
        switch (tree->ast_node.f_un_rm_type_h.rm) { 
          case RISCV_RM_RNE:{
            s6 = "rne";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RTZ:{
            s6 = "rtz";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RDN:{
            s6 = "rdn";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RMM:{
            s6 = "rmm";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RUP:{
            s6 = "rup";
            s6_len = 3;
            break;
          }
          case RISCV_RM_DYN:{
            s6 = "dyn";
            s6_len = 3;
            break;
          }
        }
        memcpy(buff , s0, s0_len);
        memcpy(buff  + s0_len, s1, s1_len);
        memcpy(buff  + s0_len + s1_len, s2, s2_len);
        memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
      if (tree->ast_node.f_un_rm_type_h.fcvt_h_lu == RISCV_FCVT_H_LU) { 
        char *s0; size_t s0_len;
        char *s1; size_t s1_len;
        char *s2; size_t s2_len;
        char *s3; size_t s3_len;
        char *s4; size_t s4_len;
        char *s5; size_t s5_len;
        char *s6; size_t s6_len;
        s0 = "fcvt.h.lu";
        s0_len = 9;
        spc( &s1, &s1_len);
        freg_or_reg_name(tree->ast_node.f_un_rm_type_h.rd, &s2, &s2_len);
        sep( &s3, &s3_len);
        switch (tree->ast_node.f_un_rm_type_h.rs1) { 
          case 0x08:{
            s4 = "fp";
            s4_len = 2;
            break;
          }
          case 0x15:{
            s4 = "s5";
            s4_len = 2;
            break;
          }
          case 0x01:{
            s4 = "ra";
            s4_len = 2;
            break;
          }
          case 0x06:{
            s4 = "t1";
            s4_len = 2;
            break;
          }
          case 0x09:{
            s4 = "s1";
            s4_len = 2;
            break;
          }
          case 0x10:{
            s4 = "a6";
            s4_len = 2;
            break;
          }
          case 0x1B:{
            s4 = "s11";
            s4_len = 3;
            break;
          }
          case 0x1C:{
            s4 = "t3";
            s4_len = 2;
            break;
          }
          case 0x16:{
            s4 = "s6";
            s4_len = 2;
            break;
          }
          case 0x00:{
            s4 = "zero";
            s4_len = 4;
            break;
          }
          case 0x0A:{
            s4 = "a0";
            s4_len = 2;
            break;
          }
          case 0x1A:{
            s4 = "s10";
            s4_len = 3;
            break;
          }
          case 0x17:{
            s4 = "s7";
            s4_len = 2;
            break;
          }
          case 0x0C:{
            s4 = "a2";
            s4_len = 2;
            break;
          }
          case 0x18:{
            s4 = "s8";
            s4_len = 2;
            break;
          }
          case 0x02:{
            s4 = "sp";
            s4_len = 2;
            break;
          }
          case 0x1F:{
            s4 = "t6";
            s4_len = 2;
            break;
          }
          case 0x0B:{
            s4 = "a1";
            s4_len = 2;
            break;
          }
          case 0x07:{
            s4 = "t2";
            s4_len = 2;
            break;
          }
          case 0x13:{
            s4 = "s3";
            s4_len = 2;
            break;
          }
          case 0x04:{
            s4 = "tp";
            s4_len = 2;
            break;
          }
          case 0x19:{
            s4 = "s9";
            s4_len = 2;
            break;
          }
          case 0x12:{
            s4 = "s2";
            s4_len = 2;
            break;
          }
          case 0x14:{
            s4 = "s4";
            s4_len = 2;
            break;
          }
          case 0x0E:{
            s4 = "a4";
            s4_len = 2;
            break;
          }
          case 0x1E:{
            s4 = "t5";
            s4_len = 2;
            break;
          }
          case 0x11:{
            s4 = "a7";
            s4_len = 2;
            break;
          }
          case 0x03:{
            s4 = "gp";
            s4_len = 2;
            break;
          }
          case 0x05:{
            s4 = "t0";
            s4_len = 2;
            break;
          }
          case 0x1D:{
            s4 = "t4";
            s4_len = 2;
            break;
          }
          case 0x0D:{
            s4 = "a3";
            s4_len = 2;
            break;
          }
          case 0x0F:{
            s4 = "a5";
            s4_len = 2;
            break;
          }
        }
        sep( &s5, &s5_len);
        switch (tree->ast_node.f_un_rm_type_h.rm) { 
          case RISCV_RM_RNE:{
            s6 = "rne";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RTZ:{
            s6 = "rtz";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RDN:{
            s6 = "rdn";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RMM:{
            s6 = "rmm";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RUP:{
            s6 = "rup";
            s6_len = 3;
            break;
          }
          case RISCV_RM_DYN:{
            s6 = "dyn";
            s6_len = 3;
            break;
          }
        }
        memcpy(buff , s0, s0_len);
        memcpy(buff  + s0_len, s1, s1_len);
        memcpy(buff  + s0_len + s1_len, s2, s2_len);
        memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
      if (tree->ast_node.f_un_rm_type_h.fcvt_h_lu == RISCV_FCVT_H_S) { 
        char *s0; size_t s0_len;
        char *s1; size_t s1_len;
        char *s2; size_t s2_len;
        char *s3; size_t s3_len;
        char *s4; size_t s4_len;
        char *s5; size_t s5_len;
        char *s6; size_t s6_len;
        s0 = "fcvt.h.s";
        s0_len = 8;
        spc( &s1, &s1_len);
        freg_or_reg_name(tree->ast_node.f_un_rm_type_h.rd, &s2, &s2_len);
        sep( &s3, &s3_len);
        freg_or_reg_name(tree->ast_node.f_un_rm_type_h.rs1, &s4, &s4_len);
        sep( &s5, &s5_len);
        switch (tree->ast_node.f_un_rm_type_h.rm) { 
          case RISCV_RM_RNE:{
            s6 = "rne";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RTZ:{
            s6 = "rtz";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RDN:{
            s6 = "rdn";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RMM:{
            s6 = "rmm";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RUP:{
            s6 = "rup";
            s6_len = 3;
            break;
          }
          case RISCV_RM_DYN:{
            s6 = "dyn";
            s6_len = 3;
            break;
          }
        }
        memcpy(buff , s0, s0_len);
        memcpy(buff  + s0_len, s1, s1_len);
        memcpy(buff  + s0_len + s1_len, s2, s2_len);
        memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
      if (tree->ast_node.f_un_rm_type_h.fcvt_h_lu == RISCV_FCVT_H_D) { 
        char *s0; size_t s0_len;
        char *s1; size_t s1_len;
        char *s2; size_t s2_len;
        char *s3; size_t s3_len;
        char *s4; size_t s4_len;
        char *s5; size_t s5_len;
        char *s6; size_t s6_len;
        s0 = "fcvt.h.d";
        s0_len = 8;
        spc( &s1, &s1_len);
        freg_or_reg_name(tree->ast_node.f_un_rm_type_h.rd, &s2, &s2_len);
        sep( &s3, &s3_len);
        freg_or_reg_name(tree->ast_node.f_un_rm_type_h.rs1, &s4, &s4_len);
        sep( &s5, &s5_len);
        switch (tree->ast_node.f_un_rm_type_h.rm) { 
          case RISCV_RM_RNE:{
            s6 = "rne";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RTZ:{
            s6 = "rtz";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RDN:{
            s6 = "rdn";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RMM:{
            s6 = "rmm";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RUP:{
            s6 = "rup";
            s6_len = 3;
            break;
          }
          case RISCV_RM_DYN:{
            s6 = "dyn";
            s6_len = 3;
            break;
          }
        }
        memcpy(buff , s0, s0_len);
        memcpy(buff  + s0_len, s1, s1_len);
        memcpy(buff  + s0_len + s1_len, s2, s2_len);
        memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
      if (tree->ast_node.f_un_rm_type_h.fcvt_h_lu == RISCV_FCVT_S_H) { 
        char *s0; size_t s0_len;
        char *s1; size_t s1_len;
        char *s2; size_t s2_len;
        char *s3; size_t s3_len;
        char *s4; size_t s4_len;
        char *s5; size_t s5_len;
        char *s6; size_t s6_len;
        s0 = "fcvt.s.h";
        s0_len = 8;
        spc( &s1, &s1_len);
        freg_or_reg_name(tree->ast_node.f_un_rm_type_h.rd, &s2, &s2_len);
        sep( &s3, &s3_len);
        freg_or_reg_name(tree->ast_node.f_un_rm_type_h.rs1, &s4, &s4_len);
        sep( &s5, &s5_len);
        switch (tree->ast_node.f_un_rm_type_h.rm) { 
          case RISCV_RM_RNE:{
            s6 = "rne";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RTZ:{
            s6 = "rtz";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RDN:{
            s6 = "rdn";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RMM:{
            s6 = "rmm";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RUP:{
            s6 = "rup";
            s6_len = 3;
            break;
          }
          case RISCV_RM_DYN:{
            s6 = "dyn";
            s6_len = 3;
            break;
          }
        }
        memcpy(buff , s0, s0_len);
        memcpy(buff  + s0_len, s1, s1_len);
        memcpy(buff  + s0_len + s1_len, s2, s2_len);
        memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
      if (tree->ast_node.f_un_rm_type_h.fcvt_h_lu == RISCV_FCVT_D_H) { 
        char *s0; size_t s0_len;
        char *s1; size_t s1_len;
        char *s2; size_t s2_len;
        char *s3; size_t s3_len;
        char *s4; size_t s4_len;
        char *s5; size_t s5_len;
        char *s6; size_t s6_len;
        s0 = "fcvt.d.h";
        s0_len = 8;
        spc( &s1, &s1_len);
        freg_or_reg_name(tree->ast_node.f_un_rm_type_h.rd, &s2, &s2_len);
        sep( &s3, &s3_len);
        freg_or_reg_name(tree->ast_node.f_un_rm_type_h.rs1, &s4, &s4_len);
        sep( &s5, &s5_len);
        switch (tree->ast_node.f_un_rm_type_h.rm) { 
          case RISCV_RM_RNE:{
            s6 = "rne";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RTZ:{
            s6 = "rtz";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RDN:{
            s6 = "rdn";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RMM:{
            s6 = "rmm";
            s6_len = 3;
            break;
          }
          case RISCV_RM_RUP:{
            s6 = "rup";
            s6_len = 3;
            break;
          }
          case RISCV_RM_DYN:{
            s6 = "dyn";
            s6_len = 3;
            break;
          }
        }
        memcpy(buff , s0, s0_len);
        memcpy(buff  + s0_len, s1, s1_len);
        memcpy(buff  + s0_len + s1_len, s2, s2_len);
        memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
    }
    break;
    case RISCV_F_UN_TYPE_H: {

      if (tree->ast_node.f_un_type_h.fmv_h_x == RISCV_FMV_X_H) { 
        char *s0; size_t s0_len;
        char *s1; size_t s1_len;
        char *s2; size_t s2_len;
        char *s3; size_t s3_len;
        char *s4; size_t s4_len;
        s0 = "fmv.x.h";
        s0_len = 7;
        spc( &s1, &s1_len);
        switch (tree->ast_node.f_un_type_h.rd) { 
          case 0x08:{
            s2 = "fp";
            s2_len = 2;
            break;
          }
          case 0x15:{
            s2 = "s5";
            s2_len = 2;
            break;
          }
          case 0x01:{
            s2 = "ra";
            s2_len = 2;
            break;
          }
          case 0x06:{
            s2 = "t1";
            s2_len = 2;
            break;
          }
          case 0x09:{
            s2 = "s1";
            s2_len = 2;
            break;
          }
          case 0x10:{
            s2 = "a6";
            s2_len = 2;
            break;
          }
          case 0x1B:{
            s2 = "s11";
            s2_len = 3;
            break;
          }
          case 0x1C:{
            s2 = "t3";
            s2_len = 2;
            break;
          }
          case 0x16:{
            s2 = "s6";
            s2_len = 2;
            break;
          }
          case 0x00:{
            s2 = "zero";
            s2_len = 4;
            break;
          }
          case 0x0A:{
            s2 = "a0";
            s2_len = 2;
            break;
          }
          case 0x1A:{
            s2 = "s10";
            s2_len = 3;
            break;
          }
          case 0x17:{
            s2 = "s7";
            s2_len = 2;
            break;
          }
          case 0x0C:{
            s2 = "a2";
            s2_len = 2;
            break;
          }
          case 0x18:{
            s2 = "s8";
            s2_len = 2;
            break;
          }
          case 0x02:{
            s2 = "sp";
            s2_len = 2;
            break;
          }
          case 0x1F:{
            s2 = "t6";
            s2_len = 2;
            break;
          }
          case 0x0B:{
            s2 = "a1";
            s2_len = 2;
            break;
          }
          case 0x07:{
            s2 = "t2";
            s2_len = 2;
            break;
          }
          case 0x13:{
            s2 = "s3";
            s2_len = 2;
            break;
          }
          case 0x04:{
            s2 = "tp";
            s2_len = 2;
            break;
          }
          case 0x19:{
            s2 = "s9";
            s2_len = 2;
            break;
          }
          case 0x12:{
            s2 = "s2";
            s2_len = 2;
            break;
          }
          case 0x14:{
            s2 = "s4";
            s2_len = 2;
            break;
          }
          case 0x0E:{
            s2 = "a4";
            s2_len = 2;
            break;
          }
          case 0x1E:{
            s2 = "t5";
            s2_len = 2;
            break;
          }
          case 0x11:{
            s2 = "a7";
            s2_len = 2;
            break;
          }
          case 0x03:{
            s2 = "gp";
            s2_len = 2;
            break;
          }
          case 0x05:{
            s2 = "t0";
            s2_len = 2;
            break;
          }
          case 0x1D:{
            s2 = "t4";
            s2_len = 2;
            break;
          }
          case 0x0D:{
            s2 = "a3";
            s2_len = 2;
            break;
          }
          case 0x0F:{
            s2 = "a5";
            s2_len = 2;
            break;
          }
        }
        sep( &s3, &s3_len);
        switch (tree->ast_node.f_un_type_h.rs1) { 
          case 0x08:{
            s4 = "fs0";
            s4_len = 3;
            break;
          }
          case 0x15:{
            s4 = "fs5";
            s4_len = 3;
            break;
          }
          case 0x01:{
            s4 = "ft1";
            s4_len = 3;
            break;
          }
          case 0x06:{
            s4 = "ft6";
            s4_len = 3;
            break;
          }
          case 0x09:{
            s4 = "fs1";
            s4_len = 3;
            break;
          }
          case 0x10:{
            s4 = "fa6";
            s4_len = 3;
            break;
          }
          case 0x1B:{
            s4 = "fs11";
            s4_len = 4;
            break;
          }
          case 0x1C:{
            s4 = "ft8";
            s4_len = 3;
            break;
          }
          case 0x16:{
            s4 = "fs6";
            s4_len = 3;
            break;
          }
          case 0x00:{
            s4 = "ft0";
            s4_len = 3;
            break;
          }
          case 0x0A:{
            s4 = "fa0";
            s4_len = 3;
            break;
          }
          case 0x1A:{
            s4 = "fs10";
            s4_len = 4;
            break;
          }
          case 0x17:{
            s4 = "fs7";
            s4_len = 3;
            break;
          }
          case 0x0C:{
            s4 = "fa2";
            s4_len = 3;
            break;
          }
          case 0x18:{
            s4 = "fs8";
            s4_len = 3;
            break;
          }
          case 0x02:{
            s4 = "ft2";
            s4_len = 3;
            break;
          }
          case 0x1F:{
            s4 = "ft11";
            s4_len = 4;
            break;
          }
          case 0x0B:{
            s4 = "fa1";
            s4_len = 3;
            break;
          }
          case 0x07:{
            s4 = "ft7";
            s4_len = 3;
            break;
          }
          case 0x13:{
            s4 = "fs3";
            s4_len = 3;
            break;
          }
          case 0x04:{
            s4 = "ft4";
            s4_len = 3;
            break;
          }
          case 0x19:{
            s4 = "fs9";
            s4_len = 3;
            break;
          }
          case 0x12:{
            s4 = "fs2";
            s4_len = 3;
            break;
          }
          case 0x14:{
            s4 = "fs4";
            s4_len = 3;
            break;
          }
          case 0x0E:{
            s4 = "fa4";
            s4_len = 3;
            break;
          }
          case 0x1E:{
            s4 = "ft10";
            s4_len = 4;
            break;
          }
          case 0x11:{
            s4 = "fa7";
            s4_len = 3;
            break;
          }
          case 0x03:{
            s4 = "ft3";
            s4_len = 3;
            break;
          }
          case 0x05:{
            s4 = "ft5";
            s4_len = 3;
            break;
          }
          case 0x1D:{
            s4 = "ft9";
            s4_len = 3;
            break;
          }
          case 0x0D:{
            s4 = "fa3";
            s4_len = 3;
            break;
          }
          case 0x0F:{
            s4 = "fa5";
            s4_len = 3;
            break;
          }
        }
        memcpy(buff , s0, s0_len);
        memcpy(buff  + s0_len, s1, s1_len);
        memcpy(buff  + s0_len + s1_len, s2, s2_len);
        memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      }
      if (tree->ast_node.f_un_type_h.fmv_h_x == RISCV_FMV_H_X) { 
        char *s0; size_t s0_len;
        char *s1; size_t s1_len;
        char *s2; size_t s2_len;
        char *s3; size_t s3_len;
        char *s4; size_t s4_len;
        s0 = "fmv.h.x";
        s0_len = 7;
        spc( &s1, &s1_len);
        switch (tree->ast_node.f_un_type_h.rd) { 
          case 0x08:{
            s2 = "fs0";
            s2_len = 3;
            break;
          }
          case 0x15:{
            s2 = "fs5";
            s2_len = 3;
            break;
          }
          case 0x01:{
            s2 = "ft1";
            s2_len = 3;
            break;
          }
          case 0x06:{
            s2 = "ft6";
            s2_len = 3;
            break;
          }
          case 0x09:{
            s2 = "fs1";
            s2_len = 3;
            break;
          }
          case 0x10:{
            s2 = "fa6";
            s2_len = 3;
            break;
          }
          case 0x1B:{
            s2 = "fs11";
            s2_len = 4;
            break;
          }
          case 0x1C:{
            s2 = "ft8";
            s2_len = 3;
            break;
          }
          case 0x16:{
            s2 = "fs6";
            s2_len = 3;
            break;
          }
          case 0x00:{
            s2 = "ft0";
            s2_len = 3;
            break;
          }
          case 0x0A:{
            s2 = "fa0";
            s2_len = 3;
            break;
          }
          case 0x1A:{
            s2 = "fs10";
            s2_len = 4;
            break;
          }
          case 0x17:{
            s2 = "fs7";
            s2_len = 3;
            break;
          }
          case 0x0C:{
            s2 = "fa2";
            s2_len = 3;
            break;
          }
          case 0x18:{
            s2 = "fs8";
            s2_len = 3;
            break;
          }
          case 0x02:{
            s2 = "ft2";
            s2_len = 3;
            break;
          }
          case 0x1F:{
            s2 = "ft11";
            s2_len = 4;
            break;
          }
          case 0x0B:{
            s2 = "fa1";
            s2_len = 3;
            break;
          }
          case 0x07:{
            s2 = "ft7";
            s2_len = 3;
            break;
          }
          case 0x13:{
            s2 = "fs3";
            s2_len = 3;
            break;
          }
          case 0x04:{
            s2 = "ft4";
            s2_len = 3;
            break;
          }
          case 0x19:{
            s2 = "fs9";
            s2_len = 3;
            break;
          }
          case 0x12:{
            s2 = "fs2";
            s2_len = 3;
            break;
          }
          case 0x14:{
            s2 = "fs4";
            s2_len = 3;
            break;
          }
          case 0x0E:{
            s2 = "fa4";
            s2_len = 3;
            break;
          }
          case 0x1E:{
            s2 = "ft10";
            s2_len = 4;
            break;
          }
          case 0x11:{
            s2 = "fa7";
            s2_len = 3;
            break;
          }
          case 0x03:{
            s2 = "ft3";
            s2_len = 3;
            break;
          }
          case 0x05:{
            s2 = "ft5";
            s2_len = 3;
            break;
          }
          case 0x1D:{
            s2 = "ft9";
            s2_len = 3;
            break;
          }
          case 0x0D:{
            s2 = "fa3";
            s2_len = 3;
            break;
          }
          case 0x0F:{
            s2 = "fa5";
            s2_len = 3;
            break;
          }
        }
        sep( &s3, &s3_len);
        switch (tree->ast_node.f_un_type_h.rs1) { 
          case 0x08:{
            s4 = "fp";
            s4_len = 2;
            break;
          }
          case 0x15:{
            s4 = "s5";
            s4_len = 2;
            break;
          }
          case 0x01:{
            s4 = "ra";
            s4_len = 2;
            break;
          }
          case 0x06:{
            s4 = "t1";
            s4_len = 2;
            break;
          }
          case 0x09:{
            s4 = "s1";
            s4_len = 2;
            break;
          }
          case 0x10:{
            s4 = "a6";
            s4_len = 2;
            break;
          }
          case 0x1B:{
            s4 = "s11";
            s4_len = 3;
            break;
          }
          case 0x1C:{
            s4 = "t3";
            s4_len = 2;
            break;
          }
          case 0x16:{
            s4 = "s6";
            s4_len = 2;
            break;
          }
          case 0x00:{
            s4 = "zero";
            s4_len = 4;
            break;
          }
          case 0x0A:{
            s4 = "a0";
            s4_len = 2;
            break;
          }
          case 0x1A:{
            s4 = "s10";
            s4_len = 3;
            break;
          }
          case 0x17:{
            s4 = "s7";
            s4_len = 2;
            break;
          }
          case 0x0C:{
            s4 = "a2";
            s4_len = 2;
            break;
          }
          case 0x18:{
            s4 = "s8";
            s4_len = 2;
            break;
          }
          case 0x02:{
            s4 = "sp";
            s4_len = 2;
            break;
          }
          case 0x1F:{
            s4 = "t6";
            s4_len = 2;
            break;
          }
          case 0x0B:{
            s4 = "a1";
            s4_len = 2;
            break;
          }
          case 0x07:{
            s4 = "t2";
            s4_len = 2;
            break;
          }
          case 0x13:{
            s4 = "s3";
            s4_len = 2;
            break;
          }
          case 0x04:{
            s4 = "tp";
            s4_len = 2;
            break;
          }
          case 0x19:{
            s4 = "s9";
            s4_len = 2;
            break;
          }
          case 0x12:{
            s4 = "s2";
            s4_len = 2;
            break;
          }
          case 0x14:{
            s4 = "s4";
            s4_len = 2;
            break;
          }
          case 0x0E:{
            s4 = "a4";
            s4_len = 2;
            break;
          }
          case 0x1E:{
            s4 = "t5";
            s4_len = 2;
            break;
          }
          case 0x11:{
            s4 = "a7";
            s4_len = 2;
            break;
          }
          case 0x03:{
            s4 = "gp";
            s4_len = 2;
            break;
          }
          case 0x05:{
            s4 = "t0";
            s4_len = 2;
            break;
          }
          case 0x1D:{
            s4 = "t4";
            s4_len = 2;
            break;
          }
          case 0x0D:{
            s4 = "a3";
            s4_len = 2;
            break;
          }
          case 0x0F:{
            s4 = "a5";
            s4_len = 2;
            break;
          }
        }
        memcpy(buff , s0, s0_len);
        memcpy(buff  + s0_len, s1, s1_len);
        memcpy(buff  + s0_len + s1_len, s2, s2_len);
        memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      }
      if (tree->ast_node.f_un_type_h.fmv_h_x == RISCV_FCLASS_H) { 
        char *s0; size_t s0_len;
        char *s1; size_t s1_len;
        char *s2; size_t s2_len;
        char *s3; size_t s3_len;
        char *s4; size_t s4_len;
        s0 = "fclass.h";
        s0_len = 8;
        spc( &s1, &s1_len);
        switch (tree->ast_node.f_un_type_h.rd) { 
          case 0x08:{
            s2 = "fp";
            s2_len = 2;
            break;
          }
          case 0x15:{
            s2 = "s5";
            s2_len = 2;
            break;
          }
          case 0x01:{
            s2 = "ra";
            s2_len = 2;
            break;
          }
          case 0x06:{
            s2 = "t1";
            s2_len = 2;
            break;
          }
          case 0x09:{
            s2 = "s1";
            s2_len = 2;
            break;
          }
          case 0x10:{
            s2 = "a6";
            s2_len = 2;
            break;
          }
          case 0x1B:{
            s2 = "s11";
            s2_len = 3;
            break;
          }
          case 0x1C:{
            s2 = "t3";
            s2_len = 2;
            break;
          }
          case 0x16:{
            s2 = "s6";
            s2_len = 2;
            break;
          }
          case 0x00:{
            s2 = "zero";
            s2_len = 4;
            break;
          }
          case 0x0A:{
            s2 = "a0";
            s2_len = 2;
            break;
          }
          case 0x1A:{
            s2 = "s10";
            s2_len = 3;
            break;
          }
          case 0x17:{
            s2 = "s7";
            s2_len = 2;
            break;
          }
          case 0x0C:{
            s2 = "a2";
            s2_len = 2;
            break;
          }
          case 0x18:{
            s2 = "s8";
            s2_len = 2;
            break;
          }
          case 0x02:{
            s2 = "sp";
            s2_len = 2;
            break;
          }
          case 0x1F:{
            s2 = "t6";
            s2_len = 2;
            break;
          }
          case 0x0B:{
            s2 = "a1";
            s2_len = 2;
            break;
          }
          case 0x07:{
            s2 = "t2";
            s2_len = 2;
            break;
          }
          case 0x13:{
            s2 = "s3";
            s2_len = 2;
            break;
          }
          case 0x04:{
            s2 = "tp";
            s2_len = 2;
            break;
          }
          case 0x19:{
            s2 = "s9";
            s2_len = 2;
            break;
          }
          case 0x12:{
            s2 = "s2";
            s2_len = 2;
            break;
          }
          case 0x14:{
            s2 = "s4";
            s2_len = 2;
            break;
          }
          case 0x0E:{
            s2 = "a4";
            s2_len = 2;
            break;
          }
          case 0x1E:{
            s2 = "t5";
            s2_len = 2;
            break;
          }
          case 0x11:{
            s2 = "a7";
            s2_len = 2;
            break;
          }
          case 0x03:{
            s2 = "gp";
            s2_len = 2;
            break;
          }
          case 0x05:{
            s2 = "t0";
            s2_len = 2;
            break;
          }
          case 0x1D:{
            s2 = "t4";
            s2_len = 2;
            break;
          }
          case 0x0D:{
            s2 = "a3";
            s2_len = 2;
            break;
          }
          case 0x0F:{
            s2 = "a5";
            s2_len = 2;
            break;
          }
        }
        sep( &s3, &s3_len);
        freg_or_reg_name(tree->ast_node.f_un_type_h.rs1, &s4, &s4_len);
        memcpy(buff , s0, s0_len);
        memcpy(buff  + s0_len, s1, s1_len);
        memcpy(buff  + s0_len + s1_len, s2, s2_len);
        memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
        memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      }
    }
    break;
    case RISCV_FLI_H: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      s0 = "fli.h";
      s0_len = 5;
      spc( &s1, &s1_len);
      switch (tree->ast_node.riscv_fli_h.rd) { 
        case 0x08:{
          s2 = "fs0";
          s2_len = 3;
          break;
        }
        case 0x15:{
          s2 = "fs5";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "ft1";
          s2_len = 3;
          break;
        }
        case 0x06:{
          s2 = "ft6";
          s2_len = 3;
          break;
        }
        case 0x09:{
          s2 = "fs1";
          s2_len = 3;
          break;
        }
        case 0x10:{
          s2 = "fa6";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "fs11";
          s2_len = 4;
          break;
        }
        case 0x1C:{
          s2 = "ft8";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "fs6";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "ft0";
          s2_len = 3;
          break;
        }
        case 0x0A:{
          s2 = "fa0";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "fs10";
          s2_len = 4;
          break;
        }
        case 0x17:{
          s2 = "fs7";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "fa2";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "fs8";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "ft2";
          s2_len = 3;
          break;
        }
        case 0x1F:{
          s2 = "ft11";
          s2_len = 4;
          break;
        }
        case 0x0B:{
          s2 = "fa1";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "ft7";
          s2_len = 3;
          break;
        }
        case 0x13:{
          s2 = "fs3";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "ft4";
          s2_len = 3;
          break;
        }
        case 0x19:{
          s2 = "fs9";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "fs2";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "fs4";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "fa4";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "ft10";
          s2_len = 4;
          break;
        }
        case 0x11:{
          s2 = "fa7";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "ft3";
          s2_len = 3;
          break;
        }
        case 0x05:{
          s2 = "ft5";
          s2_len = 3;
          break;
        }
        case 0x1D:{
          s2 = "ft9";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "fa3";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "fa5";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      hex_bits_5(tree->ast_node.riscv_fli_h.constantidx, &s4, &s4_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      }
    }
    break;
    case RISCV_FLI_S: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      s0 = "fli.s";
      s0_len = 5;
      spc( &s1, &s1_len);
      switch (tree->ast_node.riscv_fli_s.rd) { 
        case 0x08:{
          s2 = "fs0";
          s2_len = 3;
          break;
        }
        case 0x15:{
          s2 = "fs5";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "ft1";
          s2_len = 3;
          break;
        }
        case 0x06:{
          s2 = "ft6";
          s2_len = 3;
          break;
        }
        case 0x09:{
          s2 = "fs1";
          s2_len = 3;
          break;
        }
        case 0x10:{
          s2 = "fa6";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "fs11";
          s2_len = 4;
          break;
        }
        case 0x1C:{
          s2 = "ft8";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "fs6";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "ft0";
          s2_len = 3;
          break;
        }
        case 0x0A:{
          s2 = "fa0";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "fs10";
          s2_len = 4;
          break;
        }
        case 0x17:{
          s2 = "fs7";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "fa2";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "fs8";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "ft2";
          s2_len = 3;
          break;
        }
        case 0x1F:{
          s2 = "ft11";
          s2_len = 4;
          break;
        }
        case 0x0B:{
          s2 = "fa1";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "ft7";
          s2_len = 3;
          break;
        }
        case 0x13:{
          s2 = "fs3";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "ft4";
          s2_len = 3;
          break;
        }
        case 0x19:{
          s2 = "fs9";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "fs2";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "fs4";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "fa4";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "ft10";
          s2_len = 4;
          break;
        }
        case 0x11:{
          s2 = "fa7";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "ft3";
          s2_len = 3;
          break;
        }
        case 0x05:{
          s2 = "ft5";
          s2_len = 3;
          break;
        }
        case 0x1D:{
          s2 = "ft9";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "fa3";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "fa5";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      hex_bits_5(tree->ast_node.riscv_fli_s.constantidx, &s4, &s4_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      }
    }
    break;
    case RISCV_FLI_D: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      s0 = "fli.d";
      s0_len = 5;
      spc( &s1, &s1_len);
      switch (tree->ast_node.riscv_fli_d.rd) { 
        case 0x08:{
          s2 = "fs0";
          s2_len = 3;
          break;
        }
        case 0x15:{
          s2 = "fs5";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "ft1";
          s2_len = 3;
          break;
        }
        case 0x06:{
          s2 = "ft6";
          s2_len = 3;
          break;
        }
        case 0x09:{
          s2 = "fs1";
          s2_len = 3;
          break;
        }
        case 0x10:{
          s2 = "fa6";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "fs11";
          s2_len = 4;
          break;
        }
        case 0x1C:{
          s2 = "ft8";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "fs6";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "ft0";
          s2_len = 3;
          break;
        }
        case 0x0A:{
          s2 = "fa0";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "fs10";
          s2_len = 4;
          break;
        }
        case 0x17:{
          s2 = "fs7";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "fa2";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "fs8";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "ft2";
          s2_len = 3;
          break;
        }
        case 0x1F:{
          s2 = "ft11";
          s2_len = 4;
          break;
        }
        case 0x0B:{
          s2 = "fa1";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "ft7";
          s2_len = 3;
          break;
        }
        case 0x13:{
          s2 = "fs3";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "ft4";
          s2_len = 3;
          break;
        }
        case 0x19:{
          s2 = "fs9";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "fs2";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "fs4";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "fa4";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "ft10";
          s2_len = 4;
          break;
        }
        case 0x11:{
          s2 = "fa7";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "ft3";
          s2_len = 3;
          break;
        }
        case 0x05:{
          s2 = "ft5";
          s2_len = 3;
          break;
        }
        case 0x1D:{
          s2 = "ft9";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "fa3";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "fa5";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      hex_bits_5(tree->ast_node.riscv_fli_d.constantidx, &s4, &s4_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      }
    }
    break;
    case RISCV_FMINM_H: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      s0 = "fminm.h";
      s0_len = 7;
      spc( &s1, &s1_len);
      switch (tree->ast_node.riscv_fminm_h.rd) { 
        case 0x08:{
          s2 = "fs0";
          s2_len = 3;
          break;
        }
        case 0x15:{
          s2 = "fs5";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "ft1";
          s2_len = 3;
          break;
        }
        case 0x06:{
          s2 = "ft6";
          s2_len = 3;
          break;
        }
        case 0x09:{
          s2 = "fs1";
          s2_len = 3;
          break;
        }
        case 0x10:{
          s2 = "fa6";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "fs11";
          s2_len = 4;
          break;
        }
        case 0x1C:{
          s2 = "ft8";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "fs6";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "ft0";
          s2_len = 3;
          break;
        }
        case 0x0A:{
          s2 = "fa0";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "fs10";
          s2_len = 4;
          break;
        }
        case 0x17:{
          s2 = "fs7";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "fa2";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "fs8";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "ft2";
          s2_len = 3;
          break;
        }
        case 0x1F:{
          s2 = "ft11";
          s2_len = 4;
          break;
        }
        case 0x0B:{
          s2 = "fa1";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "ft7";
          s2_len = 3;
          break;
        }
        case 0x13:{
          s2 = "fs3";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "ft4";
          s2_len = 3;
          break;
        }
        case 0x19:{
          s2 = "fs9";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "fs2";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "fs4";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "fa4";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "ft10";
          s2_len = 4;
          break;
        }
        case 0x11:{
          s2 = "fa7";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "ft3";
          s2_len = 3;
          break;
        }
        case 0x05:{
          s2 = "ft5";
          s2_len = 3;
          break;
        }
        case 0x1D:{
          s2 = "ft9";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "fa3";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "fa5";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.riscv_fminm_h.rs1) { 
        case 0x08:{
          s4 = "fs0";
          s4_len = 3;
          break;
        }
        case 0x15:{
          s4 = "fs5";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "ft1";
          s4_len = 3;
          break;
        }
        case 0x06:{
          s4 = "ft6";
          s4_len = 3;
          break;
        }
        case 0x09:{
          s4 = "fs1";
          s4_len = 3;
          break;
        }
        case 0x10:{
          s4 = "fa6";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "fs11";
          s4_len = 4;
          break;
        }
        case 0x1C:{
          s4 = "ft8";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "fs6";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "ft0";
          s4_len = 3;
          break;
        }
        case 0x0A:{
          s4 = "fa0";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "fs10";
          s4_len = 4;
          break;
        }
        case 0x17:{
          s4 = "fs7";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "fa2";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "fs8";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "ft2";
          s4_len = 3;
          break;
        }
        case 0x1F:{
          s4 = "ft11";
          s4_len = 4;
          break;
        }
        case 0x0B:{
          s4 = "fa1";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "ft7";
          s4_len = 3;
          break;
        }
        case 0x13:{
          s4 = "fs3";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "ft4";
          s4_len = 3;
          break;
        }
        case 0x19:{
          s4 = "fs9";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "fs2";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "fs4";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "fa4";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "ft10";
          s4_len = 4;
          break;
        }
        case 0x11:{
          s4 = "fa7";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "ft3";
          s4_len = 3;
          break;
        }
        case 0x05:{
          s4 = "ft5";
          s4_len = 3;
          break;
        }
        case 0x1D:{
          s4 = "ft9";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "fa3";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "fa5";
          s4_len = 3;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.riscv_fminm_h.rs2) { 
        case 0x08:{
          s6 = "fs0";
          s6_len = 3;
          break;
        }
        case 0x15:{
          s6 = "fs5";
          s6_len = 3;
          break;
        }
        case 0x01:{
          s6 = "ft1";
          s6_len = 3;
          break;
        }
        case 0x06:{
          s6 = "ft6";
          s6_len = 3;
          break;
        }
        case 0x09:{
          s6 = "fs1";
          s6_len = 3;
          break;
        }
        case 0x10:{
          s6 = "fa6";
          s6_len = 3;
          break;
        }
        case 0x1B:{
          s6 = "fs11";
          s6_len = 4;
          break;
        }
        case 0x1C:{
          s6 = "ft8";
          s6_len = 3;
          break;
        }
        case 0x16:{
          s6 = "fs6";
          s6_len = 3;
          break;
        }
        case 0x00:{
          s6 = "ft0";
          s6_len = 3;
          break;
        }
        case 0x0A:{
          s6 = "fa0";
          s6_len = 3;
          break;
        }
        case 0x1A:{
          s6 = "fs10";
          s6_len = 4;
          break;
        }
        case 0x17:{
          s6 = "fs7";
          s6_len = 3;
          break;
        }
        case 0x0C:{
          s6 = "fa2";
          s6_len = 3;
          break;
        }
        case 0x18:{
          s6 = "fs8";
          s6_len = 3;
          break;
        }
        case 0x02:{
          s6 = "ft2";
          s6_len = 3;
          break;
        }
        case 0x1F:{
          s6 = "ft11";
          s6_len = 4;
          break;
        }
        case 0x0B:{
          s6 = "fa1";
          s6_len = 3;
          break;
        }
        case 0x07:{
          s6 = "ft7";
          s6_len = 3;
          break;
        }
        case 0x13:{
          s6 = "fs3";
          s6_len = 3;
          break;
        }
        case 0x04:{
          s6 = "ft4";
          s6_len = 3;
          break;
        }
        case 0x19:{
          s6 = "fs9";
          s6_len = 3;
          break;
        }
        case 0x12:{
          s6 = "fs2";
          s6_len = 3;
          break;
        }
        case 0x14:{
          s6 = "fs4";
          s6_len = 3;
          break;
        }
        case 0x0E:{
          s6 = "fa4";
          s6_len = 3;
          break;
        }
        case 0x1E:{
          s6 = "ft10";
          s6_len = 4;
          break;
        }
        case 0x11:{
          s6 = "fa7";
          s6_len = 3;
          break;
        }
        case 0x03:{
          s6 = "ft3";
          s6_len = 3;
          break;
        }
        case 0x05:{
          s6 = "ft5";
          s6_len = 3;
          break;
        }
        case 0x1D:{
          s6 = "ft9";
          s6_len = 3;
          break;
        }
        case 0x0D:{
          s6 = "fa3";
          s6_len = 3;
          break;
        }
        case 0x0F:{
          s6 = "fa5";
          s6_len = 3;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
    }
    break;
    case RISCV_FMAXM_H: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      s0 = "fmaxm.h";
      s0_len = 7;
      spc( &s1, &s1_len);
      switch (tree->ast_node.riscv_fmaxm_h.rd) { 
        case 0x08:{
          s2 = "fs0";
          s2_len = 3;
          break;
        }
        case 0x15:{
          s2 = "fs5";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "ft1";
          s2_len = 3;
          break;
        }
        case 0x06:{
          s2 = "ft6";
          s2_len = 3;
          break;
        }
        case 0x09:{
          s2 = "fs1";
          s2_len = 3;
          break;
        }
        case 0x10:{
          s2 = "fa6";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "fs11";
          s2_len = 4;
          break;
        }
        case 0x1C:{
          s2 = "ft8";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "fs6";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "ft0";
          s2_len = 3;
          break;
        }
        case 0x0A:{
          s2 = "fa0";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "fs10";
          s2_len = 4;
          break;
        }
        case 0x17:{
          s2 = "fs7";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "fa2";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "fs8";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "ft2";
          s2_len = 3;
          break;
        }
        case 0x1F:{
          s2 = "ft11";
          s2_len = 4;
          break;
        }
        case 0x0B:{
          s2 = "fa1";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "ft7";
          s2_len = 3;
          break;
        }
        case 0x13:{
          s2 = "fs3";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "ft4";
          s2_len = 3;
          break;
        }
        case 0x19:{
          s2 = "fs9";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "fs2";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "fs4";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "fa4";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "ft10";
          s2_len = 4;
          break;
        }
        case 0x11:{
          s2 = "fa7";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "ft3";
          s2_len = 3;
          break;
        }
        case 0x05:{
          s2 = "ft5";
          s2_len = 3;
          break;
        }
        case 0x1D:{
          s2 = "ft9";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "fa3";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "fa5";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.riscv_fmaxm_h.rs1) { 
        case 0x08:{
          s4 = "fs0";
          s4_len = 3;
          break;
        }
        case 0x15:{
          s4 = "fs5";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "ft1";
          s4_len = 3;
          break;
        }
        case 0x06:{
          s4 = "ft6";
          s4_len = 3;
          break;
        }
        case 0x09:{
          s4 = "fs1";
          s4_len = 3;
          break;
        }
        case 0x10:{
          s4 = "fa6";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "fs11";
          s4_len = 4;
          break;
        }
        case 0x1C:{
          s4 = "ft8";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "fs6";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "ft0";
          s4_len = 3;
          break;
        }
        case 0x0A:{
          s4 = "fa0";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "fs10";
          s4_len = 4;
          break;
        }
        case 0x17:{
          s4 = "fs7";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "fa2";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "fs8";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "ft2";
          s4_len = 3;
          break;
        }
        case 0x1F:{
          s4 = "ft11";
          s4_len = 4;
          break;
        }
        case 0x0B:{
          s4 = "fa1";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "ft7";
          s4_len = 3;
          break;
        }
        case 0x13:{
          s4 = "fs3";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "ft4";
          s4_len = 3;
          break;
        }
        case 0x19:{
          s4 = "fs9";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "fs2";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "fs4";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "fa4";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "ft10";
          s4_len = 4;
          break;
        }
        case 0x11:{
          s4 = "fa7";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "ft3";
          s4_len = 3;
          break;
        }
        case 0x05:{
          s4 = "ft5";
          s4_len = 3;
          break;
        }
        case 0x1D:{
          s4 = "ft9";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "fa3";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "fa5";
          s4_len = 3;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.riscv_fmaxm_h.rs2) { 
        case 0x08:{
          s6 = "fs0";
          s6_len = 3;
          break;
        }
        case 0x15:{
          s6 = "fs5";
          s6_len = 3;
          break;
        }
        case 0x01:{
          s6 = "ft1";
          s6_len = 3;
          break;
        }
        case 0x06:{
          s6 = "ft6";
          s6_len = 3;
          break;
        }
        case 0x09:{
          s6 = "fs1";
          s6_len = 3;
          break;
        }
        case 0x10:{
          s6 = "fa6";
          s6_len = 3;
          break;
        }
        case 0x1B:{
          s6 = "fs11";
          s6_len = 4;
          break;
        }
        case 0x1C:{
          s6 = "ft8";
          s6_len = 3;
          break;
        }
        case 0x16:{
          s6 = "fs6";
          s6_len = 3;
          break;
        }
        case 0x00:{
          s6 = "ft0";
          s6_len = 3;
          break;
        }
        case 0x0A:{
          s6 = "fa0";
          s6_len = 3;
          break;
        }
        case 0x1A:{
          s6 = "fs10";
          s6_len = 4;
          break;
        }
        case 0x17:{
          s6 = "fs7";
          s6_len = 3;
          break;
        }
        case 0x0C:{
          s6 = "fa2";
          s6_len = 3;
          break;
        }
        case 0x18:{
          s6 = "fs8";
          s6_len = 3;
          break;
        }
        case 0x02:{
          s6 = "ft2";
          s6_len = 3;
          break;
        }
        case 0x1F:{
          s6 = "ft11";
          s6_len = 4;
          break;
        }
        case 0x0B:{
          s6 = "fa1";
          s6_len = 3;
          break;
        }
        case 0x07:{
          s6 = "ft7";
          s6_len = 3;
          break;
        }
        case 0x13:{
          s6 = "fs3";
          s6_len = 3;
          break;
        }
        case 0x04:{
          s6 = "ft4";
          s6_len = 3;
          break;
        }
        case 0x19:{
          s6 = "fs9";
          s6_len = 3;
          break;
        }
        case 0x12:{
          s6 = "fs2";
          s6_len = 3;
          break;
        }
        case 0x14:{
          s6 = "fs4";
          s6_len = 3;
          break;
        }
        case 0x0E:{
          s6 = "fa4";
          s6_len = 3;
          break;
        }
        case 0x1E:{
          s6 = "ft10";
          s6_len = 4;
          break;
        }
        case 0x11:{
          s6 = "fa7";
          s6_len = 3;
          break;
        }
        case 0x03:{
          s6 = "ft3";
          s6_len = 3;
          break;
        }
        case 0x05:{
          s6 = "ft5";
          s6_len = 3;
          break;
        }
        case 0x1D:{
          s6 = "ft9";
          s6_len = 3;
          break;
        }
        case 0x0D:{
          s6 = "fa3";
          s6_len = 3;
          break;
        }
        case 0x0F:{
          s6 = "fa5";
          s6_len = 3;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
    }
    break;
    case RISCV_FMINM_S: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      s0 = "fminm.s";
      s0_len = 7;
      spc( &s1, &s1_len);
      switch (tree->ast_node.riscv_fminm_s.rd) { 
        case 0x08:{
          s2 = "fs0";
          s2_len = 3;
          break;
        }
        case 0x15:{
          s2 = "fs5";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "ft1";
          s2_len = 3;
          break;
        }
        case 0x06:{
          s2 = "ft6";
          s2_len = 3;
          break;
        }
        case 0x09:{
          s2 = "fs1";
          s2_len = 3;
          break;
        }
        case 0x10:{
          s2 = "fa6";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "fs11";
          s2_len = 4;
          break;
        }
        case 0x1C:{
          s2 = "ft8";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "fs6";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "ft0";
          s2_len = 3;
          break;
        }
        case 0x0A:{
          s2 = "fa0";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "fs10";
          s2_len = 4;
          break;
        }
        case 0x17:{
          s2 = "fs7";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "fa2";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "fs8";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "ft2";
          s2_len = 3;
          break;
        }
        case 0x1F:{
          s2 = "ft11";
          s2_len = 4;
          break;
        }
        case 0x0B:{
          s2 = "fa1";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "ft7";
          s2_len = 3;
          break;
        }
        case 0x13:{
          s2 = "fs3";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "ft4";
          s2_len = 3;
          break;
        }
        case 0x19:{
          s2 = "fs9";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "fs2";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "fs4";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "fa4";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "ft10";
          s2_len = 4;
          break;
        }
        case 0x11:{
          s2 = "fa7";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "ft3";
          s2_len = 3;
          break;
        }
        case 0x05:{
          s2 = "ft5";
          s2_len = 3;
          break;
        }
        case 0x1D:{
          s2 = "ft9";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "fa3";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "fa5";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.riscv_fminm_s.rs1) { 
        case 0x08:{
          s4 = "fs0";
          s4_len = 3;
          break;
        }
        case 0x15:{
          s4 = "fs5";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "ft1";
          s4_len = 3;
          break;
        }
        case 0x06:{
          s4 = "ft6";
          s4_len = 3;
          break;
        }
        case 0x09:{
          s4 = "fs1";
          s4_len = 3;
          break;
        }
        case 0x10:{
          s4 = "fa6";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "fs11";
          s4_len = 4;
          break;
        }
        case 0x1C:{
          s4 = "ft8";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "fs6";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "ft0";
          s4_len = 3;
          break;
        }
        case 0x0A:{
          s4 = "fa0";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "fs10";
          s4_len = 4;
          break;
        }
        case 0x17:{
          s4 = "fs7";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "fa2";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "fs8";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "ft2";
          s4_len = 3;
          break;
        }
        case 0x1F:{
          s4 = "ft11";
          s4_len = 4;
          break;
        }
        case 0x0B:{
          s4 = "fa1";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "ft7";
          s4_len = 3;
          break;
        }
        case 0x13:{
          s4 = "fs3";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "ft4";
          s4_len = 3;
          break;
        }
        case 0x19:{
          s4 = "fs9";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "fs2";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "fs4";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "fa4";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "ft10";
          s4_len = 4;
          break;
        }
        case 0x11:{
          s4 = "fa7";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "ft3";
          s4_len = 3;
          break;
        }
        case 0x05:{
          s4 = "ft5";
          s4_len = 3;
          break;
        }
        case 0x1D:{
          s4 = "ft9";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "fa3";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "fa5";
          s4_len = 3;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.riscv_fminm_s.rs2) { 
        case 0x08:{
          s6 = "fs0";
          s6_len = 3;
          break;
        }
        case 0x15:{
          s6 = "fs5";
          s6_len = 3;
          break;
        }
        case 0x01:{
          s6 = "ft1";
          s6_len = 3;
          break;
        }
        case 0x06:{
          s6 = "ft6";
          s6_len = 3;
          break;
        }
        case 0x09:{
          s6 = "fs1";
          s6_len = 3;
          break;
        }
        case 0x10:{
          s6 = "fa6";
          s6_len = 3;
          break;
        }
        case 0x1B:{
          s6 = "fs11";
          s6_len = 4;
          break;
        }
        case 0x1C:{
          s6 = "ft8";
          s6_len = 3;
          break;
        }
        case 0x16:{
          s6 = "fs6";
          s6_len = 3;
          break;
        }
        case 0x00:{
          s6 = "ft0";
          s6_len = 3;
          break;
        }
        case 0x0A:{
          s6 = "fa0";
          s6_len = 3;
          break;
        }
        case 0x1A:{
          s6 = "fs10";
          s6_len = 4;
          break;
        }
        case 0x17:{
          s6 = "fs7";
          s6_len = 3;
          break;
        }
        case 0x0C:{
          s6 = "fa2";
          s6_len = 3;
          break;
        }
        case 0x18:{
          s6 = "fs8";
          s6_len = 3;
          break;
        }
        case 0x02:{
          s6 = "ft2";
          s6_len = 3;
          break;
        }
        case 0x1F:{
          s6 = "ft11";
          s6_len = 4;
          break;
        }
        case 0x0B:{
          s6 = "fa1";
          s6_len = 3;
          break;
        }
        case 0x07:{
          s6 = "ft7";
          s6_len = 3;
          break;
        }
        case 0x13:{
          s6 = "fs3";
          s6_len = 3;
          break;
        }
        case 0x04:{
          s6 = "ft4";
          s6_len = 3;
          break;
        }
        case 0x19:{
          s6 = "fs9";
          s6_len = 3;
          break;
        }
        case 0x12:{
          s6 = "fs2";
          s6_len = 3;
          break;
        }
        case 0x14:{
          s6 = "fs4";
          s6_len = 3;
          break;
        }
        case 0x0E:{
          s6 = "fa4";
          s6_len = 3;
          break;
        }
        case 0x1E:{
          s6 = "ft10";
          s6_len = 4;
          break;
        }
        case 0x11:{
          s6 = "fa7";
          s6_len = 3;
          break;
        }
        case 0x03:{
          s6 = "ft3";
          s6_len = 3;
          break;
        }
        case 0x05:{
          s6 = "ft5";
          s6_len = 3;
          break;
        }
        case 0x1D:{
          s6 = "ft9";
          s6_len = 3;
          break;
        }
        case 0x0D:{
          s6 = "fa3";
          s6_len = 3;
          break;
        }
        case 0x0F:{
          s6 = "fa5";
          s6_len = 3;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
    }
    break;
    case RISCV_FMAXM_S: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      s0 = "fmaxm.s";
      s0_len = 7;
      spc( &s1, &s1_len);
      switch (tree->ast_node.riscv_fmaxm_s.rd) { 
        case 0x08:{
          s2 = "fs0";
          s2_len = 3;
          break;
        }
        case 0x15:{
          s2 = "fs5";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "ft1";
          s2_len = 3;
          break;
        }
        case 0x06:{
          s2 = "ft6";
          s2_len = 3;
          break;
        }
        case 0x09:{
          s2 = "fs1";
          s2_len = 3;
          break;
        }
        case 0x10:{
          s2 = "fa6";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "fs11";
          s2_len = 4;
          break;
        }
        case 0x1C:{
          s2 = "ft8";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "fs6";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "ft0";
          s2_len = 3;
          break;
        }
        case 0x0A:{
          s2 = "fa0";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "fs10";
          s2_len = 4;
          break;
        }
        case 0x17:{
          s2 = "fs7";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "fa2";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "fs8";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "ft2";
          s2_len = 3;
          break;
        }
        case 0x1F:{
          s2 = "ft11";
          s2_len = 4;
          break;
        }
        case 0x0B:{
          s2 = "fa1";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "ft7";
          s2_len = 3;
          break;
        }
        case 0x13:{
          s2 = "fs3";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "ft4";
          s2_len = 3;
          break;
        }
        case 0x19:{
          s2 = "fs9";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "fs2";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "fs4";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "fa4";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "ft10";
          s2_len = 4;
          break;
        }
        case 0x11:{
          s2 = "fa7";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "ft3";
          s2_len = 3;
          break;
        }
        case 0x05:{
          s2 = "ft5";
          s2_len = 3;
          break;
        }
        case 0x1D:{
          s2 = "ft9";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "fa3";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "fa5";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.riscv_fmaxm_s.rs1) { 
        case 0x08:{
          s4 = "fs0";
          s4_len = 3;
          break;
        }
        case 0x15:{
          s4 = "fs5";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "ft1";
          s4_len = 3;
          break;
        }
        case 0x06:{
          s4 = "ft6";
          s4_len = 3;
          break;
        }
        case 0x09:{
          s4 = "fs1";
          s4_len = 3;
          break;
        }
        case 0x10:{
          s4 = "fa6";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "fs11";
          s4_len = 4;
          break;
        }
        case 0x1C:{
          s4 = "ft8";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "fs6";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "ft0";
          s4_len = 3;
          break;
        }
        case 0x0A:{
          s4 = "fa0";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "fs10";
          s4_len = 4;
          break;
        }
        case 0x17:{
          s4 = "fs7";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "fa2";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "fs8";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "ft2";
          s4_len = 3;
          break;
        }
        case 0x1F:{
          s4 = "ft11";
          s4_len = 4;
          break;
        }
        case 0x0B:{
          s4 = "fa1";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "ft7";
          s4_len = 3;
          break;
        }
        case 0x13:{
          s4 = "fs3";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "ft4";
          s4_len = 3;
          break;
        }
        case 0x19:{
          s4 = "fs9";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "fs2";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "fs4";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "fa4";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "ft10";
          s4_len = 4;
          break;
        }
        case 0x11:{
          s4 = "fa7";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "ft3";
          s4_len = 3;
          break;
        }
        case 0x05:{
          s4 = "ft5";
          s4_len = 3;
          break;
        }
        case 0x1D:{
          s4 = "ft9";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "fa3";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "fa5";
          s4_len = 3;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.riscv_fmaxm_s.rs2) { 
        case 0x08:{
          s6 = "fs0";
          s6_len = 3;
          break;
        }
        case 0x15:{
          s6 = "fs5";
          s6_len = 3;
          break;
        }
        case 0x01:{
          s6 = "ft1";
          s6_len = 3;
          break;
        }
        case 0x06:{
          s6 = "ft6";
          s6_len = 3;
          break;
        }
        case 0x09:{
          s6 = "fs1";
          s6_len = 3;
          break;
        }
        case 0x10:{
          s6 = "fa6";
          s6_len = 3;
          break;
        }
        case 0x1B:{
          s6 = "fs11";
          s6_len = 4;
          break;
        }
        case 0x1C:{
          s6 = "ft8";
          s6_len = 3;
          break;
        }
        case 0x16:{
          s6 = "fs6";
          s6_len = 3;
          break;
        }
        case 0x00:{
          s6 = "ft0";
          s6_len = 3;
          break;
        }
        case 0x0A:{
          s6 = "fa0";
          s6_len = 3;
          break;
        }
        case 0x1A:{
          s6 = "fs10";
          s6_len = 4;
          break;
        }
        case 0x17:{
          s6 = "fs7";
          s6_len = 3;
          break;
        }
        case 0x0C:{
          s6 = "fa2";
          s6_len = 3;
          break;
        }
        case 0x18:{
          s6 = "fs8";
          s6_len = 3;
          break;
        }
        case 0x02:{
          s6 = "ft2";
          s6_len = 3;
          break;
        }
        case 0x1F:{
          s6 = "ft11";
          s6_len = 4;
          break;
        }
        case 0x0B:{
          s6 = "fa1";
          s6_len = 3;
          break;
        }
        case 0x07:{
          s6 = "ft7";
          s6_len = 3;
          break;
        }
        case 0x13:{
          s6 = "fs3";
          s6_len = 3;
          break;
        }
        case 0x04:{
          s6 = "ft4";
          s6_len = 3;
          break;
        }
        case 0x19:{
          s6 = "fs9";
          s6_len = 3;
          break;
        }
        case 0x12:{
          s6 = "fs2";
          s6_len = 3;
          break;
        }
        case 0x14:{
          s6 = "fs4";
          s6_len = 3;
          break;
        }
        case 0x0E:{
          s6 = "fa4";
          s6_len = 3;
          break;
        }
        case 0x1E:{
          s6 = "ft10";
          s6_len = 4;
          break;
        }
        case 0x11:{
          s6 = "fa7";
          s6_len = 3;
          break;
        }
        case 0x03:{
          s6 = "ft3";
          s6_len = 3;
          break;
        }
        case 0x05:{
          s6 = "ft5";
          s6_len = 3;
          break;
        }
        case 0x1D:{
          s6 = "ft9";
          s6_len = 3;
          break;
        }
        case 0x0D:{
          s6 = "fa3";
          s6_len = 3;
          break;
        }
        case 0x0F:{
          s6 = "fa5";
          s6_len = 3;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
    }
    break;
    case RISCV_FMINM_D: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      s0 = "fminm.d";
      s0_len = 7;
      spc( &s1, &s1_len);
      switch (tree->ast_node.riscv_fminm_d.rd) { 
        case 0x08:{
          s2 = "fs0";
          s2_len = 3;
          break;
        }
        case 0x15:{
          s2 = "fs5";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "ft1";
          s2_len = 3;
          break;
        }
        case 0x06:{
          s2 = "ft6";
          s2_len = 3;
          break;
        }
        case 0x09:{
          s2 = "fs1";
          s2_len = 3;
          break;
        }
        case 0x10:{
          s2 = "fa6";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "fs11";
          s2_len = 4;
          break;
        }
        case 0x1C:{
          s2 = "ft8";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "fs6";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "ft0";
          s2_len = 3;
          break;
        }
        case 0x0A:{
          s2 = "fa0";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "fs10";
          s2_len = 4;
          break;
        }
        case 0x17:{
          s2 = "fs7";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "fa2";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "fs8";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "ft2";
          s2_len = 3;
          break;
        }
        case 0x1F:{
          s2 = "ft11";
          s2_len = 4;
          break;
        }
        case 0x0B:{
          s2 = "fa1";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "ft7";
          s2_len = 3;
          break;
        }
        case 0x13:{
          s2 = "fs3";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "ft4";
          s2_len = 3;
          break;
        }
        case 0x19:{
          s2 = "fs9";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "fs2";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "fs4";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "fa4";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "ft10";
          s2_len = 4;
          break;
        }
        case 0x11:{
          s2 = "fa7";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "ft3";
          s2_len = 3;
          break;
        }
        case 0x05:{
          s2 = "ft5";
          s2_len = 3;
          break;
        }
        case 0x1D:{
          s2 = "ft9";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "fa3";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "fa5";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.riscv_fminm_d.rs1) { 
        case 0x08:{
          s4 = "fs0";
          s4_len = 3;
          break;
        }
        case 0x15:{
          s4 = "fs5";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "ft1";
          s4_len = 3;
          break;
        }
        case 0x06:{
          s4 = "ft6";
          s4_len = 3;
          break;
        }
        case 0x09:{
          s4 = "fs1";
          s4_len = 3;
          break;
        }
        case 0x10:{
          s4 = "fa6";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "fs11";
          s4_len = 4;
          break;
        }
        case 0x1C:{
          s4 = "ft8";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "fs6";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "ft0";
          s4_len = 3;
          break;
        }
        case 0x0A:{
          s4 = "fa0";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "fs10";
          s4_len = 4;
          break;
        }
        case 0x17:{
          s4 = "fs7";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "fa2";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "fs8";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "ft2";
          s4_len = 3;
          break;
        }
        case 0x1F:{
          s4 = "ft11";
          s4_len = 4;
          break;
        }
        case 0x0B:{
          s4 = "fa1";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "ft7";
          s4_len = 3;
          break;
        }
        case 0x13:{
          s4 = "fs3";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "ft4";
          s4_len = 3;
          break;
        }
        case 0x19:{
          s4 = "fs9";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "fs2";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "fs4";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "fa4";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "ft10";
          s4_len = 4;
          break;
        }
        case 0x11:{
          s4 = "fa7";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "ft3";
          s4_len = 3;
          break;
        }
        case 0x05:{
          s4 = "ft5";
          s4_len = 3;
          break;
        }
        case 0x1D:{
          s4 = "ft9";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "fa3";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "fa5";
          s4_len = 3;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.riscv_fminm_d.rs2) { 
        case 0x08:{
          s6 = "fs0";
          s6_len = 3;
          break;
        }
        case 0x15:{
          s6 = "fs5";
          s6_len = 3;
          break;
        }
        case 0x01:{
          s6 = "ft1";
          s6_len = 3;
          break;
        }
        case 0x06:{
          s6 = "ft6";
          s6_len = 3;
          break;
        }
        case 0x09:{
          s6 = "fs1";
          s6_len = 3;
          break;
        }
        case 0x10:{
          s6 = "fa6";
          s6_len = 3;
          break;
        }
        case 0x1B:{
          s6 = "fs11";
          s6_len = 4;
          break;
        }
        case 0x1C:{
          s6 = "ft8";
          s6_len = 3;
          break;
        }
        case 0x16:{
          s6 = "fs6";
          s6_len = 3;
          break;
        }
        case 0x00:{
          s6 = "ft0";
          s6_len = 3;
          break;
        }
        case 0x0A:{
          s6 = "fa0";
          s6_len = 3;
          break;
        }
        case 0x1A:{
          s6 = "fs10";
          s6_len = 4;
          break;
        }
        case 0x17:{
          s6 = "fs7";
          s6_len = 3;
          break;
        }
        case 0x0C:{
          s6 = "fa2";
          s6_len = 3;
          break;
        }
        case 0x18:{
          s6 = "fs8";
          s6_len = 3;
          break;
        }
        case 0x02:{
          s6 = "ft2";
          s6_len = 3;
          break;
        }
        case 0x1F:{
          s6 = "ft11";
          s6_len = 4;
          break;
        }
        case 0x0B:{
          s6 = "fa1";
          s6_len = 3;
          break;
        }
        case 0x07:{
          s6 = "ft7";
          s6_len = 3;
          break;
        }
        case 0x13:{
          s6 = "fs3";
          s6_len = 3;
          break;
        }
        case 0x04:{
          s6 = "ft4";
          s6_len = 3;
          break;
        }
        case 0x19:{
          s6 = "fs9";
          s6_len = 3;
          break;
        }
        case 0x12:{
          s6 = "fs2";
          s6_len = 3;
          break;
        }
        case 0x14:{
          s6 = "fs4";
          s6_len = 3;
          break;
        }
        case 0x0E:{
          s6 = "fa4";
          s6_len = 3;
          break;
        }
        case 0x1E:{
          s6 = "ft10";
          s6_len = 4;
          break;
        }
        case 0x11:{
          s6 = "fa7";
          s6_len = 3;
          break;
        }
        case 0x03:{
          s6 = "ft3";
          s6_len = 3;
          break;
        }
        case 0x05:{
          s6 = "ft5";
          s6_len = 3;
          break;
        }
        case 0x1D:{
          s6 = "ft9";
          s6_len = 3;
          break;
        }
        case 0x0D:{
          s6 = "fa3";
          s6_len = 3;
          break;
        }
        case 0x0F:{
          s6 = "fa5";
          s6_len = 3;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
    }
    break;
    case RISCV_FMAXM_D: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      s0 = "fmaxm.d";
      s0_len = 7;
      spc( &s1, &s1_len);
      switch (tree->ast_node.riscv_fmaxm_d.rd) { 
        case 0x08:{
          s2 = "fs0";
          s2_len = 3;
          break;
        }
        case 0x15:{
          s2 = "fs5";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "ft1";
          s2_len = 3;
          break;
        }
        case 0x06:{
          s2 = "ft6";
          s2_len = 3;
          break;
        }
        case 0x09:{
          s2 = "fs1";
          s2_len = 3;
          break;
        }
        case 0x10:{
          s2 = "fa6";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "fs11";
          s2_len = 4;
          break;
        }
        case 0x1C:{
          s2 = "ft8";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "fs6";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "ft0";
          s2_len = 3;
          break;
        }
        case 0x0A:{
          s2 = "fa0";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "fs10";
          s2_len = 4;
          break;
        }
        case 0x17:{
          s2 = "fs7";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "fa2";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "fs8";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "ft2";
          s2_len = 3;
          break;
        }
        case 0x1F:{
          s2 = "ft11";
          s2_len = 4;
          break;
        }
        case 0x0B:{
          s2 = "fa1";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "ft7";
          s2_len = 3;
          break;
        }
        case 0x13:{
          s2 = "fs3";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "ft4";
          s2_len = 3;
          break;
        }
        case 0x19:{
          s2 = "fs9";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "fs2";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "fs4";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "fa4";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "ft10";
          s2_len = 4;
          break;
        }
        case 0x11:{
          s2 = "fa7";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "ft3";
          s2_len = 3;
          break;
        }
        case 0x05:{
          s2 = "ft5";
          s2_len = 3;
          break;
        }
        case 0x1D:{
          s2 = "ft9";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "fa3";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "fa5";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.riscv_fmaxm_d.rs1) { 
        case 0x08:{
          s4 = "fs0";
          s4_len = 3;
          break;
        }
        case 0x15:{
          s4 = "fs5";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "ft1";
          s4_len = 3;
          break;
        }
        case 0x06:{
          s4 = "ft6";
          s4_len = 3;
          break;
        }
        case 0x09:{
          s4 = "fs1";
          s4_len = 3;
          break;
        }
        case 0x10:{
          s4 = "fa6";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "fs11";
          s4_len = 4;
          break;
        }
        case 0x1C:{
          s4 = "ft8";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "fs6";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "ft0";
          s4_len = 3;
          break;
        }
        case 0x0A:{
          s4 = "fa0";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "fs10";
          s4_len = 4;
          break;
        }
        case 0x17:{
          s4 = "fs7";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "fa2";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "fs8";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "ft2";
          s4_len = 3;
          break;
        }
        case 0x1F:{
          s4 = "ft11";
          s4_len = 4;
          break;
        }
        case 0x0B:{
          s4 = "fa1";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "ft7";
          s4_len = 3;
          break;
        }
        case 0x13:{
          s4 = "fs3";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "ft4";
          s4_len = 3;
          break;
        }
        case 0x19:{
          s4 = "fs9";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "fs2";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "fs4";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "fa4";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "ft10";
          s4_len = 4;
          break;
        }
        case 0x11:{
          s4 = "fa7";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "ft3";
          s4_len = 3;
          break;
        }
        case 0x05:{
          s4 = "ft5";
          s4_len = 3;
          break;
        }
        case 0x1D:{
          s4 = "ft9";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "fa3";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "fa5";
          s4_len = 3;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.riscv_fmaxm_d.rs2) { 
        case 0x08:{
          s6 = "fs0";
          s6_len = 3;
          break;
        }
        case 0x15:{
          s6 = "fs5";
          s6_len = 3;
          break;
        }
        case 0x01:{
          s6 = "ft1";
          s6_len = 3;
          break;
        }
        case 0x06:{
          s6 = "ft6";
          s6_len = 3;
          break;
        }
        case 0x09:{
          s6 = "fs1";
          s6_len = 3;
          break;
        }
        case 0x10:{
          s6 = "fa6";
          s6_len = 3;
          break;
        }
        case 0x1B:{
          s6 = "fs11";
          s6_len = 4;
          break;
        }
        case 0x1C:{
          s6 = "ft8";
          s6_len = 3;
          break;
        }
        case 0x16:{
          s6 = "fs6";
          s6_len = 3;
          break;
        }
        case 0x00:{
          s6 = "ft0";
          s6_len = 3;
          break;
        }
        case 0x0A:{
          s6 = "fa0";
          s6_len = 3;
          break;
        }
        case 0x1A:{
          s6 = "fs10";
          s6_len = 4;
          break;
        }
        case 0x17:{
          s6 = "fs7";
          s6_len = 3;
          break;
        }
        case 0x0C:{
          s6 = "fa2";
          s6_len = 3;
          break;
        }
        case 0x18:{
          s6 = "fs8";
          s6_len = 3;
          break;
        }
        case 0x02:{
          s6 = "ft2";
          s6_len = 3;
          break;
        }
        case 0x1F:{
          s6 = "ft11";
          s6_len = 4;
          break;
        }
        case 0x0B:{
          s6 = "fa1";
          s6_len = 3;
          break;
        }
        case 0x07:{
          s6 = "ft7";
          s6_len = 3;
          break;
        }
        case 0x13:{
          s6 = "fs3";
          s6_len = 3;
          break;
        }
        case 0x04:{
          s6 = "ft4";
          s6_len = 3;
          break;
        }
        case 0x19:{
          s6 = "fs9";
          s6_len = 3;
          break;
        }
        case 0x12:{
          s6 = "fs2";
          s6_len = 3;
          break;
        }
        case 0x14:{
          s6 = "fs4";
          s6_len = 3;
          break;
        }
        case 0x0E:{
          s6 = "fa4";
          s6_len = 3;
          break;
        }
        case 0x1E:{
          s6 = "ft10";
          s6_len = 4;
          break;
        }
        case 0x11:{
          s6 = "fa7";
          s6_len = 3;
          break;
        }
        case 0x03:{
          s6 = "ft3";
          s6_len = 3;
          break;
        }
        case 0x05:{
          s6 = "ft5";
          s6_len = 3;
          break;
        }
        case 0x1D:{
          s6 = "ft9";
          s6_len = 3;
          break;
        }
        case 0x0D:{
          s6 = "fa3";
          s6_len = 3;
          break;
        }
        case 0x0F:{
          s6 = "fa5";
          s6_len = 3;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
    }
    break;
    case RISCV_FROUND_H: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      s0 = "fround.h";
      s0_len = 8;
      spc( &s1, &s1_len);
      switch (tree->ast_node.riscv_fround_h.rd) { 
        case 0x08:{
          s2 = "fs0";
          s2_len = 3;
          break;
        }
        case 0x15:{
          s2 = "fs5";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "ft1";
          s2_len = 3;
          break;
        }
        case 0x06:{
          s2 = "ft6";
          s2_len = 3;
          break;
        }
        case 0x09:{
          s2 = "fs1";
          s2_len = 3;
          break;
        }
        case 0x10:{
          s2 = "fa6";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "fs11";
          s2_len = 4;
          break;
        }
        case 0x1C:{
          s2 = "ft8";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "fs6";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "ft0";
          s2_len = 3;
          break;
        }
        case 0x0A:{
          s2 = "fa0";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "fs10";
          s2_len = 4;
          break;
        }
        case 0x17:{
          s2 = "fs7";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "fa2";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "fs8";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "ft2";
          s2_len = 3;
          break;
        }
        case 0x1F:{
          s2 = "ft11";
          s2_len = 4;
          break;
        }
        case 0x0B:{
          s2 = "fa1";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "ft7";
          s2_len = 3;
          break;
        }
        case 0x13:{
          s2 = "fs3";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "ft4";
          s2_len = 3;
          break;
        }
        case 0x19:{
          s2 = "fs9";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "fs2";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "fs4";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "fa4";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "ft10";
          s2_len = 4;
          break;
        }
        case 0x11:{
          s2 = "fa7";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "ft3";
          s2_len = 3;
          break;
        }
        case 0x05:{
          s2 = "ft5";
          s2_len = 3;
          break;
        }
        case 0x1D:{
          s2 = "ft9";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "fa3";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "fa5";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.riscv_fround_h.rs1) { 
        case 0x08:{
          s4 = "fs0";
          s4_len = 3;
          break;
        }
        case 0x15:{
          s4 = "fs5";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "ft1";
          s4_len = 3;
          break;
        }
        case 0x06:{
          s4 = "ft6";
          s4_len = 3;
          break;
        }
        case 0x09:{
          s4 = "fs1";
          s4_len = 3;
          break;
        }
        case 0x10:{
          s4 = "fa6";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "fs11";
          s4_len = 4;
          break;
        }
        case 0x1C:{
          s4 = "ft8";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "fs6";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "ft0";
          s4_len = 3;
          break;
        }
        case 0x0A:{
          s4 = "fa0";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "fs10";
          s4_len = 4;
          break;
        }
        case 0x17:{
          s4 = "fs7";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "fa2";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "fs8";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "ft2";
          s4_len = 3;
          break;
        }
        case 0x1F:{
          s4 = "ft11";
          s4_len = 4;
          break;
        }
        case 0x0B:{
          s4 = "fa1";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "ft7";
          s4_len = 3;
          break;
        }
        case 0x13:{
          s4 = "fs3";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "ft4";
          s4_len = 3;
          break;
        }
        case 0x19:{
          s4 = "fs9";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "fs2";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "fs4";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "fa4";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "ft10";
          s4_len = 4;
          break;
        }
        case 0x11:{
          s4 = "fa7";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "ft3";
          s4_len = 3;
          break;
        }
        case 0x05:{
          s4 = "ft5";
          s4_len = 3;
          break;
        }
        case 0x1D:{
          s4 = "ft9";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "fa3";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "fa5";
          s4_len = 3;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.riscv_fround_h.rm) { 
        case RISCV_RM_RNE:{
          s6 = "rne";
          s6_len = 3;
          break;
        }
        case RISCV_RM_RTZ:{
          s6 = "rtz";
          s6_len = 3;
          break;
        }
        case RISCV_RM_RDN:{
          s6 = "rdn";
          s6_len = 3;
          break;
        }
        case RISCV_RM_RMM:{
          s6 = "rmm";
          s6_len = 3;
          break;
        }
        case RISCV_RM_RUP:{
          s6 = "rup";
          s6_len = 3;
          break;
        }
        case RISCV_RM_DYN:{
          s6 = "dyn";
          s6_len = 3;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
    }
    break;
    case RISCV_FROUNDNX_H: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      s0 = "froundnx.h";
      s0_len = 10;
      spc( &s1, &s1_len);
      switch (tree->ast_node.riscv_froundnx_h.rd) { 
        case 0x08:{
          s2 = "fs0";
          s2_len = 3;
          break;
        }
        case 0x15:{
          s2 = "fs5";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "ft1";
          s2_len = 3;
          break;
        }
        case 0x06:{
          s2 = "ft6";
          s2_len = 3;
          break;
        }
        case 0x09:{
          s2 = "fs1";
          s2_len = 3;
          break;
        }
        case 0x10:{
          s2 = "fa6";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "fs11";
          s2_len = 4;
          break;
        }
        case 0x1C:{
          s2 = "ft8";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "fs6";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "ft0";
          s2_len = 3;
          break;
        }
        case 0x0A:{
          s2 = "fa0";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "fs10";
          s2_len = 4;
          break;
        }
        case 0x17:{
          s2 = "fs7";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "fa2";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "fs8";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "ft2";
          s2_len = 3;
          break;
        }
        case 0x1F:{
          s2 = "ft11";
          s2_len = 4;
          break;
        }
        case 0x0B:{
          s2 = "fa1";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "ft7";
          s2_len = 3;
          break;
        }
        case 0x13:{
          s2 = "fs3";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "ft4";
          s2_len = 3;
          break;
        }
        case 0x19:{
          s2 = "fs9";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "fs2";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "fs4";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "fa4";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "ft10";
          s2_len = 4;
          break;
        }
        case 0x11:{
          s2 = "fa7";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "ft3";
          s2_len = 3;
          break;
        }
        case 0x05:{
          s2 = "ft5";
          s2_len = 3;
          break;
        }
        case 0x1D:{
          s2 = "ft9";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "fa3";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "fa5";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.riscv_froundnx_h.rs1) { 
        case 0x08:{
          s4 = "fs0";
          s4_len = 3;
          break;
        }
        case 0x15:{
          s4 = "fs5";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "ft1";
          s4_len = 3;
          break;
        }
        case 0x06:{
          s4 = "ft6";
          s4_len = 3;
          break;
        }
        case 0x09:{
          s4 = "fs1";
          s4_len = 3;
          break;
        }
        case 0x10:{
          s4 = "fa6";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "fs11";
          s4_len = 4;
          break;
        }
        case 0x1C:{
          s4 = "ft8";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "fs6";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "ft0";
          s4_len = 3;
          break;
        }
        case 0x0A:{
          s4 = "fa0";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "fs10";
          s4_len = 4;
          break;
        }
        case 0x17:{
          s4 = "fs7";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "fa2";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "fs8";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "ft2";
          s4_len = 3;
          break;
        }
        case 0x1F:{
          s4 = "ft11";
          s4_len = 4;
          break;
        }
        case 0x0B:{
          s4 = "fa1";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "ft7";
          s4_len = 3;
          break;
        }
        case 0x13:{
          s4 = "fs3";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "ft4";
          s4_len = 3;
          break;
        }
        case 0x19:{
          s4 = "fs9";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "fs2";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "fs4";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "fa4";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "ft10";
          s4_len = 4;
          break;
        }
        case 0x11:{
          s4 = "fa7";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "ft3";
          s4_len = 3;
          break;
        }
        case 0x05:{
          s4 = "ft5";
          s4_len = 3;
          break;
        }
        case 0x1D:{
          s4 = "ft9";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "fa3";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "fa5";
          s4_len = 3;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.riscv_froundnx_h.rm) { 
        case RISCV_RM_RNE:{
          s6 = "rne";
          s6_len = 3;
          break;
        }
        case RISCV_RM_RTZ:{
          s6 = "rtz";
          s6_len = 3;
          break;
        }
        case RISCV_RM_RDN:{
          s6 = "rdn";
          s6_len = 3;
          break;
        }
        case RISCV_RM_RMM:{
          s6 = "rmm";
          s6_len = 3;
          break;
        }
        case RISCV_RM_RUP:{
          s6 = "rup";
          s6_len = 3;
          break;
        }
        case RISCV_RM_DYN:{
          s6 = "dyn";
          s6_len = 3;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
    }
    break;
    case RISCV_FROUND_S: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      s0 = "fround.s";
      s0_len = 8;
      spc( &s1, &s1_len);
      switch (tree->ast_node.riscv_fround_s.rd) { 
        case 0x08:{
          s2 = "fs0";
          s2_len = 3;
          break;
        }
        case 0x15:{
          s2 = "fs5";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "ft1";
          s2_len = 3;
          break;
        }
        case 0x06:{
          s2 = "ft6";
          s2_len = 3;
          break;
        }
        case 0x09:{
          s2 = "fs1";
          s2_len = 3;
          break;
        }
        case 0x10:{
          s2 = "fa6";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "fs11";
          s2_len = 4;
          break;
        }
        case 0x1C:{
          s2 = "ft8";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "fs6";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "ft0";
          s2_len = 3;
          break;
        }
        case 0x0A:{
          s2 = "fa0";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "fs10";
          s2_len = 4;
          break;
        }
        case 0x17:{
          s2 = "fs7";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "fa2";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "fs8";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "ft2";
          s2_len = 3;
          break;
        }
        case 0x1F:{
          s2 = "ft11";
          s2_len = 4;
          break;
        }
        case 0x0B:{
          s2 = "fa1";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "ft7";
          s2_len = 3;
          break;
        }
        case 0x13:{
          s2 = "fs3";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "ft4";
          s2_len = 3;
          break;
        }
        case 0x19:{
          s2 = "fs9";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "fs2";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "fs4";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "fa4";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "ft10";
          s2_len = 4;
          break;
        }
        case 0x11:{
          s2 = "fa7";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "ft3";
          s2_len = 3;
          break;
        }
        case 0x05:{
          s2 = "ft5";
          s2_len = 3;
          break;
        }
        case 0x1D:{
          s2 = "ft9";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "fa3";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "fa5";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.riscv_fround_s.rs1) { 
        case 0x08:{
          s4 = "fs0";
          s4_len = 3;
          break;
        }
        case 0x15:{
          s4 = "fs5";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "ft1";
          s4_len = 3;
          break;
        }
        case 0x06:{
          s4 = "ft6";
          s4_len = 3;
          break;
        }
        case 0x09:{
          s4 = "fs1";
          s4_len = 3;
          break;
        }
        case 0x10:{
          s4 = "fa6";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "fs11";
          s4_len = 4;
          break;
        }
        case 0x1C:{
          s4 = "ft8";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "fs6";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "ft0";
          s4_len = 3;
          break;
        }
        case 0x0A:{
          s4 = "fa0";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "fs10";
          s4_len = 4;
          break;
        }
        case 0x17:{
          s4 = "fs7";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "fa2";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "fs8";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "ft2";
          s4_len = 3;
          break;
        }
        case 0x1F:{
          s4 = "ft11";
          s4_len = 4;
          break;
        }
        case 0x0B:{
          s4 = "fa1";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "ft7";
          s4_len = 3;
          break;
        }
        case 0x13:{
          s4 = "fs3";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "ft4";
          s4_len = 3;
          break;
        }
        case 0x19:{
          s4 = "fs9";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "fs2";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "fs4";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "fa4";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "ft10";
          s4_len = 4;
          break;
        }
        case 0x11:{
          s4 = "fa7";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "ft3";
          s4_len = 3;
          break;
        }
        case 0x05:{
          s4 = "ft5";
          s4_len = 3;
          break;
        }
        case 0x1D:{
          s4 = "ft9";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "fa3";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "fa5";
          s4_len = 3;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.riscv_fround_s.rm) { 
        case RISCV_RM_RNE:{
          s6 = "rne";
          s6_len = 3;
          break;
        }
        case RISCV_RM_RTZ:{
          s6 = "rtz";
          s6_len = 3;
          break;
        }
        case RISCV_RM_RDN:{
          s6 = "rdn";
          s6_len = 3;
          break;
        }
        case RISCV_RM_RMM:{
          s6 = "rmm";
          s6_len = 3;
          break;
        }
        case RISCV_RM_RUP:{
          s6 = "rup";
          s6_len = 3;
          break;
        }
        case RISCV_RM_DYN:{
          s6 = "dyn";
          s6_len = 3;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
    }
    break;
    case RISCV_FROUNDNX_S: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      s0 = "froundnx.s";
      s0_len = 10;
      spc( &s1, &s1_len);
      switch (tree->ast_node.riscv_froundnx_s.rd) { 
        case 0x08:{
          s2 = "fs0";
          s2_len = 3;
          break;
        }
        case 0x15:{
          s2 = "fs5";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "ft1";
          s2_len = 3;
          break;
        }
        case 0x06:{
          s2 = "ft6";
          s2_len = 3;
          break;
        }
        case 0x09:{
          s2 = "fs1";
          s2_len = 3;
          break;
        }
        case 0x10:{
          s2 = "fa6";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "fs11";
          s2_len = 4;
          break;
        }
        case 0x1C:{
          s2 = "ft8";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "fs6";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "ft0";
          s2_len = 3;
          break;
        }
        case 0x0A:{
          s2 = "fa0";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "fs10";
          s2_len = 4;
          break;
        }
        case 0x17:{
          s2 = "fs7";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "fa2";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "fs8";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "ft2";
          s2_len = 3;
          break;
        }
        case 0x1F:{
          s2 = "ft11";
          s2_len = 4;
          break;
        }
        case 0x0B:{
          s2 = "fa1";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "ft7";
          s2_len = 3;
          break;
        }
        case 0x13:{
          s2 = "fs3";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "ft4";
          s2_len = 3;
          break;
        }
        case 0x19:{
          s2 = "fs9";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "fs2";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "fs4";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "fa4";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "ft10";
          s2_len = 4;
          break;
        }
        case 0x11:{
          s2 = "fa7";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "ft3";
          s2_len = 3;
          break;
        }
        case 0x05:{
          s2 = "ft5";
          s2_len = 3;
          break;
        }
        case 0x1D:{
          s2 = "ft9";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "fa3";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "fa5";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.riscv_froundnx_s.rs1) { 
        case 0x08:{
          s4 = "fs0";
          s4_len = 3;
          break;
        }
        case 0x15:{
          s4 = "fs5";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "ft1";
          s4_len = 3;
          break;
        }
        case 0x06:{
          s4 = "ft6";
          s4_len = 3;
          break;
        }
        case 0x09:{
          s4 = "fs1";
          s4_len = 3;
          break;
        }
        case 0x10:{
          s4 = "fa6";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "fs11";
          s4_len = 4;
          break;
        }
        case 0x1C:{
          s4 = "ft8";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "fs6";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "ft0";
          s4_len = 3;
          break;
        }
        case 0x0A:{
          s4 = "fa0";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "fs10";
          s4_len = 4;
          break;
        }
        case 0x17:{
          s4 = "fs7";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "fa2";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "fs8";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "ft2";
          s4_len = 3;
          break;
        }
        case 0x1F:{
          s4 = "ft11";
          s4_len = 4;
          break;
        }
        case 0x0B:{
          s4 = "fa1";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "ft7";
          s4_len = 3;
          break;
        }
        case 0x13:{
          s4 = "fs3";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "ft4";
          s4_len = 3;
          break;
        }
        case 0x19:{
          s4 = "fs9";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "fs2";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "fs4";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "fa4";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "ft10";
          s4_len = 4;
          break;
        }
        case 0x11:{
          s4 = "fa7";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "ft3";
          s4_len = 3;
          break;
        }
        case 0x05:{
          s4 = "ft5";
          s4_len = 3;
          break;
        }
        case 0x1D:{
          s4 = "ft9";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "fa3";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "fa5";
          s4_len = 3;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.riscv_froundnx_s.rm) { 
        case RISCV_RM_RNE:{
          s6 = "rne";
          s6_len = 3;
          break;
        }
        case RISCV_RM_RTZ:{
          s6 = "rtz";
          s6_len = 3;
          break;
        }
        case RISCV_RM_RDN:{
          s6 = "rdn";
          s6_len = 3;
          break;
        }
        case RISCV_RM_RMM:{
          s6 = "rmm";
          s6_len = 3;
          break;
        }
        case RISCV_RM_RUP:{
          s6 = "rup";
          s6_len = 3;
          break;
        }
        case RISCV_RM_DYN:{
          s6 = "dyn";
          s6_len = 3;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
    }
    break;
    case RISCV_FROUND_D: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      s0 = "fround.d";
      s0_len = 8;
      spc( &s1, &s1_len);
      switch (tree->ast_node.riscv_fround_d.rd) { 
        case 0x08:{
          s2 = "fs0";
          s2_len = 3;
          break;
        }
        case 0x15:{
          s2 = "fs5";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "ft1";
          s2_len = 3;
          break;
        }
        case 0x06:{
          s2 = "ft6";
          s2_len = 3;
          break;
        }
        case 0x09:{
          s2 = "fs1";
          s2_len = 3;
          break;
        }
        case 0x10:{
          s2 = "fa6";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "fs11";
          s2_len = 4;
          break;
        }
        case 0x1C:{
          s2 = "ft8";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "fs6";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "ft0";
          s2_len = 3;
          break;
        }
        case 0x0A:{
          s2 = "fa0";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "fs10";
          s2_len = 4;
          break;
        }
        case 0x17:{
          s2 = "fs7";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "fa2";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "fs8";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "ft2";
          s2_len = 3;
          break;
        }
        case 0x1F:{
          s2 = "ft11";
          s2_len = 4;
          break;
        }
        case 0x0B:{
          s2 = "fa1";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "ft7";
          s2_len = 3;
          break;
        }
        case 0x13:{
          s2 = "fs3";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "ft4";
          s2_len = 3;
          break;
        }
        case 0x19:{
          s2 = "fs9";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "fs2";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "fs4";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "fa4";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "ft10";
          s2_len = 4;
          break;
        }
        case 0x11:{
          s2 = "fa7";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "ft3";
          s2_len = 3;
          break;
        }
        case 0x05:{
          s2 = "ft5";
          s2_len = 3;
          break;
        }
        case 0x1D:{
          s2 = "ft9";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "fa3";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "fa5";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.riscv_fround_d.rs1) { 
        case 0x08:{
          s4 = "fs0";
          s4_len = 3;
          break;
        }
        case 0x15:{
          s4 = "fs5";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "ft1";
          s4_len = 3;
          break;
        }
        case 0x06:{
          s4 = "ft6";
          s4_len = 3;
          break;
        }
        case 0x09:{
          s4 = "fs1";
          s4_len = 3;
          break;
        }
        case 0x10:{
          s4 = "fa6";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "fs11";
          s4_len = 4;
          break;
        }
        case 0x1C:{
          s4 = "ft8";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "fs6";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "ft0";
          s4_len = 3;
          break;
        }
        case 0x0A:{
          s4 = "fa0";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "fs10";
          s4_len = 4;
          break;
        }
        case 0x17:{
          s4 = "fs7";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "fa2";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "fs8";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "ft2";
          s4_len = 3;
          break;
        }
        case 0x1F:{
          s4 = "ft11";
          s4_len = 4;
          break;
        }
        case 0x0B:{
          s4 = "fa1";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "ft7";
          s4_len = 3;
          break;
        }
        case 0x13:{
          s4 = "fs3";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "ft4";
          s4_len = 3;
          break;
        }
        case 0x19:{
          s4 = "fs9";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "fs2";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "fs4";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "fa4";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "ft10";
          s4_len = 4;
          break;
        }
        case 0x11:{
          s4 = "fa7";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "ft3";
          s4_len = 3;
          break;
        }
        case 0x05:{
          s4 = "ft5";
          s4_len = 3;
          break;
        }
        case 0x1D:{
          s4 = "ft9";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "fa3";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "fa5";
          s4_len = 3;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.riscv_fround_d.rm) { 
        case RISCV_RM_RNE:{
          s6 = "rne";
          s6_len = 3;
          break;
        }
        case RISCV_RM_RTZ:{
          s6 = "rtz";
          s6_len = 3;
          break;
        }
        case RISCV_RM_RDN:{
          s6 = "rdn";
          s6_len = 3;
          break;
        }
        case RISCV_RM_RMM:{
          s6 = "rmm";
          s6_len = 3;
          break;
        }
        case RISCV_RM_RUP:{
          s6 = "rup";
          s6_len = 3;
          break;
        }
        case RISCV_RM_DYN:{
          s6 = "dyn";
          s6_len = 3;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
    }
    break;
    case RISCV_FROUNDNX_D: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      s0 = "froundnx.d";
      s0_len = 10;
      spc( &s1, &s1_len);
      switch (tree->ast_node.riscv_froundnx_d.rd) { 
        case 0x08:{
          s2 = "fs0";
          s2_len = 3;
          break;
        }
        case 0x15:{
          s2 = "fs5";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "ft1";
          s2_len = 3;
          break;
        }
        case 0x06:{
          s2 = "ft6";
          s2_len = 3;
          break;
        }
        case 0x09:{
          s2 = "fs1";
          s2_len = 3;
          break;
        }
        case 0x10:{
          s2 = "fa6";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "fs11";
          s2_len = 4;
          break;
        }
        case 0x1C:{
          s2 = "ft8";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "fs6";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "ft0";
          s2_len = 3;
          break;
        }
        case 0x0A:{
          s2 = "fa0";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "fs10";
          s2_len = 4;
          break;
        }
        case 0x17:{
          s2 = "fs7";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "fa2";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "fs8";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "ft2";
          s2_len = 3;
          break;
        }
        case 0x1F:{
          s2 = "ft11";
          s2_len = 4;
          break;
        }
        case 0x0B:{
          s2 = "fa1";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "ft7";
          s2_len = 3;
          break;
        }
        case 0x13:{
          s2 = "fs3";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "ft4";
          s2_len = 3;
          break;
        }
        case 0x19:{
          s2 = "fs9";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "fs2";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "fs4";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "fa4";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "ft10";
          s2_len = 4;
          break;
        }
        case 0x11:{
          s2 = "fa7";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "ft3";
          s2_len = 3;
          break;
        }
        case 0x05:{
          s2 = "ft5";
          s2_len = 3;
          break;
        }
        case 0x1D:{
          s2 = "ft9";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "fa3";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "fa5";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.riscv_froundnx_d.rs1) { 
        case 0x08:{
          s4 = "fs0";
          s4_len = 3;
          break;
        }
        case 0x15:{
          s4 = "fs5";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "ft1";
          s4_len = 3;
          break;
        }
        case 0x06:{
          s4 = "ft6";
          s4_len = 3;
          break;
        }
        case 0x09:{
          s4 = "fs1";
          s4_len = 3;
          break;
        }
        case 0x10:{
          s4 = "fa6";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "fs11";
          s4_len = 4;
          break;
        }
        case 0x1C:{
          s4 = "ft8";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "fs6";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "ft0";
          s4_len = 3;
          break;
        }
        case 0x0A:{
          s4 = "fa0";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "fs10";
          s4_len = 4;
          break;
        }
        case 0x17:{
          s4 = "fs7";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "fa2";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "fs8";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "ft2";
          s4_len = 3;
          break;
        }
        case 0x1F:{
          s4 = "ft11";
          s4_len = 4;
          break;
        }
        case 0x0B:{
          s4 = "fa1";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "ft7";
          s4_len = 3;
          break;
        }
        case 0x13:{
          s4 = "fs3";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "ft4";
          s4_len = 3;
          break;
        }
        case 0x19:{
          s4 = "fs9";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "fs2";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "fs4";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "fa4";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "ft10";
          s4_len = 4;
          break;
        }
        case 0x11:{
          s4 = "fa7";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "ft3";
          s4_len = 3;
          break;
        }
        case 0x05:{
          s4 = "ft5";
          s4_len = 3;
          break;
        }
        case 0x1D:{
          s4 = "ft9";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "fa3";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "fa5";
          s4_len = 3;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.riscv_froundnx_d.rm) { 
        case RISCV_RM_RNE:{
          s6 = "rne";
          s6_len = 3;
          break;
        }
        case RISCV_RM_RTZ:{
          s6 = "rtz";
          s6_len = 3;
          break;
        }
        case RISCV_RM_RDN:{
          s6 = "rdn";
          s6_len = 3;
          break;
        }
        case RISCV_RM_RMM:{
          s6 = "rmm";
          s6_len = 3;
          break;
        }
        case RISCV_RM_RUP:{
          s6 = "rup";
          s6_len = 3;
          break;
        }
        case RISCV_RM_DYN:{
          s6 = "dyn";
          s6_len = 3;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
    }
    break;
    case RISCV_FMVH_X_D: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      s0 = "fmvh.x.d";
      s0_len = 8;
      spc( &s1, &s1_len);
      switch (tree->ast_node.riscv_fmvh_x_d.rd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.riscv_fmvh_x_d.rs1) { 
        case 0x08:{
          s4 = "fs0";
          s4_len = 3;
          break;
        }
        case 0x15:{
          s4 = "fs5";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "ft1";
          s4_len = 3;
          break;
        }
        case 0x06:{
          s4 = "ft6";
          s4_len = 3;
          break;
        }
        case 0x09:{
          s4 = "fs1";
          s4_len = 3;
          break;
        }
        case 0x10:{
          s4 = "fa6";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "fs11";
          s4_len = 4;
          break;
        }
        case 0x1C:{
          s4 = "ft8";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "fs6";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "ft0";
          s4_len = 3;
          break;
        }
        case 0x0A:{
          s4 = "fa0";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "fs10";
          s4_len = 4;
          break;
        }
        case 0x17:{
          s4 = "fs7";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "fa2";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "fs8";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "ft2";
          s4_len = 3;
          break;
        }
        case 0x1F:{
          s4 = "ft11";
          s4_len = 4;
          break;
        }
        case 0x0B:{
          s4 = "fa1";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "ft7";
          s4_len = 3;
          break;
        }
        case 0x13:{
          s4 = "fs3";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "ft4";
          s4_len = 3;
          break;
        }
        case 0x19:{
          s4 = "fs9";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "fs2";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "fs4";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "fa4";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "ft10";
          s4_len = 4;
          break;
        }
        case 0x11:{
          s4 = "fa7";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "ft3";
          s4_len = 3;
          break;
        }
        case 0x05:{
          s4 = "ft5";
          s4_len = 3;
          break;
        }
        case 0x1D:{
          s4 = "ft9";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "fa3";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "fa5";
          s4_len = 3;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      }
    }
    break;
    case RISCV_FMVP_D_X: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      s0 = "fmvp.d.x";
      s0_len = 8;
      spc( &s1, &s1_len);
      switch (tree->ast_node.riscv_fmvp_d_x.rd) { 
        case 0x08:{
          s2 = "fs0";
          s2_len = 3;
          break;
        }
        case 0x15:{
          s2 = "fs5";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "ft1";
          s2_len = 3;
          break;
        }
        case 0x06:{
          s2 = "ft6";
          s2_len = 3;
          break;
        }
        case 0x09:{
          s2 = "fs1";
          s2_len = 3;
          break;
        }
        case 0x10:{
          s2 = "fa6";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "fs11";
          s2_len = 4;
          break;
        }
        case 0x1C:{
          s2 = "ft8";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "fs6";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "ft0";
          s2_len = 3;
          break;
        }
        case 0x0A:{
          s2 = "fa0";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "fs10";
          s2_len = 4;
          break;
        }
        case 0x17:{
          s2 = "fs7";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "fa2";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "fs8";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "ft2";
          s2_len = 3;
          break;
        }
        case 0x1F:{
          s2 = "ft11";
          s2_len = 4;
          break;
        }
        case 0x0B:{
          s2 = "fa1";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "ft7";
          s2_len = 3;
          break;
        }
        case 0x13:{
          s2 = "fs3";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "ft4";
          s2_len = 3;
          break;
        }
        case 0x19:{
          s2 = "fs9";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "fs2";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "fs4";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "fa4";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "ft10";
          s2_len = 4;
          break;
        }
        case 0x11:{
          s2 = "fa7";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "ft3";
          s2_len = 3;
          break;
        }
        case 0x05:{
          s2 = "ft5";
          s2_len = 3;
          break;
        }
        case 0x1D:{
          s2 = "ft9";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "fa3";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "fa5";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.riscv_fmvp_d_x.rs1) { 
        case 0x08:{
          s4 = "fp";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "s5";
          s4_len = 2;
          break;
        }
        case 0x01:{
          s4 = "ra";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "t1";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "a6";
          s4_len = 2;
          break;
        }
        case 0x1B:{
          s4 = "s11";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "t3";
          s4_len = 2;
          break;
        }
        case 0x16:{
          s4 = "s6";
          s4_len = 2;
          break;
        }
        case 0x00:{
          s4 = "zero";
          s4_len = 4;
          break;
        }
        case 0x0A:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x1A:{
          s4 = "s10";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "s7";
          s4_len = 2;
          break;
        }
        case 0x0C:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x18:{
          s4 = "s8";
          s4_len = 2;
          break;
        }
        case 0x02:{
          s4 = "sp";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "t6";
          s4_len = 2;
          break;
        }
        case 0x0B:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x07:{
          s4 = "t2";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "s3";
          s4_len = 2;
          break;
        }
        case 0x04:{
          s4 = "tp";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "s9";
          s4_len = 2;
          break;
        }
        case 0x12:{
          s4 = "s2";
          s4_len = 2;
          break;
        }
        case 0x14:{
          s4 = "s4";
          s4_len = 2;
          break;
        }
        case 0x0E:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x1E:{
          s4 = "t5";
          s4_len = 2;
          break;
        }
        case 0x11:{
          s4 = "a7";
          s4_len = 2;
          break;
        }
        case 0x03:{
          s4 = "gp";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "t0";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "t4";
          s4_len = 2;
          break;
        }
        case 0x0D:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x0F:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.riscv_fmvp_d_x.rs2) { 
        case 0x08:{
          s6 = "fp";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "s5";
          s6_len = 2;
          break;
        }
        case 0x01:{
          s6 = "ra";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "t1";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "s1";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "a6";
          s6_len = 2;
          break;
        }
        case 0x1B:{
          s6 = "s11";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "t3";
          s6_len = 2;
          break;
        }
        case 0x16:{
          s6 = "s6";
          s6_len = 2;
          break;
        }
        case 0x00:{
          s6 = "zero";
          s6_len = 4;
          break;
        }
        case 0x0A:{
          s6 = "a0";
          s6_len = 2;
          break;
        }
        case 0x1A:{
          s6 = "s10";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "s7";
          s6_len = 2;
          break;
        }
        case 0x0C:{
          s6 = "a2";
          s6_len = 2;
          break;
        }
        case 0x18:{
          s6 = "s8";
          s6_len = 2;
          break;
        }
        case 0x02:{
          s6 = "sp";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "t6";
          s6_len = 2;
          break;
        }
        case 0x0B:{
          s6 = "a1";
          s6_len = 2;
          break;
        }
        case 0x07:{
          s6 = "t2";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "s3";
          s6_len = 2;
          break;
        }
        case 0x04:{
          s6 = "tp";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "s9";
          s6_len = 2;
          break;
        }
        case 0x12:{
          s6 = "s2";
          s6_len = 2;
          break;
        }
        case 0x14:{
          s6 = "s4";
          s6_len = 2;
          break;
        }
        case 0x0E:{
          s6 = "a4";
          s6_len = 2;
          break;
        }
        case 0x1E:{
          s6 = "t5";
          s6_len = 2;
          break;
        }
        case 0x11:{
          s6 = "a7";
          s6_len = 2;
          break;
        }
        case 0x03:{
          s6 = "gp";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "t0";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "t4";
          s6_len = 2;
          break;
        }
        case 0x0D:{
          s6 = "a3";
          s6_len = 2;
          break;
        }
        case 0x0F:{
          s6 = "a5";
          s6_len = 2;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
    }
    break;
    case RISCV_FLEQ_H: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      s0 = "fleq.h";
      s0_len = 6;
      spc( &s1, &s1_len);
      switch (tree->ast_node.riscv_fleq_h.rd) { 
        case 0x08:{
          s2 = "fs0";
          s2_len = 3;
          break;
        }
        case 0x15:{
          s2 = "fs5";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "ft1";
          s2_len = 3;
          break;
        }
        case 0x06:{
          s2 = "ft6";
          s2_len = 3;
          break;
        }
        case 0x09:{
          s2 = "fs1";
          s2_len = 3;
          break;
        }
        case 0x10:{
          s2 = "fa6";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "fs11";
          s2_len = 4;
          break;
        }
        case 0x1C:{
          s2 = "ft8";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "fs6";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "ft0";
          s2_len = 3;
          break;
        }
        case 0x0A:{
          s2 = "fa0";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "fs10";
          s2_len = 4;
          break;
        }
        case 0x17:{
          s2 = "fs7";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "fa2";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "fs8";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "ft2";
          s2_len = 3;
          break;
        }
        case 0x1F:{
          s2 = "ft11";
          s2_len = 4;
          break;
        }
        case 0x0B:{
          s2 = "fa1";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "ft7";
          s2_len = 3;
          break;
        }
        case 0x13:{
          s2 = "fs3";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "ft4";
          s2_len = 3;
          break;
        }
        case 0x19:{
          s2 = "fs9";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "fs2";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "fs4";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "fa4";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "ft10";
          s2_len = 4;
          break;
        }
        case 0x11:{
          s2 = "fa7";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "ft3";
          s2_len = 3;
          break;
        }
        case 0x05:{
          s2 = "ft5";
          s2_len = 3;
          break;
        }
        case 0x1D:{
          s2 = "ft9";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "fa3";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "fa5";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.riscv_fleq_h.rs1) { 
        case 0x08:{
          s4 = "fs0";
          s4_len = 3;
          break;
        }
        case 0x15:{
          s4 = "fs5";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "ft1";
          s4_len = 3;
          break;
        }
        case 0x06:{
          s4 = "ft6";
          s4_len = 3;
          break;
        }
        case 0x09:{
          s4 = "fs1";
          s4_len = 3;
          break;
        }
        case 0x10:{
          s4 = "fa6";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "fs11";
          s4_len = 4;
          break;
        }
        case 0x1C:{
          s4 = "ft8";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "fs6";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "ft0";
          s4_len = 3;
          break;
        }
        case 0x0A:{
          s4 = "fa0";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "fs10";
          s4_len = 4;
          break;
        }
        case 0x17:{
          s4 = "fs7";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "fa2";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "fs8";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "ft2";
          s4_len = 3;
          break;
        }
        case 0x1F:{
          s4 = "ft11";
          s4_len = 4;
          break;
        }
        case 0x0B:{
          s4 = "fa1";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "ft7";
          s4_len = 3;
          break;
        }
        case 0x13:{
          s4 = "fs3";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "ft4";
          s4_len = 3;
          break;
        }
        case 0x19:{
          s4 = "fs9";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "fs2";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "fs4";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "fa4";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "ft10";
          s4_len = 4;
          break;
        }
        case 0x11:{
          s4 = "fa7";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "ft3";
          s4_len = 3;
          break;
        }
        case 0x05:{
          s4 = "ft5";
          s4_len = 3;
          break;
        }
        case 0x1D:{
          s4 = "ft9";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "fa3";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "fa5";
          s4_len = 3;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.riscv_fleq_h.rs2) { 
        case 0x08:{
          s6 = "fs0";
          s6_len = 3;
          break;
        }
        case 0x15:{
          s6 = "fs5";
          s6_len = 3;
          break;
        }
        case 0x01:{
          s6 = "ft1";
          s6_len = 3;
          break;
        }
        case 0x06:{
          s6 = "ft6";
          s6_len = 3;
          break;
        }
        case 0x09:{
          s6 = "fs1";
          s6_len = 3;
          break;
        }
        case 0x10:{
          s6 = "fa6";
          s6_len = 3;
          break;
        }
        case 0x1B:{
          s6 = "fs11";
          s6_len = 4;
          break;
        }
        case 0x1C:{
          s6 = "ft8";
          s6_len = 3;
          break;
        }
        case 0x16:{
          s6 = "fs6";
          s6_len = 3;
          break;
        }
        case 0x00:{
          s6 = "ft0";
          s6_len = 3;
          break;
        }
        case 0x0A:{
          s6 = "fa0";
          s6_len = 3;
          break;
        }
        case 0x1A:{
          s6 = "fs10";
          s6_len = 4;
          break;
        }
        case 0x17:{
          s6 = "fs7";
          s6_len = 3;
          break;
        }
        case 0x0C:{
          s6 = "fa2";
          s6_len = 3;
          break;
        }
        case 0x18:{
          s6 = "fs8";
          s6_len = 3;
          break;
        }
        case 0x02:{
          s6 = "ft2";
          s6_len = 3;
          break;
        }
        case 0x1F:{
          s6 = "ft11";
          s6_len = 4;
          break;
        }
        case 0x0B:{
          s6 = "fa1";
          s6_len = 3;
          break;
        }
        case 0x07:{
          s6 = "ft7";
          s6_len = 3;
          break;
        }
        case 0x13:{
          s6 = "fs3";
          s6_len = 3;
          break;
        }
        case 0x04:{
          s6 = "ft4";
          s6_len = 3;
          break;
        }
        case 0x19:{
          s6 = "fs9";
          s6_len = 3;
          break;
        }
        case 0x12:{
          s6 = "fs2";
          s6_len = 3;
          break;
        }
        case 0x14:{
          s6 = "fs4";
          s6_len = 3;
          break;
        }
        case 0x0E:{
          s6 = "fa4";
          s6_len = 3;
          break;
        }
        case 0x1E:{
          s6 = "ft10";
          s6_len = 4;
          break;
        }
        case 0x11:{
          s6 = "fa7";
          s6_len = 3;
          break;
        }
        case 0x03:{
          s6 = "ft3";
          s6_len = 3;
          break;
        }
        case 0x05:{
          s6 = "ft5";
          s6_len = 3;
          break;
        }
        case 0x1D:{
          s6 = "ft9";
          s6_len = 3;
          break;
        }
        case 0x0D:{
          s6 = "fa3";
          s6_len = 3;
          break;
        }
        case 0x0F:{
          s6 = "fa5";
          s6_len = 3;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
    }
    break;
    case RISCV_FLTQ_H: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      s0 = "fltq.h";
      s0_len = 6;
      spc( &s1, &s1_len);
      switch (tree->ast_node.riscv_fltq_h.rd) { 
        case 0x08:{
          s2 = "fs0";
          s2_len = 3;
          break;
        }
        case 0x15:{
          s2 = "fs5";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "ft1";
          s2_len = 3;
          break;
        }
        case 0x06:{
          s2 = "ft6";
          s2_len = 3;
          break;
        }
        case 0x09:{
          s2 = "fs1";
          s2_len = 3;
          break;
        }
        case 0x10:{
          s2 = "fa6";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "fs11";
          s2_len = 4;
          break;
        }
        case 0x1C:{
          s2 = "ft8";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "fs6";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "ft0";
          s2_len = 3;
          break;
        }
        case 0x0A:{
          s2 = "fa0";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "fs10";
          s2_len = 4;
          break;
        }
        case 0x17:{
          s2 = "fs7";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "fa2";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "fs8";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "ft2";
          s2_len = 3;
          break;
        }
        case 0x1F:{
          s2 = "ft11";
          s2_len = 4;
          break;
        }
        case 0x0B:{
          s2 = "fa1";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "ft7";
          s2_len = 3;
          break;
        }
        case 0x13:{
          s2 = "fs3";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "ft4";
          s2_len = 3;
          break;
        }
        case 0x19:{
          s2 = "fs9";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "fs2";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "fs4";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "fa4";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "ft10";
          s2_len = 4;
          break;
        }
        case 0x11:{
          s2 = "fa7";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "ft3";
          s2_len = 3;
          break;
        }
        case 0x05:{
          s2 = "ft5";
          s2_len = 3;
          break;
        }
        case 0x1D:{
          s2 = "ft9";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "fa3";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "fa5";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.riscv_fltq_h.rs1) { 
        case 0x08:{
          s4 = "fs0";
          s4_len = 3;
          break;
        }
        case 0x15:{
          s4 = "fs5";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "ft1";
          s4_len = 3;
          break;
        }
        case 0x06:{
          s4 = "ft6";
          s4_len = 3;
          break;
        }
        case 0x09:{
          s4 = "fs1";
          s4_len = 3;
          break;
        }
        case 0x10:{
          s4 = "fa6";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "fs11";
          s4_len = 4;
          break;
        }
        case 0x1C:{
          s4 = "ft8";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "fs6";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "ft0";
          s4_len = 3;
          break;
        }
        case 0x0A:{
          s4 = "fa0";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "fs10";
          s4_len = 4;
          break;
        }
        case 0x17:{
          s4 = "fs7";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "fa2";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "fs8";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "ft2";
          s4_len = 3;
          break;
        }
        case 0x1F:{
          s4 = "ft11";
          s4_len = 4;
          break;
        }
        case 0x0B:{
          s4 = "fa1";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "ft7";
          s4_len = 3;
          break;
        }
        case 0x13:{
          s4 = "fs3";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "ft4";
          s4_len = 3;
          break;
        }
        case 0x19:{
          s4 = "fs9";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "fs2";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "fs4";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "fa4";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "ft10";
          s4_len = 4;
          break;
        }
        case 0x11:{
          s4 = "fa7";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "ft3";
          s4_len = 3;
          break;
        }
        case 0x05:{
          s4 = "ft5";
          s4_len = 3;
          break;
        }
        case 0x1D:{
          s4 = "ft9";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "fa3";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "fa5";
          s4_len = 3;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.riscv_fltq_h.rs2) { 
        case 0x08:{
          s6 = "fs0";
          s6_len = 3;
          break;
        }
        case 0x15:{
          s6 = "fs5";
          s6_len = 3;
          break;
        }
        case 0x01:{
          s6 = "ft1";
          s6_len = 3;
          break;
        }
        case 0x06:{
          s6 = "ft6";
          s6_len = 3;
          break;
        }
        case 0x09:{
          s6 = "fs1";
          s6_len = 3;
          break;
        }
        case 0x10:{
          s6 = "fa6";
          s6_len = 3;
          break;
        }
        case 0x1B:{
          s6 = "fs11";
          s6_len = 4;
          break;
        }
        case 0x1C:{
          s6 = "ft8";
          s6_len = 3;
          break;
        }
        case 0x16:{
          s6 = "fs6";
          s6_len = 3;
          break;
        }
        case 0x00:{
          s6 = "ft0";
          s6_len = 3;
          break;
        }
        case 0x0A:{
          s6 = "fa0";
          s6_len = 3;
          break;
        }
        case 0x1A:{
          s6 = "fs10";
          s6_len = 4;
          break;
        }
        case 0x17:{
          s6 = "fs7";
          s6_len = 3;
          break;
        }
        case 0x0C:{
          s6 = "fa2";
          s6_len = 3;
          break;
        }
        case 0x18:{
          s6 = "fs8";
          s6_len = 3;
          break;
        }
        case 0x02:{
          s6 = "ft2";
          s6_len = 3;
          break;
        }
        case 0x1F:{
          s6 = "ft11";
          s6_len = 4;
          break;
        }
        case 0x0B:{
          s6 = "fa1";
          s6_len = 3;
          break;
        }
        case 0x07:{
          s6 = "ft7";
          s6_len = 3;
          break;
        }
        case 0x13:{
          s6 = "fs3";
          s6_len = 3;
          break;
        }
        case 0x04:{
          s6 = "ft4";
          s6_len = 3;
          break;
        }
        case 0x19:{
          s6 = "fs9";
          s6_len = 3;
          break;
        }
        case 0x12:{
          s6 = "fs2";
          s6_len = 3;
          break;
        }
        case 0x14:{
          s6 = "fs4";
          s6_len = 3;
          break;
        }
        case 0x0E:{
          s6 = "fa4";
          s6_len = 3;
          break;
        }
        case 0x1E:{
          s6 = "ft10";
          s6_len = 4;
          break;
        }
        case 0x11:{
          s6 = "fa7";
          s6_len = 3;
          break;
        }
        case 0x03:{
          s6 = "ft3";
          s6_len = 3;
          break;
        }
        case 0x05:{
          s6 = "ft5";
          s6_len = 3;
          break;
        }
        case 0x1D:{
          s6 = "ft9";
          s6_len = 3;
          break;
        }
        case 0x0D:{
          s6 = "fa3";
          s6_len = 3;
          break;
        }
        case 0x0F:{
          s6 = "fa5";
          s6_len = 3;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
    }
    break;
    case RISCV_FLEQ_S: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      s0 = "fleq.s";
      s0_len = 6;
      spc( &s1, &s1_len);
      switch (tree->ast_node.riscv_fleq_s.rd) { 
        case 0x08:{
          s2 = "fs0";
          s2_len = 3;
          break;
        }
        case 0x15:{
          s2 = "fs5";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "ft1";
          s2_len = 3;
          break;
        }
        case 0x06:{
          s2 = "ft6";
          s2_len = 3;
          break;
        }
        case 0x09:{
          s2 = "fs1";
          s2_len = 3;
          break;
        }
        case 0x10:{
          s2 = "fa6";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "fs11";
          s2_len = 4;
          break;
        }
        case 0x1C:{
          s2 = "ft8";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "fs6";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "ft0";
          s2_len = 3;
          break;
        }
        case 0x0A:{
          s2 = "fa0";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "fs10";
          s2_len = 4;
          break;
        }
        case 0x17:{
          s2 = "fs7";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "fa2";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "fs8";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "ft2";
          s2_len = 3;
          break;
        }
        case 0x1F:{
          s2 = "ft11";
          s2_len = 4;
          break;
        }
        case 0x0B:{
          s2 = "fa1";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "ft7";
          s2_len = 3;
          break;
        }
        case 0x13:{
          s2 = "fs3";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "ft4";
          s2_len = 3;
          break;
        }
        case 0x19:{
          s2 = "fs9";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "fs2";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "fs4";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "fa4";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "ft10";
          s2_len = 4;
          break;
        }
        case 0x11:{
          s2 = "fa7";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "ft3";
          s2_len = 3;
          break;
        }
        case 0x05:{
          s2 = "ft5";
          s2_len = 3;
          break;
        }
        case 0x1D:{
          s2 = "ft9";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "fa3";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "fa5";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.riscv_fleq_s.rs1) { 
        case 0x08:{
          s4 = "fs0";
          s4_len = 3;
          break;
        }
        case 0x15:{
          s4 = "fs5";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "ft1";
          s4_len = 3;
          break;
        }
        case 0x06:{
          s4 = "ft6";
          s4_len = 3;
          break;
        }
        case 0x09:{
          s4 = "fs1";
          s4_len = 3;
          break;
        }
        case 0x10:{
          s4 = "fa6";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "fs11";
          s4_len = 4;
          break;
        }
        case 0x1C:{
          s4 = "ft8";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "fs6";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "ft0";
          s4_len = 3;
          break;
        }
        case 0x0A:{
          s4 = "fa0";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "fs10";
          s4_len = 4;
          break;
        }
        case 0x17:{
          s4 = "fs7";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "fa2";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "fs8";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "ft2";
          s4_len = 3;
          break;
        }
        case 0x1F:{
          s4 = "ft11";
          s4_len = 4;
          break;
        }
        case 0x0B:{
          s4 = "fa1";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "ft7";
          s4_len = 3;
          break;
        }
        case 0x13:{
          s4 = "fs3";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "ft4";
          s4_len = 3;
          break;
        }
        case 0x19:{
          s4 = "fs9";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "fs2";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "fs4";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "fa4";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "ft10";
          s4_len = 4;
          break;
        }
        case 0x11:{
          s4 = "fa7";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "ft3";
          s4_len = 3;
          break;
        }
        case 0x05:{
          s4 = "ft5";
          s4_len = 3;
          break;
        }
        case 0x1D:{
          s4 = "ft9";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "fa3";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "fa5";
          s4_len = 3;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.riscv_fleq_s.rs2) { 
        case 0x08:{
          s6 = "fs0";
          s6_len = 3;
          break;
        }
        case 0x15:{
          s6 = "fs5";
          s6_len = 3;
          break;
        }
        case 0x01:{
          s6 = "ft1";
          s6_len = 3;
          break;
        }
        case 0x06:{
          s6 = "ft6";
          s6_len = 3;
          break;
        }
        case 0x09:{
          s6 = "fs1";
          s6_len = 3;
          break;
        }
        case 0x10:{
          s6 = "fa6";
          s6_len = 3;
          break;
        }
        case 0x1B:{
          s6 = "fs11";
          s6_len = 4;
          break;
        }
        case 0x1C:{
          s6 = "ft8";
          s6_len = 3;
          break;
        }
        case 0x16:{
          s6 = "fs6";
          s6_len = 3;
          break;
        }
        case 0x00:{
          s6 = "ft0";
          s6_len = 3;
          break;
        }
        case 0x0A:{
          s6 = "fa0";
          s6_len = 3;
          break;
        }
        case 0x1A:{
          s6 = "fs10";
          s6_len = 4;
          break;
        }
        case 0x17:{
          s6 = "fs7";
          s6_len = 3;
          break;
        }
        case 0x0C:{
          s6 = "fa2";
          s6_len = 3;
          break;
        }
        case 0x18:{
          s6 = "fs8";
          s6_len = 3;
          break;
        }
        case 0x02:{
          s6 = "ft2";
          s6_len = 3;
          break;
        }
        case 0x1F:{
          s6 = "ft11";
          s6_len = 4;
          break;
        }
        case 0x0B:{
          s6 = "fa1";
          s6_len = 3;
          break;
        }
        case 0x07:{
          s6 = "ft7";
          s6_len = 3;
          break;
        }
        case 0x13:{
          s6 = "fs3";
          s6_len = 3;
          break;
        }
        case 0x04:{
          s6 = "ft4";
          s6_len = 3;
          break;
        }
        case 0x19:{
          s6 = "fs9";
          s6_len = 3;
          break;
        }
        case 0x12:{
          s6 = "fs2";
          s6_len = 3;
          break;
        }
        case 0x14:{
          s6 = "fs4";
          s6_len = 3;
          break;
        }
        case 0x0E:{
          s6 = "fa4";
          s6_len = 3;
          break;
        }
        case 0x1E:{
          s6 = "ft10";
          s6_len = 4;
          break;
        }
        case 0x11:{
          s6 = "fa7";
          s6_len = 3;
          break;
        }
        case 0x03:{
          s6 = "ft3";
          s6_len = 3;
          break;
        }
        case 0x05:{
          s6 = "ft5";
          s6_len = 3;
          break;
        }
        case 0x1D:{
          s6 = "ft9";
          s6_len = 3;
          break;
        }
        case 0x0D:{
          s6 = "fa3";
          s6_len = 3;
          break;
        }
        case 0x0F:{
          s6 = "fa5";
          s6_len = 3;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
    }
    break;
    case RISCV_FLTQ_S: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      s0 = "fltq.s";
      s0_len = 6;
      spc( &s1, &s1_len);
      switch (tree->ast_node.riscv_fltq_s.rd) { 
        case 0x08:{
          s2 = "fs0";
          s2_len = 3;
          break;
        }
        case 0x15:{
          s2 = "fs5";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "ft1";
          s2_len = 3;
          break;
        }
        case 0x06:{
          s2 = "ft6";
          s2_len = 3;
          break;
        }
        case 0x09:{
          s2 = "fs1";
          s2_len = 3;
          break;
        }
        case 0x10:{
          s2 = "fa6";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "fs11";
          s2_len = 4;
          break;
        }
        case 0x1C:{
          s2 = "ft8";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "fs6";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "ft0";
          s2_len = 3;
          break;
        }
        case 0x0A:{
          s2 = "fa0";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "fs10";
          s2_len = 4;
          break;
        }
        case 0x17:{
          s2 = "fs7";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "fa2";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "fs8";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "ft2";
          s2_len = 3;
          break;
        }
        case 0x1F:{
          s2 = "ft11";
          s2_len = 4;
          break;
        }
        case 0x0B:{
          s2 = "fa1";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "ft7";
          s2_len = 3;
          break;
        }
        case 0x13:{
          s2 = "fs3";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "ft4";
          s2_len = 3;
          break;
        }
        case 0x19:{
          s2 = "fs9";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "fs2";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "fs4";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "fa4";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "ft10";
          s2_len = 4;
          break;
        }
        case 0x11:{
          s2 = "fa7";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "ft3";
          s2_len = 3;
          break;
        }
        case 0x05:{
          s2 = "ft5";
          s2_len = 3;
          break;
        }
        case 0x1D:{
          s2 = "ft9";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "fa3";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "fa5";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.riscv_fltq_s.rs1) { 
        case 0x08:{
          s4 = "fs0";
          s4_len = 3;
          break;
        }
        case 0x15:{
          s4 = "fs5";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "ft1";
          s4_len = 3;
          break;
        }
        case 0x06:{
          s4 = "ft6";
          s4_len = 3;
          break;
        }
        case 0x09:{
          s4 = "fs1";
          s4_len = 3;
          break;
        }
        case 0x10:{
          s4 = "fa6";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "fs11";
          s4_len = 4;
          break;
        }
        case 0x1C:{
          s4 = "ft8";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "fs6";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "ft0";
          s4_len = 3;
          break;
        }
        case 0x0A:{
          s4 = "fa0";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "fs10";
          s4_len = 4;
          break;
        }
        case 0x17:{
          s4 = "fs7";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "fa2";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "fs8";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "ft2";
          s4_len = 3;
          break;
        }
        case 0x1F:{
          s4 = "ft11";
          s4_len = 4;
          break;
        }
        case 0x0B:{
          s4 = "fa1";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "ft7";
          s4_len = 3;
          break;
        }
        case 0x13:{
          s4 = "fs3";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "ft4";
          s4_len = 3;
          break;
        }
        case 0x19:{
          s4 = "fs9";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "fs2";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "fs4";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "fa4";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "ft10";
          s4_len = 4;
          break;
        }
        case 0x11:{
          s4 = "fa7";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "ft3";
          s4_len = 3;
          break;
        }
        case 0x05:{
          s4 = "ft5";
          s4_len = 3;
          break;
        }
        case 0x1D:{
          s4 = "ft9";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "fa3";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "fa5";
          s4_len = 3;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.riscv_fltq_s.rs2) { 
        case 0x08:{
          s6 = "fs0";
          s6_len = 3;
          break;
        }
        case 0x15:{
          s6 = "fs5";
          s6_len = 3;
          break;
        }
        case 0x01:{
          s6 = "ft1";
          s6_len = 3;
          break;
        }
        case 0x06:{
          s6 = "ft6";
          s6_len = 3;
          break;
        }
        case 0x09:{
          s6 = "fs1";
          s6_len = 3;
          break;
        }
        case 0x10:{
          s6 = "fa6";
          s6_len = 3;
          break;
        }
        case 0x1B:{
          s6 = "fs11";
          s6_len = 4;
          break;
        }
        case 0x1C:{
          s6 = "ft8";
          s6_len = 3;
          break;
        }
        case 0x16:{
          s6 = "fs6";
          s6_len = 3;
          break;
        }
        case 0x00:{
          s6 = "ft0";
          s6_len = 3;
          break;
        }
        case 0x0A:{
          s6 = "fa0";
          s6_len = 3;
          break;
        }
        case 0x1A:{
          s6 = "fs10";
          s6_len = 4;
          break;
        }
        case 0x17:{
          s6 = "fs7";
          s6_len = 3;
          break;
        }
        case 0x0C:{
          s6 = "fa2";
          s6_len = 3;
          break;
        }
        case 0x18:{
          s6 = "fs8";
          s6_len = 3;
          break;
        }
        case 0x02:{
          s6 = "ft2";
          s6_len = 3;
          break;
        }
        case 0x1F:{
          s6 = "ft11";
          s6_len = 4;
          break;
        }
        case 0x0B:{
          s6 = "fa1";
          s6_len = 3;
          break;
        }
        case 0x07:{
          s6 = "ft7";
          s6_len = 3;
          break;
        }
        case 0x13:{
          s6 = "fs3";
          s6_len = 3;
          break;
        }
        case 0x04:{
          s6 = "ft4";
          s6_len = 3;
          break;
        }
        case 0x19:{
          s6 = "fs9";
          s6_len = 3;
          break;
        }
        case 0x12:{
          s6 = "fs2";
          s6_len = 3;
          break;
        }
        case 0x14:{
          s6 = "fs4";
          s6_len = 3;
          break;
        }
        case 0x0E:{
          s6 = "fa4";
          s6_len = 3;
          break;
        }
        case 0x1E:{
          s6 = "ft10";
          s6_len = 4;
          break;
        }
        case 0x11:{
          s6 = "fa7";
          s6_len = 3;
          break;
        }
        case 0x03:{
          s6 = "ft3";
          s6_len = 3;
          break;
        }
        case 0x05:{
          s6 = "ft5";
          s6_len = 3;
          break;
        }
        case 0x1D:{
          s6 = "ft9";
          s6_len = 3;
          break;
        }
        case 0x0D:{
          s6 = "fa3";
          s6_len = 3;
          break;
        }
        case 0x0F:{
          s6 = "fa5";
          s6_len = 3;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
    }
    break;
    case RISCV_FLEQ_D: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      s0 = "fleq.d";
      s0_len = 6;
      spc( &s1, &s1_len);
      switch (tree->ast_node.riscv_fleq_d.rd) { 
        case 0x08:{
          s2 = "fs0";
          s2_len = 3;
          break;
        }
        case 0x15:{
          s2 = "fs5";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "ft1";
          s2_len = 3;
          break;
        }
        case 0x06:{
          s2 = "ft6";
          s2_len = 3;
          break;
        }
        case 0x09:{
          s2 = "fs1";
          s2_len = 3;
          break;
        }
        case 0x10:{
          s2 = "fa6";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "fs11";
          s2_len = 4;
          break;
        }
        case 0x1C:{
          s2 = "ft8";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "fs6";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "ft0";
          s2_len = 3;
          break;
        }
        case 0x0A:{
          s2 = "fa0";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "fs10";
          s2_len = 4;
          break;
        }
        case 0x17:{
          s2 = "fs7";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "fa2";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "fs8";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "ft2";
          s2_len = 3;
          break;
        }
        case 0x1F:{
          s2 = "ft11";
          s2_len = 4;
          break;
        }
        case 0x0B:{
          s2 = "fa1";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "ft7";
          s2_len = 3;
          break;
        }
        case 0x13:{
          s2 = "fs3";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "ft4";
          s2_len = 3;
          break;
        }
        case 0x19:{
          s2 = "fs9";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "fs2";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "fs4";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "fa4";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "ft10";
          s2_len = 4;
          break;
        }
        case 0x11:{
          s2 = "fa7";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "ft3";
          s2_len = 3;
          break;
        }
        case 0x05:{
          s2 = "ft5";
          s2_len = 3;
          break;
        }
        case 0x1D:{
          s2 = "ft9";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "fa3";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "fa5";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.riscv_fleq_d.rs1) { 
        case 0x08:{
          s4 = "fs0";
          s4_len = 3;
          break;
        }
        case 0x15:{
          s4 = "fs5";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "ft1";
          s4_len = 3;
          break;
        }
        case 0x06:{
          s4 = "ft6";
          s4_len = 3;
          break;
        }
        case 0x09:{
          s4 = "fs1";
          s4_len = 3;
          break;
        }
        case 0x10:{
          s4 = "fa6";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "fs11";
          s4_len = 4;
          break;
        }
        case 0x1C:{
          s4 = "ft8";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "fs6";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "ft0";
          s4_len = 3;
          break;
        }
        case 0x0A:{
          s4 = "fa0";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "fs10";
          s4_len = 4;
          break;
        }
        case 0x17:{
          s4 = "fs7";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "fa2";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "fs8";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "ft2";
          s4_len = 3;
          break;
        }
        case 0x1F:{
          s4 = "ft11";
          s4_len = 4;
          break;
        }
        case 0x0B:{
          s4 = "fa1";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "ft7";
          s4_len = 3;
          break;
        }
        case 0x13:{
          s4 = "fs3";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "ft4";
          s4_len = 3;
          break;
        }
        case 0x19:{
          s4 = "fs9";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "fs2";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "fs4";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "fa4";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "ft10";
          s4_len = 4;
          break;
        }
        case 0x11:{
          s4 = "fa7";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "ft3";
          s4_len = 3;
          break;
        }
        case 0x05:{
          s4 = "ft5";
          s4_len = 3;
          break;
        }
        case 0x1D:{
          s4 = "ft9";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "fa3";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "fa5";
          s4_len = 3;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.riscv_fleq_d.rs2) { 
        case 0x08:{
          s6 = "fs0";
          s6_len = 3;
          break;
        }
        case 0x15:{
          s6 = "fs5";
          s6_len = 3;
          break;
        }
        case 0x01:{
          s6 = "ft1";
          s6_len = 3;
          break;
        }
        case 0x06:{
          s6 = "ft6";
          s6_len = 3;
          break;
        }
        case 0x09:{
          s6 = "fs1";
          s6_len = 3;
          break;
        }
        case 0x10:{
          s6 = "fa6";
          s6_len = 3;
          break;
        }
        case 0x1B:{
          s6 = "fs11";
          s6_len = 4;
          break;
        }
        case 0x1C:{
          s6 = "ft8";
          s6_len = 3;
          break;
        }
        case 0x16:{
          s6 = "fs6";
          s6_len = 3;
          break;
        }
        case 0x00:{
          s6 = "ft0";
          s6_len = 3;
          break;
        }
        case 0x0A:{
          s6 = "fa0";
          s6_len = 3;
          break;
        }
        case 0x1A:{
          s6 = "fs10";
          s6_len = 4;
          break;
        }
        case 0x17:{
          s6 = "fs7";
          s6_len = 3;
          break;
        }
        case 0x0C:{
          s6 = "fa2";
          s6_len = 3;
          break;
        }
        case 0x18:{
          s6 = "fs8";
          s6_len = 3;
          break;
        }
        case 0x02:{
          s6 = "ft2";
          s6_len = 3;
          break;
        }
        case 0x1F:{
          s6 = "ft11";
          s6_len = 4;
          break;
        }
        case 0x0B:{
          s6 = "fa1";
          s6_len = 3;
          break;
        }
        case 0x07:{
          s6 = "ft7";
          s6_len = 3;
          break;
        }
        case 0x13:{
          s6 = "fs3";
          s6_len = 3;
          break;
        }
        case 0x04:{
          s6 = "ft4";
          s6_len = 3;
          break;
        }
        case 0x19:{
          s6 = "fs9";
          s6_len = 3;
          break;
        }
        case 0x12:{
          s6 = "fs2";
          s6_len = 3;
          break;
        }
        case 0x14:{
          s6 = "fs4";
          s6_len = 3;
          break;
        }
        case 0x0E:{
          s6 = "fa4";
          s6_len = 3;
          break;
        }
        case 0x1E:{
          s6 = "ft10";
          s6_len = 4;
          break;
        }
        case 0x11:{
          s6 = "fa7";
          s6_len = 3;
          break;
        }
        case 0x03:{
          s6 = "ft3";
          s6_len = 3;
          break;
        }
        case 0x05:{
          s6 = "ft5";
          s6_len = 3;
          break;
        }
        case 0x1D:{
          s6 = "ft9";
          s6_len = 3;
          break;
        }
        case 0x0D:{
          s6 = "fa3";
          s6_len = 3;
          break;
        }
        case 0x0F:{
          s6 = "fa5";
          s6_len = 3;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
    }
    break;
    case RISCV_FLTQ_D: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      s0 = "fltq.d";
      s0_len = 6;
      spc( &s1, &s1_len);
      switch (tree->ast_node.riscv_fltq_d.rd) { 
        case 0x08:{
          s2 = "fs0";
          s2_len = 3;
          break;
        }
        case 0x15:{
          s2 = "fs5";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "ft1";
          s2_len = 3;
          break;
        }
        case 0x06:{
          s2 = "ft6";
          s2_len = 3;
          break;
        }
        case 0x09:{
          s2 = "fs1";
          s2_len = 3;
          break;
        }
        case 0x10:{
          s2 = "fa6";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "fs11";
          s2_len = 4;
          break;
        }
        case 0x1C:{
          s2 = "ft8";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "fs6";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "ft0";
          s2_len = 3;
          break;
        }
        case 0x0A:{
          s2 = "fa0";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "fs10";
          s2_len = 4;
          break;
        }
        case 0x17:{
          s2 = "fs7";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "fa2";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "fs8";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "ft2";
          s2_len = 3;
          break;
        }
        case 0x1F:{
          s2 = "ft11";
          s2_len = 4;
          break;
        }
        case 0x0B:{
          s2 = "fa1";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "ft7";
          s2_len = 3;
          break;
        }
        case 0x13:{
          s2 = "fs3";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "ft4";
          s2_len = 3;
          break;
        }
        case 0x19:{
          s2 = "fs9";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "fs2";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "fs4";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "fa4";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "ft10";
          s2_len = 4;
          break;
        }
        case 0x11:{
          s2 = "fa7";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "ft3";
          s2_len = 3;
          break;
        }
        case 0x05:{
          s2 = "ft5";
          s2_len = 3;
          break;
        }
        case 0x1D:{
          s2 = "ft9";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "fa3";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "fa5";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.riscv_fltq_d.rs1) { 
        case 0x08:{
          s4 = "fs0";
          s4_len = 3;
          break;
        }
        case 0x15:{
          s4 = "fs5";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "ft1";
          s4_len = 3;
          break;
        }
        case 0x06:{
          s4 = "ft6";
          s4_len = 3;
          break;
        }
        case 0x09:{
          s4 = "fs1";
          s4_len = 3;
          break;
        }
        case 0x10:{
          s4 = "fa6";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "fs11";
          s4_len = 4;
          break;
        }
        case 0x1C:{
          s4 = "ft8";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "fs6";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "ft0";
          s4_len = 3;
          break;
        }
        case 0x0A:{
          s4 = "fa0";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "fs10";
          s4_len = 4;
          break;
        }
        case 0x17:{
          s4 = "fs7";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "fa2";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "fs8";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "ft2";
          s4_len = 3;
          break;
        }
        case 0x1F:{
          s4 = "ft11";
          s4_len = 4;
          break;
        }
        case 0x0B:{
          s4 = "fa1";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "ft7";
          s4_len = 3;
          break;
        }
        case 0x13:{
          s4 = "fs3";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "ft4";
          s4_len = 3;
          break;
        }
        case 0x19:{
          s4 = "fs9";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "fs2";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "fs4";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "fa4";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "ft10";
          s4_len = 4;
          break;
        }
        case 0x11:{
          s4 = "fa7";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "ft3";
          s4_len = 3;
          break;
        }
        case 0x05:{
          s4 = "ft5";
          s4_len = 3;
          break;
        }
        case 0x1D:{
          s4 = "ft9";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "fa3";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "fa5";
          s4_len = 3;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.riscv_fltq_d.rs2) { 
        case 0x08:{
          s6 = "fs0";
          s6_len = 3;
          break;
        }
        case 0x15:{
          s6 = "fs5";
          s6_len = 3;
          break;
        }
        case 0x01:{
          s6 = "ft1";
          s6_len = 3;
          break;
        }
        case 0x06:{
          s6 = "ft6";
          s6_len = 3;
          break;
        }
        case 0x09:{
          s6 = "fs1";
          s6_len = 3;
          break;
        }
        case 0x10:{
          s6 = "fa6";
          s6_len = 3;
          break;
        }
        case 0x1B:{
          s6 = "fs11";
          s6_len = 4;
          break;
        }
        case 0x1C:{
          s6 = "ft8";
          s6_len = 3;
          break;
        }
        case 0x16:{
          s6 = "fs6";
          s6_len = 3;
          break;
        }
        case 0x00:{
          s6 = "ft0";
          s6_len = 3;
          break;
        }
        case 0x0A:{
          s6 = "fa0";
          s6_len = 3;
          break;
        }
        case 0x1A:{
          s6 = "fs10";
          s6_len = 4;
          break;
        }
        case 0x17:{
          s6 = "fs7";
          s6_len = 3;
          break;
        }
        case 0x0C:{
          s6 = "fa2";
          s6_len = 3;
          break;
        }
        case 0x18:{
          s6 = "fs8";
          s6_len = 3;
          break;
        }
        case 0x02:{
          s6 = "ft2";
          s6_len = 3;
          break;
        }
        case 0x1F:{
          s6 = "ft11";
          s6_len = 4;
          break;
        }
        case 0x0B:{
          s6 = "fa1";
          s6_len = 3;
          break;
        }
        case 0x07:{
          s6 = "ft7";
          s6_len = 3;
          break;
        }
        case 0x13:{
          s6 = "fs3";
          s6_len = 3;
          break;
        }
        case 0x04:{
          s6 = "ft4";
          s6_len = 3;
          break;
        }
        case 0x19:{
          s6 = "fs9";
          s6_len = 3;
          break;
        }
        case 0x12:{
          s6 = "fs2";
          s6_len = 3;
          break;
        }
        case 0x14:{
          s6 = "fs4";
          s6_len = 3;
          break;
        }
        case 0x0E:{
          s6 = "fa4";
          s6_len = 3;
          break;
        }
        case 0x1E:{
          s6 = "ft10";
          s6_len = 4;
          break;
        }
        case 0x11:{
          s6 = "fa7";
          s6_len = 3;
          break;
        }
        case 0x03:{
          s6 = "ft3";
          s6_len = 3;
          break;
        }
        case 0x05:{
          s6 = "ft5";
          s6_len = 3;
          break;
        }
        case 0x1D:{
          s6 = "ft9";
          s6_len = 3;
          break;
        }
        case 0x0D:{
          s6 = "fa3";
          s6_len = 3;
          break;
        }
        case 0x0F:{
          s6 = "fa5";
          s6_len = 3;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
    }
    break;
    case RISCV_FCVTMOD_W_D: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      s0 = "fcvtmod.w.d";
      s0_len = 11;
      spc( &s1, &s1_len);
      switch (tree->ast_node.riscv_fcvtmod_w_d.rd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.riscv_fcvtmod_w_d.rs1) { 
        case 0x08:{
          s4 = "fs0";
          s4_len = 3;
          break;
        }
        case 0x15:{
          s4 = "fs5";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "ft1";
          s4_len = 3;
          break;
        }
        case 0x06:{
          s4 = "ft6";
          s4_len = 3;
          break;
        }
        case 0x09:{
          s4 = "fs1";
          s4_len = 3;
          break;
        }
        case 0x10:{
          s4 = "fa6";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "fs11";
          s4_len = 4;
          break;
        }
        case 0x1C:{
          s4 = "ft8";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "fs6";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "ft0";
          s4_len = 3;
          break;
        }
        case 0x0A:{
          s4 = "fa0";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "fs10";
          s4_len = 4;
          break;
        }
        case 0x17:{
          s4 = "fs7";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "fa2";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "fs8";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "ft2";
          s4_len = 3;
          break;
        }
        case 0x1F:{
          s4 = "ft11";
          s4_len = 4;
          break;
        }
        case 0x0B:{
          s4 = "fa1";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "ft7";
          s4_len = 3;
          break;
        }
        case 0x13:{
          s4 = "fs3";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "ft4";
          s4_len = 3;
          break;
        }
        case 0x19:{
          s4 = "fs9";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "fs2";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "fs4";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "fa4";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "ft10";
          s4_len = 4;
          break;
        }
        case 0x11:{
          s4 = "fa7";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "ft3";
          s4_len = 3;
          break;
        }
        case 0x05:{
          s4 = "ft5";
          s4_len = 3;
          break;
        }
        case 0x1D:{
          s4 = "ft9";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "fa3";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "fa5";
          s4_len = 3;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      }
    }
    break;
    case RISCV_SHA256SIG0: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      s0 = "sha256sig0";
      s0_len = 10;
      spc( &s1, &s1_len);
      switch (tree->ast_node.sha256sig0.rd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.sha256sig0.rs1) { 
        case 0x08:{
          s4 = "fp";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "s5";
          s4_len = 2;
          break;
        }
        case 0x01:{
          s4 = "ra";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "t1";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "a6";
          s4_len = 2;
          break;
        }
        case 0x1B:{
          s4 = "s11";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "t3";
          s4_len = 2;
          break;
        }
        case 0x16:{
          s4 = "s6";
          s4_len = 2;
          break;
        }
        case 0x00:{
          s4 = "zero";
          s4_len = 4;
          break;
        }
        case 0x0A:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x1A:{
          s4 = "s10";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "s7";
          s4_len = 2;
          break;
        }
        case 0x0C:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x18:{
          s4 = "s8";
          s4_len = 2;
          break;
        }
        case 0x02:{
          s4 = "sp";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "t6";
          s4_len = 2;
          break;
        }
        case 0x0B:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x07:{
          s4 = "t2";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "s3";
          s4_len = 2;
          break;
        }
        case 0x04:{
          s4 = "tp";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "s9";
          s4_len = 2;
          break;
        }
        case 0x12:{
          s4 = "s2";
          s4_len = 2;
          break;
        }
        case 0x14:{
          s4 = "s4";
          s4_len = 2;
          break;
        }
        case 0x0E:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x1E:{
          s4 = "t5";
          s4_len = 2;
          break;
        }
        case 0x11:{
          s4 = "a7";
          s4_len = 2;
          break;
        }
        case 0x03:{
          s4 = "gp";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "t0";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "t4";
          s4_len = 2;
          break;
        }
        case 0x0D:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x0F:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      }
    }
    break;
    case RISCV_SHA256SIG1: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      s0 = "sha256sig1";
      s0_len = 10;
      spc( &s1, &s1_len);
      switch (tree->ast_node.sha256sig1.rd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.sha256sig1.rs1) { 
        case 0x08:{
          s4 = "fp";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "s5";
          s4_len = 2;
          break;
        }
        case 0x01:{
          s4 = "ra";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "t1";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "a6";
          s4_len = 2;
          break;
        }
        case 0x1B:{
          s4 = "s11";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "t3";
          s4_len = 2;
          break;
        }
        case 0x16:{
          s4 = "s6";
          s4_len = 2;
          break;
        }
        case 0x00:{
          s4 = "zero";
          s4_len = 4;
          break;
        }
        case 0x0A:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x1A:{
          s4 = "s10";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "s7";
          s4_len = 2;
          break;
        }
        case 0x0C:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x18:{
          s4 = "s8";
          s4_len = 2;
          break;
        }
        case 0x02:{
          s4 = "sp";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "t6";
          s4_len = 2;
          break;
        }
        case 0x0B:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x07:{
          s4 = "t2";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "s3";
          s4_len = 2;
          break;
        }
        case 0x04:{
          s4 = "tp";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "s9";
          s4_len = 2;
          break;
        }
        case 0x12:{
          s4 = "s2";
          s4_len = 2;
          break;
        }
        case 0x14:{
          s4 = "s4";
          s4_len = 2;
          break;
        }
        case 0x0E:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x1E:{
          s4 = "t5";
          s4_len = 2;
          break;
        }
        case 0x11:{
          s4 = "a7";
          s4_len = 2;
          break;
        }
        case 0x03:{
          s4 = "gp";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "t0";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "t4";
          s4_len = 2;
          break;
        }
        case 0x0D:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x0F:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      }
    }
    break;
    case RISCV_SHA256SUM0: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      s0 = "sha256sum0";
      s0_len = 10;
      spc( &s1, &s1_len);
      switch (tree->ast_node.sha256sum0.rd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.sha256sum0.rs1) { 
        case 0x08:{
          s4 = "fp";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "s5";
          s4_len = 2;
          break;
        }
        case 0x01:{
          s4 = "ra";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "t1";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "a6";
          s4_len = 2;
          break;
        }
        case 0x1B:{
          s4 = "s11";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "t3";
          s4_len = 2;
          break;
        }
        case 0x16:{
          s4 = "s6";
          s4_len = 2;
          break;
        }
        case 0x00:{
          s4 = "zero";
          s4_len = 4;
          break;
        }
        case 0x0A:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x1A:{
          s4 = "s10";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "s7";
          s4_len = 2;
          break;
        }
        case 0x0C:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x18:{
          s4 = "s8";
          s4_len = 2;
          break;
        }
        case 0x02:{
          s4 = "sp";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "t6";
          s4_len = 2;
          break;
        }
        case 0x0B:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x07:{
          s4 = "t2";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "s3";
          s4_len = 2;
          break;
        }
        case 0x04:{
          s4 = "tp";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "s9";
          s4_len = 2;
          break;
        }
        case 0x12:{
          s4 = "s2";
          s4_len = 2;
          break;
        }
        case 0x14:{
          s4 = "s4";
          s4_len = 2;
          break;
        }
        case 0x0E:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x1E:{
          s4 = "t5";
          s4_len = 2;
          break;
        }
        case 0x11:{
          s4 = "a7";
          s4_len = 2;
          break;
        }
        case 0x03:{
          s4 = "gp";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "t0";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "t4";
          s4_len = 2;
          break;
        }
        case 0x0D:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x0F:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      }
    }
    break;
    case RISCV_SHA256SUM1: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      s0 = "sha256sum1";
      s0_len = 10;
      spc( &s1, &s1_len);
      switch (tree->ast_node.sha256sum1.rd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.sha256sum1.rs1) { 
        case 0x08:{
          s4 = "fp";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "s5";
          s4_len = 2;
          break;
        }
        case 0x01:{
          s4 = "ra";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "t1";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "a6";
          s4_len = 2;
          break;
        }
        case 0x1B:{
          s4 = "s11";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "t3";
          s4_len = 2;
          break;
        }
        case 0x16:{
          s4 = "s6";
          s4_len = 2;
          break;
        }
        case 0x00:{
          s4 = "zero";
          s4_len = 4;
          break;
        }
        case 0x0A:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x1A:{
          s4 = "s10";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "s7";
          s4_len = 2;
          break;
        }
        case 0x0C:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x18:{
          s4 = "s8";
          s4_len = 2;
          break;
        }
        case 0x02:{
          s4 = "sp";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "t6";
          s4_len = 2;
          break;
        }
        case 0x0B:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x07:{
          s4 = "t2";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "s3";
          s4_len = 2;
          break;
        }
        case 0x04:{
          s4 = "tp";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "s9";
          s4_len = 2;
          break;
        }
        case 0x12:{
          s4 = "s2";
          s4_len = 2;
          break;
        }
        case 0x14:{
          s4 = "s4";
          s4_len = 2;
          break;
        }
        case 0x0E:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x1E:{
          s4 = "t5";
          s4_len = 2;
          break;
        }
        case 0x11:{
          s4 = "a7";
          s4_len = 2;
          break;
        }
        case 0x03:{
          s4 = "gp";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "t0";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "t4";
          s4_len = 2;
          break;
        }
        case 0x0D:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x0F:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      }
    }
    break;
    case RISCV_AES32ESMI: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      char *s8; size_t s8_len;
      s0 = "aes32esmi";
      s0_len = 9;
      spc( &s1, &s1_len);
      switch (tree->ast_node.aes32esmi.rd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.aes32esmi.rs1) { 
        case 0x08:{
          s4 = "fp";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "s5";
          s4_len = 2;
          break;
        }
        case 0x01:{
          s4 = "ra";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "t1";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "a6";
          s4_len = 2;
          break;
        }
        case 0x1B:{
          s4 = "s11";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "t3";
          s4_len = 2;
          break;
        }
        case 0x16:{
          s4 = "s6";
          s4_len = 2;
          break;
        }
        case 0x00:{
          s4 = "zero";
          s4_len = 4;
          break;
        }
        case 0x0A:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x1A:{
          s4 = "s10";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "s7";
          s4_len = 2;
          break;
        }
        case 0x0C:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x18:{
          s4 = "s8";
          s4_len = 2;
          break;
        }
        case 0x02:{
          s4 = "sp";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "t6";
          s4_len = 2;
          break;
        }
        case 0x0B:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x07:{
          s4 = "t2";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "s3";
          s4_len = 2;
          break;
        }
        case 0x04:{
          s4 = "tp";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "s9";
          s4_len = 2;
          break;
        }
        case 0x12:{
          s4 = "s2";
          s4_len = 2;
          break;
        }
        case 0x14:{
          s4 = "s4";
          s4_len = 2;
          break;
        }
        case 0x0E:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x1E:{
          s4 = "t5";
          s4_len = 2;
          break;
        }
        case 0x11:{
          s4 = "a7";
          s4_len = 2;
          break;
        }
        case 0x03:{
          s4 = "gp";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "t0";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "t4";
          s4_len = 2;
          break;
        }
        case 0x0D:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x0F:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.aes32esmi.rs2) { 
        case 0x08:{
          s6 = "fp";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "s5";
          s6_len = 2;
          break;
        }
        case 0x01:{
          s6 = "ra";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "t1";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "s1";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "a6";
          s6_len = 2;
          break;
        }
        case 0x1B:{
          s6 = "s11";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "t3";
          s6_len = 2;
          break;
        }
        case 0x16:{
          s6 = "s6";
          s6_len = 2;
          break;
        }
        case 0x00:{
          s6 = "zero";
          s6_len = 4;
          break;
        }
        case 0x0A:{
          s6 = "a0";
          s6_len = 2;
          break;
        }
        case 0x1A:{
          s6 = "s10";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "s7";
          s6_len = 2;
          break;
        }
        case 0x0C:{
          s6 = "a2";
          s6_len = 2;
          break;
        }
        case 0x18:{
          s6 = "s8";
          s6_len = 2;
          break;
        }
        case 0x02:{
          s6 = "sp";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "t6";
          s6_len = 2;
          break;
        }
        case 0x0B:{
          s6 = "a1";
          s6_len = 2;
          break;
        }
        case 0x07:{
          s6 = "t2";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "s3";
          s6_len = 2;
          break;
        }
        case 0x04:{
          s6 = "tp";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "s9";
          s6_len = 2;
          break;
        }
        case 0x12:{
          s6 = "s2";
          s6_len = 2;
          break;
        }
        case 0x14:{
          s6 = "s4";
          s6_len = 2;
          break;
        }
        case 0x0E:{
          s6 = "a4";
          s6_len = 2;
          break;
        }
        case 0x1E:{
          s6 = "t5";
          s6_len = 2;
          break;
        }
        case 0x11:{
          s6 = "a7";
          s6_len = 2;
          break;
        }
        case 0x03:{
          s6 = "gp";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "t0";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "t4";
          s6_len = 2;
          break;
        }
        case 0x0D:{
          s6 = "a3";
          s6_len = 2;
          break;
        }
        case 0x0F:{
          s6 = "a5";
          s6_len = 2;
          break;
        }
      }
      sep( &s7, &s7_len);
      hex_bits_2(tree->ast_node.aes32esmi.bs, &s8, &s8_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len, s8, s8_len);
      }
    }
    break;
    case RISCV_AES32ESI: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      char *s8; size_t s8_len;
      s0 = "aes32esi";
      s0_len = 8;
      spc( &s1, &s1_len);
      switch (tree->ast_node.aes32esi.rd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.aes32esi.rs1) { 
        case 0x08:{
          s4 = "fp";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "s5";
          s4_len = 2;
          break;
        }
        case 0x01:{
          s4 = "ra";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "t1";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "a6";
          s4_len = 2;
          break;
        }
        case 0x1B:{
          s4 = "s11";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "t3";
          s4_len = 2;
          break;
        }
        case 0x16:{
          s4 = "s6";
          s4_len = 2;
          break;
        }
        case 0x00:{
          s4 = "zero";
          s4_len = 4;
          break;
        }
        case 0x0A:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x1A:{
          s4 = "s10";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "s7";
          s4_len = 2;
          break;
        }
        case 0x0C:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x18:{
          s4 = "s8";
          s4_len = 2;
          break;
        }
        case 0x02:{
          s4 = "sp";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "t6";
          s4_len = 2;
          break;
        }
        case 0x0B:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x07:{
          s4 = "t2";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "s3";
          s4_len = 2;
          break;
        }
        case 0x04:{
          s4 = "tp";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "s9";
          s4_len = 2;
          break;
        }
        case 0x12:{
          s4 = "s2";
          s4_len = 2;
          break;
        }
        case 0x14:{
          s4 = "s4";
          s4_len = 2;
          break;
        }
        case 0x0E:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x1E:{
          s4 = "t5";
          s4_len = 2;
          break;
        }
        case 0x11:{
          s4 = "a7";
          s4_len = 2;
          break;
        }
        case 0x03:{
          s4 = "gp";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "t0";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "t4";
          s4_len = 2;
          break;
        }
        case 0x0D:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x0F:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.aes32esi.rs2) { 
        case 0x08:{
          s6 = "fp";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "s5";
          s6_len = 2;
          break;
        }
        case 0x01:{
          s6 = "ra";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "t1";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "s1";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "a6";
          s6_len = 2;
          break;
        }
        case 0x1B:{
          s6 = "s11";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "t3";
          s6_len = 2;
          break;
        }
        case 0x16:{
          s6 = "s6";
          s6_len = 2;
          break;
        }
        case 0x00:{
          s6 = "zero";
          s6_len = 4;
          break;
        }
        case 0x0A:{
          s6 = "a0";
          s6_len = 2;
          break;
        }
        case 0x1A:{
          s6 = "s10";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "s7";
          s6_len = 2;
          break;
        }
        case 0x0C:{
          s6 = "a2";
          s6_len = 2;
          break;
        }
        case 0x18:{
          s6 = "s8";
          s6_len = 2;
          break;
        }
        case 0x02:{
          s6 = "sp";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "t6";
          s6_len = 2;
          break;
        }
        case 0x0B:{
          s6 = "a1";
          s6_len = 2;
          break;
        }
        case 0x07:{
          s6 = "t2";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "s3";
          s6_len = 2;
          break;
        }
        case 0x04:{
          s6 = "tp";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "s9";
          s6_len = 2;
          break;
        }
        case 0x12:{
          s6 = "s2";
          s6_len = 2;
          break;
        }
        case 0x14:{
          s6 = "s4";
          s6_len = 2;
          break;
        }
        case 0x0E:{
          s6 = "a4";
          s6_len = 2;
          break;
        }
        case 0x1E:{
          s6 = "t5";
          s6_len = 2;
          break;
        }
        case 0x11:{
          s6 = "a7";
          s6_len = 2;
          break;
        }
        case 0x03:{
          s6 = "gp";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "t0";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "t4";
          s6_len = 2;
          break;
        }
        case 0x0D:{
          s6 = "a3";
          s6_len = 2;
          break;
        }
        case 0x0F:{
          s6 = "a5";
          s6_len = 2;
          break;
        }
      }
      sep( &s7, &s7_len);
      hex_bits_2(tree->ast_node.aes32esi.bs, &s8, &s8_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len, s8, s8_len);
      }
    }
    break;
    case RISCV_AES32DSMI: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      char *s8; size_t s8_len;
      s0 = "aes32dsmi";
      s0_len = 9;
      spc( &s1, &s1_len);
      switch (tree->ast_node.aes32dsmi.rd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.aes32dsmi.rs1) { 
        case 0x08:{
          s4 = "fp";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "s5";
          s4_len = 2;
          break;
        }
        case 0x01:{
          s4 = "ra";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "t1";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "a6";
          s4_len = 2;
          break;
        }
        case 0x1B:{
          s4 = "s11";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "t3";
          s4_len = 2;
          break;
        }
        case 0x16:{
          s4 = "s6";
          s4_len = 2;
          break;
        }
        case 0x00:{
          s4 = "zero";
          s4_len = 4;
          break;
        }
        case 0x0A:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x1A:{
          s4 = "s10";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "s7";
          s4_len = 2;
          break;
        }
        case 0x0C:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x18:{
          s4 = "s8";
          s4_len = 2;
          break;
        }
        case 0x02:{
          s4 = "sp";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "t6";
          s4_len = 2;
          break;
        }
        case 0x0B:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x07:{
          s4 = "t2";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "s3";
          s4_len = 2;
          break;
        }
        case 0x04:{
          s4 = "tp";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "s9";
          s4_len = 2;
          break;
        }
        case 0x12:{
          s4 = "s2";
          s4_len = 2;
          break;
        }
        case 0x14:{
          s4 = "s4";
          s4_len = 2;
          break;
        }
        case 0x0E:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x1E:{
          s4 = "t5";
          s4_len = 2;
          break;
        }
        case 0x11:{
          s4 = "a7";
          s4_len = 2;
          break;
        }
        case 0x03:{
          s4 = "gp";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "t0";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "t4";
          s4_len = 2;
          break;
        }
        case 0x0D:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x0F:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.aes32dsmi.rs2) { 
        case 0x08:{
          s6 = "fp";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "s5";
          s6_len = 2;
          break;
        }
        case 0x01:{
          s6 = "ra";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "t1";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "s1";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "a6";
          s6_len = 2;
          break;
        }
        case 0x1B:{
          s6 = "s11";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "t3";
          s6_len = 2;
          break;
        }
        case 0x16:{
          s6 = "s6";
          s6_len = 2;
          break;
        }
        case 0x00:{
          s6 = "zero";
          s6_len = 4;
          break;
        }
        case 0x0A:{
          s6 = "a0";
          s6_len = 2;
          break;
        }
        case 0x1A:{
          s6 = "s10";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "s7";
          s6_len = 2;
          break;
        }
        case 0x0C:{
          s6 = "a2";
          s6_len = 2;
          break;
        }
        case 0x18:{
          s6 = "s8";
          s6_len = 2;
          break;
        }
        case 0x02:{
          s6 = "sp";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "t6";
          s6_len = 2;
          break;
        }
        case 0x0B:{
          s6 = "a1";
          s6_len = 2;
          break;
        }
        case 0x07:{
          s6 = "t2";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "s3";
          s6_len = 2;
          break;
        }
        case 0x04:{
          s6 = "tp";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "s9";
          s6_len = 2;
          break;
        }
        case 0x12:{
          s6 = "s2";
          s6_len = 2;
          break;
        }
        case 0x14:{
          s6 = "s4";
          s6_len = 2;
          break;
        }
        case 0x0E:{
          s6 = "a4";
          s6_len = 2;
          break;
        }
        case 0x1E:{
          s6 = "t5";
          s6_len = 2;
          break;
        }
        case 0x11:{
          s6 = "a7";
          s6_len = 2;
          break;
        }
        case 0x03:{
          s6 = "gp";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "t0";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "t4";
          s6_len = 2;
          break;
        }
        case 0x0D:{
          s6 = "a3";
          s6_len = 2;
          break;
        }
        case 0x0F:{
          s6 = "a5";
          s6_len = 2;
          break;
        }
      }
      sep( &s7, &s7_len);
      hex_bits_2(tree->ast_node.aes32dsmi.bs, &s8, &s8_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len, s8, s8_len);
      }
    }
    break;
    case RISCV_AES32DSI: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      char *s8; size_t s8_len;
      s0 = "aes32dsi";
      s0_len = 8;
      spc( &s1, &s1_len);
      switch (tree->ast_node.aes32dsi.rd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.aes32dsi.rs1) { 
        case 0x08:{
          s4 = "fp";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "s5";
          s4_len = 2;
          break;
        }
        case 0x01:{
          s4 = "ra";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "t1";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "a6";
          s4_len = 2;
          break;
        }
        case 0x1B:{
          s4 = "s11";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "t3";
          s4_len = 2;
          break;
        }
        case 0x16:{
          s4 = "s6";
          s4_len = 2;
          break;
        }
        case 0x00:{
          s4 = "zero";
          s4_len = 4;
          break;
        }
        case 0x0A:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x1A:{
          s4 = "s10";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "s7";
          s4_len = 2;
          break;
        }
        case 0x0C:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x18:{
          s4 = "s8";
          s4_len = 2;
          break;
        }
        case 0x02:{
          s4 = "sp";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "t6";
          s4_len = 2;
          break;
        }
        case 0x0B:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x07:{
          s4 = "t2";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "s3";
          s4_len = 2;
          break;
        }
        case 0x04:{
          s4 = "tp";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "s9";
          s4_len = 2;
          break;
        }
        case 0x12:{
          s4 = "s2";
          s4_len = 2;
          break;
        }
        case 0x14:{
          s4 = "s4";
          s4_len = 2;
          break;
        }
        case 0x0E:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x1E:{
          s4 = "t5";
          s4_len = 2;
          break;
        }
        case 0x11:{
          s4 = "a7";
          s4_len = 2;
          break;
        }
        case 0x03:{
          s4 = "gp";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "t0";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "t4";
          s4_len = 2;
          break;
        }
        case 0x0D:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x0F:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.aes32dsi.rs2) { 
        case 0x08:{
          s6 = "fp";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "s5";
          s6_len = 2;
          break;
        }
        case 0x01:{
          s6 = "ra";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "t1";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "s1";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "a6";
          s6_len = 2;
          break;
        }
        case 0x1B:{
          s6 = "s11";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "t3";
          s6_len = 2;
          break;
        }
        case 0x16:{
          s6 = "s6";
          s6_len = 2;
          break;
        }
        case 0x00:{
          s6 = "zero";
          s6_len = 4;
          break;
        }
        case 0x0A:{
          s6 = "a0";
          s6_len = 2;
          break;
        }
        case 0x1A:{
          s6 = "s10";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "s7";
          s6_len = 2;
          break;
        }
        case 0x0C:{
          s6 = "a2";
          s6_len = 2;
          break;
        }
        case 0x18:{
          s6 = "s8";
          s6_len = 2;
          break;
        }
        case 0x02:{
          s6 = "sp";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "t6";
          s6_len = 2;
          break;
        }
        case 0x0B:{
          s6 = "a1";
          s6_len = 2;
          break;
        }
        case 0x07:{
          s6 = "t2";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "s3";
          s6_len = 2;
          break;
        }
        case 0x04:{
          s6 = "tp";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "s9";
          s6_len = 2;
          break;
        }
        case 0x12:{
          s6 = "s2";
          s6_len = 2;
          break;
        }
        case 0x14:{
          s6 = "s4";
          s6_len = 2;
          break;
        }
        case 0x0E:{
          s6 = "a4";
          s6_len = 2;
          break;
        }
        case 0x1E:{
          s6 = "t5";
          s6_len = 2;
          break;
        }
        case 0x11:{
          s6 = "a7";
          s6_len = 2;
          break;
        }
        case 0x03:{
          s6 = "gp";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "t0";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "t4";
          s6_len = 2;
          break;
        }
        case 0x0D:{
          s6 = "a3";
          s6_len = 2;
          break;
        }
        case 0x0F:{
          s6 = "a5";
          s6_len = 2;
          break;
        }
      }
      sep( &s7, &s7_len);
      hex_bits_2(tree->ast_node.aes32dsi.bs, &s8, &s8_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len, s8, s8_len);
      }
    }
    break;
    case RISCV_SHA512SIG0L: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      s0 = "sha512sig0l";
      s0_len = 11;
      spc( &s1, &s1_len);
      switch (tree->ast_node.sha512sig0l.rd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.sha512sig0l.rs1) { 
        case 0x08:{
          s4 = "fp";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "s5";
          s4_len = 2;
          break;
        }
        case 0x01:{
          s4 = "ra";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "t1";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "a6";
          s4_len = 2;
          break;
        }
        case 0x1B:{
          s4 = "s11";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "t3";
          s4_len = 2;
          break;
        }
        case 0x16:{
          s4 = "s6";
          s4_len = 2;
          break;
        }
        case 0x00:{
          s4 = "zero";
          s4_len = 4;
          break;
        }
        case 0x0A:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x1A:{
          s4 = "s10";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "s7";
          s4_len = 2;
          break;
        }
        case 0x0C:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x18:{
          s4 = "s8";
          s4_len = 2;
          break;
        }
        case 0x02:{
          s4 = "sp";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "t6";
          s4_len = 2;
          break;
        }
        case 0x0B:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x07:{
          s4 = "t2";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "s3";
          s4_len = 2;
          break;
        }
        case 0x04:{
          s4 = "tp";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "s9";
          s4_len = 2;
          break;
        }
        case 0x12:{
          s4 = "s2";
          s4_len = 2;
          break;
        }
        case 0x14:{
          s4 = "s4";
          s4_len = 2;
          break;
        }
        case 0x0E:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x1E:{
          s4 = "t5";
          s4_len = 2;
          break;
        }
        case 0x11:{
          s4 = "a7";
          s4_len = 2;
          break;
        }
        case 0x03:{
          s4 = "gp";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "t0";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "t4";
          s4_len = 2;
          break;
        }
        case 0x0D:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x0F:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.sha512sig0l.rs2) { 
        case 0x08:{
          s6 = "fp";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "s5";
          s6_len = 2;
          break;
        }
        case 0x01:{
          s6 = "ra";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "t1";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "s1";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "a6";
          s6_len = 2;
          break;
        }
        case 0x1B:{
          s6 = "s11";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "t3";
          s6_len = 2;
          break;
        }
        case 0x16:{
          s6 = "s6";
          s6_len = 2;
          break;
        }
        case 0x00:{
          s6 = "zero";
          s6_len = 4;
          break;
        }
        case 0x0A:{
          s6 = "a0";
          s6_len = 2;
          break;
        }
        case 0x1A:{
          s6 = "s10";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "s7";
          s6_len = 2;
          break;
        }
        case 0x0C:{
          s6 = "a2";
          s6_len = 2;
          break;
        }
        case 0x18:{
          s6 = "s8";
          s6_len = 2;
          break;
        }
        case 0x02:{
          s6 = "sp";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "t6";
          s6_len = 2;
          break;
        }
        case 0x0B:{
          s6 = "a1";
          s6_len = 2;
          break;
        }
        case 0x07:{
          s6 = "t2";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "s3";
          s6_len = 2;
          break;
        }
        case 0x04:{
          s6 = "tp";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "s9";
          s6_len = 2;
          break;
        }
        case 0x12:{
          s6 = "s2";
          s6_len = 2;
          break;
        }
        case 0x14:{
          s6 = "s4";
          s6_len = 2;
          break;
        }
        case 0x0E:{
          s6 = "a4";
          s6_len = 2;
          break;
        }
        case 0x1E:{
          s6 = "t5";
          s6_len = 2;
          break;
        }
        case 0x11:{
          s6 = "a7";
          s6_len = 2;
          break;
        }
        case 0x03:{
          s6 = "gp";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "t0";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "t4";
          s6_len = 2;
          break;
        }
        case 0x0D:{
          s6 = "a3";
          s6_len = 2;
          break;
        }
        case 0x0F:{
          s6 = "a5";
          s6_len = 2;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
    }
    break;
    case RISCV_SHA512SIG0H: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      s0 = "sha512sig0h";
      s0_len = 11;
      spc( &s1, &s1_len);
      switch (tree->ast_node.sha512sig0h.rd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.sha512sig0h.rs1) { 
        case 0x08:{
          s4 = "fp";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "s5";
          s4_len = 2;
          break;
        }
        case 0x01:{
          s4 = "ra";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "t1";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "a6";
          s4_len = 2;
          break;
        }
        case 0x1B:{
          s4 = "s11";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "t3";
          s4_len = 2;
          break;
        }
        case 0x16:{
          s4 = "s6";
          s4_len = 2;
          break;
        }
        case 0x00:{
          s4 = "zero";
          s4_len = 4;
          break;
        }
        case 0x0A:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x1A:{
          s4 = "s10";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "s7";
          s4_len = 2;
          break;
        }
        case 0x0C:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x18:{
          s4 = "s8";
          s4_len = 2;
          break;
        }
        case 0x02:{
          s4 = "sp";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "t6";
          s4_len = 2;
          break;
        }
        case 0x0B:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x07:{
          s4 = "t2";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "s3";
          s4_len = 2;
          break;
        }
        case 0x04:{
          s4 = "tp";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "s9";
          s4_len = 2;
          break;
        }
        case 0x12:{
          s4 = "s2";
          s4_len = 2;
          break;
        }
        case 0x14:{
          s4 = "s4";
          s4_len = 2;
          break;
        }
        case 0x0E:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x1E:{
          s4 = "t5";
          s4_len = 2;
          break;
        }
        case 0x11:{
          s4 = "a7";
          s4_len = 2;
          break;
        }
        case 0x03:{
          s4 = "gp";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "t0";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "t4";
          s4_len = 2;
          break;
        }
        case 0x0D:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x0F:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.sha512sig0h.rs2) { 
        case 0x08:{
          s6 = "fp";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "s5";
          s6_len = 2;
          break;
        }
        case 0x01:{
          s6 = "ra";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "t1";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "s1";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "a6";
          s6_len = 2;
          break;
        }
        case 0x1B:{
          s6 = "s11";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "t3";
          s6_len = 2;
          break;
        }
        case 0x16:{
          s6 = "s6";
          s6_len = 2;
          break;
        }
        case 0x00:{
          s6 = "zero";
          s6_len = 4;
          break;
        }
        case 0x0A:{
          s6 = "a0";
          s6_len = 2;
          break;
        }
        case 0x1A:{
          s6 = "s10";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "s7";
          s6_len = 2;
          break;
        }
        case 0x0C:{
          s6 = "a2";
          s6_len = 2;
          break;
        }
        case 0x18:{
          s6 = "s8";
          s6_len = 2;
          break;
        }
        case 0x02:{
          s6 = "sp";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "t6";
          s6_len = 2;
          break;
        }
        case 0x0B:{
          s6 = "a1";
          s6_len = 2;
          break;
        }
        case 0x07:{
          s6 = "t2";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "s3";
          s6_len = 2;
          break;
        }
        case 0x04:{
          s6 = "tp";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "s9";
          s6_len = 2;
          break;
        }
        case 0x12:{
          s6 = "s2";
          s6_len = 2;
          break;
        }
        case 0x14:{
          s6 = "s4";
          s6_len = 2;
          break;
        }
        case 0x0E:{
          s6 = "a4";
          s6_len = 2;
          break;
        }
        case 0x1E:{
          s6 = "t5";
          s6_len = 2;
          break;
        }
        case 0x11:{
          s6 = "a7";
          s6_len = 2;
          break;
        }
        case 0x03:{
          s6 = "gp";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "t0";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "t4";
          s6_len = 2;
          break;
        }
        case 0x0D:{
          s6 = "a3";
          s6_len = 2;
          break;
        }
        case 0x0F:{
          s6 = "a5";
          s6_len = 2;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
    }
    break;
    case RISCV_SHA512SIG1L: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      s0 = "sha512sig1l";
      s0_len = 11;
      spc( &s1, &s1_len);
      switch (tree->ast_node.sha512sig1l.rd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.sha512sig1l.rs1) { 
        case 0x08:{
          s4 = "fp";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "s5";
          s4_len = 2;
          break;
        }
        case 0x01:{
          s4 = "ra";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "t1";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "a6";
          s4_len = 2;
          break;
        }
        case 0x1B:{
          s4 = "s11";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "t3";
          s4_len = 2;
          break;
        }
        case 0x16:{
          s4 = "s6";
          s4_len = 2;
          break;
        }
        case 0x00:{
          s4 = "zero";
          s4_len = 4;
          break;
        }
        case 0x0A:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x1A:{
          s4 = "s10";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "s7";
          s4_len = 2;
          break;
        }
        case 0x0C:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x18:{
          s4 = "s8";
          s4_len = 2;
          break;
        }
        case 0x02:{
          s4 = "sp";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "t6";
          s4_len = 2;
          break;
        }
        case 0x0B:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x07:{
          s4 = "t2";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "s3";
          s4_len = 2;
          break;
        }
        case 0x04:{
          s4 = "tp";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "s9";
          s4_len = 2;
          break;
        }
        case 0x12:{
          s4 = "s2";
          s4_len = 2;
          break;
        }
        case 0x14:{
          s4 = "s4";
          s4_len = 2;
          break;
        }
        case 0x0E:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x1E:{
          s4 = "t5";
          s4_len = 2;
          break;
        }
        case 0x11:{
          s4 = "a7";
          s4_len = 2;
          break;
        }
        case 0x03:{
          s4 = "gp";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "t0";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "t4";
          s4_len = 2;
          break;
        }
        case 0x0D:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x0F:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.sha512sig1l.rs2) { 
        case 0x08:{
          s6 = "fp";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "s5";
          s6_len = 2;
          break;
        }
        case 0x01:{
          s6 = "ra";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "t1";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "s1";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "a6";
          s6_len = 2;
          break;
        }
        case 0x1B:{
          s6 = "s11";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "t3";
          s6_len = 2;
          break;
        }
        case 0x16:{
          s6 = "s6";
          s6_len = 2;
          break;
        }
        case 0x00:{
          s6 = "zero";
          s6_len = 4;
          break;
        }
        case 0x0A:{
          s6 = "a0";
          s6_len = 2;
          break;
        }
        case 0x1A:{
          s6 = "s10";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "s7";
          s6_len = 2;
          break;
        }
        case 0x0C:{
          s6 = "a2";
          s6_len = 2;
          break;
        }
        case 0x18:{
          s6 = "s8";
          s6_len = 2;
          break;
        }
        case 0x02:{
          s6 = "sp";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "t6";
          s6_len = 2;
          break;
        }
        case 0x0B:{
          s6 = "a1";
          s6_len = 2;
          break;
        }
        case 0x07:{
          s6 = "t2";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "s3";
          s6_len = 2;
          break;
        }
        case 0x04:{
          s6 = "tp";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "s9";
          s6_len = 2;
          break;
        }
        case 0x12:{
          s6 = "s2";
          s6_len = 2;
          break;
        }
        case 0x14:{
          s6 = "s4";
          s6_len = 2;
          break;
        }
        case 0x0E:{
          s6 = "a4";
          s6_len = 2;
          break;
        }
        case 0x1E:{
          s6 = "t5";
          s6_len = 2;
          break;
        }
        case 0x11:{
          s6 = "a7";
          s6_len = 2;
          break;
        }
        case 0x03:{
          s6 = "gp";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "t0";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "t4";
          s6_len = 2;
          break;
        }
        case 0x0D:{
          s6 = "a3";
          s6_len = 2;
          break;
        }
        case 0x0F:{
          s6 = "a5";
          s6_len = 2;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
    }
    break;
    case RISCV_SHA512SIG1H: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      s0 = "sha512sig1h";
      s0_len = 11;
      spc( &s1, &s1_len);
      switch (tree->ast_node.sha512sig1h.rd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.sha512sig1h.rs1) { 
        case 0x08:{
          s4 = "fp";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "s5";
          s4_len = 2;
          break;
        }
        case 0x01:{
          s4 = "ra";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "t1";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "a6";
          s4_len = 2;
          break;
        }
        case 0x1B:{
          s4 = "s11";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "t3";
          s4_len = 2;
          break;
        }
        case 0x16:{
          s4 = "s6";
          s4_len = 2;
          break;
        }
        case 0x00:{
          s4 = "zero";
          s4_len = 4;
          break;
        }
        case 0x0A:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x1A:{
          s4 = "s10";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "s7";
          s4_len = 2;
          break;
        }
        case 0x0C:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x18:{
          s4 = "s8";
          s4_len = 2;
          break;
        }
        case 0x02:{
          s4 = "sp";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "t6";
          s4_len = 2;
          break;
        }
        case 0x0B:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x07:{
          s4 = "t2";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "s3";
          s4_len = 2;
          break;
        }
        case 0x04:{
          s4 = "tp";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "s9";
          s4_len = 2;
          break;
        }
        case 0x12:{
          s4 = "s2";
          s4_len = 2;
          break;
        }
        case 0x14:{
          s4 = "s4";
          s4_len = 2;
          break;
        }
        case 0x0E:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x1E:{
          s4 = "t5";
          s4_len = 2;
          break;
        }
        case 0x11:{
          s4 = "a7";
          s4_len = 2;
          break;
        }
        case 0x03:{
          s4 = "gp";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "t0";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "t4";
          s4_len = 2;
          break;
        }
        case 0x0D:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x0F:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.sha512sig1h.rs2) { 
        case 0x08:{
          s6 = "fp";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "s5";
          s6_len = 2;
          break;
        }
        case 0x01:{
          s6 = "ra";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "t1";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "s1";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "a6";
          s6_len = 2;
          break;
        }
        case 0x1B:{
          s6 = "s11";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "t3";
          s6_len = 2;
          break;
        }
        case 0x16:{
          s6 = "s6";
          s6_len = 2;
          break;
        }
        case 0x00:{
          s6 = "zero";
          s6_len = 4;
          break;
        }
        case 0x0A:{
          s6 = "a0";
          s6_len = 2;
          break;
        }
        case 0x1A:{
          s6 = "s10";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "s7";
          s6_len = 2;
          break;
        }
        case 0x0C:{
          s6 = "a2";
          s6_len = 2;
          break;
        }
        case 0x18:{
          s6 = "s8";
          s6_len = 2;
          break;
        }
        case 0x02:{
          s6 = "sp";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "t6";
          s6_len = 2;
          break;
        }
        case 0x0B:{
          s6 = "a1";
          s6_len = 2;
          break;
        }
        case 0x07:{
          s6 = "t2";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "s3";
          s6_len = 2;
          break;
        }
        case 0x04:{
          s6 = "tp";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "s9";
          s6_len = 2;
          break;
        }
        case 0x12:{
          s6 = "s2";
          s6_len = 2;
          break;
        }
        case 0x14:{
          s6 = "s4";
          s6_len = 2;
          break;
        }
        case 0x0E:{
          s6 = "a4";
          s6_len = 2;
          break;
        }
        case 0x1E:{
          s6 = "t5";
          s6_len = 2;
          break;
        }
        case 0x11:{
          s6 = "a7";
          s6_len = 2;
          break;
        }
        case 0x03:{
          s6 = "gp";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "t0";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "t4";
          s6_len = 2;
          break;
        }
        case 0x0D:{
          s6 = "a3";
          s6_len = 2;
          break;
        }
        case 0x0F:{
          s6 = "a5";
          s6_len = 2;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
    }
    break;
    case RISCV_SHA512SUM0R: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      s0 = "sha512sum0r";
      s0_len = 11;
      spc( &s1, &s1_len);
      switch (tree->ast_node.sha512sum0r.rd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.sha512sum0r.rs1) { 
        case 0x08:{
          s4 = "fp";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "s5";
          s4_len = 2;
          break;
        }
        case 0x01:{
          s4 = "ra";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "t1";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "a6";
          s4_len = 2;
          break;
        }
        case 0x1B:{
          s4 = "s11";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "t3";
          s4_len = 2;
          break;
        }
        case 0x16:{
          s4 = "s6";
          s4_len = 2;
          break;
        }
        case 0x00:{
          s4 = "zero";
          s4_len = 4;
          break;
        }
        case 0x0A:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x1A:{
          s4 = "s10";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "s7";
          s4_len = 2;
          break;
        }
        case 0x0C:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x18:{
          s4 = "s8";
          s4_len = 2;
          break;
        }
        case 0x02:{
          s4 = "sp";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "t6";
          s4_len = 2;
          break;
        }
        case 0x0B:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x07:{
          s4 = "t2";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "s3";
          s4_len = 2;
          break;
        }
        case 0x04:{
          s4 = "tp";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "s9";
          s4_len = 2;
          break;
        }
        case 0x12:{
          s4 = "s2";
          s4_len = 2;
          break;
        }
        case 0x14:{
          s4 = "s4";
          s4_len = 2;
          break;
        }
        case 0x0E:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x1E:{
          s4 = "t5";
          s4_len = 2;
          break;
        }
        case 0x11:{
          s4 = "a7";
          s4_len = 2;
          break;
        }
        case 0x03:{
          s4 = "gp";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "t0";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "t4";
          s4_len = 2;
          break;
        }
        case 0x0D:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x0F:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.sha512sum0r.rs2) { 
        case 0x08:{
          s6 = "fp";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "s5";
          s6_len = 2;
          break;
        }
        case 0x01:{
          s6 = "ra";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "t1";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "s1";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "a6";
          s6_len = 2;
          break;
        }
        case 0x1B:{
          s6 = "s11";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "t3";
          s6_len = 2;
          break;
        }
        case 0x16:{
          s6 = "s6";
          s6_len = 2;
          break;
        }
        case 0x00:{
          s6 = "zero";
          s6_len = 4;
          break;
        }
        case 0x0A:{
          s6 = "a0";
          s6_len = 2;
          break;
        }
        case 0x1A:{
          s6 = "s10";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "s7";
          s6_len = 2;
          break;
        }
        case 0x0C:{
          s6 = "a2";
          s6_len = 2;
          break;
        }
        case 0x18:{
          s6 = "s8";
          s6_len = 2;
          break;
        }
        case 0x02:{
          s6 = "sp";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "t6";
          s6_len = 2;
          break;
        }
        case 0x0B:{
          s6 = "a1";
          s6_len = 2;
          break;
        }
        case 0x07:{
          s6 = "t2";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "s3";
          s6_len = 2;
          break;
        }
        case 0x04:{
          s6 = "tp";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "s9";
          s6_len = 2;
          break;
        }
        case 0x12:{
          s6 = "s2";
          s6_len = 2;
          break;
        }
        case 0x14:{
          s6 = "s4";
          s6_len = 2;
          break;
        }
        case 0x0E:{
          s6 = "a4";
          s6_len = 2;
          break;
        }
        case 0x1E:{
          s6 = "t5";
          s6_len = 2;
          break;
        }
        case 0x11:{
          s6 = "a7";
          s6_len = 2;
          break;
        }
        case 0x03:{
          s6 = "gp";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "t0";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "t4";
          s6_len = 2;
          break;
        }
        case 0x0D:{
          s6 = "a3";
          s6_len = 2;
          break;
        }
        case 0x0F:{
          s6 = "a5";
          s6_len = 2;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
    }
    break;
    case RISCV_SHA512SUM1R: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      s0 = "sha512sum1r";
      s0_len = 11;
      spc( &s1, &s1_len);
      switch (tree->ast_node.sha512sum1r.rd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.sha512sum1r.rs1) { 
        case 0x08:{
          s4 = "fp";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "s5";
          s4_len = 2;
          break;
        }
        case 0x01:{
          s4 = "ra";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "t1";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "a6";
          s4_len = 2;
          break;
        }
        case 0x1B:{
          s4 = "s11";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "t3";
          s4_len = 2;
          break;
        }
        case 0x16:{
          s4 = "s6";
          s4_len = 2;
          break;
        }
        case 0x00:{
          s4 = "zero";
          s4_len = 4;
          break;
        }
        case 0x0A:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x1A:{
          s4 = "s10";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "s7";
          s4_len = 2;
          break;
        }
        case 0x0C:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x18:{
          s4 = "s8";
          s4_len = 2;
          break;
        }
        case 0x02:{
          s4 = "sp";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "t6";
          s4_len = 2;
          break;
        }
        case 0x0B:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x07:{
          s4 = "t2";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "s3";
          s4_len = 2;
          break;
        }
        case 0x04:{
          s4 = "tp";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "s9";
          s4_len = 2;
          break;
        }
        case 0x12:{
          s4 = "s2";
          s4_len = 2;
          break;
        }
        case 0x14:{
          s4 = "s4";
          s4_len = 2;
          break;
        }
        case 0x0E:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x1E:{
          s4 = "t5";
          s4_len = 2;
          break;
        }
        case 0x11:{
          s4 = "a7";
          s4_len = 2;
          break;
        }
        case 0x03:{
          s4 = "gp";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "t0";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "t4";
          s4_len = 2;
          break;
        }
        case 0x0D:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x0F:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.sha512sum1r.rs2) { 
        case 0x08:{
          s6 = "fp";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "s5";
          s6_len = 2;
          break;
        }
        case 0x01:{
          s6 = "ra";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "t1";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "s1";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "a6";
          s6_len = 2;
          break;
        }
        case 0x1B:{
          s6 = "s11";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "t3";
          s6_len = 2;
          break;
        }
        case 0x16:{
          s6 = "s6";
          s6_len = 2;
          break;
        }
        case 0x00:{
          s6 = "zero";
          s6_len = 4;
          break;
        }
        case 0x0A:{
          s6 = "a0";
          s6_len = 2;
          break;
        }
        case 0x1A:{
          s6 = "s10";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "s7";
          s6_len = 2;
          break;
        }
        case 0x0C:{
          s6 = "a2";
          s6_len = 2;
          break;
        }
        case 0x18:{
          s6 = "s8";
          s6_len = 2;
          break;
        }
        case 0x02:{
          s6 = "sp";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "t6";
          s6_len = 2;
          break;
        }
        case 0x0B:{
          s6 = "a1";
          s6_len = 2;
          break;
        }
        case 0x07:{
          s6 = "t2";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "s3";
          s6_len = 2;
          break;
        }
        case 0x04:{
          s6 = "tp";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "s9";
          s6_len = 2;
          break;
        }
        case 0x12:{
          s6 = "s2";
          s6_len = 2;
          break;
        }
        case 0x14:{
          s6 = "s4";
          s6_len = 2;
          break;
        }
        case 0x0E:{
          s6 = "a4";
          s6_len = 2;
          break;
        }
        case 0x1E:{
          s6 = "t5";
          s6_len = 2;
          break;
        }
        case 0x11:{
          s6 = "a7";
          s6_len = 2;
          break;
        }
        case 0x03:{
          s6 = "gp";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "t0";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "t4";
          s6_len = 2;
          break;
        }
        case 0x0D:{
          s6 = "a3";
          s6_len = 2;
          break;
        }
        case 0x0F:{
          s6 = "a5";
          s6_len = 2;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
    }
    break;
    case RISCV_AES64KS1I: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      s0 = "aes64ks1i";
      s0_len = 9;
      spc( &s1, &s1_len);
      switch (tree->ast_node.aes64ks1i.rd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.aes64ks1i.rs1) { 
        case 0x08:{
          s4 = "fp";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "s5";
          s4_len = 2;
          break;
        }
        case 0x01:{
          s4 = "ra";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "t1";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "a6";
          s4_len = 2;
          break;
        }
        case 0x1B:{
          s4 = "s11";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "t3";
          s4_len = 2;
          break;
        }
        case 0x16:{
          s4 = "s6";
          s4_len = 2;
          break;
        }
        case 0x00:{
          s4 = "zero";
          s4_len = 4;
          break;
        }
        case 0x0A:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x1A:{
          s4 = "s10";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "s7";
          s4_len = 2;
          break;
        }
        case 0x0C:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x18:{
          s4 = "s8";
          s4_len = 2;
          break;
        }
        case 0x02:{
          s4 = "sp";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "t6";
          s4_len = 2;
          break;
        }
        case 0x0B:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x07:{
          s4 = "t2";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "s3";
          s4_len = 2;
          break;
        }
        case 0x04:{
          s4 = "tp";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "s9";
          s4_len = 2;
          break;
        }
        case 0x12:{
          s4 = "s2";
          s4_len = 2;
          break;
        }
        case 0x14:{
          s4 = "s4";
          s4_len = 2;
          break;
        }
        case 0x0E:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x1E:{
          s4 = "t5";
          s4_len = 2;
          break;
        }
        case 0x11:{
          s4 = "a7";
          s4_len = 2;
          break;
        }
        case 0x03:{
          s4 = "gp";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "t0";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "t4";
          s4_len = 2;
          break;
        }
        case 0x0D:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x0F:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
      }
      sep( &s5, &s5_len);
      hex_bits_4(tree->ast_node.aes64ks1i.rnum, &s6, &s6_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
    }
    break;
    case RISCV_AES64KS2: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      s0 = "aes64ks2";
      s0_len = 8;
      spc( &s1, &s1_len);
      switch (tree->ast_node.aes64ks2.rd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.aes64ks2.rs1) { 
        case 0x08:{
          s4 = "fp";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "s5";
          s4_len = 2;
          break;
        }
        case 0x01:{
          s4 = "ra";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "t1";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "a6";
          s4_len = 2;
          break;
        }
        case 0x1B:{
          s4 = "s11";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "t3";
          s4_len = 2;
          break;
        }
        case 0x16:{
          s4 = "s6";
          s4_len = 2;
          break;
        }
        case 0x00:{
          s4 = "zero";
          s4_len = 4;
          break;
        }
        case 0x0A:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x1A:{
          s4 = "s10";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "s7";
          s4_len = 2;
          break;
        }
        case 0x0C:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x18:{
          s4 = "s8";
          s4_len = 2;
          break;
        }
        case 0x02:{
          s4 = "sp";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "t6";
          s4_len = 2;
          break;
        }
        case 0x0B:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x07:{
          s4 = "t2";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "s3";
          s4_len = 2;
          break;
        }
        case 0x04:{
          s4 = "tp";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "s9";
          s4_len = 2;
          break;
        }
        case 0x12:{
          s4 = "s2";
          s4_len = 2;
          break;
        }
        case 0x14:{
          s4 = "s4";
          s4_len = 2;
          break;
        }
        case 0x0E:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x1E:{
          s4 = "t5";
          s4_len = 2;
          break;
        }
        case 0x11:{
          s4 = "a7";
          s4_len = 2;
          break;
        }
        case 0x03:{
          s4 = "gp";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "t0";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "t4";
          s4_len = 2;
          break;
        }
        case 0x0D:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x0F:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.aes64ks2.rs2) { 
        case 0x08:{
          s6 = "fp";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "s5";
          s6_len = 2;
          break;
        }
        case 0x01:{
          s6 = "ra";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "t1";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "s1";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "a6";
          s6_len = 2;
          break;
        }
        case 0x1B:{
          s6 = "s11";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "t3";
          s6_len = 2;
          break;
        }
        case 0x16:{
          s6 = "s6";
          s6_len = 2;
          break;
        }
        case 0x00:{
          s6 = "zero";
          s6_len = 4;
          break;
        }
        case 0x0A:{
          s6 = "a0";
          s6_len = 2;
          break;
        }
        case 0x1A:{
          s6 = "s10";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "s7";
          s6_len = 2;
          break;
        }
        case 0x0C:{
          s6 = "a2";
          s6_len = 2;
          break;
        }
        case 0x18:{
          s6 = "s8";
          s6_len = 2;
          break;
        }
        case 0x02:{
          s6 = "sp";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "t6";
          s6_len = 2;
          break;
        }
        case 0x0B:{
          s6 = "a1";
          s6_len = 2;
          break;
        }
        case 0x07:{
          s6 = "t2";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "s3";
          s6_len = 2;
          break;
        }
        case 0x04:{
          s6 = "tp";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "s9";
          s6_len = 2;
          break;
        }
        case 0x12:{
          s6 = "s2";
          s6_len = 2;
          break;
        }
        case 0x14:{
          s6 = "s4";
          s6_len = 2;
          break;
        }
        case 0x0E:{
          s6 = "a4";
          s6_len = 2;
          break;
        }
        case 0x1E:{
          s6 = "t5";
          s6_len = 2;
          break;
        }
        case 0x11:{
          s6 = "a7";
          s6_len = 2;
          break;
        }
        case 0x03:{
          s6 = "gp";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "t0";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "t4";
          s6_len = 2;
          break;
        }
        case 0x0D:{
          s6 = "a3";
          s6_len = 2;
          break;
        }
        case 0x0F:{
          s6 = "a5";
          s6_len = 2;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
    }
    break;
    case RISCV_AES64IM: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      s0 = "aes64im";
      s0_len = 7;
      spc( &s1, &s1_len);
      switch (tree->ast_node.aes64im.rd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.aes64im.rs1) { 
        case 0x08:{
          s4 = "fp";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "s5";
          s4_len = 2;
          break;
        }
        case 0x01:{
          s4 = "ra";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "t1";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "a6";
          s4_len = 2;
          break;
        }
        case 0x1B:{
          s4 = "s11";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "t3";
          s4_len = 2;
          break;
        }
        case 0x16:{
          s4 = "s6";
          s4_len = 2;
          break;
        }
        case 0x00:{
          s4 = "zero";
          s4_len = 4;
          break;
        }
        case 0x0A:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x1A:{
          s4 = "s10";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "s7";
          s4_len = 2;
          break;
        }
        case 0x0C:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x18:{
          s4 = "s8";
          s4_len = 2;
          break;
        }
        case 0x02:{
          s4 = "sp";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "t6";
          s4_len = 2;
          break;
        }
        case 0x0B:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x07:{
          s4 = "t2";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "s3";
          s4_len = 2;
          break;
        }
        case 0x04:{
          s4 = "tp";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "s9";
          s4_len = 2;
          break;
        }
        case 0x12:{
          s4 = "s2";
          s4_len = 2;
          break;
        }
        case 0x14:{
          s4 = "s4";
          s4_len = 2;
          break;
        }
        case 0x0E:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x1E:{
          s4 = "t5";
          s4_len = 2;
          break;
        }
        case 0x11:{
          s4 = "a7";
          s4_len = 2;
          break;
        }
        case 0x03:{
          s4 = "gp";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "t0";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "t4";
          s4_len = 2;
          break;
        }
        case 0x0D:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x0F:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      }
    }
    break;
    case RISCV_AES64ESM: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      s0 = "aes64esm";
      s0_len = 8;
      spc( &s1, &s1_len);
      switch (tree->ast_node.aes64esm.rd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.aes64esm.rs1) { 
        case 0x08:{
          s4 = "fp";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "s5";
          s4_len = 2;
          break;
        }
        case 0x01:{
          s4 = "ra";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "t1";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "a6";
          s4_len = 2;
          break;
        }
        case 0x1B:{
          s4 = "s11";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "t3";
          s4_len = 2;
          break;
        }
        case 0x16:{
          s4 = "s6";
          s4_len = 2;
          break;
        }
        case 0x00:{
          s4 = "zero";
          s4_len = 4;
          break;
        }
        case 0x0A:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x1A:{
          s4 = "s10";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "s7";
          s4_len = 2;
          break;
        }
        case 0x0C:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x18:{
          s4 = "s8";
          s4_len = 2;
          break;
        }
        case 0x02:{
          s4 = "sp";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "t6";
          s4_len = 2;
          break;
        }
        case 0x0B:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x07:{
          s4 = "t2";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "s3";
          s4_len = 2;
          break;
        }
        case 0x04:{
          s4 = "tp";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "s9";
          s4_len = 2;
          break;
        }
        case 0x12:{
          s4 = "s2";
          s4_len = 2;
          break;
        }
        case 0x14:{
          s4 = "s4";
          s4_len = 2;
          break;
        }
        case 0x0E:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x1E:{
          s4 = "t5";
          s4_len = 2;
          break;
        }
        case 0x11:{
          s4 = "a7";
          s4_len = 2;
          break;
        }
        case 0x03:{
          s4 = "gp";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "t0";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "t4";
          s4_len = 2;
          break;
        }
        case 0x0D:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x0F:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.aes64esm.rs2) { 
        case 0x08:{
          s6 = "fp";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "s5";
          s6_len = 2;
          break;
        }
        case 0x01:{
          s6 = "ra";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "t1";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "s1";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "a6";
          s6_len = 2;
          break;
        }
        case 0x1B:{
          s6 = "s11";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "t3";
          s6_len = 2;
          break;
        }
        case 0x16:{
          s6 = "s6";
          s6_len = 2;
          break;
        }
        case 0x00:{
          s6 = "zero";
          s6_len = 4;
          break;
        }
        case 0x0A:{
          s6 = "a0";
          s6_len = 2;
          break;
        }
        case 0x1A:{
          s6 = "s10";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "s7";
          s6_len = 2;
          break;
        }
        case 0x0C:{
          s6 = "a2";
          s6_len = 2;
          break;
        }
        case 0x18:{
          s6 = "s8";
          s6_len = 2;
          break;
        }
        case 0x02:{
          s6 = "sp";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "t6";
          s6_len = 2;
          break;
        }
        case 0x0B:{
          s6 = "a1";
          s6_len = 2;
          break;
        }
        case 0x07:{
          s6 = "t2";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "s3";
          s6_len = 2;
          break;
        }
        case 0x04:{
          s6 = "tp";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "s9";
          s6_len = 2;
          break;
        }
        case 0x12:{
          s6 = "s2";
          s6_len = 2;
          break;
        }
        case 0x14:{
          s6 = "s4";
          s6_len = 2;
          break;
        }
        case 0x0E:{
          s6 = "a4";
          s6_len = 2;
          break;
        }
        case 0x1E:{
          s6 = "t5";
          s6_len = 2;
          break;
        }
        case 0x11:{
          s6 = "a7";
          s6_len = 2;
          break;
        }
        case 0x03:{
          s6 = "gp";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "t0";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "t4";
          s6_len = 2;
          break;
        }
        case 0x0D:{
          s6 = "a3";
          s6_len = 2;
          break;
        }
        case 0x0F:{
          s6 = "a5";
          s6_len = 2;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
    }
    break;
    case RISCV_AES64ES: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      s0 = "aes64es";
      s0_len = 7;
      spc( &s1, &s1_len);
      switch (tree->ast_node.aes64es.rd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.aes64es.rs1) { 
        case 0x08:{
          s4 = "fp";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "s5";
          s4_len = 2;
          break;
        }
        case 0x01:{
          s4 = "ra";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "t1";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "a6";
          s4_len = 2;
          break;
        }
        case 0x1B:{
          s4 = "s11";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "t3";
          s4_len = 2;
          break;
        }
        case 0x16:{
          s4 = "s6";
          s4_len = 2;
          break;
        }
        case 0x00:{
          s4 = "zero";
          s4_len = 4;
          break;
        }
        case 0x0A:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x1A:{
          s4 = "s10";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "s7";
          s4_len = 2;
          break;
        }
        case 0x0C:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x18:{
          s4 = "s8";
          s4_len = 2;
          break;
        }
        case 0x02:{
          s4 = "sp";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "t6";
          s4_len = 2;
          break;
        }
        case 0x0B:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x07:{
          s4 = "t2";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "s3";
          s4_len = 2;
          break;
        }
        case 0x04:{
          s4 = "tp";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "s9";
          s4_len = 2;
          break;
        }
        case 0x12:{
          s4 = "s2";
          s4_len = 2;
          break;
        }
        case 0x14:{
          s4 = "s4";
          s4_len = 2;
          break;
        }
        case 0x0E:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x1E:{
          s4 = "t5";
          s4_len = 2;
          break;
        }
        case 0x11:{
          s4 = "a7";
          s4_len = 2;
          break;
        }
        case 0x03:{
          s4 = "gp";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "t0";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "t4";
          s4_len = 2;
          break;
        }
        case 0x0D:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x0F:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.aes64es.rs2) { 
        case 0x08:{
          s6 = "fp";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "s5";
          s6_len = 2;
          break;
        }
        case 0x01:{
          s6 = "ra";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "t1";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "s1";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "a6";
          s6_len = 2;
          break;
        }
        case 0x1B:{
          s6 = "s11";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "t3";
          s6_len = 2;
          break;
        }
        case 0x16:{
          s6 = "s6";
          s6_len = 2;
          break;
        }
        case 0x00:{
          s6 = "zero";
          s6_len = 4;
          break;
        }
        case 0x0A:{
          s6 = "a0";
          s6_len = 2;
          break;
        }
        case 0x1A:{
          s6 = "s10";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "s7";
          s6_len = 2;
          break;
        }
        case 0x0C:{
          s6 = "a2";
          s6_len = 2;
          break;
        }
        case 0x18:{
          s6 = "s8";
          s6_len = 2;
          break;
        }
        case 0x02:{
          s6 = "sp";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "t6";
          s6_len = 2;
          break;
        }
        case 0x0B:{
          s6 = "a1";
          s6_len = 2;
          break;
        }
        case 0x07:{
          s6 = "t2";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "s3";
          s6_len = 2;
          break;
        }
        case 0x04:{
          s6 = "tp";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "s9";
          s6_len = 2;
          break;
        }
        case 0x12:{
          s6 = "s2";
          s6_len = 2;
          break;
        }
        case 0x14:{
          s6 = "s4";
          s6_len = 2;
          break;
        }
        case 0x0E:{
          s6 = "a4";
          s6_len = 2;
          break;
        }
        case 0x1E:{
          s6 = "t5";
          s6_len = 2;
          break;
        }
        case 0x11:{
          s6 = "a7";
          s6_len = 2;
          break;
        }
        case 0x03:{
          s6 = "gp";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "t0";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "t4";
          s6_len = 2;
          break;
        }
        case 0x0D:{
          s6 = "a3";
          s6_len = 2;
          break;
        }
        case 0x0F:{
          s6 = "a5";
          s6_len = 2;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
    }
    break;
    case RISCV_AES64DSM: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      s0 = "aes64dsm";
      s0_len = 8;
      spc( &s1, &s1_len);
      switch (tree->ast_node.aes64dsm.rd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.aes64dsm.rs1) { 
        case 0x08:{
          s4 = "fp";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "s5";
          s4_len = 2;
          break;
        }
        case 0x01:{
          s4 = "ra";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "t1";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "a6";
          s4_len = 2;
          break;
        }
        case 0x1B:{
          s4 = "s11";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "t3";
          s4_len = 2;
          break;
        }
        case 0x16:{
          s4 = "s6";
          s4_len = 2;
          break;
        }
        case 0x00:{
          s4 = "zero";
          s4_len = 4;
          break;
        }
        case 0x0A:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x1A:{
          s4 = "s10";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "s7";
          s4_len = 2;
          break;
        }
        case 0x0C:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x18:{
          s4 = "s8";
          s4_len = 2;
          break;
        }
        case 0x02:{
          s4 = "sp";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "t6";
          s4_len = 2;
          break;
        }
        case 0x0B:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x07:{
          s4 = "t2";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "s3";
          s4_len = 2;
          break;
        }
        case 0x04:{
          s4 = "tp";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "s9";
          s4_len = 2;
          break;
        }
        case 0x12:{
          s4 = "s2";
          s4_len = 2;
          break;
        }
        case 0x14:{
          s4 = "s4";
          s4_len = 2;
          break;
        }
        case 0x0E:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x1E:{
          s4 = "t5";
          s4_len = 2;
          break;
        }
        case 0x11:{
          s4 = "a7";
          s4_len = 2;
          break;
        }
        case 0x03:{
          s4 = "gp";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "t0";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "t4";
          s4_len = 2;
          break;
        }
        case 0x0D:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x0F:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.aes64dsm.rs2) { 
        case 0x08:{
          s6 = "fp";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "s5";
          s6_len = 2;
          break;
        }
        case 0x01:{
          s6 = "ra";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "t1";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "s1";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "a6";
          s6_len = 2;
          break;
        }
        case 0x1B:{
          s6 = "s11";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "t3";
          s6_len = 2;
          break;
        }
        case 0x16:{
          s6 = "s6";
          s6_len = 2;
          break;
        }
        case 0x00:{
          s6 = "zero";
          s6_len = 4;
          break;
        }
        case 0x0A:{
          s6 = "a0";
          s6_len = 2;
          break;
        }
        case 0x1A:{
          s6 = "s10";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "s7";
          s6_len = 2;
          break;
        }
        case 0x0C:{
          s6 = "a2";
          s6_len = 2;
          break;
        }
        case 0x18:{
          s6 = "s8";
          s6_len = 2;
          break;
        }
        case 0x02:{
          s6 = "sp";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "t6";
          s6_len = 2;
          break;
        }
        case 0x0B:{
          s6 = "a1";
          s6_len = 2;
          break;
        }
        case 0x07:{
          s6 = "t2";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "s3";
          s6_len = 2;
          break;
        }
        case 0x04:{
          s6 = "tp";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "s9";
          s6_len = 2;
          break;
        }
        case 0x12:{
          s6 = "s2";
          s6_len = 2;
          break;
        }
        case 0x14:{
          s6 = "s4";
          s6_len = 2;
          break;
        }
        case 0x0E:{
          s6 = "a4";
          s6_len = 2;
          break;
        }
        case 0x1E:{
          s6 = "t5";
          s6_len = 2;
          break;
        }
        case 0x11:{
          s6 = "a7";
          s6_len = 2;
          break;
        }
        case 0x03:{
          s6 = "gp";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "t0";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "t4";
          s6_len = 2;
          break;
        }
        case 0x0D:{
          s6 = "a3";
          s6_len = 2;
          break;
        }
        case 0x0F:{
          s6 = "a5";
          s6_len = 2;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
    }
    break;
    case RISCV_AES64DS: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      s0 = "aes64ds";
      s0_len = 7;
      spc( &s1, &s1_len);
      switch (tree->ast_node.aes64ds.rd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.aes64ds.rs1) { 
        case 0x08:{
          s4 = "fp";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "s5";
          s4_len = 2;
          break;
        }
        case 0x01:{
          s4 = "ra";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "t1";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "a6";
          s4_len = 2;
          break;
        }
        case 0x1B:{
          s4 = "s11";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "t3";
          s4_len = 2;
          break;
        }
        case 0x16:{
          s4 = "s6";
          s4_len = 2;
          break;
        }
        case 0x00:{
          s4 = "zero";
          s4_len = 4;
          break;
        }
        case 0x0A:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x1A:{
          s4 = "s10";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "s7";
          s4_len = 2;
          break;
        }
        case 0x0C:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x18:{
          s4 = "s8";
          s4_len = 2;
          break;
        }
        case 0x02:{
          s4 = "sp";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "t6";
          s4_len = 2;
          break;
        }
        case 0x0B:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x07:{
          s4 = "t2";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "s3";
          s4_len = 2;
          break;
        }
        case 0x04:{
          s4 = "tp";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "s9";
          s4_len = 2;
          break;
        }
        case 0x12:{
          s4 = "s2";
          s4_len = 2;
          break;
        }
        case 0x14:{
          s4 = "s4";
          s4_len = 2;
          break;
        }
        case 0x0E:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x1E:{
          s4 = "t5";
          s4_len = 2;
          break;
        }
        case 0x11:{
          s4 = "a7";
          s4_len = 2;
          break;
        }
        case 0x03:{
          s4 = "gp";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "t0";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "t4";
          s4_len = 2;
          break;
        }
        case 0x0D:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x0F:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.aes64ds.rs2) { 
        case 0x08:{
          s6 = "fp";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "s5";
          s6_len = 2;
          break;
        }
        case 0x01:{
          s6 = "ra";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "t1";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "s1";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "a6";
          s6_len = 2;
          break;
        }
        case 0x1B:{
          s6 = "s11";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "t3";
          s6_len = 2;
          break;
        }
        case 0x16:{
          s6 = "s6";
          s6_len = 2;
          break;
        }
        case 0x00:{
          s6 = "zero";
          s6_len = 4;
          break;
        }
        case 0x0A:{
          s6 = "a0";
          s6_len = 2;
          break;
        }
        case 0x1A:{
          s6 = "s10";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "s7";
          s6_len = 2;
          break;
        }
        case 0x0C:{
          s6 = "a2";
          s6_len = 2;
          break;
        }
        case 0x18:{
          s6 = "s8";
          s6_len = 2;
          break;
        }
        case 0x02:{
          s6 = "sp";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "t6";
          s6_len = 2;
          break;
        }
        case 0x0B:{
          s6 = "a1";
          s6_len = 2;
          break;
        }
        case 0x07:{
          s6 = "t2";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "s3";
          s6_len = 2;
          break;
        }
        case 0x04:{
          s6 = "tp";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "s9";
          s6_len = 2;
          break;
        }
        case 0x12:{
          s6 = "s2";
          s6_len = 2;
          break;
        }
        case 0x14:{
          s6 = "s4";
          s6_len = 2;
          break;
        }
        case 0x0E:{
          s6 = "a4";
          s6_len = 2;
          break;
        }
        case 0x1E:{
          s6 = "t5";
          s6_len = 2;
          break;
        }
        case 0x11:{
          s6 = "a7";
          s6_len = 2;
          break;
        }
        case 0x03:{
          s6 = "gp";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "t0";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "t4";
          s6_len = 2;
          break;
        }
        case 0x0D:{
          s6 = "a3";
          s6_len = 2;
          break;
        }
        case 0x0F:{
          s6 = "a5";
          s6_len = 2;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
    }
    break;
    case RISCV_SHA512SIG0: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      s0 = "sha512sig0";
      s0_len = 10;
      spc( &s1, &s1_len);
      switch (tree->ast_node.sha512sig0.rd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.sha512sig0.rs1) { 
        case 0x08:{
          s4 = "fp";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "s5";
          s4_len = 2;
          break;
        }
        case 0x01:{
          s4 = "ra";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "t1";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "a6";
          s4_len = 2;
          break;
        }
        case 0x1B:{
          s4 = "s11";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "t3";
          s4_len = 2;
          break;
        }
        case 0x16:{
          s4 = "s6";
          s4_len = 2;
          break;
        }
        case 0x00:{
          s4 = "zero";
          s4_len = 4;
          break;
        }
        case 0x0A:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x1A:{
          s4 = "s10";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "s7";
          s4_len = 2;
          break;
        }
        case 0x0C:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x18:{
          s4 = "s8";
          s4_len = 2;
          break;
        }
        case 0x02:{
          s4 = "sp";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "t6";
          s4_len = 2;
          break;
        }
        case 0x0B:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x07:{
          s4 = "t2";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "s3";
          s4_len = 2;
          break;
        }
        case 0x04:{
          s4 = "tp";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "s9";
          s4_len = 2;
          break;
        }
        case 0x12:{
          s4 = "s2";
          s4_len = 2;
          break;
        }
        case 0x14:{
          s4 = "s4";
          s4_len = 2;
          break;
        }
        case 0x0E:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x1E:{
          s4 = "t5";
          s4_len = 2;
          break;
        }
        case 0x11:{
          s4 = "a7";
          s4_len = 2;
          break;
        }
        case 0x03:{
          s4 = "gp";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "t0";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "t4";
          s4_len = 2;
          break;
        }
        case 0x0D:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x0F:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      }
    }
    break;
    case RISCV_SHA512SIG1: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      s0 = "sha512sig1";
      s0_len = 10;
      spc( &s1, &s1_len);
      switch (tree->ast_node.sha512sig1.rd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.sha512sig1.rs1) { 
        case 0x08:{
          s4 = "fp";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "s5";
          s4_len = 2;
          break;
        }
        case 0x01:{
          s4 = "ra";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "t1";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "a6";
          s4_len = 2;
          break;
        }
        case 0x1B:{
          s4 = "s11";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "t3";
          s4_len = 2;
          break;
        }
        case 0x16:{
          s4 = "s6";
          s4_len = 2;
          break;
        }
        case 0x00:{
          s4 = "zero";
          s4_len = 4;
          break;
        }
        case 0x0A:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x1A:{
          s4 = "s10";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "s7";
          s4_len = 2;
          break;
        }
        case 0x0C:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x18:{
          s4 = "s8";
          s4_len = 2;
          break;
        }
        case 0x02:{
          s4 = "sp";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "t6";
          s4_len = 2;
          break;
        }
        case 0x0B:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x07:{
          s4 = "t2";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "s3";
          s4_len = 2;
          break;
        }
        case 0x04:{
          s4 = "tp";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "s9";
          s4_len = 2;
          break;
        }
        case 0x12:{
          s4 = "s2";
          s4_len = 2;
          break;
        }
        case 0x14:{
          s4 = "s4";
          s4_len = 2;
          break;
        }
        case 0x0E:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x1E:{
          s4 = "t5";
          s4_len = 2;
          break;
        }
        case 0x11:{
          s4 = "a7";
          s4_len = 2;
          break;
        }
        case 0x03:{
          s4 = "gp";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "t0";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "t4";
          s4_len = 2;
          break;
        }
        case 0x0D:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x0F:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      }
    }
    break;
    case RISCV_SHA512SUM0: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      s0 = "sha512sum0";
      s0_len = 10;
      spc( &s1, &s1_len);
      switch (tree->ast_node.sha512sum0.rd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.sha512sum0.rs1) { 
        case 0x08:{
          s4 = "fp";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "s5";
          s4_len = 2;
          break;
        }
        case 0x01:{
          s4 = "ra";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "t1";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "a6";
          s4_len = 2;
          break;
        }
        case 0x1B:{
          s4 = "s11";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "t3";
          s4_len = 2;
          break;
        }
        case 0x16:{
          s4 = "s6";
          s4_len = 2;
          break;
        }
        case 0x00:{
          s4 = "zero";
          s4_len = 4;
          break;
        }
        case 0x0A:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x1A:{
          s4 = "s10";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "s7";
          s4_len = 2;
          break;
        }
        case 0x0C:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x18:{
          s4 = "s8";
          s4_len = 2;
          break;
        }
        case 0x02:{
          s4 = "sp";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "t6";
          s4_len = 2;
          break;
        }
        case 0x0B:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x07:{
          s4 = "t2";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "s3";
          s4_len = 2;
          break;
        }
        case 0x04:{
          s4 = "tp";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "s9";
          s4_len = 2;
          break;
        }
        case 0x12:{
          s4 = "s2";
          s4_len = 2;
          break;
        }
        case 0x14:{
          s4 = "s4";
          s4_len = 2;
          break;
        }
        case 0x0E:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x1E:{
          s4 = "t5";
          s4_len = 2;
          break;
        }
        case 0x11:{
          s4 = "a7";
          s4_len = 2;
          break;
        }
        case 0x03:{
          s4 = "gp";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "t0";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "t4";
          s4_len = 2;
          break;
        }
        case 0x0D:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x0F:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      }
    }
    break;
    case RISCV_SHA512SUM1: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      s0 = "sha512sum1";
      s0_len = 10;
      spc( &s1, &s1_len);
      switch (tree->ast_node.sha512sum1.rd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.sha512sum1.rs1) { 
        case 0x08:{
          s4 = "fp";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "s5";
          s4_len = 2;
          break;
        }
        case 0x01:{
          s4 = "ra";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "t1";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "a6";
          s4_len = 2;
          break;
        }
        case 0x1B:{
          s4 = "s11";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "t3";
          s4_len = 2;
          break;
        }
        case 0x16:{
          s4 = "s6";
          s4_len = 2;
          break;
        }
        case 0x00:{
          s4 = "zero";
          s4_len = 4;
          break;
        }
        case 0x0A:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x1A:{
          s4 = "s10";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "s7";
          s4_len = 2;
          break;
        }
        case 0x0C:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x18:{
          s4 = "s8";
          s4_len = 2;
          break;
        }
        case 0x02:{
          s4 = "sp";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "t6";
          s4_len = 2;
          break;
        }
        case 0x0B:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x07:{
          s4 = "t2";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "s3";
          s4_len = 2;
          break;
        }
        case 0x04:{
          s4 = "tp";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "s9";
          s4_len = 2;
          break;
        }
        case 0x12:{
          s4 = "s2";
          s4_len = 2;
          break;
        }
        case 0x14:{
          s4 = "s4";
          s4_len = 2;
          break;
        }
        case 0x0E:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x1E:{
          s4 = "t5";
          s4_len = 2;
          break;
        }
        case 0x11:{
          s4 = "a7";
          s4_len = 2;
          break;
        }
        case 0x03:{
          s4 = "gp";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "t0";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "t4";
          s4_len = 2;
          break;
        }
        case 0x0D:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x0F:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      }
    }
    break;
    case RISCV_SM3P0: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      s0 = "sm3p0";
      s0_len = 5;
      spc( &s1, &s1_len);
      switch (tree->ast_node.sm3p0.rd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.sm3p0.rs1) { 
        case 0x08:{
          s4 = "fp";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "s5";
          s4_len = 2;
          break;
        }
        case 0x01:{
          s4 = "ra";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "t1";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "a6";
          s4_len = 2;
          break;
        }
        case 0x1B:{
          s4 = "s11";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "t3";
          s4_len = 2;
          break;
        }
        case 0x16:{
          s4 = "s6";
          s4_len = 2;
          break;
        }
        case 0x00:{
          s4 = "zero";
          s4_len = 4;
          break;
        }
        case 0x0A:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x1A:{
          s4 = "s10";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "s7";
          s4_len = 2;
          break;
        }
        case 0x0C:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x18:{
          s4 = "s8";
          s4_len = 2;
          break;
        }
        case 0x02:{
          s4 = "sp";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "t6";
          s4_len = 2;
          break;
        }
        case 0x0B:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x07:{
          s4 = "t2";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "s3";
          s4_len = 2;
          break;
        }
        case 0x04:{
          s4 = "tp";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "s9";
          s4_len = 2;
          break;
        }
        case 0x12:{
          s4 = "s2";
          s4_len = 2;
          break;
        }
        case 0x14:{
          s4 = "s4";
          s4_len = 2;
          break;
        }
        case 0x0E:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x1E:{
          s4 = "t5";
          s4_len = 2;
          break;
        }
        case 0x11:{
          s4 = "a7";
          s4_len = 2;
          break;
        }
        case 0x03:{
          s4 = "gp";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "t0";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "t4";
          s4_len = 2;
          break;
        }
        case 0x0D:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x0F:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      }
    }
    break;
    case RISCV_SM3P1: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      s0 = "sm3p1";
      s0_len = 5;
      spc( &s1, &s1_len);
      switch (tree->ast_node.sm3p1.rd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.sm3p1.rs1) { 
        case 0x08:{
          s4 = "fp";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "s5";
          s4_len = 2;
          break;
        }
        case 0x01:{
          s4 = "ra";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "t1";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "a6";
          s4_len = 2;
          break;
        }
        case 0x1B:{
          s4 = "s11";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "t3";
          s4_len = 2;
          break;
        }
        case 0x16:{
          s4 = "s6";
          s4_len = 2;
          break;
        }
        case 0x00:{
          s4 = "zero";
          s4_len = 4;
          break;
        }
        case 0x0A:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x1A:{
          s4 = "s10";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "s7";
          s4_len = 2;
          break;
        }
        case 0x0C:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x18:{
          s4 = "s8";
          s4_len = 2;
          break;
        }
        case 0x02:{
          s4 = "sp";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "t6";
          s4_len = 2;
          break;
        }
        case 0x0B:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x07:{
          s4 = "t2";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "s3";
          s4_len = 2;
          break;
        }
        case 0x04:{
          s4 = "tp";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "s9";
          s4_len = 2;
          break;
        }
        case 0x12:{
          s4 = "s2";
          s4_len = 2;
          break;
        }
        case 0x14:{
          s4 = "s4";
          s4_len = 2;
          break;
        }
        case 0x0E:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x1E:{
          s4 = "t5";
          s4_len = 2;
          break;
        }
        case 0x11:{
          s4 = "a7";
          s4_len = 2;
          break;
        }
        case 0x03:{
          s4 = "gp";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "t0";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "t4";
          s4_len = 2;
          break;
        }
        case 0x0D:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x0F:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      }
    }
    break;
    case RISCV_SM4ED: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      char *s8; size_t s8_len;
      s0 = "sm4ed";
      s0_len = 5;
      spc( &s1, &s1_len);
      switch (tree->ast_node.sm4ed.rd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.sm4ed.rs1) { 
        case 0x08:{
          s4 = "fp";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "s5";
          s4_len = 2;
          break;
        }
        case 0x01:{
          s4 = "ra";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "t1";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "a6";
          s4_len = 2;
          break;
        }
        case 0x1B:{
          s4 = "s11";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "t3";
          s4_len = 2;
          break;
        }
        case 0x16:{
          s4 = "s6";
          s4_len = 2;
          break;
        }
        case 0x00:{
          s4 = "zero";
          s4_len = 4;
          break;
        }
        case 0x0A:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x1A:{
          s4 = "s10";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "s7";
          s4_len = 2;
          break;
        }
        case 0x0C:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x18:{
          s4 = "s8";
          s4_len = 2;
          break;
        }
        case 0x02:{
          s4 = "sp";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "t6";
          s4_len = 2;
          break;
        }
        case 0x0B:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x07:{
          s4 = "t2";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "s3";
          s4_len = 2;
          break;
        }
        case 0x04:{
          s4 = "tp";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "s9";
          s4_len = 2;
          break;
        }
        case 0x12:{
          s4 = "s2";
          s4_len = 2;
          break;
        }
        case 0x14:{
          s4 = "s4";
          s4_len = 2;
          break;
        }
        case 0x0E:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x1E:{
          s4 = "t5";
          s4_len = 2;
          break;
        }
        case 0x11:{
          s4 = "a7";
          s4_len = 2;
          break;
        }
        case 0x03:{
          s4 = "gp";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "t0";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "t4";
          s4_len = 2;
          break;
        }
        case 0x0D:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x0F:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.sm4ed.rs2) { 
        case 0x08:{
          s6 = "fp";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "s5";
          s6_len = 2;
          break;
        }
        case 0x01:{
          s6 = "ra";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "t1";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "s1";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "a6";
          s6_len = 2;
          break;
        }
        case 0x1B:{
          s6 = "s11";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "t3";
          s6_len = 2;
          break;
        }
        case 0x16:{
          s6 = "s6";
          s6_len = 2;
          break;
        }
        case 0x00:{
          s6 = "zero";
          s6_len = 4;
          break;
        }
        case 0x0A:{
          s6 = "a0";
          s6_len = 2;
          break;
        }
        case 0x1A:{
          s6 = "s10";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "s7";
          s6_len = 2;
          break;
        }
        case 0x0C:{
          s6 = "a2";
          s6_len = 2;
          break;
        }
        case 0x18:{
          s6 = "s8";
          s6_len = 2;
          break;
        }
        case 0x02:{
          s6 = "sp";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "t6";
          s6_len = 2;
          break;
        }
        case 0x0B:{
          s6 = "a1";
          s6_len = 2;
          break;
        }
        case 0x07:{
          s6 = "t2";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "s3";
          s6_len = 2;
          break;
        }
        case 0x04:{
          s6 = "tp";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "s9";
          s6_len = 2;
          break;
        }
        case 0x12:{
          s6 = "s2";
          s6_len = 2;
          break;
        }
        case 0x14:{
          s6 = "s4";
          s6_len = 2;
          break;
        }
        case 0x0E:{
          s6 = "a4";
          s6_len = 2;
          break;
        }
        case 0x1E:{
          s6 = "t5";
          s6_len = 2;
          break;
        }
        case 0x11:{
          s6 = "a7";
          s6_len = 2;
          break;
        }
        case 0x03:{
          s6 = "gp";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "t0";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "t4";
          s6_len = 2;
          break;
        }
        case 0x0D:{
          s6 = "a3";
          s6_len = 2;
          break;
        }
        case 0x0F:{
          s6 = "a5";
          s6_len = 2;
          break;
        }
      }
      sep( &s7, &s7_len);
      hex_bits_2(tree->ast_node.sm4ed.bs, &s8, &s8_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len, s8, s8_len);
      }
    }
    break;
    case RISCV_SM4KS: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      char *s8; size_t s8_len;
      s0 = "sm4ks";
      s0_len = 5;
      spc( &s1, &s1_len);
      switch (tree->ast_node.sm4ks.rd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.sm4ks.rs1) { 
        case 0x08:{
          s4 = "fp";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "s5";
          s4_len = 2;
          break;
        }
        case 0x01:{
          s4 = "ra";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "t1";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "a6";
          s4_len = 2;
          break;
        }
        case 0x1B:{
          s4 = "s11";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "t3";
          s4_len = 2;
          break;
        }
        case 0x16:{
          s4 = "s6";
          s4_len = 2;
          break;
        }
        case 0x00:{
          s4 = "zero";
          s4_len = 4;
          break;
        }
        case 0x0A:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x1A:{
          s4 = "s10";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "s7";
          s4_len = 2;
          break;
        }
        case 0x0C:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x18:{
          s4 = "s8";
          s4_len = 2;
          break;
        }
        case 0x02:{
          s4 = "sp";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "t6";
          s4_len = 2;
          break;
        }
        case 0x0B:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x07:{
          s4 = "t2";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "s3";
          s4_len = 2;
          break;
        }
        case 0x04:{
          s4 = "tp";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "s9";
          s4_len = 2;
          break;
        }
        case 0x12:{
          s4 = "s2";
          s4_len = 2;
          break;
        }
        case 0x14:{
          s4 = "s4";
          s4_len = 2;
          break;
        }
        case 0x0E:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x1E:{
          s4 = "t5";
          s4_len = 2;
          break;
        }
        case 0x11:{
          s4 = "a7";
          s4_len = 2;
          break;
        }
        case 0x03:{
          s4 = "gp";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "t0";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "t4";
          s4_len = 2;
          break;
        }
        case 0x0D:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x0F:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.sm4ks.rs2) { 
        case 0x08:{
          s6 = "fp";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "s5";
          s6_len = 2;
          break;
        }
        case 0x01:{
          s6 = "ra";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "t1";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "s1";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "a6";
          s6_len = 2;
          break;
        }
        case 0x1B:{
          s6 = "s11";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "t3";
          s6_len = 2;
          break;
        }
        case 0x16:{
          s6 = "s6";
          s6_len = 2;
          break;
        }
        case 0x00:{
          s6 = "zero";
          s6_len = 4;
          break;
        }
        case 0x0A:{
          s6 = "a0";
          s6_len = 2;
          break;
        }
        case 0x1A:{
          s6 = "s10";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "s7";
          s6_len = 2;
          break;
        }
        case 0x0C:{
          s6 = "a2";
          s6_len = 2;
          break;
        }
        case 0x18:{
          s6 = "s8";
          s6_len = 2;
          break;
        }
        case 0x02:{
          s6 = "sp";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "t6";
          s6_len = 2;
          break;
        }
        case 0x0B:{
          s6 = "a1";
          s6_len = 2;
          break;
        }
        case 0x07:{
          s6 = "t2";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "s3";
          s6_len = 2;
          break;
        }
        case 0x04:{
          s6 = "tp";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "s9";
          s6_len = 2;
          break;
        }
        case 0x12:{
          s6 = "s2";
          s6_len = 2;
          break;
        }
        case 0x14:{
          s6 = "s4";
          s6_len = 2;
          break;
        }
        case 0x0E:{
          s6 = "a4";
          s6_len = 2;
          break;
        }
        case 0x1E:{
          s6 = "t5";
          s6_len = 2;
          break;
        }
        case 0x11:{
          s6 = "a7";
          s6_len = 2;
          break;
        }
        case 0x03:{
          s6 = "gp";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "t0";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "t4";
          s6_len = 2;
          break;
        }
        case 0x0D:{
          s6 = "a3";
          s6_len = 2;
          break;
        }
        case 0x0F:{
          s6 = "a5";
          s6_len = 2;
          break;
        }
      }
      sep( &s7, &s7_len);
      hex_bits_2(tree->ast_node.sm4ks.bs, &s8, &s8_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len, s8, s8_len);
      }
    }
    break;
    case RISCV_ZBKB_RTYPE: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      switch (tree->ast_node.zbkb_rtype.op) { 
        case RISCV_PACKH:{
          s0 = "packh";
          s0_len = 5;
          break;
        }
        case RISCV_PACK:{
          s0 = "pack";
          s0_len = 4;
          break;
        }
      }
      spc( &s1, &s1_len);
      switch (tree->ast_node.zbkb_rtype.rd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.zbkb_rtype.rs1) { 
        case 0x08:{
          s4 = "fp";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "s5";
          s4_len = 2;
          break;
        }
        case 0x01:{
          s4 = "ra";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "t1";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "a6";
          s4_len = 2;
          break;
        }
        case 0x1B:{
          s4 = "s11";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "t3";
          s4_len = 2;
          break;
        }
        case 0x16:{
          s4 = "s6";
          s4_len = 2;
          break;
        }
        case 0x00:{
          s4 = "zero";
          s4_len = 4;
          break;
        }
        case 0x0A:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x1A:{
          s4 = "s10";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "s7";
          s4_len = 2;
          break;
        }
        case 0x0C:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x18:{
          s4 = "s8";
          s4_len = 2;
          break;
        }
        case 0x02:{
          s4 = "sp";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "t6";
          s4_len = 2;
          break;
        }
        case 0x0B:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x07:{
          s4 = "t2";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "s3";
          s4_len = 2;
          break;
        }
        case 0x04:{
          s4 = "tp";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "s9";
          s4_len = 2;
          break;
        }
        case 0x12:{
          s4 = "s2";
          s4_len = 2;
          break;
        }
        case 0x14:{
          s4 = "s4";
          s4_len = 2;
          break;
        }
        case 0x0E:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x1E:{
          s4 = "t5";
          s4_len = 2;
          break;
        }
        case 0x11:{
          s4 = "a7";
          s4_len = 2;
          break;
        }
        case 0x03:{
          s4 = "gp";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "t0";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "t4";
          s4_len = 2;
          break;
        }
        case 0x0D:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x0F:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.zbkb_rtype.rs2) { 
        case 0x08:{
          s6 = "fp";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "s5";
          s6_len = 2;
          break;
        }
        case 0x01:{
          s6 = "ra";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "t1";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "s1";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "a6";
          s6_len = 2;
          break;
        }
        case 0x1B:{
          s6 = "s11";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "t3";
          s6_len = 2;
          break;
        }
        case 0x16:{
          s6 = "s6";
          s6_len = 2;
          break;
        }
        case 0x00:{
          s6 = "zero";
          s6_len = 4;
          break;
        }
        case 0x0A:{
          s6 = "a0";
          s6_len = 2;
          break;
        }
        case 0x1A:{
          s6 = "s10";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "s7";
          s6_len = 2;
          break;
        }
        case 0x0C:{
          s6 = "a2";
          s6_len = 2;
          break;
        }
        case 0x18:{
          s6 = "s8";
          s6_len = 2;
          break;
        }
        case 0x02:{
          s6 = "sp";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "t6";
          s6_len = 2;
          break;
        }
        case 0x0B:{
          s6 = "a1";
          s6_len = 2;
          break;
        }
        case 0x07:{
          s6 = "t2";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "s3";
          s6_len = 2;
          break;
        }
        case 0x04:{
          s6 = "tp";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "s9";
          s6_len = 2;
          break;
        }
        case 0x12:{
          s6 = "s2";
          s6_len = 2;
          break;
        }
        case 0x14:{
          s6 = "s4";
          s6_len = 2;
          break;
        }
        case 0x0E:{
          s6 = "a4";
          s6_len = 2;
          break;
        }
        case 0x1E:{
          s6 = "t5";
          s6_len = 2;
          break;
        }
        case 0x11:{
          s6 = "a7";
          s6_len = 2;
          break;
        }
        case 0x03:{
          s6 = "gp";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "t0";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "t4";
          s6_len = 2;
          break;
        }
        case 0x0D:{
          s6 = "a3";
          s6_len = 2;
          break;
        }
        case 0x0F:{
          s6 = "a5";
          s6_len = 2;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
    }
    break;
    case RISCV_ZBKB_PACKW: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      s0 = "packw";
      s0_len = 5;
      spc( &s1, &s1_len);
      switch (tree->ast_node.zbkb_packw.rd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.zbkb_packw.rs1) { 
        case 0x08:{
          s4 = "fp";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "s5";
          s4_len = 2;
          break;
        }
        case 0x01:{
          s4 = "ra";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "t1";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "a6";
          s4_len = 2;
          break;
        }
        case 0x1B:{
          s4 = "s11";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "t3";
          s4_len = 2;
          break;
        }
        case 0x16:{
          s4 = "s6";
          s4_len = 2;
          break;
        }
        case 0x00:{
          s4 = "zero";
          s4_len = 4;
          break;
        }
        case 0x0A:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x1A:{
          s4 = "s10";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "s7";
          s4_len = 2;
          break;
        }
        case 0x0C:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x18:{
          s4 = "s8";
          s4_len = 2;
          break;
        }
        case 0x02:{
          s4 = "sp";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "t6";
          s4_len = 2;
          break;
        }
        case 0x0B:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x07:{
          s4 = "t2";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "s3";
          s4_len = 2;
          break;
        }
        case 0x04:{
          s4 = "tp";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "s9";
          s4_len = 2;
          break;
        }
        case 0x12:{
          s4 = "s2";
          s4_len = 2;
          break;
        }
        case 0x14:{
          s4 = "s4";
          s4_len = 2;
          break;
        }
        case 0x0E:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x1E:{
          s4 = "t5";
          s4_len = 2;
          break;
        }
        case 0x11:{
          s4 = "a7";
          s4_len = 2;
          break;
        }
        case 0x03:{
          s4 = "gp";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "t0";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "t4";
          s4_len = 2;
          break;
        }
        case 0x0D:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x0F:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.zbkb_packw.rs2) { 
        case 0x08:{
          s6 = "fp";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "s5";
          s6_len = 2;
          break;
        }
        case 0x01:{
          s6 = "ra";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "t1";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "s1";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "a6";
          s6_len = 2;
          break;
        }
        case 0x1B:{
          s6 = "s11";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "t3";
          s6_len = 2;
          break;
        }
        case 0x16:{
          s6 = "s6";
          s6_len = 2;
          break;
        }
        case 0x00:{
          s6 = "zero";
          s6_len = 4;
          break;
        }
        case 0x0A:{
          s6 = "a0";
          s6_len = 2;
          break;
        }
        case 0x1A:{
          s6 = "s10";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "s7";
          s6_len = 2;
          break;
        }
        case 0x0C:{
          s6 = "a2";
          s6_len = 2;
          break;
        }
        case 0x18:{
          s6 = "s8";
          s6_len = 2;
          break;
        }
        case 0x02:{
          s6 = "sp";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "t6";
          s6_len = 2;
          break;
        }
        case 0x0B:{
          s6 = "a1";
          s6_len = 2;
          break;
        }
        case 0x07:{
          s6 = "t2";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "s3";
          s6_len = 2;
          break;
        }
        case 0x04:{
          s6 = "tp";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "s9";
          s6_len = 2;
          break;
        }
        case 0x12:{
          s6 = "s2";
          s6_len = 2;
          break;
        }
        case 0x14:{
          s6 = "s4";
          s6_len = 2;
          break;
        }
        case 0x0E:{
          s6 = "a4";
          s6_len = 2;
          break;
        }
        case 0x1E:{
          s6 = "t5";
          s6_len = 2;
          break;
        }
        case 0x11:{
          s6 = "a7";
          s6_len = 2;
          break;
        }
        case 0x03:{
          s6 = "gp";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "t0";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "t4";
          s6_len = 2;
          break;
        }
        case 0x0D:{
          s6 = "a3";
          s6_len = 2;
          break;
        }
        case 0x0F:{
          s6 = "a5";
          s6_len = 2;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
    }
    break;
    case RISCV_ZIP: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      s0 = "zip";
      s0_len = 3;
      spc( &s1, &s1_len);
      switch (tree->ast_node.riscv_zip.rd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.riscv_zip.rs1) { 
        case 0x08:{
          s4 = "fp";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "s5";
          s4_len = 2;
          break;
        }
        case 0x01:{
          s4 = "ra";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "t1";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "a6";
          s4_len = 2;
          break;
        }
        case 0x1B:{
          s4 = "s11";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "t3";
          s4_len = 2;
          break;
        }
        case 0x16:{
          s4 = "s6";
          s4_len = 2;
          break;
        }
        case 0x00:{
          s4 = "zero";
          s4_len = 4;
          break;
        }
        case 0x0A:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x1A:{
          s4 = "s10";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "s7";
          s4_len = 2;
          break;
        }
        case 0x0C:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x18:{
          s4 = "s8";
          s4_len = 2;
          break;
        }
        case 0x02:{
          s4 = "sp";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "t6";
          s4_len = 2;
          break;
        }
        case 0x0B:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x07:{
          s4 = "t2";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "s3";
          s4_len = 2;
          break;
        }
        case 0x04:{
          s4 = "tp";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "s9";
          s4_len = 2;
          break;
        }
        case 0x12:{
          s4 = "s2";
          s4_len = 2;
          break;
        }
        case 0x14:{
          s4 = "s4";
          s4_len = 2;
          break;
        }
        case 0x0E:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x1E:{
          s4 = "t5";
          s4_len = 2;
          break;
        }
        case 0x11:{
          s4 = "a7";
          s4_len = 2;
          break;
        }
        case 0x03:{
          s4 = "gp";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "t0";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "t4";
          s4_len = 2;
          break;
        }
        case 0x0D:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x0F:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      }
    }
    break;
    case RISCV_UNZIP: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      s0 = "unzip";
      s0_len = 5;
      spc( &s1, &s1_len);
      switch (tree->ast_node.riscv_unzip.rd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.riscv_unzip.rs1) { 
        case 0x08:{
          s4 = "fp";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "s5";
          s4_len = 2;
          break;
        }
        case 0x01:{
          s4 = "ra";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "t1";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "a6";
          s4_len = 2;
          break;
        }
        case 0x1B:{
          s4 = "s11";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "t3";
          s4_len = 2;
          break;
        }
        case 0x16:{
          s4 = "s6";
          s4_len = 2;
          break;
        }
        case 0x00:{
          s4 = "zero";
          s4_len = 4;
          break;
        }
        case 0x0A:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x1A:{
          s4 = "s10";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "s7";
          s4_len = 2;
          break;
        }
        case 0x0C:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x18:{
          s4 = "s8";
          s4_len = 2;
          break;
        }
        case 0x02:{
          s4 = "sp";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "t6";
          s4_len = 2;
          break;
        }
        case 0x0B:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x07:{
          s4 = "t2";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "s3";
          s4_len = 2;
          break;
        }
        case 0x04:{
          s4 = "tp";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "s9";
          s4_len = 2;
          break;
        }
        case 0x12:{
          s4 = "s2";
          s4_len = 2;
          break;
        }
        case 0x14:{
          s4 = "s4";
          s4_len = 2;
          break;
        }
        case 0x0E:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x1E:{
          s4 = "t5";
          s4_len = 2;
          break;
        }
        case 0x11:{
          s4 = "a7";
          s4_len = 2;
          break;
        }
        case 0x03:{
          s4 = "gp";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "t0";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "t4";
          s4_len = 2;
          break;
        }
        case 0x0D:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x0F:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      }
    }
    break;
    case RISCV_BREV8: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      s0 = "brev8";
      s0_len = 5;
      spc( &s1, &s1_len);
      switch (tree->ast_node.riscv_brev8.rd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.riscv_brev8.rs1) { 
        case 0x08:{
          s4 = "fp";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "s5";
          s4_len = 2;
          break;
        }
        case 0x01:{
          s4 = "ra";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "t1";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "a6";
          s4_len = 2;
          break;
        }
        case 0x1B:{
          s4 = "s11";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "t3";
          s4_len = 2;
          break;
        }
        case 0x16:{
          s4 = "s6";
          s4_len = 2;
          break;
        }
        case 0x00:{
          s4 = "zero";
          s4_len = 4;
          break;
        }
        case 0x0A:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x1A:{
          s4 = "s10";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "s7";
          s4_len = 2;
          break;
        }
        case 0x0C:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x18:{
          s4 = "s8";
          s4_len = 2;
          break;
        }
        case 0x02:{
          s4 = "sp";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "t6";
          s4_len = 2;
          break;
        }
        case 0x0B:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x07:{
          s4 = "t2";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "s3";
          s4_len = 2;
          break;
        }
        case 0x04:{
          s4 = "tp";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "s9";
          s4_len = 2;
          break;
        }
        case 0x12:{
          s4 = "s2";
          s4_len = 2;
          break;
        }
        case 0x14:{
          s4 = "s4";
          s4_len = 2;
          break;
        }
        case 0x0E:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x1E:{
          s4 = "t5";
          s4_len = 2;
          break;
        }
        case 0x11:{
          s4 = "a7";
          s4_len = 2;
          break;
        }
        case 0x03:{
          s4 = "gp";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "t0";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "t4";
          s4_len = 2;
          break;
        }
        case 0x0D:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x0F:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      }
    }
    break;
    case RISCV_XPERM8: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      s0 = "xperm8";
      s0_len = 6;
      spc( &s1, &s1_len);
      switch (tree->ast_node.riscv_xperm8.rd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.riscv_xperm8.rs1) { 
        case 0x08:{
          s4 = "fp";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "s5";
          s4_len = 2;
          break;
        }
        case 0x01:{
          s4 = "ra";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "t1";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "a6";
          s4_len = 2;
          break;
        }
        case 0x1B:{
          s4 = "s11";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "t3";
          s4_len = 2;
          break;
        }
        case 0x16:{
          s4 = "s6";
          s4_len = 2;
          break;
        }
        case 0x00:{
          s4 = "zero";
          s4_len = 4;
          break;
        }
        case 0x0A:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x1A:{
          s4 = "s10";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "s7";
          s4_len = 2;
          break;
        }
        case 0x0C:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x18:{
          s4 = "s8";
          s4_len = 2;
          break;
        }
        case 0x02:{
          s4 = "sp";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "t6";
          s4_len = 2;
          break;
        }
        case 0x0B:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x07:{
          s4 = "t2";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "s3";
          s4_len = 2;
          break;
        }
        case 0x04:{
          s4 = "tp";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "s9";
          s4_len = 2;
          break;
        }
        case 0x12:{
          s4 = "s2";
          s4_len = 2;
          break;
        }
        case 0x14:{
          s4 = "s4";
          s4_len = 2;
          break;
        }
        case 0x0E:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x1E:{
          s4 = "t5";
          s4_len = 2;
          break;
        }
        case 0x11:{
          s4 = "a7";
          s4_len = 2;
          break;
        }
        case 0x03:{
          s4 = "gp";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "t0";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "t4";
          s4_len = 2;
          break;
        }
        case 0x0D:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x0F:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.riscv_xperm8.rs2) { 
        case 0x08:{
          s6 = "fp";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "s5";
          s6_len = 2;
          break;
        }
        case 0x01:{
          s6 = "ra";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "t1";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "s1";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "a6";
          s6_len = 2;
          break;
        }
        case 0x1B:{
          s6 = "s11";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "t3";
          s6_len = 2;
          break;
        }
        case 0x16:{
          s6 = "s6";
          s6_len = 2;
          break;
        }
        case 0x00:{
          s6 = "zero";
          s6_len = 4;
          break;
        }
        case 0x0A:{
          s6 = "a0";
          s6_len = 2;
          break;
        }
        case 0x1A:{
          s6 = "s10";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "s7";
          s6_len = 2;
          break;
        }
        case 0x0C:{
          s6 = "a2";
          s6_len = 2;
          break;
        }
        case 0x18:{
          s6 = "s8";
          s6_len = 2;
          break;
        }
        case 0x02:{
          s6 = "sp";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "t6";
          s6_len = 2;
          break;
        }
        case 0x0B:{
          s6 = "a1";
          s6_len = 2;
          break;
        }
        case 0x07:{
          s6 = "t2";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "s3";
          s6_len = 2;
          break;
        }
        case 0x04:{
          s6 = "tp";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "s9";
          s6_len = 2;
          break;
        }
        case 0x12:{
          s6 = "s2";
          s6_len = 2;
          break;
        }
        case 0x14:{
          s6 = "s4";
          s6_len = 2;
          break;
        }
        case 0x0E:{
          s6 = "a4";
          s6_len = 2;
          break;
        }
        case 0x1E:{
          s6 = "t5";
          s6_len = 2;
          break;
        }
        case 0x11:{
          s6 = "a7";
          s6_len = 2;
          break;
        }
        case 0x03:{
          s6 = "gp";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "t0";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "t4";
          s6_len = 2;
          break;
        }
        case 0x0D:{
          s6 = "a3";
          s6_len = 2;
          break;
        }
        case 0x0F:{
          s6 = "a5";
          s6_len = 2;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
    }
    break;
    case RISCV_XPERM4: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      s0 = "xperm4";
      s0_len = 6;
      spc( &s1, &s1_len);
      switch (tree->ast_node.riscv_xperm4.rd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.riscv_xperm4.rs1) { 
        case 0x08:{
          s4 = "fp";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "s5";
          s4_len = 2;
          break;
        }
        case 0x01:{
          s4 = "ra";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "t1";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "a6";
          s4_len = 2;
          break;
        }
        case 0x1B:{
          s4 = "s11";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "t3";
          s4_len = 2;
          break;
        }
        case 0x16:{
          s4 = "s6";
          s4_len = 2;
          break;
        }
        case 0x00:{
          s4 = "zero";
          s4_len = 4;
          break;
        }
        case 0x0A:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x1A:{
          s4 = "s10";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "s7";
          s4_len = 2;
          break;
        }
        case 0x0C:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x18:{
          s4 = "s8";
          s4_len = 2;
          break;
        }
        case 0x02:{
          s4 = "sp";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "t6";
          s4_len = 2;
          break;
        }
        case 0x0B:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x07:{
          s4 = "t2";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "s3";
          s4_len = 2;
          break;
        }
        case 0x04:{
          s4 = "tp";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "s9";
          s4_len = 2;
          break;
        }
        case 0x12:{
          s4 = "s2";
          s4_len = 2;
          break;
        }
        case 0x14:{
          s4 = "s4";
          s4_len = 2;
          break;
        }
        case 0x0E:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x1E:{
          s4 = "t5";
          s4_len = 2;
          break;
        }
        case 0x11:{
          s4 = "a7";
          s4_len = 2;
          break;
        }
        case 0x03:{
          s4 = "gp";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "t0";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "t4";
          s4_len = 2;
          break;
        }
        case 0x0D:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x0F:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.riscv_xperm4.rs2) { 
        case 0x08:{
          s6 = "fp";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "s5";
          s6_len = 2;
          break;
        }
        case 0x01:{
          s6 = "ra";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "t1";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "s1";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "a6";
          s6_len = 2;
          break;
        }
        case 0x1B:{
          s6 = "s11";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "t3";
          s6_len = 2;
          break;
        }
        case 0x16:{
          s6 = "s6";
          s6_len = 2;
          break;
        }
        case 0x00:{
          s6 = "zero";
          s6_len = 4;
          break;
        }
        case 0x0A:{
          s6 = "a0";
          s6_len = 2;
          break;
        }
        case 0x1A:{
          s6 = "s10";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "s7";
          s6_len = 2;
          break;
        }
        case 0x0C:{
          s6 = "a2";
          s6_len = 2;
          break;
        }
        case 0x18:{
          s6 = "s8";
          s6_len = 2;
          break;
        }
        case 0x02:{
          s6 = "sp";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "t6";
          s6_len = 2;
          break;
        }
        case 0x0B:{
          s6 = "a1";
          s6_len = 2;
          break;
        }
        case 0x07:{
          s6 = "t2";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "s3";
          s6_len = 2;
          break;
        }
        case 0x04:{
          s6 = "tp";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "s9";
          s6_len = 2;
          break;
        }
        case 0x12:{
          s6 = "s2";
          s6_len = 2;
          break;
        }
        case 0x14:{
          s6 = "s4";
          s6_len = 2;
          break;
        }
        case 0x0E:{
          s6 = "a4";
          s6_len = 2;
          break;
        }
        case 0x1E:{
          s6 = "t5";
          s6_len = 2;
          break;
        }
        case 0x11:{
          s6 = "a7";
          s6_len = 2;
          break;
        }
        case 0x03:{
          s6 = "gp";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "t0";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "t4";
          s6_len = 2;
          break;
        }
        case 0x0D:{
          s6 = "a3";
          s6_len = 2;
          break;
        }
        case 0x0F:{
          s6 = "a5";
          s6_len = 2;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
    }
    break;
    case RISCV_ZICOND_RTYPE: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      switch (tree->ast_node.zicond_rtype.riscv_czero_nez) { 
        case RISCV_CZERO_EQZ:{
          s0 = "czero.eqz";
          s0_len = 9;
          break;
        }
        case RISCV_CZERO_NEZ:{
          s0 = "czero.nez";
          s0_len = 9;
          break;
        }
      }
      spc( &s1, &s1_len);
      switch (tree->ast_node.zicond_rtype.rd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.zicond_rtype.rs1) { 
        case 0x08:{
          s4 = "fp";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "s5";
          s4_len = 2;
          break;
        }
        case 0x01:{
          s4 = "ra";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "t1";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "a6";
          s4_len = 2;
          break;
        }
        case 0x1B:{
          s4 = "s11";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "t3";
          s4_len = 2;
          break;
        }
        case 0x16:{
          s4 = "s6";
          s4_len = 2;
          break;
        }
        case 0x00:{
          s4 = "zero";
          s4_len = 4;
          break;
        }
        case 0x0A:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x1A:{
          s4 = "s10";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "s7";
          s4_len = 2;
          break;
        }
        case 0x0C:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x18:{
          s4 = "s8";
          s4_len = 2;
          break;
        }
        case 0x02:{
          s4 = "sp";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "t6";
          s4_len = 2;
          break;
        }
        case 0x0B:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x07:{
          s4 = "t2";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "s3";
          s4_len = 2;
          break;
        }
        case 0x04:{
          s4 = "tp";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "s9";
          s4_len = 2;
          break;
        }
        case 0x12:{
          s4 = "s2";
          s4_len = 2;
          break;
        }
        case 0x14:{
          s4 = "s4";
          s4_len = 2;
          break;
        }
        case 0x0E:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x1E:{
          s4 = "t5";
          s4_len = 2;
          break;
        }
        case 0x11:{
          s4 = "a7";
          s4_len = 2;
          break;
        }
        case 0x03:{
          s4 = "gp";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "t0";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "t4";
          s4_len = 2;
          break;
        }
        case 0x0D:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x0F:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.zicond_rtype.rs2) { 
        case 0x08:{
          s6 = "fp";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "s5";
          s6_len = 2;
          break;
        }
        case 0x01:{
          s6 = "ra";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "t1";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "s1";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "a6";
          s6_len = 2;
          break;
        }
        case 0x1B:{
          s6 = "s11";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "t3";
          s6_len = 2;
          break;
        }
        case 0x16:{
          s6 = "s6";
          s6_len = 2;
          break;
        }
        case 0x00:{
          s6 = "zero";
          s6_len = 4;
          break;
        }
        case 0x0A:{
          s6 = "a0";
          s6_len = 2;
          break;
        }
        case 0x1A:{
          s6 = "s10";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "s7";
          s6_len = 2;
          break;
        }
        case 0x0C:{
          s6 = "a2";
          s6_len = 2;
          break;
        }
        case 0x18:{
          s6 = "s8";
          s6_len = 2;
          break;
        }
        case 0x02:{
          s6 = "sp";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "t6";
          s6_len = 2;
          break;
        }
        case 0x0B:{
          s6 = "a1";
          s6_len = 2;
          break;
        }
        case 0x07:{
          s6 = "t2";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "s3";
          s6_len = 2;
          break;
        }
        case 0x04:{
          s6 = "tp";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "s9";
          s6_len = 2;
          break;
        }
        case 0x12:{
          s6 = "s2";
          s6_len = 2;
          break;
        }
        case 0x14:{
          s6 = "s4";
          s6_len = 2;
          break;
        }
        case 0x0E:{
          s6 = "a4";
          s6_len = 2;
          break;
        }
        case 0x1E:{
          s6 = "t5";
          s6_len = 2;
          break;
        }
        case 0x11:{
          s6 = "a7";
          s6_len = 2;
          break;
        }
        case 0x03:{
          s6 = "gp";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "t0";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "t4";
          s6_len = 2;
          break;
        }
        case 0x0D:{
          s6 = "a3";
          s6_len = 2;
          break;
        }
        case 0x0F:{
          s6 = "a5";
          s6_len = 2;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
    }
    break;
    case RISCV_VSETVLI: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      char *s8; size_t s8_len;
      char *s9; size_t s9_len;
      s0 = "vsetvli";
      s0_len = 7;
      spc( &s1, &s1_len);
      switch (tree->ast_node.vsetvli.rd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.vsetvli.rs1) { 
        case 0x08:{
          s4 = "fp";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "s5";
          s4_len = 2;
          break;
        }
        case 0x01:{
          s4 = "ra";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "t1";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "a6";
          s4_len = 2;
          break;
        }
        case 0x1B:{
          s4 = "s11";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "t3";
          s4_len = 2;
          break;
        }
        case 0x16:{
          s4 = "s6";
          s4_len = 2;
          break;
        }
        case 0x00:{
          s4 = "zero";
          s4_len = 4;
          break;
        }
        case 0x0A:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x1A:{
          s4 = "s10";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "s7";
          s4_len = 2;
          break;
        }
        case 0x0C:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x18:{
          s4 = "s8";
          s4_len = 2;
          break;
        }
        case 0x02:{
          s4 = "sp";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "t6";
          s4_len = 2;
          break;
        }
        case 0x0B:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x07:{
          s4 = "t2";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "s3";
          s4_len = 2;
          break;
        }
        case 0x04:{
          s4 = "tp";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "s9";
          s4_len = 2;
          break;
        }
        case 0x12:{
          s4 = "s2";
          s4_len = 2;
          break;
        }
        case 0x14:{
          s4 = "s4";
          s4_len = 2;
          break;
        }
        case 0x0E:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x1E:{
          s4 = "t5";
          s4_len = 2;
          break;
        }
        case 0x11:{
          s4 = "a7";
          s4_len = 2;
          break;
        }
        case 0x03:{
          s4 = "gp";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "t0";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "t4";
          s4_len = 2;
          break;
        }
        case 0x0D:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x0F:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.vsetvli.sew) { 
        case 0x1:{
          s6 = "e16";
          s6_len = 3;
          break;
        }
        case 0x3:{
          s6 = "e64";
          s6_len = 3;
          break;
        }
        case 0x2:{
          s6 = "e32";
          s6_len = 3;
          break;
        }
        case 0x0:{
          s6 = "e8";
          s6_len = 2;
          break;
        }
      }
      maybe_lmul_flag(tree->ast_node.vsetvli.lmul, &s7, &s7_len);
      maybe_ta_flag(tree->ast_node.vsetvli.ta, &s8, &s8_len);
      maybe_ma_flag(tree->ast_node.vsetvli.ma, &s9, &s9_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len, s8, s8_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len + s8_len, s9, s9_len);
      }
    }
    break;
    case RISCV_VSETVL: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      s0 = "vsetvl";
      s0_len = 6;
      spc( &s1, &s1_len);
      switch (tree->ast_node.vsetvl.rd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.vsetvl.rs1) { 
        case 0x08:{
          s4 = "fp";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "s5";
          s4_len = 2;
          break;
        }
        case 0x01:{
          s4 = "ra";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "t1";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "a6";
          s4_len = 2;
          break;
        }
        case 0x1B:{
          s4 = "s11";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "t3";
          s4_len = 2;
          break;
        }
        case 0x16:{
          s4 = "s6";
          s4_len = 2;
          break;
        }
        case 0x00:{
          s4 = "zero";
          s4_len = 4;
          break;
        }
        case 0x0A:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x1A:{
          s4 = "s10";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "s7";
          s4_len = 2;
          break;
        }
        case 0x0C:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x18:{
          s4 = "s8";
          s4_len = 2;
          break;
        }
        case 0x02:{
          s4 = "sp";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "t6";
          s4_len = 2;
          break;
        }
        case 0x0B:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x07:{
          s4 = "t2";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "s3";
          s4_len = 2;
          break;
        }
        case 0x04:{
          s4 = "tp";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "s9";
          s4_len = 2;
          break;
        }
        case 0x12:{
          s4 = "s2";
          s4_len = 2;
          break;
        }
        case 0x14:{
          s4 = "s4";
          s4_len = 2;
          break;
        }
        case 0x0E:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x1E:{
          s4 = "t5";
          s4_len = 2;
          break;
        }
        case 0x11:{
          s4 = "a7";
          s4_len = 2;
          break;
        }
        case 0x03:{
          s4 = "gp";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "t0";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "t4";
          s4_len = 2;
          break;
        }
        case 0x0D:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x0F:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.vsetvl.rs2) { 
        case 0x08:{
          s6 = "fp";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "s5";
          s6_len = 2;
          break;
        }
        case 0x01:{
          s6 = "ra";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "t1";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "s1";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "a6";
          s6_len = 2;
          break;
        }
        case 0x1B:{
          s6 = "s11";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "t3";
          s6_len = 2;
          break;
        }
        case 0x16:{
          s6 = "s6";
          s6_len = 2;
          break;
        }
        case 0x00:{
          s6 = "zero";
          s6_len = 4;
          break;
        }
        case 0x0A:{
          s6 = "a0";
          s6_len = 2;
          break;
        }
        case 0x1A:{
          s6 = "s10";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "s7";
          s6_len = 2;
          break;
        }
        case 0x0C:{
          s6 = "a2";
          s6_len = 2;
          break;
        }
        case 0x18:{
          s6 = "s8";
          s6_len = 2;
          break;
        }
        case 0x02:{
          s6 = "sp";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "t6";
          s6_len = 2;
          break;
        }
        case 0x0B:{
          s6 = "a1";
          s6_len = 2;
          break;
        }
        case 0x07:{
          s6 = "t2";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "s3";
          s6_len = 2;
          break;
        }
        case 0x04:{
          s6 = "tp";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "s9";
          s6_len = 2;
          break;
        }
        case 0x12:{
          s6 = "s2";
          s6_len = 2;
          break;
        }
        case 0x14:{
          s6 = "s4";
          s6_len = 2;
          break;
        }
        case 0x0E:{
          s6 = "a4";
          s6_len = 2;
          break;
        }
        case 0x1E:{
          s6 = "t5";
          s6_len = 2;
          break;
        }
        case 0x11:{
          s6 = "a7";
          s6_len = 2;
          break;
        }
        case 0x03:{
          s6 = "gp";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "t0";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "t4";
          s6_len = 2;
          break;
        }
        case 0x0D:{
          s6 = "a3";
          s6_len = 2;
          break;
        }
        case 0x0F:{
          s6 = "a5";
          s6_len = 2;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
    }
    break;
    case RISCV_VSETIVLI: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      char *s8; size_t s8_len;
      char *s9; size_t s9_len;
      s0 = "vsetivli";
      s0_len = 8;
      spc( &s1, &s1_len);
      switch (tree->ast_node.vsetivli.rd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      hex_bits_5(tree->ast_node.vsetivli.uimm, &s4, &s4_len);
      sep( &s5, &s5_len);
      switch (tree->ast_node.vsetivli.sew) { 
        case 0x1:{
          s6 = "e16";
          s6_len = 3;
          break;
        }
        case 0x3:{
          s6 = "e64";
          s6_len = 3;
          break;
        }
        case 0x2:{
          s6 = "e32";
          s6_len = 3;
          break;
        }
        case 0x0:{
          s6 = "e8";
          s6_len = 2;
          break;
        }
      }
      maybe_lmul_flag(tree->ast_node.vsetivli.lmul, &s7, &s7_len);
      maybe_ta_flag(tree->ast_node.vsetivli.ta, &s8, &s8_len);
      maybe_ma_flag(tree->ast_node.vsetivli.ma, &s9, &s9_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len, s8, s8_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len + s8_len, s9, s9_len);
      }
    }
    break;
    case RISCV_VVTYPE: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      switch (tree->ast_node.vvtype.funct6) { 
        case RISCV_VV_VSSRA:{
          s0 = "vssra.vv";
          s0_len = 8;
          break;
        }
        case RISCV_VV_VXOR:{
          s0 = "vxor.vv";
          s0_len = 7;
          break;
        }
        case RISCV_VV_VSMUL:{
          s0 = "vsmul.vv";
          s0_len = 8;
          break;
        }
        case RISCV_VV_VAND:{
          s0 = "vand.vv";
          s0_len = 7;
          break;
        }
        case RISCV_VV_VSSUB:{
          s0 = "vssub.vv";
          s0_len = 8;
          break;
        }
        case RISCV_VV_VSUB:{
          s0 = "vsub.vv";
          s0_len = 7;
          break;
        }
        case RISCV_VV_VSLL:{
          s0 = "vsll.vv";
          s0_len = 7;
          break;
        }
        case RISCV_VV_VSSRL:{
          s0 = "vssrl.vv";
          s0_len = 8;
          break;
        }
        case RISCV_VV_VSADD:{
          s0 = "vsadd.vv";
          s0_len = 8;
          break;
        }
        case RISCV_VV_VSSUBU:{
          s0 = "vssubu.vv";
          s0_len = 9;
          break;
        }
        case RISCV_VV_VMAX:{
          s0 = "vmax.vv";
          s0_len = 7;
          break;
        }
        case RISCV_VV_VADD:{
          s0 = "vadd.vv";
          s0_len = 7;
          break;
        }
        case RISCV_VV_VSRL:{
          s0 = "vsrl.vv";
          s0_len = 7;
          break;
        }
        case RISCV_VV_VMAXU:{
          s0 = "vmaxu.vv";
          s0_len = 8;
          break;
        }
        case RISCV_VV_VRGATHER:{
          s0 = "vrgather.vv";
          s0_len = 11;
          break;
        }
        case RISCV_VV_VSRA:{
          s0 = "vsra.vv";
          s0_len = 7;
          break;
        }
        case RISCV_VV_VRGATHEREI16:{
          s0 = "vrgatherei16.vv";
          s0_len = 15;
          break;
        }
        case RISCV_VV_VMINU:{
          s0 = "vminu.vv";
          s0_len = 8;
          break;
        }
        case RISCV_VV_VSADDU:{
          s0 = "vsaddu.vv";
          s0_len = 9;
          break;
        }
        case RISCV_VV_VMIN:{
          s0 = "vmin.vv";
          s0_len = 7;
          break;
        }
        case RISCV_VV_VOR:{
          s0 = "vor.vv";
          s0_len = 6;
          break;
        }
      }
      spc( &s1, &s1_len);
      switch (tree->ast_node.vvtype.vd) { 
        case 0x08:{
          s2 = "v8";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "v21";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "v1";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "v6";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "v9";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "v16";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "v27";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "v28";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "v22";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "v0";
          s2_len = 2;
          break;
        }
        case 0x0A:{
          s2 = "v10";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "v26";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "v23";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "v12";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "v24";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "v2";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "v31";
          s2_len = 3;
          break;
        }
        case 0x0B:{
          s2 = "v11";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "v7";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "v19";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "v4";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "v25";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "v18";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "v20";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "v14";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "v30";
          s2_len = 3;
          break;
        }
        case 0x11:{
          s2 = "v17";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "v3";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "v5";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "v29";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "v13";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "v15";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.vvtype.vs2) { 
        case 0x08:{
          s4 = "v8";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "v21";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "v1";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "v6";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "v9";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "v16";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "v27";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "v28";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "v22";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "v0";
          s4_len = 2;
          break;
        }
        case 0x0A:{
          s4 = "v10";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "v26";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "v23";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "v12";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "v24";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "v2";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "v31";
          s4_len = 3;
          break;
        }
        case 0x0B:{
          s4 = "v11";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "v7";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "v19";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "v4";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "v25";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "v18";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "v20";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "v14";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "v30";
          s4_len = 3;
          break;
        }
        case 0x11:{
          s4 = "v17";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "v3";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "v5";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "v29";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "v13";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "v15";
          s4_len = 3;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.vvtype.vs1) { 
        case 0x08:{
          s6 = "v8";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "v21";
          s6_len = 3;
          break;
        }
        case 0x01:{
          s6 = "v1";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "v6";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "v9";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "v16";
          s6_len = 3;
          break;
        }
        case 0x1B:{
          s6 = "v27";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "v28";
          s6_len = 3;
          break;
        }
        case 0x16:{
          s6 = "v22";
          s6_len = 3;
          break;
        }
        case 0x00:{
          s6 = "v0";
          s6_len = 2;
          break;
        }
        case 0x0A:{
          s6 = "v10";
          s6_len = 3;
          break;
        }
        case 0x1A:{
          s6 = "v26";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "v23";
          s6_len = 3;
          break;
        }
        case 0x0C:{
          s6 = "v12";
          s6_len = 3;
          break;
        }
        case 0x18:{
          s6 = "v24";
          s6_len = 3;
          break;
        }
        case 0x02:{
          s6 = "v2";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "v31";
          s6_len = 3;
          break;
        }
        case 0x0B:{
          s6 = "v11";
          s6_len = 3;
          break;
        }
        case 0x07:{
          s6 = "v7";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "v19";
          s6_len = 3;
          break;
        }
        case 0x04:{
          s6 = "v4";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "v25";
          s6_len = 3;
          break;
        }
        case 0x12:{
          s6 = "v18";
          s6_len = 3;
          break;
        }
        case 0x14:{
          s6 = "v20";
          s6_len = 3;
          break;
        }
        case 0x0E:{
          s6 = "v14";
          s6_len = 3;
          break;
        }
        case 0x1E:{
          s6 = "v30";
          s6_len = 3;
          break;
        }
        case 0x11:{
          s6 = "v17";
          s6_len = 3;
          break;
        }
        case 0x03:{
          s6 = "v3";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "v5";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "v29";
          s6_len = 3;
          break;
        }
        case 0x0D:{
          s6 = "v13";
          s6_len = 3;
          break;
        }
        case 0x0F:{
          s6 = "v15";
          s6_len = 3;
          break;
        }
      }
      maybe_vmask(tree->ast_node.vvtype.vm, &s7, &s7_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      }
    }
    break;
    case RISCV_NVSTYPE: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      switch (tree->ast_node.nvstype.funct6) { 
        case RISCV_NVS_VNSRL:{
          s0 = "vnsrl.wv";
          s0_len = 8;
          break;
        }
        case RISCV_NVS_VNSRA:{
          s0 = "vnsra.wv";
          s0_len = 8;
          break;
        }
      }
      spc( &s1, &s1_len);
      switch (tree->ast_node.nvstype.vd) { 
        case 0x08:{
          s2 = "v8";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "v21";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "v1";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "v6";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "v9";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "v16";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "v27";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "v28";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "v22";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "v0";
          s2_len = 2;
          break;
        }
        case 0x0A:{
          s2 = "v10";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "v26";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "v23";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "v12";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "v24";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "v2";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "v31";
          s2_len = 3;
          break;
        }
        case 0x0B:{
          s2 = "v11";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "v7";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "v19";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "v4";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "v25";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "v18";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "v20";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "v14";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "v30";
          s2_len = 3;
          break;
        }
        case 0x11:{
          s2 = "v17";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "v3";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "v5";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "v29";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "v13";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "v15";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.nvstype.vs2) { 
        case 0x08:{
          s4 = "v8";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "v21";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "v1";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "v6";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "v9";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "v16";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "v27";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "v28";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "v22";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "v0";
          s4_len = 2;
          break;
        }
        case 0x0A:{
          s4 = "v10";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "v26";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "v23";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "v12";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "v24";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "v2";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "v31";
          s4_len = 3;
          break;
        }
        case 0x0B:{
          s4 = "v11";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "v7";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "v19";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "v4";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "v25";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "v18";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "v20";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "v14";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "v30";
          s4_len = 3;
          break;
        }
        case 0x11:{
          s4 = "v17";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "v3";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "v5";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "v29";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "v13";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "v15";
          s4_len = 3;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.nvstype.vs1) { 
        case 0x08:{
          s6 = "v8";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "v21";
          s6_len = 3;
          break;
        }
        case 0x01:{
          s6 = "v1";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "v6";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "v9";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "v16";
          s6_len = 3;
          break;
        }
        case 0x1B:{
          s6 = "v27";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "v28";
          s6_len = 3;
          break;
        }
        case 0x16:{
          s6 = "v22";
          s6_len = 3;
          break;
        }
        case 0x00:{
          s6 = "v0";
          s6_len = 2;
          break;
        }
        case 0x0A:{
          s6 = "v10";
          s6_len = 3;
          break;
        }
        case 0x1A:{
          s6 = "v26";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "v23";
          s6_len = 3;
          break;
        }
        case 0x0C:{
          s6 = "v12";
          s6_len = 3;
          break;
        }
        case 0x18:{
          s6 = "v24";
          s6_len = 3;
          break;
        }
        case 0x02:{
          s6 = "v2";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "v31";
          s6_len = 3;
          break;
        }
        case 0x0B:{
          s6 = "v11";
          s6_len = 3;
          break;
        }
        case 0x07:{
          s6 = "v7";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "v19";
          s6_len = 3;
          break;
        }
        case 0x04:{
          s6 = "v4";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "v25";
          s6_len = 3;
          break;
        }
        case 0x12:{
          s6 = "v18";
          s6_len = 3;
          break;
        }
        case 0x14:{
          s6 = "v20";
          s6_len = 3;
          break;
        }
        case 0x0E:{
          s6 = "v14";
          s6_len = 3;
          break;
        }
        case 0x1E:{
          s6 = "v30";
          s6_len = 3;
          break;
        }
        case 0x11:{
          s6 = "v17";
          s6_len = 3;
          break;
        }
        case 0x03:{
          s6 = "v3";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "v5";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "v29";
          s6_len = 3;
          break;
        }
        case 0x0D:{
          s6 = "v13";
          s6_len = 3;
          break;
        }
        case 0x0F:{
          s6 = "v15";
          s6_len = 3;
          break;
        }
      }
      maybe_vmask(tree->ast_node.nvstype.vm, &s7, &s7_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      }
    }
    break;
    case RISCV_NVTYPE: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      switch (tree->ast_node.nvtype.funct6) { 
        case RISCV_NV_VNCLIP:{
          s0 = "vnclip.wv";
          s0_len = 9;
          break;
        }
        case RISCV_NV_VNCLIPU:{
          s0 = "vnclipu.wv";
          s0_len = 10;
          break;
        }
      }
      spc( &s1, &s1_len);
      switch (tree->ast_node.nvtype.vd) { 
        case 0x08:{
          s2 = "v8";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "v21";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "v1";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "v6";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "v9";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "v16";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "v27";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "v28";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "v22";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "v0";
          s2_len = 2;
          break;
        }
        case 0x0A:{
          s2 = "v10";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "v26";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "v23";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "v12";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "v24";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "v2";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "v31";
          s2_len = 3;
          break;
        }
        case 0x0B:{
          s2 = "v11";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "v7";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "v19";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "v4";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "v25";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "v18";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "v20";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "v14";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "v30";
          s2_len = 3;
          break;
        }
        case 0x11:{
          s2 = "v17";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "v3";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "v5";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "v29";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "v13";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "v15";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.nvtype.vs2) { 
        case 0x08:{
          s4 = "v8";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "v21";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "v1";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "v6";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "v9";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "v16";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "v27";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "v28";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "v22";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "v0";
          s4_len = 2;
          break;
        }
        case 0x0A:{
          s4 = "v10";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "v26";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "v23";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "v12";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "v24";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "v2";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "v31";
          s4_len = 3;
          break;
        }
        case 0x0B:{
          s4 = "v11";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "v7";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "v19";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "v4";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "v25";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "v18";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "v20";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "v14";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "v30";
          s4_len = 3;
          break;
        }
        case 0x11:{
          s4 = "v17";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "v3";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "v5";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "v29";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "v13";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "v15";
          s4_len = 3;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.nvtype.vs1) { 
        case 0x08:{
          s6 = "v8";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "v21";
          s6_len = 3;
          break;
        }
        case 0x01:{
          s6 = "v1";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "v6";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "v9";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "v16";
          s6_len = 3;
          break;
        }
        case 0x1B:{
          s6 = "v27";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "v28";
          s6_len = 3;
          break;
        }
        case 0x16:{
          s6 = "v22";
          s6_len = 3;
          break;
        }
        case 0x00:{
          s6 = "v0";
          s6_len = 2;
          break;
        }
        case 0x0A:{
          s6 = "v10";
          s6_len = 3;
          break;
        }
        case 0x1A:{
          s6 = "v26";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "v23";
          s6_len = 3;
          break;
        }
        case 0x0C:{
          s6 = "v12";
          s6_len = 3;
          break;
        }
        case 0x18:{
          s6 = "v24";
          s6_len = 3;
          break;
        }
        case 0x02:{
          s6 = "v2";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "v31";
          s6_len = 3;
          break;
        }
        case 0x0B:{
          s6 = "v11";
          s6_len = 3;
          break;
        }
        case 0x07:{
          s6 = "v7";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "v19";
          s6_len = 3;
          break;
        }
        case 0x04:{
          s6 = "v4";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "v25";
          s6_len = 3;
          break;
        }
        case 0x12:{
          s6 = "v18";
          s6_len = 3;
          break;
        }
        case 0x14:{
          s6 = "v20";
          s6_len = 3;
          break;
        }
        case 0x0E:{
          s6 = "v14";
          s6_len = 3;
          break;
        }
        case 0x1E:{
          s6 = "v30";
          s6_len = 3;
          break;
        }
        case 0x11:{
          s6 = "v17";
          s6_len = 3;
          break;
        }
        case 0x03:{
          s6 = "v3";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "v5";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "v29";
          s6_len = 3;
          break;
        }
        case 0x0D:{
          s6 = "v13";
          s6_len = 3;
          break;
        }
        case 0x0F:{
          s6 = "v15";
          s6_len = 3;
          break;
        }
      }
      maybe_vmask(tree->ast_node.nvtype.vm, &s7, &s7_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      }
    }
    break;
    case RISCV_MASKTYPEV: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      char *s8; size_t s8_len;
      s0 = "vmerge.vvm";
      s0_len = 10;
      spc( &s1, &s1_len);
      switch (tree->ast_node.masktypev.vd) { 
        case 0x08:{
          s2 = "v8";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "v21";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "v1";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "v6";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "v9";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "v16";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "v27";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "v28";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "v22";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "v0";
          s2_len = 2;
          break;
        }
        case 0x0A:{
          s2 = "v10";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "v26";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "v23";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "v12";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "v24";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "v2";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "v31";
          s2_len = 3;
          break;
        }
        case 0x0B:{
          s2 = "v11";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "v7";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "v19";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "v4";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "v25";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "v18";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "v20";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "v14";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "v30";
          s2_len = 3;
          break;
        }
        case 0x11:{
          s2 = "v17";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "v3";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "v5";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "v29";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "v13";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "v15";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.masktypev.vs2) { 
        case 0x08:{
          s4 = "v8";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "v21";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "v1";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "v6";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "v9";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "v16";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "v27";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "v28";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "v22";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "v0";
          s4_len = 2;
          break;
        }
        case 0x0A:{
          s4 = "v10";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "v26";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "v23";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "v12";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "v24";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "v2";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "v31";
          s4_len = 3;
          break;
        }
        case 0x0B:{
          s4 = "v11";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "v7";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "v19";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "v4";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "v25";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "v18";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "v20";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "v14";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "v30";
          s4_len = 3;
          break;
        }
        case 0x11:{
          s4 = "v17";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "v3";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "v5";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "v29";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "v13";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "v15";
          s4_len = 3;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.masktypev.vs1) { 
        case 0x08:{
          s6 = "v8";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "v21";
          s6_len = 3;
          break;
        }
        case 0x01:{
          s6 = "v1";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "v6";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "v9";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "v16";
          s6_len = 3;
          break;
        }
        case 0x1B:{
          s6 = "v27";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "v28";
          s6_len = 3;
          break;
        }
        case 0x16:{
          s6 = "v22";
          s6_len = 3;
          break;
        }
        case 0x00:{
          s6 = "v0";
          s6_len = 2;
          break;
        }
        case 0x0A:{
          s6 = "v10";
          s6_len = 3;
          break;
        }
        case 0x1A:{
          s6 = "v26";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "v23";
          s6_len = 3;
          break;
        }
        case 0x0C:{
          s6 = "v12";
          s6_len = 3;
          break;
        }
        case 0x18:{
          s6 = "v24";
          s6_len = 3;
          break;
        }
        case 0x02:{
          s6 = "v2";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "v31";
          s6_len = 3;
          break;
        }
        case 0x0B:{
          s6 = "v11";
          s6_len = 3;
          break;
        }
        case 0x07:{
          s6 = "v7";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "v19";
          s6_len = 3;
          break;
        }
        case 0x04:{
          s6 = "v4";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "v25";
          s6_len = 3;
          break;
        }
        case 0x12:{
          s6 = "v18";
          s6_len = 3;
          break;
        }
        case 0x14:{
          s6 = "v20";
          s6_len = 3;
          break;
        }
        case 0x0E:{
          s6 = "v14";
          s6_len = 3;
          break;
        }
        case 0x1E:{
          s6 = "v30";
          s6_len = 3;
          break;
        }
        case 0x11:{
          s6 = "v17";
          s6_len = 3;
          break;
        }
        case 0x03:{
          s6 = "v3";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "v5";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "v29";
          s6_len = 3;
          break;
        }
        case 0x0D:{
          s6 = "v13";
          s6_len = 3;
          break;
        }
        case 0x0F:{
          s6 = "v15";
          s6_len = 3;
          break;
        }
      }
      sep( &s7, &s7_len);
      s8 = "v0";
      s8_len = 2;
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len, s8, s8_len);
      }
    }
    break;
    case RISCV_MOVETYPEV: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      s0 = "vmv.v.v";
      s0_len = 7;
      spc( &s1, &s1_len);
      switch (tree->ast_node.movetypev.vd) { 
        case 0x08:{
          s2 = "v8";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "v21";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "v1";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "v6";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "v9";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "v16";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "v27";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "v28";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "v22";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "v0";
          s2_len = 2;
          break;
        }
        case 0x0A:{
          s2 = "v10";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "v26";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "v23";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "v12";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "v24";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "v2";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "v31";
          s2_len = 3;
          break;
        }
        case 0x0B:{
          s2 = "v11";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "v7";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "v19";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "v4";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "v25";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "v18";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "v20";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "v14";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "v30";
          s2_len = 3;
          break;
        }
        case 0x11:{
          s2 = "v17";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "v3";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "v5";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "v29";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "v13";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "v15";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.movetypev.vs1) { 
        case 0x08:{
          s4 = "v8";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "v21";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "v1";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "v6";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "v9";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "v16";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "v27";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "v28";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "v22";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "v0";
          s4_len = 2;
          break;
        }
        case 0x0A:{
          s4 = "v10";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "v26";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "v23";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "v12";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "v24";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "v2";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "v31";
          s4_len = 3;
          break;
        }
        case 0x0B:{
          s4 = "v11";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "v7";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "v19";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "v4";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "v25";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "v18";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "v20";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "v14";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "v30";
          s4_len = 3;
          break;
        }
        case 0x11:{
          s4 = "v17";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "v3";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "v5";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "v29";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "v13";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "v15";
          s4_len = 3;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      }
    }
    break;
    case RISCV_VXTYPE: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      switch (tree->ast_node.vxtype.funct6) { 
        case RISCV_VX_VSRA:{
          s0 = "vsra.vx";
          s0_len = 7;
          break;
        }
        case RISCV_VX_VOR:{
          s0 = "vor.vx";
          s0_len = 6;
          break;
        }
        case RISCV_VX_VADD:{
          s0 = "vadd.vx";
          s0_len = 7;
          break;
        }
        case RISCV_VX_VSADDU:{
          s0 = "vsaddu.vx";
          s0_len = 9;
          break;
        }
        case RISCV_VX_VMAX:{
          s0 = "vmax.vx";
          s0_len = 7;
          break;
        }
        case RISCV_VX_VSSRA:{
          s0 = "vssra.vx";
          s0_len = 8;
          break;
        }
        case RISCV_VX_VXOR:{
          s0 = "vxor.vx";
          s0_len = 7;
          break;
        }
        case RISCV_VX_VSSRL:{
          s0 = "vssrl.vx";
          s0_len = 8;
          break;
        }
        case RISCV_VX_VRSUB:{
          s0 = "vrsub.vx";
          s0_len = 8;
          break;
        }
        case RISCV_VX_VSUB:{
          s0 = "vsub.vx";
          s0_len = 7;
          break;
        }
        case RISCV_VX_VSADD:{
          s0 = "vsadd.vx";
          s0_len = 8;
          break;
        }
        case RISCV_VX_VSSUBU:{
          s0 = "vssubu.vx";
          s0_len = 9;
          break;
        }
        case RISCV_VX_VMIN:{
          s0 = "vmin.vx";
          s0_len = 7;
          break;
        }
        case RISCV_VX_VSLL:{
          s0 = "vsll.vx";
          s0_len = 7;
          break;
        }
        case RISCV_VX_VSMUL:{
          s0 = "vsmul.vx";
          s0_len = 8;
          break;
        }
        case RISCV_VX_VMINU:{
          s0 = "vminu.vx";
          s0_len = 8;
          break;
        }
        case RISCV_VX_VMAXU:{
          s0 = "vmaxu.vx";
          s0_len = 8;
          break;
        }
        case RISCV_VX_VAND:{
          s0 = "vand.vx";
          s0_len = 7;
          break;
        }
        case RISCV_VX_VSSUB:{
          s0 = "vssub.vx";
          s0_len = 8;
          break;
        }
        case RISCV_VX_VSRL:{
          s0 = "vsrl.vx";
          s0_len = 7;
          break;
        }
      }
      spc( &s1, &s1_len);
      switch (tree->ast_node.vxtype.vd) { 
        case 0x08:{
          s2 = "v8";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "v21";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "v1";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "v6";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "v9";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "v16";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "v27";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "v28";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "v22";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "v0";
          s2_len = 2;
          break;
        }
        case 0x0A:{
          s2 = "v10";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "v26";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "v23";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "v12";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "v24";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "v2";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "v31";
          s2_len = 3;
          break;
        }
        case 0x0B:{
          s2 = "v11";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "v7";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "v19";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "v4";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "v25";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "v18";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "v20";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "v14";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "v30";
          s2_len = 3;
          break;
        }
        case 0x11:{
          s2 = "v17";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "v3";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "v5";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "v29";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "v13";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "v15";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.vxtype.vs2) { 
        case 0x08:{
          s4 = "v8";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "v21";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "v1";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "v6";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "v9";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "v16";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "v27";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "v28";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "v22";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "v0";
          s4_len = 2;
          break;
        }
        case 0x0A:{
          s4 = "v10";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "v26";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "v23";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "v12";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "v24";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "v2";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "v31";
          s4_len = 3;
          break;
        }
        case 0x0B:{
          s4 = "v11";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "v7";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "v19";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "v4";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "v25";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "v18";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "v20";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "v14";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "v30";
          s4_len = 3;
          break;
        }
        case 0x11:{
          s4 = "v17";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "v3";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "v5";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "v29";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "v13";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "v15";
          s4_len = 3;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.vxtype.rs1) { 
        case 0x08:{
          s6 = "fp";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "s5";
          s6_len = 2;
          break;
        }
        case 0x01:{
          s6 = "ra";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "t1";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "s1";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "a6";
          s6_len = 2;
          break;
        }
        case 0x1B:{
          s6 = "s11";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "t3";
          s6_len = 2;
          break;
        }
        case 0x16:{
          s6 = "s6";
          s6_len = 2;
          break;
        }
        case 0x00:{
          s6 = "zero";
          s6_len = 4;
          break;
        }
        case 0x0A:{
          s6 = "a0";
          s6_len = 2;
          break;
        }
        case 0x1A:{
          s6 = "s10";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "s7";
          s6_len = 2;
          break;
        }
        case 0x0C:{
          s6 = "a2";
          s6_len = 2;
          break;
        }
        case 0x18:{
          s6 = "s8";
          s6_len = 2;
          break;
        }
        case 0x02:{
          s6 = "sp";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "t6";
          s6_len = 2;
          break;
        }
        case 0x0B:{
          s6 = "a1";
          s6_len = 2;
          break;
        }
        case 0x07:{
          s6 = "t2";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "s3";
          s6_len = 2;
          break;
        }
        case 0x04:{
          s6 = "tp";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "s9";
          s6_len = 2;
          break;
        }
        case 0x12:{
          s6 = "s2";
          s6_len = 2;
          break;
        }
        case 0x14:{
          s6 = "s4";
          s6_len = 2;
          break;
        }
        case 0x0E:{
          s6 = "a4";
          s6_len = 2;
          break;
        }
        case 0x1E:{
          s6 = "t5";
          s6_len = 2;
          break;
        }
        case 0x11:{
          s6 = "a7";
          s6_len = 2;
          break;
        }
        case 0x03:{
          s6 = "gp";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "t0";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "t4";
          s6_len = 2;
          break;
        }
        case 0x0D:{
          s6 = "a3";
          s6_len = 2;
          break;
        }
        case 0x0F:{
          s6 = "a5";
          s6_len = 2;
          break;
        }
      }
      maybe_vmask(tree->ast_node.vxtype.vm, &s7, &s7_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      }
    }
    break;
    case RISCV_NXSTYPE: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      switch (tree->ast_node.nxstype.funct6) { 
        case RISCV_NXS_VNSRA:{
          s0 = "vnsra.wx";
          s0_len = 8;
          break;
        }
        case RISCV_NXS_VNSRL:{
          s0 = "vnsrl.wx";
          s0_len = 8;
          break;
        }
      }
      spc( &s1, &s1_len);
      switch (tree->ast_node.nxstype.vd) { 
        case 0x08:{
          s2 = "v8";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "v21";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "v1";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "v6";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "v9";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "v16";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "v27";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "v28";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "v22";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "v0";
          s2_len = 2;
          break;
        }
        case 0x0A:{
          s2 = "v10";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "v26";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "v23";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "v12";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "v24";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "v2";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "v31";
          s2_len = 3;
          break;
        }
        case 0x0B:{
          s2 = "v11";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "v7";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "v19";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "v4";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "v25";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "v18";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "v20";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "v14";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "v30";
          s2_len = 3;
          break;
        }
        case 0x11:{
          s2 = "v17";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "v3";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "v5";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "v29";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "v13";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "v15";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.nxstype.vs2) { 
        case 0x08:{
          s4 = "v8";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "v21";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "v1";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "v6";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "v9";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "v16";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "v27";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "v28";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "v22";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "v0";
          s4_len = 2;
          break;
        }
        case 0x0A:{
          s4 = "v10";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "v26";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "v23";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "v12";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "v24";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "v2";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "v31";
          s4_len = 3;
          break;
        }
        case 0x0B:{
          s4 = "v11";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "v7";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "v19";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "v4";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "v25";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "v18";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "v20";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "v14";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "v30";
          s4_len = 3;
          break;
        }
        case 0x11:{
          s4 = "v17";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "v3";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "v5";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "v29";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "v13";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "v15";
          s4_len = 3;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.nxstype.rs1) { 
        case 0x08:{
          s6 = "fp";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "s5";
          s6_len = 2;
          break;
        }
        case 0x01:{
          s6 = "ra";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "t1";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "s1";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "a6";
          s6_len = 2;
          break;
        }
        case 0x1B:{
          s6 = "s11";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "t3";
          s6_len = 2;
          break;
        }
        case 0x16:{
          s6 = "s6";
          s6_len = 2;
          break;
        }
        case 0x00:{
          s6 = "zero";
          s6_len = 4;
          break;
        }
        case 0x0A:{
          s6 = "a0";
          s6_len = 2;
          break;
        }
        case 0x1A:{
          s6 = "s10";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "s7";
          s6_len = 2;
          break;
        }
        case 0x0C:{
          s6 = "a2";
          s6_len = 2;
          break;
        }
        case 0x18:{
          s6 = "s8";
          s6_len = 2;
          break;
        }
        case 0x02:{
          s6 = "sp";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "t6";
          s6_len = 2;
          break;
        }
        case 0x0B:{
          s6 = "a1";
          s6_len = 2;
          break;
        }
        case 0x07:{
          s6 = "t2";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "s3";
          s6_len = 2;
          break;
        }
        case 0x04:{
          s6 = "tp";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "s9";
          s6_len = 2;
          break;
        }
        case 0x12:{
          s6 = "s2";
          s6_len = 2;
          break;
        }
        case 0x14:{
          s6 = "s4";
          s6_len = 2;
          break;
        }
        case 0x0E:{
          s6 = "a4";
          s6_len = 2;
          break;
        }
        case 0x1E:{
          s6 = "t5";
          s6_len = 2;
          break;
        }
        case 0x11:{
          s6 = "a7";
          s6_len = 2;
          break;
        }
        case 0x03:{
          s6 = "gp";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "t0";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "t4";
          s6_len = 2;
          break;
        }
        case 0x0D:{
          s6 = "a3";
          s6_len = 2;
          break;
        }
        case 0x0F:{
          s6 = "a5";
          s6_len = 2;
          break;
        }
      }
      maybe_vmask(tree->ast_node.nxstype.vm, &s7, &s7_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      }
    }
    break;
    case RISCV_NXTYPE: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      switch (tree->ast_node.nxtype.funct6) { 
        case RISCV_NX_VNCLIP:{
          s0 = "vnclip.wx";
          s0_len = 9;
          break;
        }
        case RISCV_NX_VNCLIPU:{
          s0 = "vnclipu.wx";
          s0_len = 10;
          break;
        }
      }
      spc( &s1, &s1_len);
      switch (tree->ast_node.nxtype.vd) { 
        case 0x08:{
          s2 = "v8";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "v21";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "v1";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "v6";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "v9";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "v16";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "v27";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "v28";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "v22";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "v0";
          s2_len = 2;
          break;
        }
        case 0x0A:{
          s2 = "v10";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "v26";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "v23";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "v12";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "v24";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "v2";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "v31";
          s2_len = 3;
          break;
        }
        case 0x0B:{
          s2 = "v11";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "v7";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "v19";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "v4";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "v25";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "v18";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "v20";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "v14";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "v30";
          s2_len = 3;
          break;
        }
        case 0x11:{
          s2 = "v17";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "v3";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "v5";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "v29";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "v13";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "v15";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.nxtype.vs2) { 
        case 0x08:{
          s4 = "v8";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "v21";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "v1";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "v6";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "v9";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "v16";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "v27";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "v28";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "v22";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "v0";
          s4_len = 2;
          break;
        }
        case 0x0A:{
          s4 = "v10";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "v26";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "v23";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "v12";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "v24";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "v2";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "v31";
          s4_len = 3;
          break;
        }
        case 0x0B:{
          s4 = "v11";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "v7";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "v19";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "v4";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "v25";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "v18";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "v20";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "v14";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "v30";
          s4_len = 3;
          break;
        }
        case 0x11:{
          s4 = "v17";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "v3";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "v5";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "v29";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "v13";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "v15";
          s4_len = 3;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.nxtype.rs1) { 
        case 0x08:{
          s6 = "fp";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "s5";
          s6_len = 2;
          break;
        }
        case 0x01:{
          s6 = "ra";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "t1";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "s1";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "a6";
          s6_len = 2;
          break;
        }
        case 0x1B:{
          s6 = "s11";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "t3";
          s6_len = 2;
          break;
        }
        case 0x16:{
          s6 = "s6";
          s6_len = 2;
          break;
        }
        case 0x00:{
          s6 = "zero";
          s6_len = 4;
          break;
        }
        case 0x0A:{
          s6 = "a0";
          s6_len = 2;
          break;
        }
        case 0x1A:{
          s6 = "s10";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "s7";
          s6_len = 2;
          break;
        }
        case 0x0C:{
          s6 = "a2";
          s6_len = 2;
          break;
        }
        case 0x18:{
          s6 = "s8";
          s6_len = 2;
          break;
        }
        case 0x02:{
          s6 = "sp";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "t6";
          s6_len = 2;
          break;
        }
        case 0x0B:{
          s6 = "a1";
          s6_len = 2;
          break;
        }
        case 0x07:{
          s6 = "t2";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "s3";
          s6_len = 2;
          break;
        }
        case 0x04:{
          s6 = "tp";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "s9";
          s6_len = 2;
          break;
        }
        case 0x12:{
          s6 = "s2";
          s6_len = 2;
          break;
        }
        case 0x14:{
          s6 = "s4";
          s6_len = 2;
          break;
        }
        case 0x0E:{
          s6 = "a4";
          s6_len = 2;
          break;
        }
        case 0x1E:{
          s6 = "t5";
          s6_len = 2;
          break;
        }
        case 0x11:{
          s6 = "a7";
          s6_len = 2;
          break;
        }
        case 0x03:{
          s6 = "gp";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "t0";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "t4";
          s6_len = 2;
          break;
        }
        case 0x0D:{
          s6 = "a3";
          s6_len = 2;
          break;
        }
        case 0x0F:{
          s6 = "a5";
          s6_len = 2;
          break;
        }
      }
      maybe_vmask(tree->ast_node.nxtype.vm, &s7, &s7_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      }
    }
    break;
    case RISCV_VXSG: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      switch (tree->ast_node.vxsg.funct6) { 
        case RISCV_VX_VSLIDEDOWN:{
          s0 = "vslidedown.vx";
          s0_len = 13;
          break;
        }
        case RISCV_VX_VSLIDEUP:{
          s0 = "vslideup.vx";
          s0_len = 11;
          break;
        }
        case RISCV_VX_VRGATHER:{
          s0 = "vrgather.vx";
          s0_len = 11;
          break;
        }
      }
      spc( &s1, &s1_len);
      switch (tree->ast_node.vxsg.vd) { 
        case 0x08:{
          s2 = "v8";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "v21";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "v1";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "v6";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "v9";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "v16";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "v27";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "v28";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "v22";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "v0";
          s2_len = 2;
          break;
        }
        case 0x0A:{
          s2 = "v10";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "v26";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "v23";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "v12";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "v24";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "v2";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "v31";
          s2_len = 3;
          break;
        }
        case 0x0B:{
          s2 = "v11";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "v7";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "v19";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "v4";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "v25";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "v18";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "v20";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "v14";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "v30";
          s2_len = 3;
          break;
        }
        case 0x11:{
          s2 = "v17";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "v3";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "v5";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "v29";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "v13";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "v15";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.vxsg.vs2) { 
        case 0x08:{
          s4 = "v8";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "v21";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "v1";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "v6";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "v9";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "v16";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "v27";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "v28";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "v22";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "v0";
          s4_len = 2;
          break;
        }
        case 0x0A:{
          s4 = "v10";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "v26";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "v23";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "v12";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "v24";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "v2";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "v31";
          s4_len = 3;
          break;
        }
        case 0x0B:{
          s4 = "v11";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "v7";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "v19";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "v4";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "v25";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "v18";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "v20";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "v14";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "v30";
          s4_len = 3;
          break;
        }
        case 0x11:{
          s4 = "v17";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "v3";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "v5";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "v29";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "v13";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "v15";
          s4_len = 3;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.vxsg.rs1) { 
        case 0x08:{
          s6 = "fp";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "s5";
          s6_len = 2;
          break;
        }
        case 0x01:{
          s6 = "ra";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "t1";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "s1";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "a6";
          s6_len = 2;
          break;
        }
        case 0x1B:{
          s6 = "s11";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "t3";
          s6_len = 2;
          break;
        }
        case 0x16:{
          s6 = "s6";
          s6_len = 2;
          break;
        }
        case 0x00:{
          s6 = "zero";
          s6_len = 4;
          break;
        }
        case 0x0A:{
          s6 = "a0";
          s6_len = 2;
          break;
        }
        case 0x1A:{
          s6 = "s10";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "s7";
          s6_len = 2;
          break;
        }
        case 0x0C:{
          s6 = "a2";
          s6_len = 2;
          break;
        }
        case 0x18:{
          s6 = "s8";
          s6_len = 2;
          break;
        }
        case 0x02:{
          s6 = "sp";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "t6";
          s6_len = 2;
          break;
        }
        case 0x0B:{
          s6 = "a1";
          s6_len = 2;
          break;
        }
        case 0x07:{
          s6 = "t2";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "s3";
          s6_len = 2;
          break;
        }
        case 0x04:{
          s6 = "tp";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "s9";
          s6_len = 2;
          break;
        }
        case 0x12:{
          s6 = "s2";
          s6_len = 2;
          break;
        }
        case 0x14:{
          s6 = "s4";
          s6_len = 2;
          break;
        }
        case 0x0E:{
          s6 = "a4";
          s6_len = 2;
          break;
        }
        case 0x1E:{
          s6 = "t5";
          s6_len = 2;
          break;
        }
        case 0x11:{
          s6 = "a7";
          s6_len = 2;
          break;
        }
        case 0x03:{
          s6 = "gp";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "t0";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "t4";
          s6_len = 2;
          break;
        }
        case 0x0D:{
          s6 = "a3";
          s6_len = 2;
          break;
        }
        case 0x0F:{
          s6 = "a5";
          s6_len = 2;
          break;
        }
      }
      maybe_vmask(tree->ast_node.vxsg.vm, &s7, &s7_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      }
    }
    break;
    case RISCV_MASKTYPEX: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      char *s8; size_t s8_len;
      s0 = "vmerge.vxm";
      s0_len = 10;
      spc( &s1, &s1_len);
      switch (tree->ast_node.masktypex.vd) { 
        case 0x08:{
          s2 = "v8";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "v21";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "v1";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "v6";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "v9";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "v16";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "v27";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "v28";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "v22";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "v0";
          s2_len = 2;
          break;
        }
        case 0x0A:{
          s2 = "v10";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "v26";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "v23";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "v12";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "v24";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "v2";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "v31";
          s2_len = 3;
          break;
        }
        case 0x0B:{
          s2 = "v11";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "v7";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "v19";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "v4";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "v25";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "v18";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "v20";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "v14";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "v30";
          s2_len = 3;
          break;
        }
        case 0x11:{
          s2 = "v17";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "v3";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "v5";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "v29";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "v13";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "v15";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.masktypex.vs2) { 
        case 0x08:{
          s4 = "v8";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "v21";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "v1";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "v6";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "v9";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "v16";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "v27";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "v28";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "v22";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "v0";
          s4_len = 2;
          break;
        }
        case 0x0A:{
          s4 = "v10";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "v26";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "v23";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "v12";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "v24";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "v2";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "v31";
          s4_len = 3;
          break;
        }
        case 0x0B:{
          s4 = "v11";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "v7";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "v19";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "v4";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "v25";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "v18";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "v20";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "v14";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "v30";
          s4_len = 3;
          break;
        }
        case 0x11:{
          s4 = "v17";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "v3";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "v5";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "v29";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "v13";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "v15";
          s4_len = 3;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.masktypex.rs1) { 
        case 0x08:{
          s6 = "fp";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "s5";
          s6_len = 2;
          break;
        }
        case 0x01:{
          s6 = "ra";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "t1";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "s1";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "a6";
          s6_len = 2;
          break;
        }
        case 0x1B:{
          s6 = "s11";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "t3";
          s6_len = 2;
          break;
        }
        case 0x16:{
          s6 = "s6";
          s6_len = 2;
          break;
        }
        case 0x00:{
          s6 = "zero";
          s6_len = 4;
          break;
        }
        case 0x0A:{
          s6 = "a0";
          s6_len = 2;
          break;
        }
        case 0x1A:{
          s6 = "s10";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "s7";
          s6_len = 2;
          break;
        }
        case 0x0C:{
          s6 = "a2";
          s6_len = 2;
          break;
        }
        case 0x18:{
          s6 = "s8";
          s6_len = 2;
          break;
        }
        case 0x02:{
          s6 = "sp";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "t6";
          s6_len = 2;
          break;
        }
        case 0x0B:{
          s6 = "a1";
          s6_len = 2;
          break;
        }
        case 0x07:{
          s6 = "t2";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "s3";
          s6_len = 2;
          break;
        }
        case 0x04:{
          s6 = "tp";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "s9";
          s6_len = 2;
          break;
        }
        case 0x12:{
          s6 = "s2";
          s6_len = 2;
          break;
        }
        case 0x14:{
          s6 = "s4";
          s6_len = 2;
          break;
        }
        case 0x0E:{
          s6 = "a4";
          s6_len = 2;
          break;
        }
        case 0x1E:{
          s6 = "t5";
          s6_len = 2;
          break;
        }
        case 0x11:{
          s6 = "a7";
          s6_len = 2;
          break;
        }
        case 0x03:{
          s6 = "gp";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "t0";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "t4";
          s6_len = 2;
          break;
        }
        case 0x0D:{
          s6 = "a3";
          s6_len = 2;
          break;
        }
        case 0x0F:{
          s6 = "a5";
          s6_len = 2;
          break;
        }
      }
      sep( &s7, &s7_len);
      s8 = "v0";
      s8_len = 2;
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len, s8, s8_len);
      }
    }
    break;
    case RISCV_MOVETYPEX: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      s0 = "vmv.v.x";
      s0_len = 7;
      spc( &s1, &s1_len);
      switch (tree->ast_node.movetypex.vd) { 
        case 0x08:{
          s2 = "v8";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "v21";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "v1";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "v6";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "v9";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "v16";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "v27";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "v28";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "v22";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "v0";
          s2_len = 2;
          break;
        }
        case 0x0A:{
          s2 = "v10";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "v26";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "v23";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "v12";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "v24";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "v2";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "v31";
          s2_len = 3;
          break;
        }
        case 0x0B:{
          s2 = "v11";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "v7";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "v19";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "v4";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "v25";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "v18";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "v20";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "v14";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "v30";
          s2_len = 3;
          break;
        }
        case 0x11:{
          s2 = "v17";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "v3";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "v5";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "v29";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "v13";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "v15";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.movetypex.rs1) { 
        case 0x08:{
          s4 = "fp";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "s5";
          s4_len = 2;
          break;
        }
        case 0x01:{
          s4 = "ra";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "t1";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "a6";
          s4_len = 2;
          break;
        }
        case 0x1B:{
          s4 = "s11";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "t3";
          s4_len = 2;
          break;
        }
        case 0x16:{
          s4 = "s6";
          s4_len = 2;
          break;
        }
        case 0x00:{
          s4 = "zero";
          s4_len = 4;
          break;
        }
        case 0x0A:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x1A:{
          s4 = "s10";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "s7";
          s4_len = 2;
          break;
        }
        case 0x0C:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x18:{
          s4 = "s8";
          s4_len = 2;
          break;
        }
        case 0x02:{
          s4 = "sp";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "t6";
          s4_len = 2;
          break;
        }
        case 0x0B:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x07:{
          s4 = "t2";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "s3";
          s4_len = 2;
          break;
        }
        case 0x04:{
          s4 = "tp";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "s9";
          s4_len = 2;
          break;
        }
        case 0x12:{
          s4 = "s2";
          s4_len = 2;
          break;
        }
        case 0x14:{
          s4 = "s4";
          s4_len = 2;
          break;
        }
        case 0x0E:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x1E:{
          s4 = "t5";
          s4_len = 2;
          break;
        }
        case 0x11:{
          s4 = "a7";
          s4_len = 2;
          break;
        }
        case 0x03:{
          s4 = "gp";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "t0";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "t4";
          s4_len = 2;
          break;
        }
        case 0x0D:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x0F:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      }
    }
    break;
    case RISCV_VITYPE: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      switch (tree->ast_node.vitype.funct6) { 
        case RISCV_VI_VSRL:{
          s0 = "vsrl.vi";
          s0_len = 7;
          break;
        }
        case RISCV_VI_VAND:{
          s0 = "vand.vi";
          s0_len = 7;
          break;
        }
        case RISCV_VI_VXOR:{
          s0 = "vxor.vi";
          s0_len = 7;
          break;
        }
        case RISCV_VI_VSADD:{
          s0 = "vsadd.vi";
          s0_len = 8;
          break;
        }
        case RISCV_VI_VSRA:{
          s0 = "vsra.vi";
          s0_len = 7;
          break;
        }
        case RISCV_VI_VSSRL:{
          s0 = "vssrl.vi";
          s0_len = 8;
          break;
        }
        case RISCV_VI_VSADDU:{
          s0 = "vsaddu.vi";
          s0_len = 9;
          break;
        }
        case RISCV_VI_VSLL:{
          s0 = "vsll.vi";
          s0_len = 7;
          break;
        }
        case RISCV_VI_VRSUB:{
          s0 = "vrsub.vi";
          s0_len = 8;
          break;
        }
        case RISCV_VI_VADD:{
          s0 = "vadd.vi";
          s0_len = 7;
          break;
        }
        case RISCV_VI_VOR:{
          s0 = "vor.vi";
          s0_len = 6;
          break;
        }
        case RISCV_VI_VSSRA:{
          s0 = "vssra.vi";
          s0_len = 8;
          break;
        }
      }
      spc( &s1, &s1_len);
      switch (tree->ast_node.vitype.vd) { 
        case 0x08:{
          s2 = "v8";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "v21";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "v1";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "v6";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "v9";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "v16";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "v27";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "v28";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "v22";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "v0";
          s2_len = 2;
          break;
        }
        case 0x0A:{
          s2 = "v10";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "v26";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "v23";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "v12";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "v24";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "v2";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "v31";
          s2_len = 3;
          break;
        }
        case 0x0B:{
          s2 = "v11";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "v7";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "v19";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "v4";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "v25";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "v18";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "v20";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "v14";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "v30";
          s2_len = 3;
          break;
        }
        case 0x11:{
          s2 = "v17";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "v3";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "v5";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "v29";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "v13";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "v15";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.vitype.vs2) { 
        case 0x08:{
          s4 = "v8";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "v21";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "v1";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "v6";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "v9";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "v16";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "v27";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "v28";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "v22";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "v0";
          s4_len = 2;
          break;
        }
        case 0x0A:{
          s4 = "v10";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "v26";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "v23";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "v12";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "v24";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "v2";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "v31";
          s4_len = 3;
          break;
        }
        case 0x0B:{
          s4 = "v11";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "v7";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "v19";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "v4";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "v25";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "v18";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "v20";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "v14";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "v30";
          s4_len = 3;
          break;
        }
        case 0x11:{
          s4 = "v17";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "v3";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "v5";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "v29";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "v13";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "v15";
          s4_len = 3;
          break;
        }
      }
      sep( &s5, &s5_len);
      hex_bits_5(tree->ast_node.vitype.simm, &s6, &s6_len);
      maybe_vmask(tree->ast_node.vitype.vm, &s7, &s7_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      }
    }
    break;
    case RISCV_NISTYPE: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      switch (tree->ast_node.nistype.funct6) { 
        case RISCV_NIS_VNSRL:{
          s0 = "vnsrl.wi";
          s0_len = 8;
          break;
        }
        case RISCV_NIS_VNSRA:{
          s0 = "vnsra.wi";
          s0_len = 8;
          break;
        }
      }
      spc( &s1, &s1_len);
      switch (tree->ast_node.nistype.vd) { 
        case 0x08:{
          s2 = "v8";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "v21";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "v1";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "v6";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "v9";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "v16";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "v27";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "v28";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "v22";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "v0";
          s2_len = 2;
          break;
        }
        case 0x0A:{
          s2 = "v10";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "v26";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "v23";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "v12";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "v24";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "v2";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "v31";
          s2_len = 3;
          break;
        }
        case 0x0B:{
          s2 = "v11";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "v7";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "v19";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "v4";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "v25";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "v18";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "v20";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "v14";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "v30";
          s2_len = 3;
          break;
        }
        case 0x11:{
          s2 = "v17";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "v3";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "v5";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "v29";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "v13";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "v15";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.nistype.vs2) { 
        case 0x08:{
          s4 = "v8";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "v21";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "v1";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "v6";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "v9";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "v16";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "v27";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "v28";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "v22";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "v0";
          s4_len = 2;
          break;
        }
        case 0x0A:{
          s4 = "v10";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "v26";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "v23";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "v12";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "v24";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "v2";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "v31";
          s4_len = 3;
          break;
        }
        case 0x0B:{
          s4 = "v11";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "v7";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "v19";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "v4";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "v25";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "v18";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "v20";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "v14";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "v30";
          s4_len = 3;
          break;
        }
        case 0x11:{
          s4 = "v17";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "v3";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "v5";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "v29";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "v13";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "v15";
          s4_len = 3;
          break;
        }
      }
      sep( &s5, &s5_len);
      hex_bits_5(tree->ast_node.nistype.simm, &s6, &s6_len);
      maybe_vmask(tree->ast_node.nistype.vm, &s7, &s7_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      }
    }
    break;
    case RISCV_NITYPE: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      switch (tree->ast_node.nitype.funct6) { 
        case RISCV_NI_VNCLIPU:{
          s0 = "vnclipu.wi";
          s0_len = 10;
          break;
        }
        case RISCV_NI_VNCLIP:{
          s0 = "vnclip.wi";
          s0_len = 9;
          break;
        }
      }
      spc( &s1, &s1_len);
      switch (tree->ast_node.nitype.vd) { 
        case 0x08:{
          s2 = "v8";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "v21";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "v1";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "v6";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "v9";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "v16";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "v27";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "v28";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "v22";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "v0";
          s2_len = 2;
          break;
        }
        case 0x0A:{
          s2 = "v10";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "v26";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "v23";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "v12";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "v24";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "v2";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "v31";
          s2_len = 3;
          break;
        }
        case 0x0B:{
          s2 = "v11";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "v7";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "v19";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "v4";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "v25";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "v18";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "v20";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "v14";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "v30";
          s2_len = 3;
          break;
        }
        case 0x11:{
          s2 = "v17";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "v3";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "v5";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "v29";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "v13";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "v15";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.nitype.vs2) { 
        case 0x08:{
          s4 = "v8";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "v21";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "v1";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "v6";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "v9";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "v16";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "v27";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "v28";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "v22";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "v0";
          s4_len = 2;
          break;
        }
        case 0x0A:{
          s4 = "v10";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "v26";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "v23";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "v12";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "v24";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "v2";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "v31";
          s4_len = 3;
          break;
        }
        case 0x0B:{
          s4 = "v11";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "v7";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "v19";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "v4";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "v25";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "v18";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "v20";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "v14";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "v30";
          s4_len = 3;
          break;
        }
        case 0x11:{
          s4 = "v17";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "v3";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "v5";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "v29";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "v13";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "v15";
          s4_len = 3;
          break;
        }
      }
      sep( &s5, &s5_len);
      hex_bits_5(tree->ast_node.nitype.simm, &s6, &s6_len);
      maybe_vmask(tree->ast_node.nitype.vm, &s7, &s7_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      }
    }
    break;
    case RISCV_VISG: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      switch (tree->ast_node.visg.funct6) { 
        case RISCV_VI_VRGATHER:{
          s0 = "vrgather.vi";
          s0_len = 11;
          break;
        }
        case RISCV_VI_VSLIDEDOWN:{
          s0 = "vslidedown.vi";
          s0_len = 13;
          break;
        }
        case RISCV_VI_VSLIDEUP:{
          s0 = "vslideup.vi";
          s0_len = 11;
          break;
        }
      }
      spc( &s1, &s1_len);
      switch (tree->ast_node.visg.vd) { 
        case 0x08:{
          s2 = "v8";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "v21";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "v1";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "v6";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "v9";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "v16";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "v27";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "v28";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "v22";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "v0";
          s2_len = 2;
          break;
        }
        case 0x0A:{
          s2 = "v10";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "v26";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "v23";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "v12";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "v24";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "v2";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "v31";
          s2_len = 3;
          break;
        }
        case 0x0B:{
          s2 = "v11";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "v7";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "v19";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "v4";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "v25";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "v18";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "v20";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "v14";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "v30";
          s2_len = 3;
          break;
        }
        case 0x11:{
          s2 = "v17";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "v3";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "v5";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "v29";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "v13";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "v15";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.visg.vs2) { 
        case 0x08:{
          s4 = "v8";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "v21";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "v1";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "v6";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "v9";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "v16";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "v27";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "v28";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "v22";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "v0";
          s4_len = 2;
          break;
        }
        case 0x0A:{
          s4 = "v10";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "v26";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "v23";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "v12";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "v24";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "v2";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "v31";
          s4_len = 3;
          break;
        }
        case 0x0B:{
          s4 = "v11";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "v7";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "v19";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "v4";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "v25";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "v18";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "v20";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "v14";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "v30";
          s4_len = 3;
          break;
        }
        case 0x11:{
          s4 = "v17";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "v3";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "v5";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "v29";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "v13";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "v15";
          s4_len = 3;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.visg.simm) { 
        case 0x08:{
          s6 = "fp";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "s5";
          s6_len = 2;
          break;
        }
        case 0x01:{
          s6 = "ra";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "t1";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "s1";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "a6";
          s6_len = 2;
          break;
        }
        case 0x1B:{
          s6 = "s11";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "t3";
          s6_len = 2;
          break;
        }
        case 0x16:{
          s6 = "s6";
          s6_len = 2;
          break;
        }
        case 0x00:{
          s6 = "zero";
          s6_len = 4;
          break;
        }
        case 0x0A:{
          s6 = "a0";
          s6_len = 2;
          break;
        }
        case 0x1A:{
          s6 = "s10";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "s7";
          s6_len = 2;
          break;
        }
        case 0x0C:{
          s6 = "a2";
          s6_len = 2;
          break;
        }
        case 0x18:{
          s6 = "s8";
          s6_len = 2;
          break;
        }
        case 0x02:{
          s6 = "sp";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "t6";
          s6_len = 2;
          break;
        }
        case 0x0B:{
          s6 = "a1";
          s6_len = 2;
          break;
        }
        case 0x07:{
          s6 = "t2";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "s3";
          s6_len = 2;
          break;
        }
        case 0x04:{
          s6 = "tp";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "s9";
          s6_len = 2;
          break;
        }
        case 0x12:{
          s6 = "s2";
          s6_len = 2;
          break;
        }
        case 0x14:{
          s6 = "s4";
          s6_len = 2;
          break;
        }
        case 0x0E:{
          s6 = "a4";
          s6_len = 2;
          break;
        }
        case 0x1E:{
          s6 = "t5";
          s6_len = 2;
          break;
        }
        case 0x11:{
          s6 = "a7";
          s6_len = 2;
          break;
        }
        case 0x03:{
          s6 = "gp";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "t0";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "t4";
          s6_len = 2;
          break;
        }
        case 0x0D:{
          s6 = "a3";
          s6_len = 2;
          break;
        }
        case 0x0F:{
          s6 = "a5";
          s6_len = 2;
          break;
        }
      }
      maybe_vmask(tree->ast_node.visg.vm, &s7, &s7_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      }
    }
    break;
    case RISCV_MASKTYPEI: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      char *s8; size_t s8_len;
      s0 = "vmerge.vim";
      s0_len = 10;
      spc( &s1, &s1_len);
      switch (tree->ast_node.masktypei.vd) { 
        case 0x08:{
          s2 = "v8";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "v21";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "v1";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "v6";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "v9";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "v16";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "v27";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "v28";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "v22";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "v0";
          s2_len = 2;
          break;
        }
        case 0x0A:{
          s2 = "v10";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "v26";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "v23";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "v12";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "v24";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "v2";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "v31";
          s2_len = 3;
          break;
        }
        case 0x0B:{
          s2 = "v11";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "v7";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "v19";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "v4";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "v25";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "v18";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "v20";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "v14";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "v30";
          s2_len = 3;
          break;
        }
        case 0x11:{
          s2 = "v17";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "v3";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "v5";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "v29";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "v13";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "v15";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.masktypei.vs2) { 
        case 0x08:{
          s4 = "v8";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "v21";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "v1";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "v6";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "v9";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "v16";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "v27";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "v28";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "v22";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "v0";
          s4_len = 2;
          break;
        }
        case 0x0A:{
          s4 = "v10";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "v26";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "v23";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "v12";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "v24";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "v2";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "v31";
          s4_len = 3;
          break;
        }
        case 0x0B:{
          s4 = "v11";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "v7";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "v19";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "v4";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "v25";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "v18";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "v20";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "v14";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "v30";
          s4_len = 3;
          break;
        }
        case 0x11:{
          s4 = "v17";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "v3";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "v5";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "v29";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "v13";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "v15";
          s4_len = 3;
          break;
        }
      }
      sep( &s5, &s5_len);
      hex_bits_5(tree->ast_node.masktypei.simm, &s6, &s6_len);
      sep( &s7, &s7_len);
      s8 = "v0";
      s8_len = 2;
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len, s8, s8_len);
      }
    }
    break;
    case RISCV_MOVETYPEI: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      s0 = "vmv.v.i";
      s0_len = 7;
      spc( &s1, &s1_len);
      switch (tree->ast_node.movetypei.vd) { 
        case 0x08:{
          s2 = "v8";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "v21";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "v1";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "v6";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "v9";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "v16";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "v27";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "v28";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "v22";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "v0";
          s2_len = 2;
          break;
        }
        case 0x0A:{
          s2 = "v10";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "v26";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "v23";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "v12";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "v24";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "v2";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "v31";
          s2_len = 3;
          break;
        }
        case 0x0B:{
          s2 = "v11";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "v7";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "v19";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "v4";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "v25";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "v18";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "v20";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "v14";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "v30";
          s2_len = 3;
          break;
        }
        case 0x11:{
          s2 = "v17";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "v3";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "v5";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "v29";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "v13";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "v15";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      hex_bits_5(tree->ast_node.movetypei.simm, &s4, &s4_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      }
    }
    break;
    case RISCV_VMVRTYPE: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      s0 = "vmv";
      s0_len = 3;
      switch (tree->ast_node.vmvrtype.simm) { 
        case 0x01:{
          s1 = "2";
          s1_len = 1;
          break;
        }
        case 0x07:{
          s1 = "8";
          s1_len = 1;
          break;
        }
        case 0x00:{
          s1 = "1";
          s1_len = 1;
          break;
        }
        case 0x03:{
          s1 = "4";
          s1_len = 1;
          break;
        }
      }
      s2 = "r.v";
      s2_len = 3;
      spc( &s3, &s3_len);
      switch (tree->ast_node.vmvrtype.vd) { 
        case 0x08:{
          s4 = "v8";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "v21";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "v1";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "v6";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "v9";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "v16";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "v27";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "v28";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "v22";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "v0";
          s4_len = 2;
          break;
        }
        case 0x0A:{
          s4 = "v10";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "v26";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "v23";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "v12";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "v24";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "v2";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "v31";
          s4_len = 3;
          break;
        }
        case 0x0B:{
          s4 = "v11";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "v7";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "v19";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "v4";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "v25";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "v18";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "v20";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "v14";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "v30";
          s4_len = 3;
          break;
        }
        case 0x11:{
          s4 = "v17";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "v3";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "v5";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "v29";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "v13";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "v15";
          s4_len = 3;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.vmvrtype.vs2) { 
        case 0x08:{
          s6 = "v8";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "v21";
          s6_len = 3;
          break;
        }
        case 0x01:{
          s6 = "v1";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "v6";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "v9";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "v16";
          s6_len = 3;
          break;
        }
        case 0x1B:{
          s6 = "v27";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "v28";
          s6_len = 3;
          break;
        }
        case 0x16:{
          s6 = "v22";
          s6_len = 3;
          break;
        }
        case 0x00:{
          s6 = "v0";
          s6_len = 2;
          break;
        }
        case 0x0A:{
          s6 = "v10";
          s6_len = 3;
          break;
        }
        case 0x1A:{
          s6 = "v26";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "v23";
          s6_len = 3;
          break;
        }
        case 0x0C:{
          s6 = "v12";
          s6_len = 3;
          break;
        }
        case 0x18:{
          s6 = "v24";
          s6_len = 3;
          break;
        }
        case 0x02:{
          s6 = "v2";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "v31";
          s6_len = 3;
          break;
        }
        case 0x0B:{
          s6 = "v11";
          s6_len = 3;
          break;
        }
        case 0x07:{
          s6 = "v7";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "v19";
          s6_len = 3;
          break;
        }
        case 0x04:{
          s6 = "v4";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "v25";
          s6_len = 3;
          break;
        }
        case 0x12:{
          s6 = "v18";
          s6_len = 3;
          break;
        }
        case 0x14:{
          s6 = "v20";
          s6_len = 3;
          break;
        }
        case 0x0E:{
          s6 = "v14";
          s6_len = 3;
          break;
        }
        case 0x1E:{
          s6 = "v30";
          s6_len = 3;
          break;
        }
        case 0x11:{
          s6 = "v17";
          s6_len = 3;
          break;
        }
        case 0x03:{
          s6 = "v3";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "v5";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "v29";
          s6_len = 3;
          break;
        }
        case 0x0D:{
          s6 = "v13";
          s6_len = 3;
          break;
        }
        case 0x0F:{
          s6 = "v15";
          s6_len = 3;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
    }
    break;
    case RISCV_MVVTYPE: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      switch (tree->ast_node.mvvtype.funct6) { 
        case RISCV_MVV_VDIV:{
          s0 = "vdiv.vv";
          s0_len = 7;
          break;
        }
        case RISCV_MVV_VREMU:{
          s0 = "vremu.vv";
          s0_len = 8;
          break;
        }
        case RISCV_MVV_VAADDU:{
          s0 = "vaaddu.vv";
          s0_len = 9;
          break;
        }
        case RISCV_MVV_VMULHSU:{
          s0 = "vmulhsu.vv";
          s0_len = 10;
          break;
        }
        case RISCV_MVV_VASUB:{
          s0 = "vasub.vv";
          s0_len = 8;
          break;
        }
        case RISCV_MVV_VMULHU:{
          s0 = "vmulhu.vv";
          s0_len = 9;
          break;
        }
        case RISCV_MVV_VDIVU:{
          s0 = "vdivu.vv";
          s0_len = 8;
          break;
        }
        case RISCV_MVV_VMULH:{
          s0 = "vmulh.vv";
          s0_len = 8;
          break;
        }
        case RISCV_MVV_VAADD:{
          s0 = "vaadd.vv";
          s0_len = 8;
          break;
        }
        case RISCV_MVV_VMUL:{
          s0 = "vmul.vv";
          s0_len = 7;
          break;
        }
        case RISCV_MVV_VREM:{
          s0 = "vrem.vv";
          s0_len = 7;
          break;
        }
        case RISCV_MVV_VASUBU:{
          s0 = "vasubu.vv";
          s0_len = 9;
          break;
        }
      }
      spc( &s1, &s1_len);
      switch (tree->ast_node.mvvtype.vd) { 
        case 0x08:{
          s2 = "v8";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "v21";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "v1";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "v6";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "v9";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "v16";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "v27";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "v28";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "v22";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "v0";
          s2_len = 2;
          break;
        }
        case 0x0A:{
          s2 = "v10";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "v26";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "v23";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "v12";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "v24";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "v2";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "v31";
          s2_len = 3;
          break;
        }
        case 0x0B:{
          s2 = "v11";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "v7";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "v19";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "v4";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "v25";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "v18";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "v20";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "v14";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "v30";
          s2_len = 3;
          break;
        }
        case 0x11:{
          s2 = "v17";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "v3";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "v5";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "v29";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "v13";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "v15";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.mvvtype.vs2) { 
        case 0x08:{
          s4 = "v8";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "v21";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "v1";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "v6";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "v9";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "v16";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "v27";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "v28";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "v22";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "v0";
          s4_len = 2;
          break;
        }
        case 0x0A:{
          s4 = "v10";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "v26";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "v23";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "v12";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "v24";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "v2";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "v31";
          s4_len = 3;
          break;
        }
        case 0x0B:{
          s4 = "v11";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "v7";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "v19";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "v4";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "v25";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "v18";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "v20";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "v14";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "v30";
          s4_len = 3;
          break;
        }
        case 0x11:{
          s4 = "v17";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "v3";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "v5";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "v29";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "v13";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "v15";
          s4_len = 3;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.mvvtype.vs1) { 
        case 0x08:{
          s6 = "v8";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "v21";
          s6_len = 3;
          break;
        }
        case 0x01:{
          s6 = "v1";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "v6";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "v9";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "v16";
          s6_len = 3;
          break;
        }
        case 0x1B:{
          s6 = "v27";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "v28";
          s6_len = 3;
          break;
        }
        case 0x16:{
          s6 = "v22";
          s6_len = 3;
          break;
        }
        case 0x00:{
          s6 = "v0";
          s6_len = 2;
          break;
        }
        case 0x0A:{
          s6 = "v10";
          s6_len = 3;
          break;
        }
        case 0x1A:{
          s6 = "v26";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "v23";
          s6_len = 3;
          break;
        }
        case 0x0C:{
          s6 = "v12";
          s6_len = 3;
          break;
        }
        case 0x18:{
          s6 = "v24";
          s6_len = 3;
          break;
        }
        case 0x02:{
          s6 = "v2";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "v31";
          s6_len = 3;
          break;
        }
        case 0x0B:{
          s6 = "v11";
          s6_len = 3;
          break;
        }
        case 0x07:{
          s6 = "v7";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "v19";
          s6_len = 3;
          break;
        }
        case 0x04:{
          s6 = "v4";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "v25";
          s6_len = 3;
          break;
        }
        case 0x12:{
          s6 = "v18";
          s6_len = 3;
          break;
        }
        case 0x14:{
          s6 = "v20";
          s6_len = 3;
          break;
        }
        case 0x0E:{
          s6 = "v14";
          s6_len = 3;
          break;
        }
        case 0x1E:{
          s6 = "v30";
          s6_len = 3;
          break;
        }
        case 0x11:{
          s6 = "v17";
          s6_len = 3;
          break;
        }
        case 0x03:{
          s6 = "v3";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "v5";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "v29";
          s6_len = 3;
          break;
        }
        case 0x0D:{
          s6 = "v13";
          s6_len = 3;
          break;
        }
        case 0x0F:{
          s6 = "v15";
          s6_len = 3;
          break;
        }
      }
      maybe_vmask(tree->ast_node.mvvtype.vm, &s7, &s7_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      }
    }
    break;
    case RISCV_MVVMATYPE: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      switch (tree->ast_node.mvvmatype.funct6) { 
        case RISCV_MVV_VMACC:{
          s0 = "vmacc.vv";
          s0_len = 8;
          break;
        }
        case RISCV_MVV_VNMSUB:{
          s0 = "vnmsub.vv";
          s0_len = 9;
          break;
        }
        case RISCV_MVV_VNMSAC:{
          s0 = "vnmsac.vv";
          s0_len = 9;
          break;
        }
        case RISCV_MVV_VMADD:{
          s0 = "vmadd.vv";
          s0_len = 8;
          break;
        }
      }
      spc( &s1, &s1_len);
      switch (tree->ast_node.mvvmatype.vd) { 
        case 0x08:{
          s2 = "v8";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "v21";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "v1";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "v6";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "v9";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "v16";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "v27";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "v28";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "v22";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "v0";
          s2_len = 2;
          break;
        }
        case 0x0A:{
          s2 = "v10";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "v26";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "v23";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "v12";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "v24";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "v2";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "v31";
          s2_len = 3;
          break;
        }
        case 0x0B:{
          s2 = "v11";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "v7";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "v19";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "v4";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "v25";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "v18";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "v20";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "v14";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "v30";
          s2_len = 3;
          break;
        }
        case 0x11:{
          s2 = "v17";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "v3";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "v5";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "v29";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "v13";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "v15";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.mvvmatype.vs1) { 
        case 0x08:{
          s4 = "v8";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "v21";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "v1";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "v6";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "v9";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "v16";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "v27";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "v28";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "v22";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "v0";
          s4_len = 2;
          break;
        }
        case 0x0A:{
          s4 = "v10";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "v26";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "v23";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "v12";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "v24";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "v2";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "v31";
          s4_len = 3;
          break;
        }
        case 0x0B:{
          s4 = "v11";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "v7";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "v19";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "v4";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "v25";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "v18";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "v20";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "v14";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "v30";
          s4_len = 3;
          break;
        }
        case 0x11:{
          s4 = "v17";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "v3";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "v5";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "v29";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "v13";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "v15";
          s4_len = 3;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.mvvmatype.vs2) { 
        case 0x08:{
          s6 = "v8";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "v21";
          s6_len = 3;
          break;
        }
        case 0x01:{
          s6 = "v1";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "v6";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "v9";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "v16";
          s6_len = 3;
          break;
        }
        case 0x1B:{
          s6 = "v27";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "v28";
          s6_len = 3;
          break;
        }
        case 0x16:{
          s6 = "v22";
          s6_len = 3;
          break;
        }
        case 0x00:{
          s6 = "v0";
          s6_len = 2;
          break;
        }
        case 0x0A:{
          s6 = "v10";
          s6_len = 3;
          break;
        }
        case 0x1A:{
          s6 = "v26";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "v23";
          s6_len = 3;
          break;
        }
        case 0x0C:{
          s6 = "v12";
          s6_len = 3;
          break;
        }
        case 0x18:{
          s6 = "v24";
          s6_len = 3;
          break;
        }
        case 0x02:{
          s6 = "v2";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "v31";
          s6_len = 3;
          break;
        }
        case 0x0B:{
          s6 = "v11";
          s6_len = 3;
          break;
        }
        case 0x07:{
          s6 = "v7";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "v19";
          s6_len = 3;
          break;
        }
        case 0x04:{
          s6 = "v4";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "v25";
          s6_len = 3;
          break;
        }
        case 0x12:{
          s6 = "v18";
          s6_len = 3;
          break;
        }
        case 0x14:{
          s6 = "v20";
          s6_len = 3;
          break;
        }
        case 0x0E:{
          s6 = "v14";
          s6_len = 3;
          break;
        }
        case 0x1E:{
          s6 = "v30";
          s6_len = 3;
          break;
        }
        case 0x11:{
          s6 = "v17";
          s6_len = 3;
          break;
        }
        case 0x03:{
          s6 = "v3";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "v5";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "v29";
          s6_len = 3;
          break;
        }
        case 0x0D:{
          s6 = "v13";
          s6_len = 3;
          break;
        }
        case 0x0F:{
          s6 = "v15";
          s6_len = 3;
          break;
        }
      }
      maybe_vmask(tree->ast_node.mvvmatype.vm, &s7, &s7_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      }
    }
    break;
    case RISCV_WVVTYPE: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      switch (tree->ast_node.wvvtype.funct6) { 
        case RISCV_WVV_VSUBU:{
          s0 = "vwsubu.vv";
          s0_len = 9;
          break;
        }
        case RISCV_WVV_VWMULSU:{
          s0 = "vwmulsu.vv";
          s0_len = 10;
          break;
        }
        case RISCV_WVV_VADD:{
          s0 = "vwadd.vv";
          s0_len = 8;
          break;
        }
        case RISCV_WVV_VWMUL:{
          s0 = "vwmul.vv";
          s0_len = 8;
          break;
        }
        case RISCV_WVV_VADDU:{
          s0 = "vwaddu.vv";
          s0_len = 9;
          break;
        }
        case RISCV_WVV_VWMULU:{
          s0 = "vwmulu.vv";
          s0_len = 9;
          break;
        }
        case RISCV_WVV_VSUB:{
          s0 = "vwsub.vv";
          s0_len = 8;
          break;
        }
      }
      spc( &s1, &s1_len);
      switch (tree->ast_node.wvvtype.vd) { 
        case 0x08:{
          s2 = "v8";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "v21";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "v1";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "v6";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "v9";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "v16";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "v27";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "v28";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "v22";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "v0";
          s2_len = 2;
          break;
        }
        case 0x0A:{
          s2 = "v10";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "v26";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "v23";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "v12";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "v24";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "v2";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "v31";
          s2_len = 3;
          break;
        }
        case 0x0B:{
          s2 = "v11";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "v7";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "v19";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "v4";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "v25";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "v18";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "v20";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "v14";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "v30";
          s2_len = 3;
          break;
        }
        case 0x11:{
          s2 = "v17";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "v3";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "v5";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "v29";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "v13";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "v15";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.wvvtype.vs2) { 
        case 0x08:{
          s4 = "v8";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "v21";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "v1";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "v6";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "v9";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "v16";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "v27";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "v28";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "v22";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "v0";
          s4_len = 2;
          break;
        }
        case 0x0A:{
          s4 = "v10";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "v26";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "v23";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "v12";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "v24";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "v2";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "v31";
          s4_len = 3;
          break;
        }
        case 0x0B:{
          s4 = "v11";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "v7";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "v19";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "v4";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "v25";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "v18";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "v20";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "v14";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "v30";
          s4_len = 3;
          break;
        }
        case 0x11:{
          s4 = "v17";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "v3";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "v5";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "v29";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "v13";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "v15";
          s4_len = 3;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.wvvtype.vs1) { 
        case 0x08:{
          s6 = "v8";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "v21";
          s6_len = 3;
          break;
        }
        case 0x01:{
          s6 = "v1";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "v6";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "v9";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "v16";
          s6_len = 3;
          break;
        }
        case 0x1B:{
          s6 = "v27";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "v28";
          s6_len = 3;
          break;
        }
        case 0x16:{
          s6 = "v22";
          s6_len = 3;
          break;
        }
        case 0x00:{
          s6 = "v0";
          s6_len = 2;
          break;
        }
        case 0x0A:{
          s6 = "v10";
          s6_len = 3;
          break;
        }
        case 0x1A:{
          s6 = "v26";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "v23";
          s6_len = 3;
          break;
        }
        case 0x0C:{
          s6 = "v12";
          s6_len = 3;
          break;
        }
        case 0x18:{
          s6 = "v24";
          s6_len = 3;
          break;
        }
        case 0x02:{
          s6 = "v2";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "v31";
          s6_len = 3;
          break;
        }
        case 0x0B:{
          s6 = "v11";
          s6_len = 3;
          break;
        }
        case 0x07:{
          s6 = "v7";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "v19";
          s6_len = 3;
          break;
        }
        case 0x04:{
          s6 = "v4";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "v25";
          s6_len = 3;
          break;
        }
        case 0x12:{
          s6 = "v18";
          s6_len = 3;
          break;
        }
        case 0x14:{
          s6 = "v20";
          s6_len = 3;
          break;
        }
        case 0x0E:{
          s6 = "v14";
          s6_len = 3;
          break;
        }
        case 0x1E:{
          s6 = "v30";
          s6_len = 3;
          break;
        }
        case 0x11:{
          s6 = "v17";
          s6_len = 3;
          break;
        }
        case 0x03:{
          s6 = "v3";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "v5";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "v29";
          s6_len = 3;
          break;
        }
        case 0x0D:{
          s6 = "v13";
          s6_len = 3;
          break;
        }
        case 0x0F:{
          s6 = "v15";
          s6_len = 3;
          break;
        }
      }
      maybe_vmask(tree->ast_node.wvvtype.vm, &s7, &s7_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      }
    }
    break;
    case RISCV_WVTYPE: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      switch (tree->ast_node.wvtype.funct6) { 
        case RISCV_WV_VSUB:{
          s0 = "vwsub.wv";
          s0_len = 8;
          break;
        }
        case RISCV_WV_VADDU:{
          s0 = "vwaddu.wv";
          s0_len = 9;
          break;
        }
        case RISCV_WV_VSUBU:{
          s0 = "vwsubu.wv";
          s0_len = 9;
          break;
        }
        case RISCV_WV_VADD:{
          s0 = "vwadd.wv";
          s0_len = 8;
          break;
        }
      }
      spc( &s1, &s1_len);
      switch (tree->ast_node.wvtype.vd) { 
        case 0x08:{
          s2 = "v8";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "v21";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "v1";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "v6";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "v9";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "v16";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "v27";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "v28";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "v22";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "v0";
          s2_len = 2;
          break;
        }
        case 0x0A:{
          s2 = "v10";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "v26";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "v23";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "v12";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "v24";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "v2";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "v31";
          s2_len = 3;
          break;
        }
        case 0x0B:{
          s2 = "v11";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "v7";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "v19";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "v4";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "v25";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "v18";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "v20";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "v14";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "v30";
          s2_len = 3;
          break;
        }
        case 0x11:{
          s2 = "v17";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "v3";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "v5";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "v29";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "v13";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "v15";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.wvtype.vs2) { 
        case 0x08:{
          s4 = "v8";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "v21";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "v1";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "v6";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "v9";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "v16";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "v27";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "v28";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "v22";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "v0";
          s4_len = 2;
          break;
        }
        case 0x0A:{
          s4 = "v10";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "v26";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "v23";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "v12";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "v24";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "v2";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "v31";
          s4_len = 3;
          break;
        }
        case 0x0B:{
          s4 = "v11";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "v7";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "v19";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "v4";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "v25";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "v18";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "v20";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "v14";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "v30";
          s4_len = 3;
          break;
        }
        case 0x11:{
          s4 = "v17";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "v3";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "v5";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "v29";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "v13";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "v15";
          s4_len = 3;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.wvtype.vs1) { 
        case 0x08:{
          s6 = "v8";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "v21";
          s6_len = 3;
          break;
        }
        case 0x01:{
          s6 = "v1";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "v6";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "v9";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "v16";
          s6_len = 3;
          break;
        }
        case 0x1B:{
          s6 = "v27";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "v28";
          s6_len = 3;
          break;
        }
        case 0x16:{
          s6 = "v22";
          s6_len = 3;
          break;
        }
        case 0x00:{
          s6 = "v0";
          s6_len = 2;
          break;
        }
        case 0x0A:{
          s6 = "v10";
          s6_len = 3;
          break;
        }
        case 0x1A:{
          s6 = "v26";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "v23";
          s6_len = 3;
          break;
        }
        case 0x0C:{
          s6 = "v12";
          s6_len = 3;
          break;
        }
        case 0x18:{
          s6 = "v24";
          s6_len = 3;
          break;
        }
        case 0x02:{
          s6 = "v2";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "v31";
          s6_len = 3;
          break;
        }
        case 0x0B:{
          s6 = "v11";
          s6_len = 3;
          break;
        }
        case 0x07:{
          s6 = "v7";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "v19";
          s6_len = 3;
          break;
        }
        case 0x04:{
          s6 = "v4";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "v25";
          s6_len = 3;
          break;
        }
        case 0x12:{
          s6 = "v18";
          s6_len = 3;
          break;
        }
        case 0x14:{
          s6 = "v20";
          s6_len = 3;
          break;
        }
        case 0x0E:{
          s6 = "v14";
          s6_len = 3;
          break;
        }
        case 0x1E:{
          s6 = "v30";
          s6_len = 3;
          break;
        }
        case 0x11:{
          s6 = "v17";
          s6_len = 3;
          break;
        }
        case 0x03:{
          s6 = "v3";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "v5";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "v29";
          s6_len = 3;
          break;
        }
        case 0x0D:{
          s6 = "v13";
          s6_len = 3;
          break;
        }
        case 0x0F:{
          s6 = "v15";
          s6_len = 3;
          break;
        }
      }
      maybe_vmask(tree->ast_node.wvtype.vm, &s7, &s7_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      }
    }
    break;
    case RISCV_WMVVTYPE: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      switch (tree->ast_node.wmvvtype.funct6) { 
        case RISCV_WMVV_VWMACCU:{
          s0 = "vwmaccu.vv";
          s0_len = 10;
          break;
        }
        case RISCV_WMVV_VWMACCSU:{
          s0 = "vwmaccsu.vv";
          s0_len = 11;
          break;
        }
        case RISCV_WMVV_VWMACC:{
          s0 = "vwmacc.vv";
          s0_len = 9;
          break;
        }
      }
      spc( &s1, &s1_len);
      switch (tree->ast_node.wmvvtype.vd) { 
        case 0x08:{
          s2 = "v8";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "v21";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "v1";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "v6";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "v9";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "v16";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "v27";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "v28";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "v22";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "v0";
          s2_len = 2;
          break;
        }
        case 0x0A:{
          s2 = "v10";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "v26";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "v23";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "v12";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "v24";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "v2";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "v31";
          s2_len = 3;
          break;
        }
        case 0x0B:{
          s2 = "v11";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "v7";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "v19";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "v4";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "v25";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "v18";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "v20";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "v14";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "v30";
          s2_len = 3;
          break;
        }
        case 0x11:{
          s2 = "v17";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "v3";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "v5";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "v29";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "v13";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "v15";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.wmvvtype.vs1) { 
        case 0x08:{
          s4 = "v8";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "v21";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "v1";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "v6";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "v9";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "v16";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "v27";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "v28";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "v22";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "v0";
          s4_len = 2;
          break;
        }
        case 0x0A:{
          s4 = "v10";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "v26";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "v23";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "v12";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "v24";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "v2";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "v31";
          s4_len = 3;
          break;
        }
        case 0x0B:{
          s4 = "v11";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "v7";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "v19";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "v4";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "v25";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "v18";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "v20";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "v14";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "v30";
          s4_len = 3;
          break;
        }
        case 0x11:{
          s4 = "v17";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "v3";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "v5";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "v29";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "v13";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "v15";
          s4_len = 3;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.wmvvtype.vs2) { 
        case 0x08:{
          s6 = "v8";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "v21";
          s6_len = 3;
          break;
        }
        case 0x01:{
          s6 = "v1";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "v6";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "v9";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "v16";
          s6_len = 3;
          break;
        }
        case 0x1B:{
          s6 = "v27";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "v28";
          s6_len = 3;
          break;
        }
        case 0x16:{
          s6 = "v22";
          s6_len = 3;
          break;
        }
        case 0x00:{
          s6 = "v0";
          s6_len = 2;
          break;
        }
        case 0x0A:{
          s6 = "v10";
          s6_len = 3;
          break;
        }
        case 0x1A:{
          s6 = "v26";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "v23";
          s6_len = 3;
          break;
        }
        case 0x0C:{
          s6 = "v12";
          s6_len = 3;
          break;
        }
        case 0x18:{
          s6 = "v24";
          s6_len = 3;
          break;
        }
        case 0x02:{
          s6 = "v2";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "v31";
          s6_len = 3;
          break;
        }
        case 0x0B:{
          s6 = "v11";
          s6_len = 3;
          break;
        }
        case 0x07:{
          s6 = "v7";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "v19";
          s6_len = 3;
          break;
        }
        case 0x04:{
          s6 = "v4";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "v25";
          s6_len = 3;
          break;
        }
        case 0x12:{
          s6 = "v18";
          s6_len = 3;
          break;
        }
        case 0x14:{
          s6 = "v20";
          s6_len = 3;
          break;
        }
        case 0x0E:{
          s6 = "v14";
          s6_len = 3;
          break;
        }
        case 0x1E:{
          s6 = "v30";
          s6_len = 3;
          break;
        }
        case 0x11:{
          s6 = "v17";
          s6_len = 3;
          break;
        }
        case 0x03:{
          s6 = "v3";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "v5";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "v29";
          s6_len = 3;
          break;
        }
        case 0x0D:{
          s6 = "v13";
          s6_len = 3;
          break;
        }
        case 0x0F:{
          s6 = "v15";
          s6_len = 3;
          break;
        }
      }
      maybe_vmask(tree->ast_node.wmvvtype.vm, &s7, &s7_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      }
    }
    break;
    case RISCV_VEXT2TYPE: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      switch (tree->ast_node.vext2type.funct6) { 
        case RISCV_VEXT2_SVF2:{
          s0 = "vsext.vf2";
          s0_len = 9;
          break;
        }
        case RISCV_VEXT2_ZVF2:{
          s0 = "vzext.vf2";
          s0_len = 9;
          break;
        }
      }
      spc( &s1, &s1_len);
      switch (tree->ast_node.vext2type.vd) { 
        case 0x08:{
          s2 = "v8";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "v21";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "v1";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "v6";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "v9";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "v16";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "v27";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "v28";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "v22";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "v0";
          s2_len = 2;
          break;
        }
        case 0x0A:{
          s2 = "v10";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "v26";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "v23";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "v12";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "v24";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "v2";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "v31";
          s2_len = 3;
          break;
        }
        case 0x0B:{
          s2 = "v11";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "v7";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "v19";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "v4";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "v25";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "v18";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "v20";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "v14";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "v30";
          s2_len = 3;
          break;
        }
        case 0x11:{
          s2 = "v17";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "v3";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "v5";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "v29";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "v13";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "v15";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.vext2type.vs2) { 
        case 0x08:{
          s4 = "v8";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "v21";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "v1";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "v6";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "v9";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "v16";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "v27";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "v28";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "v22";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "v0";
          s4_len = 2;
          break;
        }
        case 0x0A:{
          s4 = "v10";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "v26";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "v23";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "v12";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "v24";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "v2";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "v31";
          s4_len = 3;
          break;
        }
        case 0x0B:{
          s4 = "v11";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "v7";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "v19";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "v4";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "v25";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "v18";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "v20";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "v14";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "v30";
          s4_len = 3;
          break;
        }
        case 0x11:{
          s4 = "v17";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "v3";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "v5";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "v29";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "v13";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "v15";
          s4_len = 3;
          break;
        }
      }
      maybe_vmask(tree->ast_node.vext2type.vm, &s5, &s5_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      }
    }
    break;
    case RISCV_VEXT4TYPE: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      switch (tree->ast_node.vext4type.funct6) { 
        case RISCV_VEXT4_ZVF4:{
          s0 = "vzext.vf4";
          s0_len = 9;
          break;
        }
        case RISCV_VEXT4_SVF4:{
          s0 = "vsext.vf4";
          s0_len = 9;
          break;
        }
      }
      spc( &s1, &s1_len);
      switch (tree->ast_node.vext4type.vd) { 
        case 0x08:{
          s2 = "v8";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "v21";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "v1";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "v6";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "v9";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "v16";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "v27";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "v28";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "v22";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "v0";
          s2_len = 2;
          break;
        }
        case 0x0A:{
          s2 = "v10";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "v26";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "v23";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "v12";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "v24";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "v2";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "v31";
          s2_len = 3;
          break;
        }
        case 0x0B:{
          s2 = "v11";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "v7";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "v19";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "v4";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "v25";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "v18";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "v20";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "v14";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "v30";
          s2_len = 3;
          break;
        }
        case 0x11:{
          s2 = "v17";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "v3";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "v5";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "v29";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "v13";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "v15";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.vext4type.vs2) { 
        case 0x08:{
          s4 = "v8";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "v21";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "v1";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "v6";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "v9";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "v16";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "v27";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "v28";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "v22";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "v0";
          s4_len = 2;
          break;
        }
        case 0x0A:{
          s4 = "v10";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "v26";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "v23";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "v12";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "v24";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "v2";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "v31";
          s4_len = 3;
          break;
        }
        case 0x0B:{
          s4 = "v11";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "v7";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "v19";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "v4";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "v25";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "v18";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "v20";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "v14";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "v30";
          s4_len = 3;
          break;
        }
        case 0x11:{
          s4 = "v17";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "v3";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "v5";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "v29";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "v13";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "v15";
          s4_len = 3;
          break;
        }
      }
      maybe_vmask(tree->ast_node.vext4type.vm, &s5, &s5_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      }
    }
    break;
    case RISCV_VEXT8TYPE: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      switch (tree->ast_node.vext8type.funct6) { 
        case RISCV_VEXT8_SVF8:{
          s0 = "vsext.vf8";
          s0_len = 9;
          break;
        }
        case RISCV_VEXT8_ZVF8:{
          s0 = "vzext.vf8";
          s0_len = 9;
          break;
        }
      }
      spc( &s1, &s1_len);
      switch (tree->ast_node.vext8type.vd) { 
        case 0x08:{
          s2 = "v8";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "v21";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "v1";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "v6";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "v9";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "v16";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "v27";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "v28";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "v22";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "v0";
          s2_len = 2;
          break;
        }
        case 0x0A:{
          s2 = "v10";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "v26";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "v23";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "v12";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "v24";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "v2";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "v31";
          s2_len = 3;
          break;
        }
        case 0x0B:{
          s2 = "v11";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "v7";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "v19";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "v4";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "v25";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "v18";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "v20";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "v14";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "v30";
          s2_len = 3;
          break;
        }
        case 0x11:{
          s2 = "v17";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "v3";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "v5";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "v29";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "v13";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "v15";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.vext8type.vs2) { 
        case 0x08:{
          s4 = "v8";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "v21";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "v1";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "v6";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "v9";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "v16";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "v27";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "v28";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "v22";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "v0";
          s4_len = 2;
          break;
        }
        case 0x0A:{
          s4 = "v10";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "v26";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "v23";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "v12";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "v24";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "v2";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "v31";
          s4_len = 3;
          break;
        }
        case 0x0B:{
          s4 = "v11";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "v7";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "v19";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "v4";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "v25";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "v18";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "v20";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "v14";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "v30";
          s4_len = 3;
          break;
        }
        case 0x11:{
          s4 = "v17";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "v3";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "v5";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "v29";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "v13";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "v15";
          s4_len = 3;
          break;
        }
      }
      maybe_vmask(tree->ast_node.vext8type.vm, &s5, &s5_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      }
    }
    break;
    case RISCV_VMVXS: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      s0 = "vmv.x.s";
      s0_len = 7;
      spc( &s1, &s1_len);
      switch (tree->ast_node.vmvxs.rd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.vmvxs.vs2) { 
        case 0x08:{
          s4 = "v8";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "v21";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "v1";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "v6";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "v9";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "v16";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "v27";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "v28";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "v22";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "v0";
          s4_len = 2;
          break;
        }
        case 0x0A:{
          s4 = "v10";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "v26";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "v23";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "v12";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "v24";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "v2";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "v31";
          s4_len = 3;
          break;
        }
        case 0x0B:{
          s4 = "v11";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "v7";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "v19";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "v4";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "v25";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "v18";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "v20";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "v14";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "v30";
          s4_len = 3;
          break;
        }
        case 0x11:{
          s4 = "v17";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "v3";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "v5";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "v29";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "v13";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "v15";
          s4_len = 3;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      }
    }
    break;
    case RISCV_MVVCOMPRESS: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      s0 = "vcompress.vm";
      s0_len = 12;
      spc( &s1, &s1_len);
      switch (tree->ast_node.mvvcompress.vd) { 
        case 0x08:{
          s2 = "v8";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "v21";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "v1";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "v6";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "v9";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "v16";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "v27";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "v28";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "v22";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "v0";
          s2_len = 2;
          break;
        }
        case 0x0A:{
          s2 = "v10";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "v26";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "v23";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "v12";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "v24";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "v2";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "v31";
          s2_len = 3;
          break;
        }
        case 0x0B:{
          s2 = "v11";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "v7";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "v19";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "v4";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "v25";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "v18";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "v20";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "v14";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "v30";
          s2_len = 3;
          break;
        }
        case 0x11:{
          s2 = "v17";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "v3";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "v5";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "v29";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "v13";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "v15";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.mvvcompress.vs2) { 
        case 0x08:{
          s4 = "v8";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "v21";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "v1";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "v6";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "v9";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "v16";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "v27";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "v28";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "v22";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "v0";
          s4_len = 2;
          break;
        }
        case 0x0A:{
          s4 = "v10";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "v26";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "v23";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "v12";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "v24";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "v2";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "v31";
          s4_len = 3;
          break;
        }
        case 0x0B:{
          s4 = "v11";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "v7";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "v19";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "v4";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "v25";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "v18";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "v20";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "v14";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "v30";
          s4_len = 3;
          break;
        }
        case 0x11:{
          s4 = "v17";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "v3";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "v5";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "v29";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "v13";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "v15";
          s4_len = 3;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.mvvcompress.vs1) { 
        case 0x08:{
          s6 = "v8";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "v21";
          s6_len = 3;
          break;
        }
        case 0x01:{
          s6 = "v1";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "v6";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "v9";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "v16";
          s6_len = 3;
          break;
        }
        case 0x1B:{
          s6 = "v27";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "v28";
          s6_len = 3;
          break;
        }
        case 0x16:{
          s6 = "v22";
          s6_len = 3;
          break;
        }
        case 0x00:{
          s6 = "v0";
          s6_len = 2;
          break;
        }
        case 0x0A:{
          s6 = "v10";
          s6_len = 3;
          break;
        }
        case 0x1A:{
          s6 = "v26";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "v23";
          s6_len = 3;
          break;
        }
        case 0x0C:{
          s6 = "v12";
          s6_len = 3;
          break;
        }
        case 0x18:{
          s6 = "v24";
          s6_len = 3;
          break;
        }
        case 0x02:{
          s6 = "v2";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "v31";
          s6_len = 3;
          break;
        }
        case 0x0B:{
          s6 = "v11";
          s6_len = 3;
          break;
        }
        case 0x07:{
          s6 = "v7";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "v19";
          s6_len = 3;
          break;
        }
        case 0x04:{
          s6 = "v4";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "v25";
          s6_len = 3;
          break;
        }
        case 0x12:{
          s6 = "v18";
          s6_len = 3;
          break;
        }
        case 0x14:{
          s6 = "v20";
          s6_len = 3;
          break;
        }
        case 0x0E:{
          s6 = "v14";
          s6_len = 3;
          break;
        }
        case 0x1E:{
          s6 = "v30";
          s6_len = 3;
          break;
        }
        case 0x11:{
          s6 = "v17";
          s6_len = 3;
          break;
        }
        case 0x03:{
          s6 = "v3";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "v5";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "v29";
          s6_len = 3;
          break;
        }
        case 0x0D:{
          s6 = "v13";
          s6_len = 3;
          break;
        }
        case 0x0F:{
          s6 = "v15";
          s6_len = 3;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
    }
    break;
    case RISCV_MVXTYPE: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      switch (tree->ast_node.mvxtype.funct6) { 
        case RISCV_MVX_VMUL:{
          s0 = "vmul.vx";
          s0_len = 7;
          break;
        }
        case RISCV_MVX_VREM:{
          s0 = "vrem.vx";
          s0_len = 7;
          break;
        }
        case RISCV_MVX_VMULH:{
          s0 = "vmulh.vx";
          s0_len = 8;
          break;
        }
        case RISCV_MVX_VDIV:{
          s0 = "vdiv.vx";
          s0_len = 7;
          break;
        }
        case RISCV_MVX_VAADDU:{
          s0 = "vaaddu.vx";
          s0_len = 9;
          break;
        }
        case RISCV_MVX_VSLIDE1DOWN:{
          s0 = "vslide1down.vx";
          s0_len = 14;
          break;
        }
        case RISCV_MVX_VMULHSU:{
          s0 = "vmulhsu.vx";
          s0_len = 10;
          break;
        }
        case RISCV_MVX_VSLIDE1UP:{
          s0 = "vslide1up.vx";
          s0_len = 12;
          break;
        }
        case RISCV_MVX_VMULHU:{
          s0 = "vmulhu.vx";
          s0_len = 9;
          break;
        }
        case RISCV_MVX_VASUBU:{
          s0 = "vasubu.vx";
          s0_len = 9;
          break;
        }
        case RISCV_MVX_VREMU:{
          s0 = "vremu.vx";
          s0_len = 8;
          break;
        }
        case RISCV_MVX_VDIVU:{
          s0 = "vdivu.vx";
          s0_len = 8;
          break;
        }
        case RISCV_MVX_VAADD:{
          s0 = "vaadd.vx";
          s0_len = 8;
          break;
        }
        case RISCV_MVX_VASUB:{
          s0 = "vasub.vx";
          s0_len = 8;
          break;
        }
      }
      spc( &s1, &s1_len);
      switch (tree->ast_node.mvxtype.vd) { 
        case 0x08:{
          s2 = "v8";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "v21";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "v1";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "v6";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "v9";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "v16";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "v27";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "v28";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "v22";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "v0";
          s2_len = 2;
          break;
        }
        case 0x0A:{
          s2 = "v10";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "v26";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "v23";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "v12";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "v24";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "v2";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "v31";
          s2_len = 3;
          break;
        }
        case 0x0B:{
          s2 = "v11";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "v7";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "v19";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "v4";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "v25";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "v18";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "v20";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "v14";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "v30";
          s2_len = 3;
          break;
        }
        case 0x11:{
          s2 = "v17";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "v3";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "v5";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "v29";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "v13";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "v15";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.mvxtype.vs2) { 
        case 0x08:{
          s4 = "v8";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "v21";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "v1";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "v6";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "v9";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "v16";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "v27";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "v28";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "v22";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "v0";
          s4_len = 2;
          break;
        }
        case 0x0A:{
          s4 = "v10";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "v26";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "v23";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "v12";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "v24";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "v2";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "v31";
          s4_len = 3;
          break;
        }
        case 0x0B:{
          s4 = "v11";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "v7";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "v19";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "v4";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "v25";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "v18";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "v20";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "v14";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "v30";
          s4_len = 3;
          break;
        }
        case 0x11:{
          s4 = "v17";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "v3";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "v5";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "v29";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "v13";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "v15";
          s4_len = 3;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.mvxtype.rs1) { 
        case 0x08:{
          s6 = "fp";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "s5";
          s6_len = 2;
          break;
        }
        case 0x01:{
          s6 = "ra";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "t1";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "s1";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "a6";
          s6_len = 2;
          break;
        }
        case 0x1B:{
          s6 = "s11";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "t3";
          s6_len = 2;
          break;
        }
        case 0x16:{
          s6 = "s6";
          s6_len = 2;
          break;
        }
        case 0x00:{
          s6 = "zero";
          s6_len = 4;
          break;
        }
        case 0x0A:{
          s6 = "a0";
          s6_len = 2;
          break;
        }
        case 0x1A:{
          s6 = "s10";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "s7";
          s6_len = 2;
          break;
        }
        case 0x0C:{
          s6 = "a2";
          s6_len = 2;
          break;
        }
        case 0x18:{
          s6 = "s8";
          s6_len = 2;
          break;
        }
        case 0x02:{
          s6 = "sp";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "t6";
          s6_len = 2;
          break;
        }
        case 0x0B:{
          s6 = "a1";
          s6_len = 2;
          break;
        }
        case 0x07:{
          s6 = "t2";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "s3";
          s6_len = 2;
          break;
        }
        case 0x04:{
          s6 = "tp";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "s9";
          s6_len = 2;
          break;
        }
        case 0x12:{
          s6 = "s2";
          s6_len = 2;
          break;
        }
        case 0x14:{
          s6 = "s4";
          s6_len = 2;
          break;
        }
        case 0x0E:{
          s6 = "a4";
          s6_len = 2;
          break;
        }
        case 0x1E:{
          s6 = "t5";
          s6_len = 2;
          break;
        }
        case 0x11:{
          s6 = "a7";
          s6_len = 2;
          break;
        }
        case 0x03:{
          s6 = "gp";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "t0";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "t4";
          s6_len = 2;
          break;
        }
        case 0x0D:{
          s6 = "a3";
          s6_len = 2;
          break;
        }
        case 0x0F:{
          s6 = "a5";
          s6_len = 2;
          break;
        }
      }
      maybe_vmask(tree->ast_node.mvxtype.vm, &s7, &s7_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      }
    }
    break;
    case RISCV_MVXMATYPE: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      switch (tree->ast_node.mvxmatype.funct6) { 
        case RISCV_MVX_VNMSAC:{
          s0 = "vnmsac.vx";
          s0_len = 9;
          break;
        }
        case RISCV_MVX_VMADD:{
          s0 = "vmadd.vx";
          s0_len = 8;
          break;
        }
        case RISCV_MVX_VMACC:{
          s0 = "vmacc.vx";
          s0_len = 8;
          break;
        }
        case RISCV_MVX_VNMSUB:{
          s0 = "vnmsub.vx";
          s0_len = 9;
          break;
        }
      }
      spc( &s1, &s1_len);
      switch (tree->ast_node.mvxmatype.vd) { 
        case 0x08:{
          s2 = "v8";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "v21";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "v1";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "v6";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "v9";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "v16";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "v27";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "v28";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "v22";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "v0";
          s2_len = 2;
          break;
        }
        case 0x0A:{
          s2 = "v10";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "v26";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "v23";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "v12";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "v24";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "v2";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "v31";
          s2_len = 3;
          break;
        }
        case 0x0B:{
          s2 = "v11";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "v7";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "v19";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "v4";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "v25";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "v18";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "v20";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "v14";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "v30";
          s2_len = 3;
          break;
        }
        case 0x11:{
          s2 = "v17";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "v3";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "v5";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "v29";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "v13";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "v15";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.mvxmatype.rs1) { 
        case 0x08:{
          s4 = "fp";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "s5";
          s4_len = 2;
          break;
        }
        case 0x01:{
          s4 = "ra";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "t1";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "a6";
          s4_len = 2;
          break;
        }
        case 0x1B:{
          s4 = "s11";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "t3";
          s4_len = 2;
          break;
        }
        case 0x16:{
          s4 = "s6";
          s4_len = 2;
          break;
        }
        case 0x00:{
          s4 = "zero";
          s4_len = 4;
          break;
        }
        case 0x0A:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x1A:{
          s4 = "s10";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "s7";
          s4_len = 2;
          break;
        }
        case 0x0C:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x18:{
          s4 = "s8";
          s4_len = 2;
          break;
        }
        case 0x02:{
          s4 = "sp";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "t6";
          s4_len = 2;
          break;
        }
        case 0x0B:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x07:{
          s4 = "t2";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "s3";
          s4_len = 2;
          break;
        }
        case 0x04:{
          s4 = "tp";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "s9";
          s4_len = 2;
          break;
        }
        case 0x12:{
          s4 = "s2";
          s4_len = 2;
          break;
        }
        case 0x14:{
          s4 = "s4";
          s4_len = 2;
          break;
        }
        case 0x0E:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x1E:{
          s4 = "t5";
          s4_len = 2;
          break;
        }
        case 0x11:{
          s4 = "a7";
          s4_len = 2;
          break;
        }
        case 0x03:{
          s4 = "gp";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "t0";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "t4";
          s4_len = 2;
          break;
        }
        case 0x0D:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x0F:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.mvxmatype.vs2) { 
        case 0x08:{
          s6 = "v8";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "v21";
          s6_len = 3;
          break;
        }
        case 0x01:{
          s6 = "v1";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "v6";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "v9";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "v16";
          s6_len = 3;
          break;
        }
        case 0x1B:{
          s6 = "v27";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "v28";
          s6_len = 3;
          break;
        }
        case 0x16:{
          s6 = "v22";
          s6_len = 3;
          break;
        }
        case 0x00:{
          s6 = "v0";
          s6_len = 2;
          break;
        }
        case 0x0A:{
          s6 = "v10";
          s6_len = 3;
          break;
        }
        case 0x1A:{
          s6 = "v26";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "v23";
          s6_len = 3;
          break;
        }
        case 0x0C:{
          s6 = "v12";
          s6_len = 3;
          break;
        }
        case 0x18:{
          s6 = "v24";
          s6_len = 3;
          break;
        }
        case 0x02:{
          s6 = "v2";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "v31";
          s6_len = 3;
          break;
        }
        case 0x0B:{
          s6 = "v11";
          s6_len = 3;
          break;
        }
        case 0x07:{
          s6 = "v7";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "v19";
          s6_len = 3;
          break;
        }
        case 0x04:{
          s6 = "v4";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "v25";
          s6_len = 3;
          break;
        }
        case 0x12:{
          s6 = "v18";
          s6_len = 3;
          break;
        }
        case 0x14:{
          s6 = "v20";
          s6_len = 3;
          break;
        }
        case 0x0E:{
          s6 = "v14";
          s6_len = 3;
          break;
        }
        case 0x1E:{
          s6 = "v30";
          s6_len = 3;
          break;
        }
        case 0x11:{
          s6 = "v17";
          s6_len = 3;
          break;
        }
        case 0x03:{
          s6 = "v3";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "v5";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "v29";
          s6_len = 3;
          break;
        }
        case 0x0D:{
          s6 = "v13";
          s6_len = 3;
          break;
        }
        case 0x0F:{
          s6 = "v15";
          s6_len = 3;
          break;
        }
      }
      maybe_vmask(tree->ast_node.mvxmatype.vm, &s7, &s7_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      }
    }
    break;
    case RISCV_WVXTYPE: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      switch (tree->ast_node.wvxtype.funct6) { 
        case RISCV_WVX_VSUB:{
          s0 = "vwsub.vx";
          s0_len = 8;
          break;
        }
        case RISCV_WVX_VADDU:{
          s0 = "vwaddu.vx";
          s0_len = 9;
          break;
        }
        case RISCV_WVX_VADD:{
          s0 = "vwadd.vx";
          s0_len = 8;
          break;
        }
        case RISCV_WVX_VSUBU:{
          s0 = "vwsubu.vx";
          s0_len = 9;
          break;
        }
        case RISCV_WVX_VWMULSU:{
          s0 = "vwmulsu.vx";
          s0_len = 10;
          break;
        }
        case RISCV_WVX_VWMUL:{
          s0 = "vwmul.vx";
          s0_len = 8;
          break;
        }
        case RISCV_WVX_VWMULU:{
          s0 = "vwmulu.vx";
          s0_len = 9;
          break;
        }
      }
      spc( &s1, &s1_len);
      switch (tree->ast_node.wvxtype.vd) { 
        case 0x08:{
          s2 = "v8";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "v21";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "v1";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "v6";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "v9";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "v16";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "v27";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "v28";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "v22";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "v0";
          s2_len = 2;
          break;
        }
        case 0x0A:{
          s2 = "v10";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "v26";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "v23";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "v12";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "v24";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "v2";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "v31";
          s2_len = 3;
          break;
        }
        case 0x0B:{
          s2 = "v11";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "v7";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "v19";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "v4";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "v25";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "v18";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "v20";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "v14";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "v30";
          s2_len = 3;
          break;
        }
        case 0x11:{
          s2 = "v17";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "v3";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "v5";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "v29";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "v13";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "v15";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.wvxtype.vs2) { 
        case 0x08:{
          s4 = "v8";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "v21";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "v1";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "v6";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "v9";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "v16";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "v27";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "v28";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "v22";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "v0";
          s4_len = 2;
          break;
        }
        case 0x0A:{
          s4 = "v10";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "v26";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "v23";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "v12";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "v24";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "v2";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "v31";
          s4_len = 3;
          break;
        }
        case 0x0B:{
          s4 = "v11";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "v7";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "v19";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "v4";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "v25";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "v18";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "v20";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "v14";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "v30";
          s4_len = 3;
          break;
        }
        case 0x11:{
          s4 = "v17";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "v3";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "v5";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "v29";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "v13";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "v15";
          s4_len = 3;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.wvxtype.rs1) { 
        case 0x08:{
          s6 = "fp";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "s5";
          s6_len = 2;
          break;
        }
        case 0x01:{
          s6 = "ra";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "t1";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "s1";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "a6";
          s6_len = 2;
          break;
        }
        case 0x1B:{
          s6 = "s11";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "t3";
          s6_len = 2;
          break;
        }
        case 0x16:{
          s6 = "s6";
          s6_len = 2;
          break;
        }
        case 0x00:{
          s6 = "zero";
          s6_len = 4;
          break;
        }
        case 0x0A:{
          s6 = "a0";
          s6_len = 2;
          break;
        }
        case 0x1A:{
          s6 = "s10";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "s7";
          s6_len = 2;
          break;
        }
        case 0x0C:{
          s6 = "a2";
          s6_len = 2;
          break;
        }
        case 0x18:{
          s6 = "s8";
          s6_len = 2;
          break;
        }
        case 0x02:{
          s6 = "sp";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "t6";
          s6_len = 2;
          break;
        }
        case 0x0B:{
          s6 = "a1";
          s6_len = 2;
          break;
        }
        case 0x07:{
          s6 = "t2";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "s3";
          s6_len = 2;
          break;
        }
        case 0x04:{
          s6 = "tp";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "s9";
          s6_len = 2;
          break;
        }
        case 0x12:{
          s6 = "s2";
          s6_len = 2;
          break;
        }
        case 0x14:{
          s6 = "s4";
          s6_len = 2;
          break;
        }
        case 0x0E:{
          s6 = "a4";
          s6_len = 2;
          break;
        }
        case 0x1E:{
          s6 = "t5";
          s6_len = 2;
          break;
        }
        case 0x11:{
          s6 = "a7";
          s6_len = 2;
          break;
        }
        case 0x03:{
          s6 = "gp";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "t0";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "t4";
          s6_len = 2;
          break;
        }
        case 0x0D:{
          s6 = "a3";
          s6_len = 2;
          break;
        }
        case 0x0F:{
          s6 = "a5";
          s6_len = 2;
          break;
        }
      }
      maybe_vmask(tree->ast_node.wvxtype.vm, &s7, &s7_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      }
    }
    break;
    case RISCV_WXTYPE: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      switch (tree->ast_node.wxtype.funct6) { 
        case RISCV_WX_VSUB:{
          s0 = "vwsub.wx";
          s0_len = 8;
          break;
        }
        case RISCV_WX_VSUBU:{
          s0 = "vwsubu.wx";
          s0_len = 9;
          break;
        }
        case RISCV_WX_VADD:{
          s0 = "vwadd.wx";
          s0_len = 8;
          break;
        }
        case RISCV_WX_VADDU:{
          s0 = "vwaddu.wx";
          s0_len = 9;
          break;
        }
      }
      spc( &s1, &s1_len);
      switch (tree->ast_node.wxtype.vd) { 
        case 0x08:{
          s2 = "v8";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "v21";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "v1";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "v6";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "v9";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "v16";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "v27";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "v28";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "v22";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "v0";
          s2_len = 2;
          break;
        }
        case 0x0A:{
          s2 = "v10";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "v26";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "v23";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "v12";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "v24";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "v2";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "v31";
          s2_len = 3;
          break;
        }
        case 0x0B:{
          s2 = "v11";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "v7";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "v19";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "v4";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "v25";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "v18";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "v20";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "v14";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "v30";
          s2_len = 3;
          break;
        }
        case 0x11:{
          s2 = "v17";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "v3";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "v5";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "v29";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "v13";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "v15";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.wxtype.vs2) { 
        case 0x08:{
          s4 = "v8";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "v21";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "v1";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "v6";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "v9";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "v16";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "v27";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "v28";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "v22";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "v0";
          s4_len = 2;
          break;
        }
        case 0x0A:{
          s4 = "v10";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "v26";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "v23";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "v12";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "v24";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "v2";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "v31";
          s4_len = 3;
          break;
        }
        case 0x0B:{
          s4 = "v11";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "v7";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "v19";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "v4";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "v25";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "v18";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "v20";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "v14";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "v30";
          s4_len = 3;
          break;
        }
        case 0x11:{
          s4 = "v17";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "v3";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "v5";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "v29";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "v13";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "v15";
          s4_len = 3;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.wxtype.rs1) { 
        case 0x08:{
          s6 = "fp";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "s5";
          s6_len = 2;
          break;
        }
        case 0x01:{
          s6 = "ra";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "t1";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "s1";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "a6";
          s6_len = 2;
          break;
        }
        case 0x1B:{
          s6 = "s11";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "t3";
          s6_len = 2;
          break;
        }
        case 0x16:{
          s6 = "s6";
          s6_len = 2;
          break;
        }
        case 0x00:{
          s6 = "zero";
          s6_len = 4;
          break;
        }
        case 0x0A:{
          s6 = "a0";
          s6_len = 2;
          break;
        }
        case 0x1A:{
          s6 = "s10";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "s7";
          s6_len = 2;
          break;
        }
        case 0x0C:{
          s6 = "a2";
          s6_len = 2;
          break;
        }
        case 0x18:{
          s6 = "s8";
          s6_len = 2;
          break;
        }
        case 0x02:{
          s6 = "sp";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "t6";
          s6_len = 2;
          break;
        }
        case 0x0B:{
          s6 = "a1";
          s6_len = 2;
          break;
        }
        case 0x07:{
          s6 = "t2";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "s3";
          s6_len = 2;
          break;
        }
        case 0x04:{
          s6 = "tp";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "s9";
          s6_len = 2;
          break;
        }
        case 0x12:{
          s6 = "s2";
          s6_len = 2;
          break;
        }
        case 0x14:{
          s6 = "s4";
          s6_len = 2;
          break;
        }
        case 0x0E:{
          s6 = "a4";
          s6_len = 2;
          break;
        }
        case 0x1E:{
          s6 = "t5";
          s6_len = 2;
          break;
        }
        case 0x11:{
          s6 = "a7";
          s6_len = 2;
          break;
        }
        case 0x03:{
          s6 = "gp";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "t0";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "t4";
          s6_len = 2;
          break;
        }
        case 0x0D:{
          s6 = "a3";
          s6_len = 2;
          break;
        }
        case 0x0F:{
          s6 = "a5";
          s6_len = 2;
          break;
        }
      }
      maybe_vmask(tree->ast_node.wxtype.vm, &s7, &s7_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      }
    }
    break;
    case RISCV_WMVXTYPE: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      switch (tree->ast_node.wmvxtype.funct6) { 
        case RISCV_WMVX_VWMACCU:{
          s0 = "vwmaccu.vx";
          s0_len = 10;
          break;
        }
        case RISCV_WMVX_VWMACCSU:{
          s0 = "vwmaccsu.vx";
          s0_len = 11;
          break;
        }
        case RISCV_WMVX_VWMACCUS:{
          s0 = "vwmaccus.vx";
          s0_len = 11;
          break;
        }
        case RISCV_WMVX_VWMACC:{
          s0 = "vwmacc.vx";
          s0_len = 9;
          break;
        }
      }
      spc( &s1, &s1_len);
      switch (tree->ast_node.wmvxtype.vd) { 
        case 0x08:{
          s2 = "v8";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "v21";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "v1";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "v6";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "v9";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "v16";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "v27";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "v28";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "v22";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "v0";
          s2_len = 2;
          break;
        }
        case 0x0A:{
          s2 = "v10";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "v26";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "v23";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "v12";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "v24";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "v2";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "v31";
          s2_len = 3;
          break;
        }
        case 0x0B:{
          s2 = "v11";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "v7";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "v19";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "v4";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "v25";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "v18";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "v20";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "v14";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "v30";
          s2_len = 3;
          break;
        }
        case 0x11:{
          s2 = "v17";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "v3";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "v5";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "v29";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "v13";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "v15";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.wmvxtype.rs1) { 
        case 0x08:{
          s4 = "fp";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "s5";
          s4_len = 2;
          break;
        }
        case 0x01:{
          s4 = "ra";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "t1";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "a6";
          s4_len = 2;
          break;
        }
        case 0x1B:{
          s4 = "s11";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "t3";
          s4_len = 2;
          break;
        }
        case 0x16:{
          s4 = "s6";
          s4_len = 2;
          break;
        }
        case 0x00:{
          s4 = "zero";
          s4_len = 4;
          break;
        }
        case 0x0A:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x1A:{
          s4 = "s10";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "s7";
          s4_len = 2;
          break;
        }
        case 0x0C:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x18:{
          s4 = "s8";
          s4_len = 2;
          break;
        }
        case 0x02:{
          s4 = "sp";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "t6";
          s4_len = 2;
          break;
        }
        case 0x0B:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x07:{
          s4 = "t2";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "s3";
          s4_len = 2;
          break;
        }
        case 0x04:{
          s4 = "tp";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "s9";
          s4_len = 2;
          break;
        }
        case 0x12:{
          s4 = "s2";
          s4_len = 2;
          break;
        }
        case 0x14:{
          s4 = "s4";
          s4_len = 2;
          break;
        }
        case 0x0E:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x1E:{
          s4 = "t5";
          s4_len = 2;
          break;
        }
        case 0x11:{
          s4 = "a7";
          s4_len = 2;
          break;
        }
        case 0x03:{
          s4 = "gp";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "t0";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "t4";
          s4_len = 2;
          break;
        }
        case 0x0D:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x0F:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.wmvxtype.vs2) { 
        case 0x08:{
          s6 = "v8";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "v21";
          s6_len = 3;
          break;
        }
        case 0x01:{
          s6 = "v1";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "v6";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "v9";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "v16";
          s6_len = 3;
          break;
        }
        case 0x1B:{
          s6 = "v27";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "v28";
          s6_len = 3;
          break;
        }
        case 0x16:{
          s6 = "v22";
          s6_len = 3;
          break;
        }
        case 0x00:{
          s6 = "v0";
          s6_len = 2;
          break;
        }
        case 0x0A:{
          s6 = "v10";
          s6_len = 3;
          break;
        }
        case 0x1A:{
          s6 = "v26";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "v23";
          s6_len = 3;
          break;
        }
        case 0x0C:{
          s6 = "v12";
          s6_len = 3;
          break;
        }
        case 0x18:{
          s6 = "v24";
          s6_len = 3;
          break;
        }
        case 0x02:{
          s6 = "v2";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "v31";
          s6_len = 3;
          break;
        }
        case 0x0B:{
          s6 = "v11";
          s6_len = 3;
          break;
        }
        case 0x07:{
          s6 = "v7";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "v19";
          s6_len = 3;
          break;
        }
        case 0x04:{
          s6 = "v4";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "v25";
          s6_len = 3;
          break;
        }
        case 0x12:{
          s6 = "v18";
          s6_len = 3;
          break;
        }
        case 0x14:{
          s6 = "v20";
          s6_len = 3;
          break;
        }
        case 0x0E:{
          s6 = "v14";
          s6_len = 3;
          break;
        }
        case 0x1E:{
          s6 = "v30";
          s6_len = 3;
          break;
        }
        case 0x11:{
          s6 = "v17";
          s6_len = 3;
          break;
        }
        case 0x03:{
          s6 = "v3";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "v5";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "v29";
          s6_len = 3;
          break;
        }
        case 0x0D:{
          s6 = "v13";
          s6_len = 3;
          break;
        }
        case 0x0F:{
          s6 = "v15";
          s6_len = 3;
          break;
        }
      }
      maybe_vmask(tree->ast_node.wmvxtype.vm, &s7, &s7_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      }
    }
    break;
    case RISCV_VMVSX: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      s0 = "vmv.s.x";
      s0_len = 7;
      spc( &s1, &s1_len);
      switch (tree->ast_node.vmvsx.vd) { 
        case 0x08:{
          s2 = "v8";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "v21";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "v1";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "v6";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "v9";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "v16";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "v27";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "v28";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "v22";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "v0";
          s2_len = 2;
          break;
        }
        case 0x0A:{
          s2 = "v10";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "v26";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "v23";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "v12";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "v24";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "v2";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "v31";
          s2_len = 3;
          break;
        }
        case 0x0B:{
          s2 = "v11";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "v7";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "v19";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "v4";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "v25";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "v18";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "v20";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "v14";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "v30";
          s2_len = 3;
          break;
        }
        case 0x11:{
          s2 = "v17";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "v3";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "v5";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "v29";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "v13";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "v15";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.vmvsx.rs1) { 
        case 0x08:{
          s4 = "fp";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "s5";
          s4_len = 2;
          break;
        }
        case 0x01:{
          s4 = "ra";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "t1";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "a6";
          s4_len = 2;
          break;
        }
        case 0x1B:{
          s4 = "s11";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "t3";
          s4_len = 2;
          break;
        }
        case 0x16:{
          s4 = "s6";
          s4_len = 2;
          break;
        }
        case 0x00:{
          s4 = "zero";
          s4_len = 4;
          break;
        }
        case 0x0A:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x1A:{
          s4 = "s10";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "s7";
          s4_len = 2;
          break;
        }
        case 0x0C:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x18:{
          s4 = "s8";
          s4_len = 2;
          break;
        }
        case 0x02:{
          s4 = "sp";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "t6";
          s4_len = 2;
          break;
        }
        case 0x0B:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x07:{
          s4 = "t2";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "s3";
          s4_len = 2;
          break;
        }
        case 0x04:{
          s4 = "tp";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "s9";
          s4_len = 2;
          break;
        }
        case 0x12:{
          s4 = "s2";
          s4_len = 2;
          break;
        }
        case 0x14:{
          s4 = "s4";
          s4_len = 2;
          break;
        }
        case 0x0E:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x1E:{
          s4 = "t5";
          s4_len = 2;
          break;
        }
        case 0x11:{
          s4 = "a7";
          s4_len = 2;
          break;
        }
        case 0x03:{
          s4 = "gp";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "t0";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "t4";
          s4_len = 2;
          break;
        }
        case 0x0D:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x0F:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      }
    }
    break;
    case RISCV_FVVTYPE: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      switch (tree->ast_node.fvvtype.funct6) { 
        case RISCV_FVV_VSGNJ:{
          s0 = "vfsgnj.vv";
          s0_len = 9;
          break;
        }
        case RISCV_FVV_VMIN:{
          s0 = "vfmin.vv";
          s0_len = 8;
          break;
        }
        case RISCV_FVV_VDIV:{
          s0 = "vfdiv.vv";
          s0_len = 8;
          break;
        }
        case RISCV_FVV_VMAX:{
          s0 = "vfmax.vv";
          s0_len = 8;
          break;
        }
        case RISCV_FVV_VADD:{
          s0 = "vfadd.vv";
          s0_len = 8;
          break;
        }
        case RISCV_FVV_VSUB:{
          s0 = "vfsub.vv";
          s0_len = 8;
          break;
        }
        case RISCV_FVV_VSGNJN:{
          s0 = "vfsgnjn.vv";
          s0_len = 10;
          break;
        }
        case RISCV_FVV_VSGNJX:{
          s0 = "vfsgnjx.vv";
          s0_len = 10;
          break;
        }
        case RISCV_FVV_VMUL:{
          s0 = "vfmul.vv";
          s0_len = 8;
          break;
        }
      }
      spc( &s1, &s1_len);
      switch (tree->ast_node.fvvtype.vd) { 
        case 0x08:{
          s2 = "v8";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "v21";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "v1";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "v6";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "v9";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "v16";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "v27";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "v28";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "v22";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "v0";
          s2_len = 2;
          break;
        }
        case 0x0A:{
          s2 = "v10";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "v26";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "v23";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "v12";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "v24";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "v2";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "v31";
          s2_len = 3;
          break;
        }
        case 0x0B:{
          s2 = "v11";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "v7";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "v19";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "v4";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "v25";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "v18";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "v20";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "v14";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "v30";
          s2_len = 3;
          break;
        }
        case 0x11:{
          s2 = "v17";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "v3";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "v5";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "v29";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "v13";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "v15";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.fvvtype.vs2) { 
        case 0x08:{
          s4 = "v8";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "v21";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "v1";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "v6";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "v9";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "v16";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "v27";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "v28";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "v22";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "v0";
          s4_len = 2;
          break;
        }
        case 0x0A:{
          s4 = "v10";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "v26";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "v23";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "v12";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "v24";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "v2";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "v31";
          s4_len = 3;
          break;
        }
        case 0x0B:{
          s4 = "v11";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "v7";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "v19";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "v4";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "v25";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "v18";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "v20";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "v14";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "v30";
          s4_len = 3;
          break;
        }
        case 0x11:{
          s4 = "v17";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "v3";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "v5";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "v29";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "v13";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "v15";
          s4_len = 3;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.fvvtype.vs1) { 
        case 0x08:{
          s6 = "v8";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "v21";
          s6_len = 3;
          break;
        }
        case 0x01:{
          s6 = "v1";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "v6";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "v9";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "v16";
          s6_len = 3;
          break;
        }
        case 0x1B:{
          s6 = "v27";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "v28";
          s6_len = 3;
          break;
        }
        case 0x16:{
          s6 = "v22";
          s6_len = 3;
          break;
        }
        case 0x00:{
          s6 = "v0";
          s6_len = 2;
          break;
        }
        case 0x0A:{
          s6 = "v10";
          s6_len = 3;
          break;
        }
        case 0x1A:{
          s6 = "v26";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "v23";
          s6_len = 3;
          break;
        }
        case 0x0C:{
          s6 = "v12";
          s6_len = 3;
          break;
        }
        case 0x18:{
          s6 = "v24";
          s6_len = 3;
          break;
        }
        case 0x02:{
          s6 = "v2";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "v31";
          s6_len = 3;
          break;
        }
        case 0x0B:{
          s6 = "v11";
          s6_len = 3;
          break;
        }
        case 0x07:{
          s6 = "v7";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "v19";
          s6_len = 3;
          break;
        }
        case 0x04:{
          s6 = "v4";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "v25";
          s6_len = 3;
          break;
        }
        case 0x12:{
          s6 = "v18";
          s6_len = 3;
          break;
        }
        case 0x14:{
          s6 = "v20";
          s6_len = 3;
          break;
        }
        case 0x0E:{
          s6 = "v14";
          s6_len = 3;
          break;
        }
        case 0x1E:{
          s6 = "v30";
          s6_len = 3;
          break;
        }
        case 0x11:{
          s6 = "v17";
          s6_len = 3;
          break;
        }
        case 0x03:{
          s6 = "v3";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "v5";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "v29";
          s6_len = 3;
          break;
        }
        case 0x0D:{
          s6 = "v13";
          s6_len = 3;
          break;
        }
        case 0x0F:{
          s6 = "v15";
          s6_len = 3;
          break;
        }
      }
      maybe_vmask(tree->ast_node.fvvtype.vm, &s7, &s7_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      }
    }
    break;
    case RISCV_FVVMATYPE: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      switch (tree->ast_node.fvvmatype.funct6) { 
        case RISCV_FVV_VNMSAC:{
          s0 = "vfnmsac.vv";
          s0_len = 10;
          break;
        }
        case RISCV_FVV_VMACC:{
          s0 = "vfmacc.vv";
          s0_len = 9;
          break;
        }
        case RISCV_FVV_VNMSUB:{
          s0 = "vfnmsub.vv";
          s0_len = 10;
          break;
        }
        case RISCV_FVV_VMSAC:{
          s0 = "vfmsac.vv";
          s0_len = 9;
          break;
        }
        case RISCV_FVV_VMADD:{
          s0 = "vfmadd.vv";
          s0_len = 9;
          break;
        }
        case RISCV_FVV_VMSUB:{
          s0 = "vfmsub.vv";
          s0_len = 9;
          break;
        }
        case RISCV_FVV_VNMACC:{
          s0 = "vfnmacc.vv";
          s0_len = 10;
          break;
        }
        case RISCV_FVV_VNMADD:{
          s0 = "vfnmadd.vv";
          s0_len = 10;
          break;
        }
      }
      spc( &s1, &s1_len);
      switch (tree->ast_node.fvvmatype.vd) { 
        case 0x08:{
          s2 = "v8";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "v21";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "v1";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "v6";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "v9";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "v16";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "v27";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "v28";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "v22";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "v0";
          s2_len = 2;
          break;
        }
        case 0x0A:{
          s2 = "v10";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "v26";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "v23";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "v12";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "v24";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "v2";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "v31";
          s2_len = 3;
          break;
        }
        case 0x0B:{
          s2 = "v11";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "v7";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "v19";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "v4";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "v25";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "v18";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "v20";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "v14";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "v30";
          s2_len = 3;
          break;
        }
        case 0x11:{
          s2 = "v17";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "v3";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "v5";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "v29";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "v13";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "v15";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.fvvmatype.vs1) { 
        case 0x08:{
          s4 = "v8";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "v21";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "v1";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "v6";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "v9";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "v16";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "v27";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "v28";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "v22";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "v0";
          s4_len = 2;
          break;
        }
        case 0x0A:{
          s4 = "v10";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "v26";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "v23";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "v12";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "v24";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "v2";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "v31";
          s4_len = 3;
          break;
        }
        case 0x0B:{
          s4 = "v11";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "v7";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "v19";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "v4";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "v25";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "v18";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "v20";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "v14";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "v30";
          s4_len = 3;
          break;
        }
        case 0x11:{
          s4 = "v17";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "v3";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "v5";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "v29";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "v13";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "v15";
          s4_len = 3;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.fvvmatype.vs2) { 
        case 0x08:{
          s6 = "v8";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "v21";
          s6_len = 3;
          break;
        }
        case 0x01:{
          s6 = "v1";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "v6";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "v9";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "v16";
          s6_len = 3;
          break;
        }
        case 0x1B:{
          s6 = "v27";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "v28";
          s6_len = 3;
          break;
        }
        case 0x16:{
          s6 = "v22";
          s6_len = 3;
          break;
        }
        case 0x00:{
          s6 = "v0";
          s6_len = 2;
          break;
        }
        case 0x0A:{
          s6 = "v10";
          s6_len = 3;
          break;
        }
        case 0x1A:{
          s6 = "v26";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "v23";
          s6_len = 3;
          break;
        }
        case 0x0C:{
          s6 = "v12";
          s6_len = 3;
          break;
        }
        case 0x18:{
          s6 = "v24";
          s6_len = 3;
          break;
        }
        case 0x02:{
          s6 = "v2";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "v31";
          s6_len = 3;
          break;
        }
        case 0x0B:{
          s6 = "v11";
          s6_len = 3;
          break;
        }
        case 0x07:{
          s6 = "v7";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "v19";
          s6_len = 3;
          break;
        }
        case 0x04:{
          s6 = "v4";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "v25";
          s6_len = 3;
          break;
        }
        case 0x12:{
          s6 = "v18";
          s6_len = 3;
          break;
        }
        case 0x14:{
          s6 = "v20";
          s6_len = 3;
          break;
        }
        case 0x0E:{
          s6 = "v14";
          s6_len = 3;
          break;
        }
        case 0x1E:{
          s6 = "v30";
          s6_len = 3;
          break;
        }
        case 0x11:{
          s6 = "v17";
          s6_len = 3;
          break;
        }
        case 0x03:{
          s6 = "v3";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "v5";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "v29";
          s6_len = 3;
          break;
        }
        case 0x0D:{
          s6 = "v13";
          s6_len = 3;
          break;
        }
        case 0x0F:{
          s6 = "v15";
          s6_len = 3;
          break;
        }
      }
      maybe_vmask(tree->ast_node.fvvmatype.vm, &s7, &s7_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      }
    }
    break;
    case RISCV_FWVVTYPE: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      switch (tree->ast_node.fwvvtype.funct6) { 
        case RISCV_FWVV_VADD:{
          s0 = "vfwadd.vv";
          s0_len = 9;
          break;
        }
        case RISCV_FWVV_VSUB:{
          s0 = "vfwsub.vv";
          s0_len = 9;
          break;
        }
        case RISCV_FWVV_VMUL:{
          s0 = "vfwmul.vv";
          s0_len = 9;
          break;
        }
      }
      spc( &s1, &s1_len);
      switch (tree->ast_node.fwvvtype.vd) { 
        case 0x08:{
          s2 = "v8";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "v21";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "v1";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "v6";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "v9";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "v16";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "v27";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "v28";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "v22";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "v0";
          s2_len = 2;
          break;
        }
        case 0x0A:{
          s2 = "v10";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "v26";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "v23";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "v12";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "v24";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "v2";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "v31";
          s2_len = 3;
          break;
        }
        case 0x0B:{
          s2 = "v11";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "v7";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "v19";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "v4";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "v25";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "v18";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "v20";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "v14";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "v30";
          s2_len = 3;
          break;
        }
        case 0x11:{
          s2 = "v17";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "v3";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "v5";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "v29";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "v13";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "v15";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.fwvvtype.vs2) { 
        case 0x08:{
          s4 = "v8";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "v21";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "v1";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "v6";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "v9";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "v16";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "v27";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "v28";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "v22";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "v0";
          s4_len = 2;
          break;
        }
        case 0x0A:{
          s4 = "v10";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "v26";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "v23";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "v12";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "v24";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "v2";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "v31";
          s4_len = 3;
          break;
        }
        case 0x0B:{
          s4 = "v11";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "v7";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "v19";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "v4";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "v25";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "v18";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "v20";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "v14";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "v30";
          s4_len = 3;
          break;
        }
        case 0x11:{
          s4 = "v17";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "v3";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "v5";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "v29";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "v13";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "v15";
          s4_len = 3;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.fwvvtype.vs1) { 
        case 0x08:{
          s6 = "v8";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "v21";
          s6_len = 3;
          break;
        }
        case 0x01:{
          s6 = "v1";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "v6";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "v9";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "v16";
          s6_len = 3;
          break;
        }
        case 0x1B:{
          s6 = "v27";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "v28";
          s6_len = 3;
          break;
        }
        case 0x16:{
          s6 = "v22";
          s6_len = 3;
          break;
        }
        case 0x00:{
          s6 = "v0";
          s6_len = 2;
          break;
        }
        case 0x0A:{
          s6 = "v10";
          s6_len = 3;
          break;
        }
        case 0x1A:{
          s6 = "v26";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "v23";
          s6_len = 3;
          break;
        }
        case 0x0C:{
          s6 = "v12";
          s6_len = 3;
          break;
        }
        case 0x18:{
          s6 = "v24";
          s6_len = 3;
          break;
        }
        case 0x02:{
          s6 = "v2";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "v31";
          s6_len = 3;
          break;
        }
        case 0x0B:{
          s6 = "v11";
          s6_len = 3;
          break;
        }
        case 0x07:{
          s6 = "v7";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "v19";
          s6_len = 3;
          break;
        }
        case 0x04:{
          s6 = "v4";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "v25";
          s6_len = 3;
          break;
        }
        case 0x12:{
          s6 = "v18";
          s6_len = 3;
          break;
        }
        case 0x14:{
          s6 = "v20";
          s6_len = 3;
          break;
        }
        case 0x0E:{
          s6 = "v14";
          s6_len = 3;
          break;
        }
        case 0x1E:{
          s6 = "v30";
          s6_len = 3;
          break;
        }
        case 0x11:{
          s6 = "v17";
          s6_len = 3;
          break;
        }
        case 0x03:{
          s6 = "v3";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "v5";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "v29";
          s6_len = 3;
          break;
        }
        case 0x0D:{
          s6 = "v13";
          s6_len = 3;
          break;
        }
        case 0x0F:{
          s6 = "v15";
          s6_len = 3;
          break;
        }
      }
      maybe_vmask(tree->ast_node.fwvvtype.vm, &s7, &s7_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      }
    }
    break;
    case RISCV_FWVVMATYPE: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      switch (tree->ast_node.fwvvmatype.funct6) { 
        case RISCV_FWVV_VMSAC:{
          s0 = "vfwmsac.vv";
          s0_len = 10;
          break;
        }
        case RISCV_FWVV_VNMACC:{
          s0 = "vfwnmacc.vv";
          s0_len = 11;
          break;
        }
        case RISCV_FWVV_VNMSAC:{
          s0 = "vfwnmsac.vv";
          s0_len = 11;
          break;
        }
        case RISCV_FWVV_VMACC:{
          s0 = "vfwmacc.vv";
          s0_len = 10;
          break;
        }
      }
      spc( &s1, &s1_len);
      switch (tree->ast_node.fwvvmatype.vd) { 
        case 0x08:{
          s2 = "v8";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "v21";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "v1";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "v6";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "v9";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "v16";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "v27";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "v28";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "v22";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "v0";
          s2_len = 2;
          break;
        }
        case 0x0A:{
          s2 = "v10";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "v26";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "v23";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "v12";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "v24";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "v2";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "v31";
          s2_len = 3;
          break;
        }
        case 0x0B:{
          s2 = "v11";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "v7";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "v19";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "v4";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "v25";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "v18";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "v20";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "v14";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "v30";
          s2_len = 3;
          break;
        }
        case 0x11:{
          s2 = "v17";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "v3";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "v5";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "v29";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "v13";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "v15";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.fwvvmatype.vs1) { 
        case 0x08:{
          s4 = "v8";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "v21";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "v1";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "v6";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "v9";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "v16";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "v27";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "v28";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "v22";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "v0";
          s4_len = 2;
          break;
        }
        case 0x0A:{
          s4 = "v10";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "v26";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "v23";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "v12";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "v24";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "v2";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "v31";
          s4_len = 3;
          break;
        }
        case 0x0B:{
          s4 = "v11";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "v7";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "v19";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "v4";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "v25";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "v18";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "v20";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "v14";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "v30";
          s4_len = 3;
          break;
        }
        case 0x11:{
          s4 = "v17";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "v3";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "v5";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "v29";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "v13";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "v15";
          s4_len = 3;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.fwvvmatype.vs2) { 
        case 0x08:{
          s6 = "v8";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "v21";
          s6_len = 3;
          break;
        }
        case 0x01:{
          s6 = "v1";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "v6";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "v9";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "v16";
          s6_len = 3;
          break;
        }
        case 0x1B:{
          s6 = "v27";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "v28";
          s6_len = 3;
          break;
        }
        case 0x16:{
          s6 = "v22";
          s6_len = 3;
          break;
        }
        case 0x00:{
          s6 = "v0";
          s6_len = 2;
          break;
        }
        case 0x0A:{
          s6 = "v10";
          s6_len = 3;
          break;
        }
        case 0x1A:{
          s6 = "v26";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "v23";
          s6_len = 3;
          break;
        }
        case 0x0C:{
          s6 = "v12";
          s6_len = 3;
          break;
        }
        case 0x18:{
          s6 = "v24";
          s6_len = 3;
          break;
        }
        case 0x02:{
          s6 = "v2";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "v31";
          s6_len = 3;
          break;
        }
        case 0x0B:{
          s6 = "v11";
          s6_len = 3;
          break;
        }
        case 0x07:{
          s6 = "v7";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "v19";
          s6_len = 3;
          break;
        }
        case 0x04:{
          s6 = "v4";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "v25";
          s6_len = 3;
          break;
        }
        case 0x12:{
          s6 = "v18";
          s6_len = 3;
          break;
        }
        case 0x14:{
          s6 = "v20";
          s6_len = 3;
          break;
        }
        case 0x0E:{
          s6 = "v14";
          s6_len = 3;
          break;
        }
        case 0x1E:{
          s6 = "v30";
          s6_len = 3;
          break;
        }
        case 0x11:{
          s6 = "v17";
          s6_len = 3;
          break;
        }
        case 0x03:{
          s6 = "v3";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "v5";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "v29";
          s6_len = 3;
          break;
        }
        case 0x0D:{
          s6 = "v13";
          s6_len = 3;
          break;
        }
        case 0x0F:{
          s6 = "v15";
          s6_len = 3;
          break;
        }
      }
      maybe_vmask(tree->ast_node.fwvvmatype.vm, &s7, &s7_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      }
    }
    break;
    case RISCV_FWVTYPE: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      switch (tree->ast_node.fwvtype.funct6) { 
        case RISCV_FWV_VADD:{
          s0 = "vfwadd.wv";
          s0_len = 9;
          break;
        }
        case RISCV_FWV_VSUB:{
          s0 = "vfwsub.wv";
          s0_len = 9;
          break;
        }
      }
      spc( &s1, &s1_len);
      switch (tree->ast_node.fwvtype.vd) { 
        case 0x08:{
          s2 = "v8";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "v21";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "v1";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "v6";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "v9";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "v16";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "v27";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "v28";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "v22";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "v0";
          s2_len = 2;
          break;
        }
        case 0x0A:{
          s2 = "v10";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "v26";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "v23";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "v12";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "v24";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "v2";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "v31";
          s2_len = 3;
          break;
        }
        case 0x0B:{
          s2 = "v11";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "v7";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "v19";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "v4";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "v25";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "v18";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "v20";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "v14";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "v30";
          s2_len = 3;
          break;
        }
        case 0x11:{
          s2 = "v17";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "v3";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "v5";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "v29";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "v13";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "v15";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.fwvtype.vs2) { 
        case 0x08:{
          s4 = "v8";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "v21";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "v1";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "v6";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "v9";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "v16";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "v27";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "v28";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "v22";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "v0";
          s4_len = 2;
          break;
        }
        case 0x0A:{
          s4 = "v10";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "v26";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "v23";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "v12";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "v24";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "v2";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "v31";
          s4_len = 3;
          break;
        }
        case 0x0B:{
          s4 = "v11";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "v7";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "v19";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "v4";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "v25";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "v18";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "v20";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "v14";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "v30";
          s4_len = 3;
          break;
        }
        case 0x11:{
          s4 = "v17";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "v3";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "v5";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "v29";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "v13";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "v15";
          s4_len = 3;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.fwvtype.vs1) { 
        case 0x08:{
          s6 = "v8";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "v21";
          s6_len = 3;
          break;
        }
        case 0x01:{
          s6 = "v1";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "v6";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "v9";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "v16";
          s6_len = 3;
          break;
        }
        case 0x1B:{
          s6 = "v27";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "v28";
          s6_len = 3;
          break;
        }
        case 0x16:{
          s6 = "v22";
          s6_len = 3;
          break;
        }
        case 0x00:{
          s6 = "v0";
          s6_len = 2;
          break;
        }
        case 0x0A:{
          s6 = "v10";
          s6_len = 3;
          break;
        }
        case 0x1A:{
          s6 = "v26";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "v23";
          s6_len = 3;
          break;
        }
        case 0x0C:{
          s6 = "v12";
          s6_len = 3;
          break;
        }
        case 0x18:{
          s6 = "v24";
          s6_len = 3;
          break;
        }
        case 0x02:{
          s6 = "v2";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "v31";
          s6_len = 3;
          break;
        }
        case 0x0B:{
          s6 = "v11";
          s6_len = 3;
          break;
        }
        case 0x07:{
          s6 = "v7";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "v19";
          s6_len = 3;
          break;
        }
        case 0x04:{
          s6 = "v4";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "v25";
          s6_len = 3;
          break;
        }
        case 0x12:{
          s6 = "v18";
          s6_len = 3;
          break;
        }
        case 0x14:{
          s6 = "v20";
          s6_len = 3;
          break;
        }
        case 0x0E:{
          s6 = "v14";
          s6_len = 3;
          break;
        }
        case 0x1E:{
          s6 = "v30";
          s6_len = 3;
          break;
        }
        case 0x11:{
          s6 = "v17";
          s6_len = 3;
          break;
        }
        case 0x03:{
          s6 = "v3";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "v5";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "v29";
          s6_len = 3;
          break;
        }
        case 0x0D:{
          s6 = "v13";
          s6_len = 3;
          break;
        }
        case 0x0F:{
          s6 = "v15";
          s6_len = 3;
          break;
        }
      }
      maybe_vmask(tree->ast_node.fwvtype.vm, &s7, &s7_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      }
    }
    break;
    case RISCV_VFUNARY0: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      switch (tree->ast_node.vfunary0.vfunary0) { 
        case RISCV_FV_CVT_F_X:{
          s0 = "vfcvt.f.x.v";
          s0_len = 11;
          break;
        }
        case RISCV_FV_CVT_X_F:{
          s0 = "vfcvt.x.f.v";
          s0_len = 11;
          break;
        }
        case RISCV_FV_CVT_XU_F:{
          s0 = "vfcvt.xu.f.v";
          s0_len = 12;
          break;
        }
        case RISCV_FV_CVT_RTZ_XU_F:{
          s0 = "vfcvt.rtz.xu.f.v";
          s0_len = 16;
          break;
        }
        case RISCV_FV_CVT_RTZ_X_F:{
          s0 = "vfcvt.rtz.x.f.v";
          s0_len = 15;
          break;
        }
        case RISCV_FV_CVT_F_XU:{
          s0 = "vfcvt.f.xu.v";
          s0_len = 12;
          break;
        }
      }
      spc( &s1, &s1_len);
      switch (tree->ast_node.vfunary0.vd) { 
        case 0x08:{
          s2 = "v8";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "v21";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "v1";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "v6";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "v9";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "v16";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "v27";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "v28";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "v22";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "v0";
          s2_len = 2;
          break;
        }
        case 0x0A:{
          s2 = "v10";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "v26";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "v23";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "v12";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "v24";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "v2";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "v31";
          s2_len = 3;
          break;
        }
        case 0x0B:{
          s2 = "v11";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "v7";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "v19";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "v4";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "v25";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "v18";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "v20";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "v14";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "v30";
          s2_len = 3;
          break;
        }
        case 0x11:{
          s2 = "v17";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "v3";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "v5";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "v29";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "v13";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "v15";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.vfunary0.vs2) { 
        case 0x08:{
          s4 = "v8";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "v21";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "v1";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "v6";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "v9";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "v16";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "v27";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "v28";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "v22";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "v0";
          s4_len = 2;
          break;
        }
        case 0x0A:{
          s4 = "v10";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "v26";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "v23";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "v12";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "v24";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "v2";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "v31";
          s4_len = 3;
          break;
        }
        case 0x0B:{
          s4 = "v11";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "v7";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "v19";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "v4";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "v25";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "v18";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "v20";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "v14";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "v30";
          s4_len = 3;
          break;
        }
        case 0x11:{
          s4 = "v17";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "v3";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "v5";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "v29";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "v13";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "v15";
          s4_len = 3;
          break;
        }
      }
      maybe_vmask(tree->ast_node.vfunary0.vm, &s5, &s5_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      }
    }
    break;
    case RISCV_VFWUNARY0: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      switch (tree->ast_node.vfwunary0.vfwunary0) { 
        case RISCV_FWV_CVT_F_X:{
          s0 = "vfwcvt.f.x.v";
          s0_len = 12;
          break;
        }
        case RISCV_FWV_CVT_F_XU:{
          s0 = "vfwcvt.f.xu.v";
          s0_len = 13;
          break;
        }
        case RISCV_FWV_CVT_F_F:{
          s0 = "vfwcvt.f.f.v";
          s0_len = 12;
          break;
        }
        case RISCV_FWV_CVT_X_F:{
          s0 = "vfwcvt.x.f.v";
          s0_len = 12;
          break;
        }
        case RISCV_FWV_CVT_RTZ_XU_F:{
          s0 = "vfwcvt.rtz.xu.f.v";
          s0_len = 17;
          break;
        }
        case RISCV_FWV_CVT_RTZ_X_F:{
          s0 = "vfwcvt.rtz.x.f.v";
          s0_len = 16;
          break;
        }
        case RISCV_FWV_CVT_XU_F:{
          s0 = "vfwcvt.xu.f.v";
          s0_len = 13;
          break;
        }
      }
      spc( &s1, &s1_len);
      switch (tree->ast_node.vfwunary0.vd) { 
        case 0x08:{
          s2 = "v8";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "v21";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "v1";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "v6";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "v9";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "v16";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "v27";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "v28";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "v22";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "v0";
          s2_len = 2;
          break;
        }
        case 0x0A:{
          s2 = "v10";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "v26";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "v23";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "v12";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "v24";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "v2";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "v31";
          s2_len = 3;
          break;
        }
        case 0x0B:{
          s2 = "v11";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "v7";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "v19";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "v4";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "v25";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "v18";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "v20";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "v14";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "v30";
          s2_len = 3;
          break;
        }
        case 0x11:{
          s2 = "v17";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "v3";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "v5";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "v29";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "v13";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "v15";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.vfwunary0.vs2) { 
        case 0x08:{
          s4 = "v8";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "v21";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "v1";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "v6";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "v9";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "v16";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "v27";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "v28";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "v22";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "v0";
          s4_len = 2;
          break;
        }
        case 0x0A:{
          s4 = "v10";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "v26";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "v23";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "v12";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "v24";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "v2";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "v31";
          s4_len = 3;
          break;
        }
        case 0x0B:{
          s4 = "v11";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "v7";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "v19";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "v4";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "v25";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "v18";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "v20";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "v14";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "v30";
          s4_len = 3;
          break;
        }
        case 0x11:{
          s4 = "v17";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "v3";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "v5";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "v29";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "v13";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "v15";
          s4_len = 3;
          break;
        }
      }
      maybe_vmask(tree->ast_node.vfwunary0.vm, &s5, &s5_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      }
    }
    break;
    case RISCV_VFNUNARY0: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      switch (tree->ast_node.vfnunary0.vfnunary0) { 
        case RISCV_FNV_CVT_F_F:{
          s0 = "vfncvt.f.f.w";
          s0_len = 12;
          break;
        }
        case RISCV_FNV_CVT_RTZ_XU_F:{
          s0 = "vfncvt.rtz.xu.f.w";
          s0_len = 17;
          break;
        }
        case RISCV_FNV_CVT_F_XU:{
          s0 = "vfncvt.f.xu.w";
          s0_len = 13;
          break;
        }
        case RISCV_FNV_CVT_F_X:{
          s0 = "vfncvt.f.x.w";
          s0_len = 12;
          break;
        }
        case RISCV_FNV_CVT_RTZ_X_F:{
          s0 = "vfncvt.rtz.x.f.w";
          s0_len = 16;
          break;
        }
        case RISCV_FNV_CVT_XU_F:{
          s0 = "vfncvt.xu.f.w";
          s0_len = 13;
          break;
        }
        case RISCV_FNV_CVT_X_F:{
          s0 = "vfncvt.x.f.w";
          s0_len = 12;
          break;
        }
        case RISCV_FNV_CVT_ROD_F_F:{
          s0 = "vfncvt.rod.f.f.w";
          s0_len = 16;
          break;
        }
      }
      spc( &s1, &s1_len);
      switch (tree->ast_node.vfnunary0.vd) { 
        case 0x08:{
          s2 = "v8";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "v21";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "v1";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "v6";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "v9";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "v16";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "v27";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "v28";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "v22";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "v0";
          s2_len = 2;
          break;
        }
        case 0x0A:{
          s2 = "v10";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "v26";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "v23";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "v12";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "v24";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "v2";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "v31";
          s2_len = 3;
          break;
        }
        case 0x0B:{
          s2 = "v11";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "v7";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "v19";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "v4";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "v25";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "v18";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "v20";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "v14";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "v30";
          s2_len = 3;
          break;
        }
        case 0x11:{
          s2 = "v17";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "v3";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "v5";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "v29";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "v13";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "v15";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.vfnunary0.vs2) { 
        case 0x08:{
          s4 = "v8";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "v21";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "v1";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "v6";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "v9";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "v16";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "v27";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "v28";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "v22";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "v0";
          s4_len = 2;
          break;
        }
        case 0x0A:{
          s4 = "v10";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "v26";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "v23";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "v12";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "v24";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "v2";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "v31";
          s4_len = 3;
          break;
        }
        case 0x0B:{
          s4 = "v11";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "v7";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "v19";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "v4";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "v25";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "v18";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "v20";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "v14";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "v30";
          s4_len = 3;
          break;
        }
        case 0x11:{
          s4 = "v17";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "v3";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "v5";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "v29";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "v13";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "v15";
          s4_len = 3;
          break;
        }
      }
      maybe_vmask(tree->ast_node.vfnunary0.vm, &s5, &s5_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      }
    }
    break;
    case RISCV_VFUNARY1: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      switch (tree->ast_node.vfunary1.vfunary1) { 
        case RISCV_FVV_VCLASS:{
          s0 = "vfclass.v";
          s0_len = 9;
          break;
        }
        case RISCV_FVV_VREC7:{
          s0 = "vfrec7.v";
          s0_len = 8;
          break;
        }
        case RISCV_FVV_VRSQRT7:{
          s0 = "vfrsqrt7.v";
          s0_len = 10;
          break;
        }
        case RISCV_FVV_VSQRT:{
          s0 = "vfsqrt.v";
          s0_len = 8;
          break;
        }
      }
      spc( &s1, &s1_len);
      switch (tree->ast_node.vfunary1.vd) { 
        case 0x08:{
          s2 = "v8";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "v21";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "v1";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "v6";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "v9";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "v16";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "v27";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "v28";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "v22";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "v0";
          s2_len = 2;
          break;
        }
        case 0x0A:{
          s2 = "v10";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "v26";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "v23";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "v12";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "v24";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "v2";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "v31";
          s2_len = 3;
          break;
        }
        case 0x0B:{
          s2 = "v11";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "v7";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "v19";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "v4";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "v25";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "v18";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "v20";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "v14";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "v30";
          s2_len = 3;
          break;
        }
        case 0x11:{
          s2 = "v17";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "v3";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "v5";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "v29";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "v13";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "v15";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.vfunary1.vs2) { 
        case 0x08:{
          s4 = "v8";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "v21";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "v1";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "v6";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "v9";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "v16";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "v27";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "v28";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "v22";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "v0";
          s4_len = 2;
          break;
        }
        case 0x0A:{
          s4 = "v10";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "v26";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "v23";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "v12";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "v24";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "v2";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "v31";
          s4_len = 3;
          break;
        }
        case 0x0B:{
          s4 = "v11";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "v7";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "v19";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "v4";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "v25";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "v18";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "v20";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "v14";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "v30";
          s4_len = 3;
          break;
        }
        case 0x11:{
          s4 = "v17";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "v3";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "v5";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "v29";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "v13";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "v15";
          s4_len = 3;
          break;
        }
      }
      maybe_vmask(tree->ast_node.vfunary1.vm, &s5, &s5_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      }
    }
    break;
    case RISCV_VFMVFS: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      s0 = "vfmv.f.s";
      s0_len = 8;
      spc( &s1, &s1_len);
      switch (tree->ast_node.vfmvfs.rd) { 
        case 0x08:{
          s2 = "fs0";
          s2_len = 3;
          break;
        }
        case 0x15:{
          s2 = "fs5";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "ft1";
          s2_len = 3;
          break;
        }
        case 0x06:{
          s2 = "ft6";
          s2_len = 3;
          break;
        }
        case 0x09:{
          s2 = "fs1";
          s2_len = 3;
          break;
        }
        case 0x10:{
          s2 = "fa6";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "fs11";
          s2_len = 4;
          break;
        }
        case 0x1C:{
          s2 = "ft8";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "fs6";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "ft0";
          s2_len = 3;
          break;
        }
        case 0x0A:{
          s2 = "fa0";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "fs10";
          s2_len = 4;
          break;
        }
        case 0x17:{
          s2 = "fs7";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "fa2";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "fs8";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "ft2";
          s2_len = 3;
          break;
        }
        case 0x1F:{
          s2 = "ft11";
          s2_len = 4;
          break;
        }
        case 0x0B:{
          s2 = "fa1";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "ft7";
          s2_len = 3;
          break;
        }
        case 0x13:{
          s2 = "fs3";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "ft4";
          s2_len = 3;
          break;
        }
        case 0x19:{
          s2 = "fs9";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "fs2";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "fs4";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "fa4";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "ft10";
          s2_len = 4;
          break;
        }
        case 0x11:{
          s2 = "fa7";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "ft3";
          s2_len = 3;
          break;
        }
        case 0x05:{
          s2 = "ft5";
          s2_len = 3;
          break;
        }
        case 0x1D:{
          s2 = "ft9";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "fa3";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "fa5";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.vfmvfs.vs2) { 
        case 0x08:{
          s4 = "v8";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "v21";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "v1";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "v6";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "v9";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "v16";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "v27";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "v28";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "v22";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "v0";
          s4_len = 2;
          break;
        }
        case 0x0A:{
          s4 = "v10";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "v26";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "v23";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "v12";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "v24";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "v2";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "v31";
          s4_len = 3;
          break;
        }
        case 0x0B:{
          s4 = "v11";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "v7";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "v19";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "v4";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "v25";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "v18";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "v20";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "v14";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "v30";
          s4_len = 3;
          break;
        }
        case 0x11:{
          s4 = "v17";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "v3";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "v5";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "v29";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "v13";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "v15";
          s4_len = 3;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      }
    }
    break;
    case RISCV_FVFTYPE: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      switch (tree->ast_node.fvftype.funct6) { 
        case RISCV_VF_VMIN:{
          s0 = "vfmin.vf";
          s0_len = 8;
          break;
        }
        case RISCV_VF_VSGNJ:{
          s0 = "vfsgnj.vf";
          s0_len = 9;
          break;
        }
        case RISCV_VF_VSLIDE1UP:{
          s0 = "vfslide1up.vf";
          s0_len = 13;
          break;
        }
        case RISCV_VF_VRSUB:{
          s0 = "vfrsub.vf";
          s0_len = 9;
          break;
        }
        case RISCV_VF_VADD:{
          s0 = "vfadd.vf";
          s0_len = 8;
          break;
        }
        case RISCV_VF_VSGNJX:{
          s0 = "vfsgnjx.vf";
          s0_len = 10;
          break;
        }
        case RISCV_VF_VDIV:{
          s0 = "vfdiv.vf";
          s0_len = 8;
          break;
        }
        case RISCV_VF_VSUB:{
          s0 = "vfsub.vf";
          s0_len = 8;
          break;
        }
        case RISCV_VF_VRDIV:{
          s0 = "vfrdiv.vf";
          s0_len = 9;
          break;
        }
        case RISCV_VF_VMUL:{
          s0 = "vfmul.vf";
          s0_len = 8;
          break;
        }
        case RISCV_VF_VSGNJN:{
          s0 = "vfsgnjn.vf";
          s0_len = 10;
          break;
        }
        case RISCV_VF_VMAX:{
          s0 = "vfmax.vf";
          s0_len = 8;
          break;
        }
        case RISCV_VF_VSLIDE1DOWN:{
          s0 = "vfslide1down.vf";
          s0_len = 15;
          break;
        }
      }
      spc( &s1, &s1_len);
      switch (tree->ast_node.fvftype.vd) { 
        case 0x08:{
          s2 = "v8";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "v21";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "v1";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "v6";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "v9";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "v16";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "v27";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "v28";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "v22";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "v0";
          s2_len = 2;
          break;
        }
        case 0x0A:{
          s2 = "v10";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "v26";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "v23";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "v12";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "v24";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "v2";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "v31";
          s2_len = 3;
          break;
        }
        case 0x0B:{
          s2 = "v11";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "v7";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "v19";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "v4";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "v25";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "v18";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "v20";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "v14";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "v30";
          s2_len = 3;
          break;
        }
        case 0x11:{
          s2 = "v17";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "v3";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "v5";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "v29";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "v13";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "v15";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.fvftype.vs2) { 
        case 0x08:{
          s4 = "v8";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "v21";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "v1";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "v6";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "v9";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "v16";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "v27";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "v28";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "v22";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "v0";
          s4_len = 2;
          break;
        }
        case 0x0A:{
          s4 = "v10";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "v26";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "v23";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "v12";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "v24";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "v2";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "v31";
          s4_len = 3;
          break;
        }
        case 0x0B:{
          s4 = "v11";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "v7";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "v19";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "v4";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "v25";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "v18";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "v20";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "v14";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "v30";
          s4_len = 3;
          break;
        }
        case 0x11:{
          s4 = "v17";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "v3";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "v5";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "v29";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "v13";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "v15";
          s4_len = 3;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.fvftype.rs1) { 
        case 0x08:{
          s6 = "fp";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "s5";
          s6_len = 2;
          break;
        }
        case 0x01:{
          s6 = "ra";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "t1";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "s1";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "a6";
          s6_len = 2;
          break;
        }
        case 0x1B:{
          s6 = "s11";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "t3";
          s6_len = 2;
          break;
        }
        case 0x16:{
          s6 = "s6";
          s6_len = 2;
          break;
        }
        case 0x00:{
          s6 = "zero";
          s6_len = 4;
          break;
        }
        case 0x0A:{
          s6 = "a0";
          s6_len = 2;
          break;
        }
        case 0x1A:{
          s6 = "s10";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "s7";
          s6_len = 2;
          break;
        }
        case 0x0C:{
          s6 = "a2";
          s6_len = 2;
          break;
        }
        case 0x18:{
          s6 = "s8";
          s6_len = 2;
          break;
        }
        case 0x02:{
          s6 = "sp";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "t6";
          s6_len = 2;
          break;
        }
        case 0x0B:{
          s6 = "a1";
          s6_len = 2;
          break;
        }
        case 0x07:{
          s6 = "t2";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "s3";
          s6_len = 2;
          break;
        }
        case 0x04:{
          s6 = "tp";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "s9";
          s6_len = 2;
          break;
        }
        case 0x12:{
          s6 = "s2";
          s6_len = 2;
          break;
        }
        case 0x14:{
          s6 = "s4";
          s6_len = 2;
          break;
        }
        case 0x0E:{
          s6 = "a4";
          s6_len = 2;
          break;
        }
        case 0x1E:{
          s6 = "t5";
          s6_len = 2;
          break;
        }
        case 0x11:{
          s6 = "a7";
          s6_len = 2;
          break;
        }
        case 0x03:{
          s6 = "gp";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "t0";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "t4";
          s6_len = 2;
          break;
        }
        case 0x0D:{
          s6 = "a3";
          s6_len = 2;
          break;
        }
        case 0x0F:{
          s6 = "a5";
          s6_len = 2;
          break;
        }
      }
      maybe_vmask(tree->ast_node.fvftype.vm, &s7, &s7_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      }
    }
    break;
    case RISCV_FVFMATYPE: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      switch (tree->ast_node.fvfmatype.funct6) { 
        case RISCV_VF_VNMADD:{
          s0 = "vfnmadd.vf";
          s0_len = 10;
          break;
        }
        case RISCV_VF_VMSUB:{
          s0 = "vfmsub.vf";
          s0_len = 9;
          break;
        }
        case RISCV_VF_VMACC:{
          s0 = "vfmacc.vf";
          s0_len = 9;
          break;
        }
        case RISCV_VF_VMADD:{
          s0 = "vfmadd.vf";
          s0_len = 9;
          break;
        }
        case RISCV_VF_VNMSAC:{
          s0 = "vfnmsac.vf";
          s0_len = 10;
          break;
        }
        case RISCV_VF_VMSAC:{
          s0 = "vfmsac.vf";
          s0_len = 9;
          break;
        }
        case RISCV_VF_VNMACC:{
          s0 = "vfnmacc.vf";
          s0_len = 10;
          break;
        }
        case RISCV_VF_VNMSUB:{
          s0 = "vfnmsub.vf";
          s0_len = 10;
          break;
        }
      }
      spc( &s1, &s1_len);
      switch (tree->ast_node.fvfmatype.vd) { 
        case 0x08:{
          s2 = "v8";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "v21";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "v1";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "v6";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "v9";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "v16";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "v27";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "v28";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "v22";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "v0";
          s2_len = 2;
          break;
        }
        case 0x0A:{
          s2 = "v10";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "v26";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "v23";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "v12";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "v24";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "v2";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "v31";
          s2_len = 3;
          break;
        }
        case 0x0B:{
          s2 = "v11";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "v7";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "v19";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "v4";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "v25";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "v18";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "v20";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "v14";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "v30";
          s2_len = 3;
          break;
        }
        case 0x11:{
          s2 = "v17";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "v3";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "v5";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "v29";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "v13";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "v15";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.fvfmatype.rs1) { 
        case 0x08:{
          s4 = "fp";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "s5";
          s4_len = 2;
          break;
        }
        case 0x01:{
          s4 = "ra";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "t1";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "a6";
          s4_len = 2;
          break;
        }
        case 0x1B:{
          s4 = "s11";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "t3";
          s4_len = 2;
          break;
        }
        case 0x16:{
          s4 = "s6";
          s4_len = 2;
          break;
        }
        case 0x00:{
          s4 = "zero";
          s4_len = 4;
          break;
        }
        case 0x0A:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x1A:{
          s4 = "s10";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "s7";
          s4_len = 2;
          break;
        }
        case 0x0C:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x18:{
          s4 = "s8";
          s4_len = 2;
          break;
        }
        case 0x02:{
          s4 = "sp";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "t6";
          s4_len = 2;
          break;
        }
        case 0x0B:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x07:{
          s4 = "t2";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "s3";
          s4_len = 2;
          break;
        }
        case 0x04:{
          s4 = "tp";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "s9";
          s4_len = 2;
          break;
        }
        case 0x12:{
          s4 = "s2";
          s4_len = 2;
          break;
        }
        case 0x14:{
          s4 = "s4";
          s4_len = 2;
          break;
        }
        case 0x0E:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x1E:{
          s4 = "t5";
          s4_len = 2;
          break;
        }
        case 0x11:{
          s4 = "a7";
          s4_len = 2;
          break;
        }
        case 0x03:{
          s4 = "gp";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "t0";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "t4";
          s4_len = 2;
          break;
        }
        case 0x0D:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x0F:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.fvfmatype.vs2) { 
        case 0x08:{
          s6 = "v8";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "v21";
          s6_len = 3;
          break;
        }
        case 0x01:{
          s6 = "v1";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "v6";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "v9";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "v16";
          s6_len = 3;
          break;
        }
        case 0x1B:{
          s6 = "v27";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "v28";
          s6_len = 3;
          break;
        }
        case 0x16:{
          s6 = "v22";
          s6_len = 3;
          break;
        }
        case 0x00:{
          s6 = "v0";
          s6_len = 2;
          break;
        }
        case 0x0A:{
          s6 = "v10";
          s6_len = 3;
          break;
        }
        case 0x1A:{
          s6 = "v26";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "v23";
          s6_len = 3;
          break;
        }
        case 0x0C:{
          s6 = "v12";
          s6_len = 3;
          break;
        }
        case 0x18:{
          s6 = "v24";
          s6_len = 3;
          break;
        }
        case 0x02:{
          s6 = "v2";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "v31";
          s6_len = 3;
          break;
        }
        case 0x0B:{
          s6 = "v11";
          s6_len = 3;
          break;
        }
        case 0x07:{
          s6 = "v7";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "v19";
          s6_len = 3;
          break;
        }
        case 0x04:{
          s6 = "v4";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "v25";
          s6_len = 3;
          break;
        }
        case 0x12:{
          s6 = "v18";
          s6_len = 3;
          break;
        }
        case 0x14:{
          s6 = "v20";
          s6_len = 3;
          break;
        }
        case 0x0E:{
          s6 = "v14";
          s6_len = 3;
          break;
        }
        case 0x1E:{
          s6 = "v30";
          s6_len = 3;
          break;
        }
        case 0x11:{
          s6 = "v17";
          s6_len = 3;
          break;
        }
        case 0x03:{
          s6 = "v3";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "v5";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "v29";
          s6_len = 3;
          break;
        }
        case 0x0D:{
          s6 = "v13";
          s6_len = 3;
          break;
        }
        case 0x0F:{
          s6 = "v15";
          s6_len = 3;
          break;
        }
      }
      maybe_vmask(tree->ast_node.fvfmatype.vm, &s7, &s7_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      }
    }
    break;
    case RISCV_FWVFTYPE: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      switch (tree->ast_node.fwvftype.funct6) { 
        case RISCV_FWVF_VADD:{
          s0 = "vfwadd.vf";
          s0_len = 9;
          break;
        }
        case RISCV_FWVF_VSUB:{
          s0 = "vfwsub.vf";
          s0_len = 9;
          break;
        }
        case RISCV_FWVF_VMUL:{
          s0 = "vfwmul.vf";
          s0_len = 9;
          break;
        }
      }
      spc( &s1, &s1_len);
      switch (tree->ast_node.fwvftype.vd) { 
        case 0x08:{
          s2 = "v8";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "v21";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "v1";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "v6";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "v9";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "v16";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "v27";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "v28";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "v22";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "v0";
          s2_len = 2;
          break;
        }
        case 0x0A:{
          s2 = "v10";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "v26";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "v23";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "v12";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "v24";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "v2";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "v31";
          s2_len = 3;
          break;
        }
        case 0x0B:{
          s2 = "v11";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "v7";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "v19";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "v4";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "v25";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "v18";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "v20";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "v14";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "v30";
          s2_len = 3;
          break;
        }
        case 0x11:{
          s2 = "v17";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "v3";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "v5";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "v29";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "v13";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "v15";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.fwvftype.vs2) { 
        case 0x08:{
          s4 = "v8";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "v21";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "v1";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "v6";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "v9";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "v16";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "v27";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "v28";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "v22";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "v0";
          s4_len = 2;
          break;
        }
        case 0x0A:{
          s4 = "v10";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "v26";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "v23";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "v12";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "v24";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "v2";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "v31";
          s4_len = 3;
          break;
        }
        case 0x0B:{
          s4 = "v11";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "v7";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "v19";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "v4";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "v25";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "v18";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "v20";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "v14";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "v30";
          s4_len = 3;
          break;
        }
        case 0x11:{
          s4 = "v17";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "v3";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "v5";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "v29";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "v13";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "v15";
          s4_len = 3;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.fwvftype.rs1) { 
        case 0x08:{
          s6 = "fp";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "s5";
          s6_len = 2;
          break;
        }
        case 0x01:{
          s6 = "ra";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "t1";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "s1";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "a6";
          s6_len = 2;
          break;
        }
        case 0x1B:{
          s6 = "s11";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "t3";
          s6_len = 2;
          break;
        }
        case 0x16:{
          s6 = "s6";
          s6_len = 2;
          break;
        }
        case 0x00:{
          s6 = "zero";
          s6_len = 4;
          break;
        }
        case 0x0A:{
          s6 = "a0";
          s6_len = 2;
          break;
        }
        case 0x1A:{
          s6 = "s10";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "s7";
          s6_len = 2;
          break;
        }
        case 0x0C:{
          s6 = "a2";
          s6_len = 2;
          break;
        }
        case 0x18:{
          s6 = "s8";
          s6_len = 2;
          break;
        }
        case 0x02:{
          s6 = "sp";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "t6";
          s6_len = 2;
          break;
        }
        case 0x0B:{
          s6 = "a1";
          s6_len = 2;
          break;
        }
        case 0x07:{
          s6 = "t2";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "s3";
          s6_len = 2;
          break;
        }
        case 0x04:{
          s6 = "tp";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "s9";
          s6_len = 2;
          break;
        }
        case 0x12:{
          s6 = "s2";
          s6_len = 2;
          break;
        }
        case 0x14:{
          s6 = "s4";
          s6_len = 2;
          break;
        }
        case 0x0E:{
          s6 = "a4";
          s6_len = 2;
          break;
        }
        case 0x1E:{
          s6 = "t5";
          s6_len = 2;
          break;
        }
        case 0x11:{
          s6 = "a7";
          s6_len = 2;
          break;
        }
        case 0x03:{
          s6 = "gp";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "t0";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "t4";
          s6_len = 2;
          break;
        }
        case 0x0D:{
          s6 = "a3";
          s6_len = 2;
          break;
        }
        case 0x0F:{
          s6 = "a5";
          s6_len = 2;
          break;
        }
      }
      maybe_vmask(tree->ast_node.fwvftype.vm, &s7, &s7_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      }
    }
    break;
    case RISCV_FWVFMATYPE: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      switch (tree->ast_node.fwvfmatype.funct6) { 
        case RISCV_FWVF_VNMACC:{
          s0 = "vfwnmacc.vf";
          s0_len = 11;
          break;
        }
        case RISCV_FWVF_VMACC:{
          s0 = "vfwmacc.vf";
          s0_len = 10;
          break;
        }
        case RISCV_FWVF_VNMSAC:{
          s0 = "vfwnmsac.vf";
          s0_len = 11;
          break;
        }
        case RISCV_FWVF_VMSAC:{
          s0 = "vfwmsac.vf";
          s0_len = 10;
          break;
        }
      }
      spc( &s1, &s1_len);
      switch (tree->ast_node.fwvfmatype.vd) { 
        case 0x08:{
          s2 = "v8";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "v21";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "v1";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "v6";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "v9";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "v16";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "v27";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "v28";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "v22";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "v0";
          s2_len = 2;
          break;
        }
        case 0x0A:{
          s2 = "v10";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "v26";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "v23";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "v12";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "v24";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "v2";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "v31";
          s2_len = 3;
          break;
        }
        case 0x0B:{
          s2 = "v11";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "v7";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "v19";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "v4";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "v25";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "v18";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "v20";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "v14";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "v30";
          s2_len = 3;
          break;
        }
        case 0x11:{
          s2 = "v17";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "v3";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "v5";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "v29";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "v13";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "v15";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.fwvfmatype.rs1) { 
        case 0x08:{
          s4 = "fp";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "s5";
          s4_len = 2;
          break;
        }
        case 0x01:{
          s4 = "ra";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "t1";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "a6";
          s4_len = 2;
          break;
        }
        case 0x1B:{
          s4 = "s11";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "t3";
          s4_len = 2;
          break;
        }
        case 0x16:{
          s4 = "s6";
          s4_len = 2;
          break;
        }
        case 0x00:{
          s4 = "zero";
          s4_len = 4;
          break;
        }
        case 0x0A:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x1A:{
          s4 = "s10";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "s7";
          s4_len = 2;
          break;
        }
        case 0x0C:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x18:{
          s4 = "s8";
          s4_len = 2;
          break;
        }
        case 0x02:{
          s4 = "sp";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "t6";
          s4_len = 2;
          break;
        }
        case 0x0B:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x07:{
          s4 = "t2";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "s3";
          s4_len = 2;
          break;
        }
        case 0x04:{
          s4 = "tp";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "s9";
          s4_len = 2;
          break;
        }
        case 0x12:{
          s4 = "s2";
          s4_len = 2;
          break;
        }
        case 0x14:{
          s4 = "s4";
          s4_len = 2;
          break;
        }
        case 0x0E:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x1E:{
          s4 = "t5";
          s4_len = 2;
          break;
        }
        case 0x11:{
          s4 = "a7";
          s4_len = 2;
          break;
        }
        case 0x03:{
          s4 = "gp";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "t0";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "t4";
          s4_len = 2;
          break;
        }
        case 0x0D:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x0F:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.fwvfmatype.vs2) { 
        case 0x08:{
          s6 = "v8";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "v21";
          s6_len = 3;
          break;
        }
        case 0x01:{
          s6 = "v1";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "v6";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "v9";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "v16";
          s6_len = 3;
          break;
        }
        case 0x1B:{
          s6 = "v27";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "v28";
          s6_len = 3;
          break;
        }
        case 0x16:{
          s6 = "v22";
          s6_len = 3;
          break;
        }
        case 0x00:{
          s6 = "v0";
          s6_len = 2;
          break;
        }
        case 0x0A:{
          s6 = "v10";
          s6_len = 3;
          break;
        }
        case 0x1A:{
          s6 = "v26";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "v23";
          s6_len = 3;
          break;
        }
        case 0x0C:{
          s6 = "v12";
          s6_len = 3;
          break;
        }
        case 0x18:{
          s6 = "v24";
          s6_len = 3;
          break;
        }
        case 0x02:{
          s6 = "v2";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "v31";
          s6_len = 3;
          break;
        }
        case 0x0B:{
          s6 = "v11";
          s6_len = 3;
          break;
        }
        case 0x07:{
          s6 = "v7";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "v19";
          s6_len = 3;
          break;
        }
        case 0x04:{
          s6 = "v4";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "v25";
          s6_len = 3;
          break;
        }
        case 0x12:{
          s6 = "v18";
          s6_len = 3;
          break;
        }
        case 0x14:{
          s6 = "v20";
          s6_len = 3;
          break;
        }
        case 0x0E:{
          s6 = "v14";
          s6_len = 3;
          break;
        }
        case 0x1E:{
          s6 = "v30";
          s6_len = 3;
          break;
        }
        case 0x11:{
          s6 = "v17";
          s6_len = 3;
          break;
        }
        case 0x03:{
          s6 = "v3";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "v5";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "v29";
          s6_len = 3;
          break;
        }
        case 0x0D:{
          s6 = "v13";
          s6_len = 3;
          break;
        }
        case 0x0F:{
          s6 = "v15";
          s6_len = 3;
          break;
        }
      }
      maybe_vmask(tree->ast_node.fwvfmatype.vm, &s7, &s7_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      }
    }
    break;
    case RISCV_FWFTYPE: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      switch (tree->ast_node.fwftype.funct6) { 
        case RISCV_FWF_VSUB:{
          s0 = "vfwsub.wf";
          s0_len = 9;
          break;
        }
        case RISCV_FWF_VADD:{
          s0 = "vfwadd.wf";
          s0_len = 9;
          break;
        }
      }
      spc( &s1, &s1_len);
      switch (tree->ast_node.fwftype.vd) { 
        case 0x08:{
          s2 = "v8";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "v21";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "v1";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "v6";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "v9";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "v16";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "v27";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "v28";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "v22";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "v0";
          s2_len = 2;
          break;
        }
        case 0x0A:{
          s2 = "v10";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "v26";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "v23";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "v12";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "v24";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "v2";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "v31";
          s2_len = 3;
          break;
        }
        case 0x0B:{
          s2 = "v11";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "v7";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "v19";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "v4";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "v25";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "v18";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "v20";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "v14";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "v30";
          s2_len = 3;
          break;
        }
        case 0x11:{
          s2 = "v17";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "v3";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "v5";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "v29";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "v13";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "v15";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.fwftype.vs2) { 
        case 0x08:{
          s4 = "v8";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "v21";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "v1";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "v6";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "v9";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "v16";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "v27";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "v28";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "v22";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "v0";
          s4_len = 2;
          break;
        }
        case 0x0A:{
          s4 = "v10";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "v26";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "v23";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "v12";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "v24";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "v2";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "v31";
          s4_len = 3;
          break;
        }
        case 0x0B:{
          s4 = "v11";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "v7";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "v19";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "v4";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "v25";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "v18";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "v20";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "v14";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "v30";
          s4_len = 3;
          break;
        }
        case 0x11:{
          s4 = "v17";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "v3";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "v5";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "v29";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "v13";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "v15";
          s4_len = 3;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.fwftype.rs1) { 
        case 0x08:{
          s6 = "fp";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "s5";
          s6_len = 2;
          break;
        }
        case 0x01:{
          s6 = "ra";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "t1";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "s1";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "a6";
          s6_len = 2;
          break;
        }
        case 0x1B:{
          s6 = "s11";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "t3";
          s6_len = 2;
          break;
        }
        case 0x16:{
          s6 = "s6";
          s6_len = 2;
          break;
        }
        case 0x00:{
          s6 = "zero";
          s6_len = 4;
          break;
        }
        case 0x0A:{
          s6 = "a0";
          s6_len = 2;
          break;
        }
        case 0x1A:{
          s6 = "s10";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "s7";
          s6_len = 2;
          break;
        }
        case 0x0C:{
          s6 = "a2";
          s6_len = 2;
          break;
        }
        case 0x18:{
          s6 = "s8";
          s6_len = 2;
          break;
        }
        case 0x02:{
          s6 = "sp";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "t6";
          s6_len = 2;
          break;
        }
        case 0x0B:{
          s6 = "a1";
          s6_len = 2;
          break;
        }
        case 0x07:{
          s6 = "t2";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "s3";
          s6_len = 2;
          break;
        }
        case 0x04:{
          s6 = "tp";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "s9";
          s6_len = 2;
          break;
        }
        case 0x12:{
          s6 = "s2";
          s6_len = 2;
          break;
        }
        case 0x14:{
          s6 = "s4";
          s6_len = 2;
          break;
        }
        case 0x0E:{
          s6 = "a4";
          s6_len = 2;
          break;
        }
        case 0x1E:{
          s6 = "t5";
          s6_len = 2;
          break;
        }
        case 0x11:{
          s6 = "a7";
          s6_len = 2;
          break;
        }
        case 0x03:{
          s6 = "gp";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "t0";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "t4";
          s6_len = 2;
          break;
        }
        case 0x0D:{
          s6 = "a3";
          s6_len = 2;
          break;
        }
        case 0x0F:{
          s6 = "a5";
          s6_len = 2;
          break;
        }
      }
      maybe_vmask(tree->ast_node.fwftype.vm, &s7, &s7_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      }
    }
    break;
    case RISCV_VFMERGE: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      char *s8; size_t s8_len;
      s0 = "vfmerge.vfm";
      s0_len = 11;
      spc( &s1, &s1_len);
      switch (tree->ast_node.vfmerge.vd) { 
        case 0x08:{
          s2 = "v8";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "v21";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "v1";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "v6";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "v9";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "v16";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "v27";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "v28";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "v22";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "v0";
          s2_len = 2;
          break;
        }
        case 0x0A:{
          s2 = "v10";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "v26";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "v23";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "v12";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "v24";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "v2";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "v31";
          s2_len = 3;
          break;
        }
        case 0x0B:{
          s2 = "v11";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "v7";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "v19";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "v4";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "v25";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "v18";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "v20";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "v14";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "v30";
          s2_len = 3;
          break;
        }
        case 0x11:{
          s2 = "v17";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "v3";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "v5";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "v29";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "v13";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "v15";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.vfmerge.vs2) { 
        case 0x08:{
          s4 = "v8";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "v21";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "v1";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "v6";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "v9";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "v16";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "v27";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "v28";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "v22";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "v0";
          s4_len = 2;
          break;
        }
        case 0x0A:{
          s4 = "v10";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "v26";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "v23";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "v12";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "v24";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "v2";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "v31";
          s4_len = 3;
          break;
        }
        case 0x0B:{
          s4 = "v11";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "v7";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "v19";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "v4";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "v25";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "v18";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "v20";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "v14";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "v30";
          s4_len = 3;
          break;
        }
        case 0x11:{
          s4 = "v17";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "v3";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "v5";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "v29";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "v13";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "v15";
          s4_len = 3;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.vfmerge.rs1) { 
        case 0x08:{
          s6 = "fp";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "s5";
          s6_len = 2;
          break;
        }
        case 0x01:{
          s6 = "ra";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "t1";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "s1";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "a6";
          s6_len = 2;
          break;
        }
        case 0x1B:{
          s6 = "s11";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "t3";
          s6_len = 2;
          break;
        }
        case 0x16:{
          s6 = "s6";
          s6_len = 2;
          break;
        }
        case 0x00:{
          s6 = "zero";
          s6_len = 4;
          break;
        }
        case 0x0A:{
          s6 = "a0";
          s6_len = 2;
          break;
        }
        case 0x1A:{
          s6 = "s10";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "s7";
          s6_len = 2;
          break;
        }
        case 0x0C:{
          s6 = "a2";
          s6_len = 2;
          break;
        }
        case 0x18:{
          s6 = "s8";
          s6_len = 2;
          break;
        }
        case 0x02:{
          s6 = "sp";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "t6";
          s6_len = 2;
          break;
        }
        case 0x0B:{
          s6 = "a1";
          s6_len = 2;
          break;
        }
        case 0x07:{
          s6 = "t2";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "s3";
          s6_len = 2;
          break;
        }
        case 0x04:{
          s6 = "tp";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "s9";
          s6_len = 2;
          break;
        }
        case 0x12:{
          s6 = "s2";
          s6_len = 2;
          break;
        }
        case 0x14:{
          s6 = "s4";
          s6_len = 2;
          break;
        }
        case 0x0E:{
          s6 = "a4";
          s6_len = 2;
          break;
        }
        case 0x1E:{
          s6 = "t5";
          s6_len = 2;
          break;
        }
        case 0x11:{
          s6 = "a7";
          s6_len = 2;
          break;
        }
        case 0x03:{
          s6 = "gp";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "t0";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "t4";
          s6_len = 2;
          break;
        }
        case 0x0D:{
          s6 = "a3";
          s6_len = 2;
          break;
        }
        case 0x0F:{
          s6 = "a5";
          s6_len = 2;
          break;
        }
      }
      sep( &s7, &s7_len);
      s8 = "v0";
      s8_len = 2;
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len, s8, s8_len);
      }
    }
    break;
    case RISCV_VFMV: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      s0 = "vfmv.v.f";
      s0_len = 8;
      spc( &s1, &s1_len);
      switch (tree->ast_node.vfmv.vd) { 
        case 0x08:{
          s2 = "v8";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "v21";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "v1";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "v6";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "v9";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "v16";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "v27";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "v28";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "v22";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "v0";
          s2_len = 2;
          break;
        }
        case 0x0A:{
          s2 = "v10";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "v26";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "v23";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "v12";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "v24";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "v2";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "v31";
          s2_len = 3;
          break;
        }
        case 0x0B:{
          s2 = "v11";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "v7";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "v19";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "v4";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "v25";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "v18";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "v20";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "v14";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "v30";
          s2_len = 3;
          break;
        }
        case 0x11:{
          s2 = "v17";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "v3";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "v5";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "v29";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "v13";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "v15";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.vfmv.rs1) { 
        case 0x08:{
          s4 = "fp";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "s5";
          s4_len = 2;
          break;
        }
        case 0x01:{
          s4 = "ra";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "t1";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "a6";
          s4_len = 2;
          break;
        }
        case 0x1B:{
          s4 = "s11";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "t3";
          s4_len = 2;
          break;
        }
        case 0x16:{
          s4 = "s6";
          s4_len = 2;
          break;
        }
        case 0x00:{
          s4 = "zero";
          s4_len = 4;
          break;
        }
        case 0x0A:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x1A:{
          s4 = "s10";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "s7";
          s4_len = 2;
          break;
        }
        case 0x0C:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x18:{
          s4 = "s8";
          s4_len = 2;
          break;
        }
        case 0x02:{
          s4 = "sp";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "t6";
          s4_len = 2;
          break;
        }
        case 0x0B:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x07:{
          s4 = "t2";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "s3";
          s4_len = 2;
          break;
        }
        case 0x04:{
          s4 = "tp";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "s9";
          s4_len = 2;
          break;
        }
        case 0x12:{
          s4 = "s2";
          s4_len = 2;
          break;
        }
        case 0x14:{
          s4 = "s4";
          s4_len = 2;
          break;
        }
        case 0x0E:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x1E:{
          s4 = "t5";
          s4_len = 2;
          break;
        }
        case 0x11:{
          s4 = "a7";
          s4_len = 2;
          break;
        }
        case 0x03:{
          s4 = "gp";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "t0";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "t4";
          s4_len = 2;
          break;
        }
        case 0x0D:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x0F:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      }
    }
    break;
    case RISCV_VFMVSF: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      s0 = "vfmv.s.f";
      s0_len = 8;
      spc( &s1, &s1_len);
      switch (tree->ast_node.vfmvsf.vd) { 
        case 0x08:{
          s2 = "v8";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "v21";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "v1";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "v6";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "v9";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "v16";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "v27";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "v28";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "v22";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "v0";
          s2_len = 2;
          break;
        }
        case 0x0A:{
          s2 = "v10";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "v26";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "v23";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "v12";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "v24";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "v2";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "v31";
          s2_len = 3;
          break;
        }
        case 0x0B:{
          s2 = "v11";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "v7";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "v19";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "v4";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "v25";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "v18";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "v20";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "v14";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "v30";
          s2_len = 3;
          break;
        }
        case 0x11:{
          s2 = "v17";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "v3";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "v5";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "v29";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "v13";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "v15";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.vfmvsf.rs1) { 
        case 0x08:{
          s4 = "fs0";
          s4_len = 3;
          break;
        }
        case 0x15:{
          s4 = "fs5";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "ft1";
          s4_len = 3;
          break;
        }
        case 0x06:{
          s4 = "ft6";
          s4_len = 3;
          break;
        }
        case 0x09:{
          s4 = "fs1";
          s4_len = 3;
          break;
        }
        case 0x10:{
          s4 = "fa6";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "fs11";
          s4_len = 4;
          break;
        }
        case 0x1C:{
          s4 = "ft8";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "fs6";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "ft0";
          s4_len = 3;
          break;
        }
        case 0x0A:{
          s4 = "fa0";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "fs10";
          s4_len = 4;
          break;
        }
        case 0x17:{
          s4 = "fs7";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "fa2";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "fs8";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "ft2";
          s4_len = 3;
          break;
        }
        case 0x1F:{
          s4 = "ft11";
          s4_len = 4;
          break;
        }
        case 0x0B:{
          s4 = "fa1";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "ft7";
          s4_len = 3;
          break;
        }
        case 0x13:{
          s4 = "fs3";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "ft4";
          s4_len = 3;
          break;
        }
        case 0x19:{
          s4 = "fs9";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "fs2";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "fs4";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "fa4";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "ft10";
          s4_len = 4;
          break;
        }
        case 0x11:{
          s4 = "fa7";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "ft3";
          s4_len = 3;
          break;
        }
        case 0x05:{
          s4 = "ft5";
          s4_len = 3;
          break;
        }
        case 0x1D:{
          s4 = "ft9";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "fa3";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "fa5";
          s4_len = 3;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      }
    }
    break;
    case RISCV_VLSEGTYPE: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      char *s8; size_t s8_len;
      char *s9; size_t s9_len;
      char *s10; size_t s10_len;
      char *s11; size_t s11_len;
      s0 = "vl";
      s0_len = 2;
      switch (tree->ast_node.vlsegtype.nf) { 
        case 0x7:{
          s1 = "seg8";
          s1_len = 4;
          break;
        }
        case 0x5:{
          s1 = "seg6";
          s1_len = 4;
          break;
        }
        case 0x1:{
          s1 = "seg2";
          s1_len = 4;
          break;
        }
        case 0x3:{
          s1 = "seg4";
          s1_len = 4;
          break;
        }
        case 0x2:{
          s1 = "seg3";
          s1_len = 4;
          break;
        }
        case 0x4:{
          s1 = "seg5";
          s1_len = 4;
          break;
        }
        case 0x6:{
          s1 = "seg7";
          s1_len = 4;
          break;
        }
        case 0x0:{
          s1 = "";
          s1_len = 0;
          break;
        }
      }
      s2 = "e";
      s2_len = 1;
      switch (tree->ast_node.vlsegtype.width) { 
        case RISCV_VLE16:{
          s3 = "16";
          s3_len = 2;
          break;
        }
        case RISCV_VLE32:{
          s3 = "32";
          s3_len = 2;
          break;
        }
        case RISCV_VLE64:{
          s3 = "64";
          s3_len = 2;
          break;
        }
        case RISCV_VLE8:{
          s3 = "8";
          s3_len = 1;
          break;
        }
      }
      s4 = ".v";
      s4_len = 2;
      spc( &s5, &s5_len);
      switch (tree->ast_node.vlsegtype.vd) { 
        case 0x08:{
          s6 = "v8";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "v21";
          s6_len = 3;
          break;
        }
        case 0x01:{
          s6 = "v1";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "v6";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "v9";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "v16";
          s6_len = 3;
          break;
        }
        case 0x1B:{
          s6 = "v27";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "v28";
          s6_len = 3;
          break;
        }
        case 0x16:{
          s6 = "v22";
          s6_len = 3;
          break;
        }
        case 0x00:{
          s6 = "v0";
          s6_len = 2;
          break;
        }
        case 0x0A:{
          s6 = "v10";
          s6_len = 3;
          break;
        }
        case 0x1A:{
          s6 = "v26";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "v23";
          s6_len = 3;
          break;
        }
        case 0x0C:{
          s6 = "v12";
          s6_len = 3;
          break;
        }
        case 0x18:{
          s6 = "v24";
          s6_len = 3;
          break;
        }
        case 0x02:{
          s6 = "v2";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "v31";
          s6_len = 3;
          break;
        }
        case 0x0B:{
          s6 = "v11";
          s6_len = 3;
          break;
        }
        case 0x07:{
          s6 = "v7";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "v19";
          s6_len = 3;
          break;
        }
        case 0x04:{
          s6 = "v4";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "v25";
          s6_len = 3;
          break;
        }
        case 0x12:{
          s6 = "v18";
          s6_len = 3;
          break;
        }
        case 0x14:{
          s6 = "v20";
          s6_len = 3;
          break;
        }
        case 0x0E:{
          s6 = "v14";
          s6_len = 3;
          break;
        }
        case 0x1E:{
          s6 = "v30";
          s6_len = 3;
          break;
        }
        case 0x11:{
          s6 = "v17";
          s6_len = 3;
          break;
        }
        case 0x03:{
          s6 = "v3";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "v5";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "v29";
          s6_len = 3;
          break;
        }
        case 0x0D:{
          s6 = "v13";
          s6_len = 3;
          break;
        }
        case 0x0F:{
          s6 = "v15";
          s6_len = 3;
          break;
        }
      }
      sep( &s7, &s7_len);
      s8 = "(";
      s8_len = 1;
      switch (tree->ast_node.vlsegtype.rs1) { 
        case 0x08:{
          s9 = "fp";
          s9_len = 2;
          break;
        }
        case 0x15:{
          s9 = "s5";
          s9_len = 2;
          break;
        }
        case 0x01:{
          s9 = "ra";
          s9_len = 2;
          break;
        }
        case 0x06:{
          s9 = "t1";
          s9_len = 2;
          break;
        }
        case 0x09:{
          s9 = "s1";
          s9_len = 2;
          break;
        }
        case 0x10:{
          s9 = "a6";
          s9_len = 2;
          break;
        }
        case 0x1B:{
          s9 = "s11";
          s9_len = 3;
          break;
        }
        case 0x1C:{
          s9 = "t3";
          s9_len = 2;
          break;
        }
        case 0x16:{
          s9 = "s6";
          s9_len = 2;
          break;
        }
        case 0x00:{
          s9 = "zero";
          s9_len = 4;
          break;
        }
        case 0x0A:{
          s9 = "a0";
          s9_len = 2;
          break;
        }
        case 0x1A:{
          s9 = "s10";
          s9_len = 3;
          break;
        }
        case 0x17:{
          s9 = "s7";
          s9_len = 2;
          break;
        }
        case 0x0C:{
          s9 = "a2";
          s9_len = 2;
          break;
        }
        case 0x18:{
          s9 = "s8";
          s9_len = 2;
          break;
        }
        case 0x02:{
          s9 = "sp";
          s9_len = 2;
          break;
        }
        case 0x1F:{
          s9 = "t6";
          s9_len = 2;
          break;
        }
        case 0x0B:{
          s9 = "a1";
          s9_len = 2;
          break;
        }
        case 0x07:{
          s9 = "t2";
          s9_len = 2;
          break;
        }
        case 0x13:{
          s9 = "s3";
          s9_len = 2;
          break;
        }
        case 0x04:{
          s9 = "tp";
          s9_len = 2;
          break;
        }
        case 0x19:{
          s9 = "s9";
          s9_len = 2;
          break;
        }
        case 0x12:{
          s9 = "s2";
          s9_len = 2;
          break;
        }
        case 0x14:{
          s9 = "s4";
          s9_len = 2;
          break;
        }
        case 0x0E:{
          s9 = "a4";
          s9_len = 2;
          break;
        }
        case 0x1E:{
          s9 = "t5";
          s9_len = 2;
          break;
        }
        case 0x11:{
          s9 = "a7";
          s9_len = 2;
          break;
        }
        case 0x03:{
          s9 = "gp";
          s9_len = 2;
          break;
        }
        case 0x05:{
          s9 = "t0";
          s9_len = 2;
          break;
        }
        case 0x1D:{
          s9 = "t4";
          s9_len = 2;
          break;
        }
        case 0x0D:{
          s9 = "a3";
          s9_len = 2;
          break;
        }
        case 0x0F:{
          s9 = "a5";
          s9_len = 2;
          break;
        }
      }
      s10 = ")";
      s10_len = 1;
      maybe_vmask(tree->ast_node.vlsegtype.vm, &s11, &s11_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len, s8, s8_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len + s8_len, s9, s9_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len + s8_len + s9_len, s10, s10_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len + s8_len + s9_len + s10_len, s11, s11_len);
      }
    }
    break;
    case RISCV_VLSEGFFTYPE: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      char *s8; size_t s8_len;
      char *s9; size_t s9_len;
      char *s10; size_t s10_len;
      char *s11; size_t s11_len;
      s0 = "vl";
      s0_len = 2;
      switch (tree->ast_node.vlsegfftype.nf) { 
        case 0x7:{
          s1 = "seg8";
          s1_len = 4;
          break;
        }
        case 0x5:{
          s1 = "seg6";
          s1_len = 4;
          break;
        }
        case 0x1:{
          s1 = "seg2";
          s1_len = 4;
          break;
        }
        case 0x3:{
          s1 = "seg4";
          s1_len = 4;
          break;
        }
        case 0x2:{
          s1 = "seg3";
          s1_len = 4;
          break;
        }
        case 0x4:{
          s1 = "seg5";
          s1_len = 4;
          break;
        }
        case 0x6:{
          s1 = "seg7";
          s1_len = 4;
          break;
        }
        case 0x0:{
          s1 = "";
          s1_len = 0;
          break;
        }
      }
      s2 = "e";
      s2_len = 1;
      switch (tree->ast_node.vlsegfftype.width) { 
        case RISCV_VLE16:{
          s3 = "16";
          s3_len = 2;
          break;
        }
        case RISCV_VLE32:{
          s3 = "32";
          s3_len = 2;
          break;
        }
        case RISCV_VLE64:{
          s3 = "64";
          s3_len = 2;
          break;
        }
        case RISCV_VLE8:{
          s3 = "8";
          s3_len = 1;
          break;
        }
      }
      s4 = "ff.v";
      s4_len = 4;
      spc( &s5, &s5_len);
      switch (tree->ast_node.vlsegfftype.vd) { 
        case 0x08:{
          s6 = "v8";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "v21";
          s6_len = 3;
          break;
        }
        case 0x01:{
          s6 = "v1";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "v6";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "v9";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "v16";
          s6_len = 3;
          break;
        }
        case 0x1B:{
          s6 = "v27";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "v28";
          s6_len = 3;
          break;
        }
        case 0x16:{
          s6 = "v22";
          s6_len = 3;
          break;
        }
        case 0x00:{
          s6 = "v0";
          s6_len = 2;
          break;
        }
        case 0x0A:{
          s6 = "v10";
          s6_len = 3;
          break;
        }
        case 0x1A:{
          s6 = "v26";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "v23";
          s6_len = 3;
          break;
        }
        case 0x0C:{
          s6 = "v12";
          s6_len = 3;
          break;
        }
        case 0x18:{
          s6 = "v24";
          s6_len = 3;
          break;
        }
        case 0x02:{
          s6 = "v2";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "v31";
          s6_len = 3;
          break;
        }
        case 0x0B:{
          s6 = "v11";
          s6_len = 3;
          break;
        }
        case 0x07:{
          s6 = "v7";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "v19";
          s6_len = 3;
          break;
        }
        case 0x04:{
          s6 = "v4";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "v25";
          s6_len = 3;
          break;
        }
        case 0x12:{
          s6 = "v18";
          s6_len = 3;
          break;
        }
        case 0x14:{
          s6 = "v20";
          s6_len = 3;
          break;
        }
        case 0x0E:{
          s6 = "v14";
          s6_len = 3;
          break;
        }
        case 0x1E:{
          s6 = "v30";
          s6_len = 3;
          break;
        }
        case 0x11:{
          s6 = "v17";
          s6_len = 3;
          break;
        }
        case 0x03:{
          s6 = "v3";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "v5";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "v29";
          s6_len = 3;
          break;
        }
        case 0x0D:{
          s6 = "v13";
          s6_len = 3;
          break;
        }
        case 0x0F:{
          s6 = "v15";
          s6_len = 3;
          break;
        }
      }
      sep( &s7, &s7_len);
      s8 = "(";
      s8_len = 1;
      switch (tree->ast_node.vlsegfftype.rs1) { 
        case 0x08:{
          s9 = "fp";
          s9_len = 2;
          break;
        }
        case 0x15:{
          s9 = "s5";
          s9_len = 2;
          break;
        }
        case 0x01:{
          s9 = "ra";
          s9_len = 2;
          break;
        }
        case 0x06:{
          s9 = "t1";
          s9_len = 2;
          break;
        }
        case 0x09:{
          s9 = "s1";
          s9_len = 2;
          break;
        }
        case 0x10:{
          s9 = "a6";
          s9_len = 2;
          break;
        }
        case 0x1B:{
          s9 = "s11";
          s9_len = 3;
          break;
        }
        case 0x1C:{
          s9 = "t3";
          s9_len = 2;
          break;
        }
        case 0x16:{
          s9 = "s6";
          s9_len = 2;
          break;
        }
        case 0x00:{
          s9 = "zero";
          s9_len = 4;
          break;
        }
        case 0x0A:{
          s9 = "a0";
          s9_len = 2;
          break;
        }
        case 0x1A:{
          s9 = "s10";
          s9_len = 3;
          break;
        }
        case 0x17:{
          s9 = "s7";
          s9_len = 2;
          break;
        }
        case 0x0C:{
          s9 = "a2";
          s9_len = 2;
          break;
        }
        case 0x18:{
          s9 = "s8";
          s9_len = 2;
          break;
        }
        case 0x02:{
          s9 = "sp";
          s9_len = 2;
          break;
        }
        case 0x1F:{
          s9 = "t6";
          s9_len = 2;
          break;
        }
        case 0x0B:{
          s9 = "a1";
          s9_len = 2;
          break;
        }
        case 0x07:{
          s9 = "t2";
          s9_len = 2;
          break;
        }
        case 0x13:{
          s9 = "s3";
          s9_len = 2;
          break;
        }
        case 0x04:{
          s9 = "tp";
          s9_len = 2;
          break;
        }
        case 0x19:{
          s9 = "s9";
          s9_len = 2;
          break;
        }
        case 0x12:{
          s9 = "s2";
          s9_len = 2;
          break;
        }
        case 0x14:{
          s9 = "s4";
          s9_len = 2;
          break;
        }
        case 0x0E:{
          s9 = "a4";
          s9_len = 2;
          break;
        }
        case 0x1E:{
          s9 = "t5";
          s9_len = 2;
          break;
        }
        case 0x11:{
          s9 = "a7";
          s9_len = 2;
          break;
        }
        case 0x03:{
          s9 = "gp";
          s9_len = 2;
          break;
        }
        case 0x05:{
          s9 = "t0";
          s9_len = 2;
          break;
        }
        case 0x1D:{
          s9 = "t4";
          s9_len = 2;
          break;
        }
        case 0x0D:{
          s9 = "a3";
          s9_len = 2;
          break;
        }
        case 0x0F:{
          s9 = "a5";
          s9_len = 2;
          break;
        }
      }
      s10 = ")";
      s10_len = 1;
      maybe_vmask(tree->ast_node.vlsegfftype.vm, &s11, &s11_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len, s8, s8_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len + s8_len, s9, s9_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len + s8_len + s9_len, s10, s10_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len + s8_len + s9_len + s10_len, s11, s11_len);
      }
    }
    break;
    case RISCV_VSSEGTYPE: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      char *s8; size_t s8_len;
      char *s9; size_t s9_len;
      char *s10; size_t s10_len;
      char *s11; size_t s11_len;
      s0 = "vs";
      s0_len = 2;
      switch (tree->ast_node.vssegtype.nf) { 
        case 0x7:{
          s1 = "seg8";
          s1_len = 4;
          break;
        }
        case 0x5:{
          s1 = "seg6";
          s1_len = 4;
          break;
        }
        case 0x1:{
          s1 = "seg2";
          s1_len = 4;
          break;
        }
        case 0x3:{
          s1 = "seg4";
          s1_len = 4;
          break;
        }
        case 0x2:{
          s1 = "seg3";
          s1_len = 4;
          break;
        }
        case 0x4:{
          s1 = "seg5";
          s1_len = 4;
          break;
        }
        case 0x6:{
          s1 = "seg7";
          s1_len = 4;
          break;
        }
        case 0x0:{
          s1 = "";
          s1_len = 0;
          break;
        }
      }
      s2 = "e";
      s2_len = 1;
      switch (tree->ast_node.vssegtype.width) { 
        case RISCV_VLE16:{
          s3 = "16";
          s3_len = 2;
          break;
        }
        case RISCV_VLE32:{
          s3 = "32";
          s3_len = 2;
          break;
        }
        case RISCV_VLE64:{
          s3 = "64";
          s3_len = 2;
          break;
        }
        case RISCV_VLE8:{
          s3 = "8";
          s3_len = 1;
          break;
        }
      }
      s4 = ".v";
      s4_len = 2;
      spc( &s5, &s5_len);
      switch (tree->ast_node.vssegtype.vs3) { 
        case 0x08:{
          s6 = "v8";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "v21";
          s6_len = 3;
          break;
        }
        case 0x01:{
          s6 = "v1";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "v6";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "v9";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "v16";
          s6_len = 3;
          break;
        }
        case 0x1B:{
          s6 = "v27";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "v28";
          s6_len = 3;
          break;
        }
        case 0x16:{
          s6 = "v22";
          s6_len = 3;
          break;
        }
        case 0x00:{
          s6 = "v0";
          s6_len = 2;
          break;
        }
        case 0x0A:{
          s6 = "v10";
          s6_len = 3;
          break;
        }
        case 0x1A:{
          s6 = "v26";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "v23";
          s6_len = 3;
          break;
        }
        case 0x0C:{
          s6 = "v12";
          s6_len = 3;
          break;
        }
        case 0x18:{
          s6 = "v24";
          s6_len = 3;
          break;
        }
        case 0x02:{
          s6 = "v2";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "v31";
          s6_len = 3;
          break;
        }
        case 0x0B:{
          s6 = "v11";
          s6_len = 3;
          break;
        }
        case 0x07:{
          s6 = "v7";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "v19";
          s6_len = 3;
          break;
        }
        case 0x04:{
          s6 = "v4";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "v25";
          s6_len = 3;
          break;
        }
        case 0x12:{
          s6 = "v18";
          s6_len = 3;
          break;
        }
        case 0x14:{
          s6 = "v20";
          s6_len = 3;
          break;
        }
        case 0x0E:{
          s6 = "v14";
          s6_len = 3;
          break;
        }
        case 0x1E:{
          s6 = "v30";
          s6_len = 3;
          break;
        }
        case 0x11:{
          s6 = "v17";
          s6_len = 3;
          break;
        }
        case 0x03:{
          s6 = "v3";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "v5";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "v29";
          s6_len = 3;
          break;
        }
        case 0x0D:{
          s6 = "v13";
          s6_len = 3;
          break;
        }
        case 0x0F:{
          s6 = "v15";
          s6_len = 3;
          break;
        }
      }
      sep( &s7, &s7_len);
      s8 = "(";
      s8_len = 1;
      switch (tree->ast_node.vssegtype.rs1) { 
        case 0x08:{
          s9 = "fp";
          s9_len = 2;
          break;
        }
        case 0x15:{
          s9 = "s5";
          s9_len = 2;
          break;
        }
        case 0x01:{
          s9 = "ra";
          s9_len = 2;
          break;
        }
        case 0x06:{
          s9 = "t1";
          s9_len = 2;
          break;
        }
        case 0x09:{
          s9 = "s1";
          s9_len = 2;
          break;
        }
        case 0x10:{
          s9 = "a6";
          s9_len = 2;
          break;
        }
        case 0x1B:{
          s9 = "s11";
          s9_len = 3;
          break;
        }
        case 0x1C:{
          s9 = "t3";
          s9_len = 2;
          break;
        }
        case 0x16:{
          s9 = "s6";
          s9_len = 2;
          break;
        }
        case 0x00:{
          s9 = "zero";
          s9_len = 4;
          break;
        }
        case 0x0A:{
          s9 = "a0";
          s9_len = 2;
          break;
        }
        case 0x1A:{
          s9 = "s10";
          s9_len = 3;
          break;
        }
        case 0x17:{
          s9 = "s7";
          s9_len = 2;
          break;
        }
        case 0x0C:{
          s9 = "a2";
          s9_len = 2;
          break;
        }
        case 0x18:{
          s9 = "s8";
          s9_len = 2;
          break;
        }
        case 0x02:{
          s9 = "sp";
          s9_len = 2;
          break;
        }
        case 0x1F:{
          s9 = "t6";
          s9_len = 2;
          break;
        }
        case 0x0B:{
          s9 = "a1";
          s9_len = 2;
          break;
        }
        case 0x07:{
          s9 = "t2";
          s9_len = 2;
          break;
        }
        case 0x13:{
          s9 = "s3";
          s9_len = 2;
          break;
        }
        case 0x04:{
          s9 = "tp";
          s9_len = 2;
          break;
        }
        case 0x19:{
          s9 = "s9";
          s9_len = 2;
          break;
        }
        case 0x12:{
          s9 = "s2";
          s9_len = 2;
          break;
        }
        case 0x14:{
          s9 = "s4";
          s9_len = 2;
          break;
        }
        case 0x0E:{
          s9 = "a4";
          s9_len = 2;
          break;
        }
        case 0x1E:{
          s9 = "t5";
          s9_len = 2;
          break;
        }
        case 0x11:{
          s9 = "a7";
          s9_len = 2;
          break;
        }
        case 0x03:{
          s9 = "gp";
          s9_len = 2;
          break;
        }
        case 0x05:{
          s9 = "t0";
          s9_len = 2;
          break;
        }
        case 0x1D:{
          s9 = "t4";
          s9_len = 2;
          break;
        }
        case 0x0D:{
          s9 = "a3";
          s9_len = 2;
          break;
        }
        case 0x0F:{
          s9 = "a5";
          s9_len = 2;
          break;
        }
      }
      s10 = ")";
      s10_len = 1;
      maybe_vmask(tree->ast_node.vssegtype.vm, &s11, &s11_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len, s8, s8_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len + s8_len, s9, s9_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len + s8_len + s9_len, s10, s10_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len + s8_len + s9_len + s10_len, s11, s11_len);
      }
    }
    break;
    case RISCV_VLSSEGTYPE: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      char *s8; size_t s8_len;
      char *s9; size_t s9_len;
      char *s10; size_t s10_len;
      char *s11; size_t s11_len;
      char *s12; size_t s12_len;
      char *s13; size_t s13_len;
      s0 = "vls";
      s0_len = 3;
      switch (tree->ast_node.vlssegtype.nf) { 
        case 0x7:{
          s1 = "seg8";
          s1_len = 4;
          break;
        }
        case 0x5:{
          s1 = "seg6";
          s1_len = 4;
          break;
        }
        case 0x1:{
          s1 = "seg2";
          s1_len = 4;
          break;
        }
        case 0x3:{
          s1 = "seg4";
          s1_len = 4;
          break;
        }
        case 0x2:{
          s1 = "seg3";
          s1_len = 4;
          break;
        }
        case 0x4:{
          s1 = "seg5";
          s1_len = 4;
          break;
        }
        case 0x6:{
          s1 = "seg7";
          s1_len = 4;
          break;
        }
        case 0x0:{
          s1 = "";
          s1_len = 0;
          break;
        }
      }
      s2 = "e";
      s2_len = 1;
      switch (tree->ast_node.vlssegtype.width) { 
        case RISCV_VLE16:{
          s3 = "16";
          s3_len = 2;
          break;
        }
        case RISCV_VLE32:{
          s3 = "32";
          s3_len = 2;
          break;
        }
        case RISCV_VLE64:{
          s3 = "64";
          s3_len = 2;
          break;
        }
        case RISCV_VLE8:{
          s3 = "8";
          s3_len = 1;
          break;
        }
      }
      s4 = ".v";
      s4_len = 2;
      spc( &s5, &s5_len);
      switch (tree->ast_node.vlssegtype.vd) { 
        case 0x08:{
          s6 = "v8";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "v21";
          s6_len = 3;
          break;
        }
        case 0x01:{
          s6 = "v1";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "v6";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "v9";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "v16";
          s6_len = 3;
          break;
        }
        case 0x1B:{
          s6 = "v27";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "v28";
          s6_len = 3;
          break;
        }
        case 0x16:{
          s6 = "v22";
          s6_len = 3;
          break;
        }
        case 0x00:{
          s6 = "v0";
          s6_len = 2;
          break;
        }
        case 0x0A:{
          s6 = "v10";
          s6_len = 3;
          break;
        }
        case 0x1A:{
          s6 = "v26";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "v23";
          s6_len = 3;
          break;
        }
        case 0x0C:{
          s6 = "v12";
          s6_len = 3;
          break;
        }
        case 0x18:{
          s6 = "v24";
          s6_len = 3;
          break;
        }
        case 0x02:{
          s6 = "v2";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "v31";
          s6_len = 3;
          break;
        }
        case 0x0B:{
          s6 = "v11";
          s6_len = 3;
          break;
        }
        case 0x07:{
          s6 = "v7";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "v19";
          s6_len = 3;
          break;
        }
        case 0x04:{
          s6 = "v4";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "v25";
          s6_len = 3;
          break;
        }
        case 0x12:{
          s6 = "v18";
          s6_len = 3;
          break;
        }
        case 0x14:{
          s6 = "v20";
          s6_len = 3;
          break;
        }
        case 0x0E:{
          s6 = "v14";
          s6_len = 3;
          break;
        }
        case 0x1E:{
          s6 = "v30";
          s6_len = 3;
          break;
        }
        case 0x11:{
          s6 = "v17";
          s6_len = 3;
          break;
        }
        case 0x03:{
          s6 = "v3";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "v5";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "v29";
          s6_len = 3;
          break;
        }
        case 0x0D:{
          s6 = "v13";
          s6_len = 3;
          break;
        }
        case 0x0F:{
          s6 = "v15";
          s6_len = 3;
          break;
        }
      }
      sep( &s7, &s7_len);
      s8 = "(";
      s8_len = 1;
      switch (tree->ast_node.vlssegtype.rs1) { 
        case 0x08:{
          s9 = "fp";
          s9_len = 2;
          break;
        }
        case 0x15:{
          s9 = "s5";
          s9_len = 2;
          break;
        }
        case 0x01:{
          s9 = "ra";
          s9_len = 2;
          break;
        }
        case 0x06:{
          s9 = "t1";
          s9_len = 2;
          break;
        }
        case 0x09:{
          s9 = "s1";
          s9_len = 2;
          break;
        }
        case 0x10:{
          s9 = "a6";
          s9_len = 2;
          break;
        }
        case 0x1B:{
          s9 = "s11";
          s9_len = 3;
          break;
        }
        case 0x1C:{
          s9 = "t3";
          s9_len = 2;
          break;
        }
        case 0x16:{
          s9 = "s6";
          s9_len = 2;
          break;
        }
        case 0x00:{
          s9 = "zero";
          s9_len = 4;
          break;
        }
        case 0x0A:{
          s9 = "a0";
          s9_len = 2;
          break;
        }
        case 0x1A:{
          s9 = "s10";
          s9_len = 3;
          break;
        }
        case 0x17:{
          s9 = "s7";
          s9_len = 2;
          break;
        }
        case 0x0C:{
          s9 = "a2";
          s9_len = 2;
          break;
        }
        case 0x18:{
          s9 = "s8";
          s9_len = 2;
          break;
        }
        case 0x02:{
          s9 = "sp";
          s9_len = 2;
          break;
        }
        case 0x1F:{
          s9 = "t6";
          s9_len = 2;
          break;
        }
        case 0x0B:{
          s9 = "a1";
          s9_len = 2;
          break;
        }
        case 0x07:{
          s9 = "t2";
          s9_len = 2;
          break;
        }
        case 0x13:{
          s9 = "s3";
          s9_len = 2;
          break;
        }
        case 0x04:{
          s9 = "tp";
          s9_len = 2;
          break;
        }
        case 0x19:{
          s9 = "s9";
          s9_len = 2;
          break;
        }
        case 0x12:{
          s9 = "s2";
          s9_len = 2;
          break;
        }
        case 0x14:{
          s9 = "s4";
          s9_len = 2;
          break;
        }
        case 0x0E:{
          s9 = "a4";
          s9_len = 2;
          break;
        }
        case 0x1E:{
          s9 = "t5";
          s9_len = 2;
          break;
        }
        case 0x11:{
          s9 = "a7";
          s9_len = 2;
          break;
        }
        case 0x03:{
          s9 = "gp";
          s9_len = 2;
          break;
        }
        case 0x05:{
          s9 = "t0";
          s9_len = 2;
          break;
        }
        case 0x1D:{
          s9 = "t4";
          s9_len = 2;
          break;
        }
        case 0x0D:{
          s9 = "a3";
          s9_len = 2;
          break;
        }
        case 0x0F:{
          s9 = "a5";
          s9_len = 2;
          break;
        }
      }
      s10 = ")";
      s10_len = 1;
      sep( &s11, &s11_len);
      switch (tree->ast_node.vlssegtype.rs2) { 
        case 0x08:{
          s12 = "fp";
          s12_len = 2;
          break;
        }
        case 0x15:{
          s12 = "s5";
          s12_len = 2;
          break;
        }
        case 0x01:{
          s12 = "ra";
          s12_len = 2;
          break;
        }
        case 0x06:{
          s12 = "t1";
          s12_len = 2;
          break;
        }
        case 0x09:{
          s12 = "s1";
          s12_len = 2;
          break;
        }
        case 0x10:{
          s12 = "a6";
          s12_len = 2;
          break;
        }
        case 0x1B:{
          s12 = "s11";
          s12_len = 3;
          break;
        }
        case 0x1C:{
          s12 = "t3";
          s12_len = 2;
          break;
        }
        case 0x16:{
          s12 = "s6";
          s12_len = 2;
          break;
        }
        case 0x00:{
          s12 = "zero";
          s12_len = 4;
          break;
        }
        case 0x0A:{
          s12 = "a0";
          s12_len = 2;
          break;
        }
        case 0x1A:{
          s12 = "s10";
          s12_len = 3;
          break;
        }
        case 0x17:{
          s12 = "s7";
          s12_len = 2;
          break;
        }
        case 0x0C:{
          s12 = "a2";
          s12_len = 2;
          break;
        }
        case 0x18:{
          s12 = "s8";
          s12_len = 2;
          break;
        }
        case 0x02:{
          s12 = "sp";
          s12_len = 2;
          break;
        }
        case 0x1F:{
          s12 = "t6";
          s12_len = 2;
          break;
        }
        case 0x0B:{
          s12 = "a1";
          s12_len = 2;
          break;
        }
        case 0x07:{
          s12 = "t2";
          s12_len = 2;
          break;
        }
        case 0x13:{
          s12 = "s3";
          s12_len = 2;
          break;
        }
        case 0x04:{
          s12 = "tp";
          s12_len = 2;
          break;
        }
        case 0x19:{
          s12 = "s9";
          s12_len = 2;
          break;
        }
        case 0x12:{
          s12 = "s2";
          s12_len = 2;
          break;
        }
        case 0x14:{
          s12 = "s4";
          s12_len = 2;
          break;
        }
        case 0x0E:{
          s12 = "a4";
          s12_len = 2;
          break;
        }
        case 0x1E:{
          s12 = "t5";
          s12_len = 2;
          break;
        }
        case 0x11:{
          s12 = "a7";
          s12_len = 2;
          break;
        }
        case 0x03:{
          s12 = "gp";
          s12_len = 2;
          break;
        }
        case 0x05:{
          s12 = "t0";
          s12_len = 2;
          break;
        }
        case 0x1D:{
          s12 = "t4";
          s12_len = 2;
          break;
        }
        case 0x0D:{
          s12 = "a3";
          s12_len = 2;
          break;
        }
        case 0x0F:{
          s12 = "a5";
          s12_len = 2;
          break;
        }
      }
      maybe_vmask(tree->ast_node.vlssegtype.vm, &s13, &s13_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len, s8, s8_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len + s8_len, s9, s9_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len + s8_len + s9_len, s10, s10_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len + s8_len + s9_len + s10_len, s11, s11_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len + s8_len + s9_len + s10_len + s11_len, s12, s12_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len + s8_len + s9_len + s10_len + s11_len + s12_len, s13, s13_len);
      }
    }
    break;
    case RISCV_VSSSEGTYPE: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      char *s8; size_t s8_len;
      char *s9; size_t s9_len;
      char *s10; size_t s10_len;
      char *s11; size_t s11_len;
      char *s12; size_t s12_len;
      char *s13; size_t s13_len;
      s0 = "vss";
      s0_len = 3;
      switch (tree->ast_node.vsssegtype.nf) { 
        case 0x7:{
          s1 = "seg8";
          s1_len = 4;
          break;
        }
        case 0x5:{
          s1 = "seg6";
          s1_len = 4;
          break;
        }
        case 0x1:{
          s1 = "seg2";
          s1_len = 4;
          break;
        }
        case 0x3:{
          s1 = "seg4";
          s1_len = 4;
          break;
        }
        case 0x2:{
          s1 = "seg3";
          s1_len = 4;
          break;
        }
        case 0x4:{
          s1 = "seg5";
          s1_len = 4;
          break;
        }
        case 0x6:{
          s1 = "seg7";
          s1_len = 4;
          break;
        }
        case 0x0:{
          s1 = "";
          s1_len = 0;
          break;
        }
      }
      s2 = "e";
      s2_len = 1;
      switch (tree->ast_node.vsssegtype.width) { 
        case RISCV_VLE16:{
          s3 = "16";
          s3_len = 2;
          break;
        }
        case RISCV_VLE32:{
          s3 = "32";
          s3_len = 2;
          break;
        }
        case RISCV_VLE64:{
          s3 = "64";
          s3_len = 2;
          break;
        }
        case RISCV_VLE8:{
          s3 = "8";
          s3_len = 1;
          break;
        }
      }
      s4 = ".v";
      s4_len = 2;
      spc( &s5, &s5_len);
      switch (tree->ast_node.vsssegtype.vs3) { 
        case 0x08:{
          s6 = "v8";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "v21";
          s6_len = 3;
          break;
        }
        case 0x01:{
          s6 = "v1";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "v6";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "v9";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "v16";
          s6_len = 3;
          break;
        }
        case 0x1B:{
          s6 = "v27";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "v28";
          s6_len = 3;
          break;
        }
        case 0x16:{
          s6 = "v22";
          s6_len = 3;
          break;
        }
        case 0x00:{
          s6 = "v0";
          s6_len = 2;
          break;
        }
        case 0x0A:{
          s6 = "v10";
          s6_len = 3;
          break;
        }
        case 0x1A:{
          s6 = "v26";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "v23";
          s6_len = 3;
          break;
        }
        case 0x0C:{
          s6 = "v12";
          s6_len = 3;
          break;
        }
        case 0x18:{
          s6 = "v24";
          s6_len = 3;
          break;
        }
        case 0x02:{
          s6 = "v2";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "v31";
          s6_len = 3;
          break;
        }
        case 0x0B:{
          s6 = "v11";
          s6_len = 3;
          break;
        }
        case 0x07:{
          s6 = "v7";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "v19";
          s6_len = 3;
          break;
        }
        case 0x04:{
          s6 = "v4";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "v25";
          s6_len = 3;
          break;
        }
        case 0x12:{
          s6 = "v18";
          s6_len = 3;
          break;
        }
        case 0x14:{
          s6 = "v20";
          s6_len = 3;
          break;
        }
        case 0x0E:{
          s6 = "v14";
          s6_len = 3;
          break;
        }
        case 0x1E:{
          s6 = "v30";
          s6_len = 3;
          break;
        }
        case 0x11:{
          s6 = "v17";
          s6_len = 3;
          break;
        }
        case 0x03:{
          s6 = "v3";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "v5";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "v29";
          s6_len = 3;
          break;
        }
        case 0x0D:{
          s6 = "v13";
          s6_len = 3;
          break;
        }
        case 0x0F:{
          s6 = "v15";
          s6_len = 3;
          break;
        }
      }
      sep( &s7, &s7_len);
      s8 = "(";
      s8_len = 1;
      switch (tree->ast_node.vsssegtype.rs1) { 
        case 0x08:{
          s9 = "fp";
          s9_len = 2;
          break;
        }
        case 0x15:{
          s9 = "s5";
          s9_len = 2;
          break;
        }
        case 0x01:{
          s9 = "ra";
          s9_len = 2;
          break;
        }
        case 0x06:{
          s9 = "t1";
          s9_len = 2;
          break;
        }
        case 0x09:{
          s9 = "s1";
          s9_len = 2;
          break;
        }
        case 0x10:{
          s9 = "a6";
          s9_len = 2;
          break;
        }
        case 0x1B:{
          s9 = "s11";
          s9_len = 3;
          break;
        }
        case 0x1C:{
          s9 = "t3";
          s9_len = 2;
          break;
        }
        case 0x16:{
          s9 = "s6";
          s9_len = 2;
          break;
        }
        case 0x00:{
          s9 = "zero";
          s9_len = 4;
          break;
        }
        case 0x0A:{
          s9 = "a0";
          s9_len = 2;
          break;
        }
        case 0x1A:{
          s9 = "s10";
          s9_len = 3;
          break;
        }
        case 0x17:{
          s9 = "s7";
          s9_len = 2;
          break;
        }
        case 0x0C:{
          s9 = "a2";
          s9_len = 2;
          break;
        }
        case 0x18:{
          s9 = "s8";
          s9_len = 2;
          break;
        }
        case 0x02:{
          s9 = "sp";
          s9_len = 2;
          break;
        }
        case 0x1F:{
          s9 = "t6";
          s9_len = 2;
          break;
        }
        case 0x0B:{
          s9 = "a1";
          s9_len = 2;
          break;
        }
        case 0x07:{
          s9 = "t2";
          s9_len = 2;
          break;
        }
        case 0x13:{
          s9 = "s3";
          s9_len = 2;
          break;
        }
        case 0x04:{
          s9 = "tp";
          s9_len = 2;
          break;
        }
        case 0x19:{
          s9 = "s9";
          s9_len = 2;
          break;
        }
        case 0x12:{
          s9 = "s2";
          s9_len = 2;
          break;
        }
        case 0x14:{
          s9 = "s4";
          s9_len = 2;
          break;
        }
        case 0x0E:{
          s9 = "a4";
          s9_len = 2;
          break;
        }
        case 0x1E:{
          s9 = "t5";
          s9_len = 2;
          break;
        }
        case 0x11:{
          s9 = "a7";
          s9_len = 2;
          break;
        }
        case 0x03:{
          s9 = "gp";
          s9_len = 2;
          break;
        }
        case 0x05:{
          s9 = "t0";
          s9_len = 2;
          break;
        }
        case 0x1D:{
          s9 = "t4";
          s9_len = 2;
          break;
        }
        case 0x0D:{
          s9 = "a3";
          s9_len = 2;
          break;
        }
        case 0x0F:{
          s9 = "a5";
          s9_len = 2;
          break;
        }
      }
      s10 = ")";
      s10_len = 1;
      sep( &s11, &s11_len);
      switch (tree->ast_node.vsssegtype.rs2) { 
        case 0x08:{
          s12 = "fp";
          s12_len = 2;
          break;
        }
        case 0x15:{
          s12 = "s5";
          s12_len = 2;
          break;
        }
        case 0x01:{
          s12 = "ra";
          s12_len = 2;
          break;
        }
        case 0x06:{
          s12 = "t1";
          s12_len = 2;
          break;
        }
        case 0x09:{
          s12 = "s1";
          s12_len = 2;
          break;
        }
        case 0x10:{
          s12 = "a6";
          s12_len = 2;
          break;
        }
        case 0x1B:{
          s12 = "s11";
          s12_len = 3;
          break;
        }
        case 0x1C:{
          s12 = "t3";
          s12_len = 2;
          break;
        }
        case 0x16:{
          s12 = "s6";
          s12_len = 2;
          break;
        }
        case 0x00:{
          s12 = "zero";
          s12_len = 4;
          break;
        }
        case 0x0A:{
          s12 = "a0";
          s12_len = 2;
          break;
        }
        case 0x1A:{
          s12 = "s10";
          s12_len = 3;
          break;
        }
        case 0x17:{
          s12 = "s7";
          s12_len = 2;
          break;
        }
        case 0x0C:{
          s12 = "a2";
          s12_len = 2;
          break;
        }
        case 0x18:{
          s12 = "s8";
          s12_len = 2;
          break;
        }
        case 0x02:{
          s12 = "sp";
          s12_len = 2;
          break;
        }
        case 0x1F:{
          s12 = "t6";
          s12_len = 2;
          break;
        }
        case 0x0B:{
          s12 = "a1";
          s12_len = 2;
          break;
        }
        case 0x07:{
          s12 = "t2";
          s12_len = 2;
          break;
        }
        case 0x13:{
          s12 = "s3";
          s12_len = 2;
          break;
        }
        case 0x04:{
          s12 = "tp";
          s12_len = 2;
          break;
        }
        case 0x19:{
          s12 = "s9";
          s12_len = 2;
          break;
        }
        case 0x12:{
          s12 = "s2";
          s12_len = 2;
          break;
        }
        case 0x14:{
          s12 = "s4";
          s12_len = 2;
          break;
        }
        case 0x0E:{
          s12 = "a4";
          s12_len = 2;
          break;
        }
        case 0x1E:{
          s12 = "t5";
          s12_len = 2;
          break;
        }
        case 0x11:{
          s12 = "a7";
          s12_len = 2;
          break;
        }
        case 0x03:{
          s12 = "gp";
          s12_len = 2;
          break;
        }
        case 0x05:{
          s12 = "t0";
          s12_len = 2;
          break;
        }
        case 0x1D:{
          s12 = "t4";
          s12_len = 2;
          break;
        }
        case 0x0D:{
          s12 = "a3";
          s12_len = 2;
          break;
        }
        case 0x0F:{
          s12 = "a5";
          s12_len = 2;
          break;
        }
      }
      maybe_vmask(tree->ast_node.vsssegtype.vm, &s13, &s13_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len, s8, s8_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len + s8_len, s9, s9_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len + s8_len + s9_len, s10, s10_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len + s8_len + s9_len + s10_len, s11, s11_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len + s8_len + s9_len + s10_len + s11_len, s12, s12_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len + s8_len + s9_len + s10_len + s11_len + s12_len, s13, s13_len);
      }
    }
    break;
    case RISCV_VLUXSEGTYPE: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      char *s8; size_t s8_len;
      char *s9; size_t s9_len;
      char *s10; size_t s10_len;
      char *s11; size_t s11_len;
      char *s12; size_t s12_len;
      char *s13; size_t s13_len;
      s0 = "vlux";
      s0_len = 4;
      switch (tree->ast_node.vluxsegtype.nf) { 
        case 0x7:{
          s1 = "seg8";
          s1_len = 4;
          break;
        }
        case 0x5:{
          s1 = "seg6";
          s1_len = 4;
          break;
        }
        case 0x1:{
          s1 = "seg2";
          s1_len = 4;
          break;
        }
        case 0x3:{
          s1 = "seg4";
          s1_len = 4;
          break;
        }
        case 0x2:{
          s1 = "seg3";
          s1_len = 4;
          break;
        }
        case 0x4:{
          s1 = "seg5";
          s1_len = 4;
          break;
        }
        case 0x6:{
          s1 = "seg7";
          s1_len = 4;
          break;
        }
        case 0x0:{
          s1 = "";
          s1_len = 0;
          break;
        }
      }
      s2 = "ei";
      s2_len = 2;
      switch (tree->ast_node.vluxsegtype.width) { 
        case RISCV_VLE16:{
          s3 = "16";
          s3_len = 2;
          break;
        }
        case RISCV_VLE32:{
          s3 = "32";
          s3_len = 2;
          break;
        }
        case RISCV_VLE64:{
          s3 = "64";
          s3_len = 2;
          break;
        }
        case RISCV_VLE8:{
          s3 = "8";
          s3_len = 1;
          break;
        }
      }
      s4 = ".v";
      s4_len = 2;
      spc( &s5, &s5_len);
      switch (tree->ast_node.vluxsegtype.vd) { 
        case 0x08:{
          s6 = "v8";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "v21";
          s6_len = 3;
          break;
        }
        case 0x01:{
          s6 = "v1";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "v6";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "v9";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "v16";
          s6_len = 3;
          break;
        }
        case 0x1B:{
          s6 = "v27";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "v28";
          s6_len = 3;
          break;
        }
        case 0x16:{
          s6 = "v22";
          s6_len = 3;
          break;
        }
        case 0x00:{
          s6 = "v0";
          s6_len = 2;
          break;
        }
        case 0x0A:{
          s6 = "v10";
          s6_len = 3;
          break;
        }
        case 0x1A:{
          s6 = "v26";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "v23";
          s6_len = 3;
          break;
        }
        case 0x0C:{
          s6 = "v12";
          s6_len = 3;
          break;
        }
        case 0x18:{
          s6 = "v24";
          s6_len = 3;
          break;
        }
        case 0x02:{
          s6 = "v2";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "v31";
          s6_len = 3;
          break;
        }
        case 0x0B:{
          s6 = "v11";
          s6_len = 3;
          break;
        }
        case 0x07:{
          s6 = "v7";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "v19";
          s6_len = 3;
          break;
        }
        case 0x04:{
          s6 = "v4";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "v25";
          s6_len = 3;
          break;
        }
        case 0x12:{
          s6 = "v18";
          s6_len = 3;
          break;
        }
        case 0x14:{
          s6 = "v20";
          s6_len = 3;
          break;
        }
        case 0x0E:{
          s6 = "v14";
          s6_len = 3;
          break;
        }
        case 0x1E:{
          s6 = "v30";
          s6_len = 3;
          break;
        }
        case 0x11:{
          s6 = "v17";
          s6_len = 3;
          break;
        }
        case 0x03:{
          s6 = "v3";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "v5";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "v29";
          s6_len = 3;
          break;
        }
        case 0x0D:{
          s6 = "v13";
          s6_len = 3;
          break;
        }
        case 0x0F:{
          s6 = "v15";
          s6_len = 3;
          break;
        }
      }
      sep( &s7, &s7_len);
      s8 = "(";
      s8_len = 1;
      switch (tree->ast_node.vluxsegtype.rs1) { 
        case 0x08:{
          s9 = "fp";
          s9_len = 2;
          break;
        }
        case 0x15:{
          s9 = "s5";
          s9_len = 2;
          break;
        }
        case 0x01:{
          s9 = "ra";
          s9_len = 2;
          break;
        }
        case 0x06:{
          s9 = "t1";
          s9_len = 2;
          break;
        }
        case 0x09:{
          s9 = "s1";
          s9_len = 2;
          break;
        }
        case 0x10:{
          s9 = "a6";
          s9_len = 2;
          break;
        }
        case 0x1B:{
          s9 = "s11";
          s9_len = 3;
          break;
        }
        case 0x1C:{
          s9 = "t3";
          s9_len = 2;
          break;
        }
        case 0x16:{
          s9 = "s6";
          s9_len = 2;
          break;
        }
        case 0x00:{
          s9 = "zero";
          s9_len = 4;
          break;
        }
        case 0x0A:{
          s9 = "a0";
          s9_len = 2;
          break;
        }
        case 0x1A:{
          s9 = "s10";
          s9_len = 3;
          break;
        }
        case 0x17:{
          s9 = "s7";
          s9_len = 2;
          break;
        }
        case 0x0C:{
          s9 = "a2";
          s9_len = 2;
          break;
        }
        case 0x18:{
          s9 = "s8";
          s9_len = 2;
          break;
        }
        case 0x02:{
          s9 = "sp";
          s9_len = 2;
          break;
        }
        case 0x1F:{
          s9 = "t6";
          s9_len = 2;
          break;
        }
        case 0x0B:{
          s9 = "a1";
          s9_len = 2;
          break;
        }
        case 0x07:{
          s9 = "t2";
          s9_len = 2;
          break;
        }
        case 0x13:{
          s9 = "s3";
          s9_len = 2;
          break;
        }
        case 0x04:{
          s9 = "tp";
          s9_len = 2;
          break;
        }
        case 0x19:{
          s9 = "s9";
          s9_len = 2;
          break;
        }
        case 0x12:{
          s9 = "s2";
          s9_len = 2;
          break;
        }
        case 0x14:{
          s9 = "s4";
          s9_len = 2;
          break;
        }
        case 0x0E:{
          s9 = "a4";
          s9_len = 2;
          break;
        }
        case 0x1E:{
          s9 = "t5";
          s9_len = 2;
          break;
        }
        case 0x11:{
          s9 = "a7";
          s9_len = 2;
          break;
        }
        case 0x03:{
          s9 = "gp";
          s9_len = 2;
          break;
        }
        case 0x05:{
          s9 = "t0";
          s9_len = 2;
          break;
        }
        case 0x1D:{
          s9 = "t4";
          s9_len = 2;
          break;
        }
        case 0x0D:{
          s9 = "a3";
          s9_len = 2;
          break;
        }
        case 0x0F:{
          s9 = "a5";
          s9_len = 2;
          break;
        }
      }
      s10 = ")";
      s10_len = 1;
      sep( &s11, &s11_len);
      switch (tree->ast_node.vluxsegtype.vs2) { 
        case 0x08:{
          s12 = "fp";
          s12_len = 2;
          break;
        }
        case 0x15:{
          s12 = "s5";
          s12_len = 2;
          break;
        }
        case 0x01:{
          s12 = "ra";
          s12_len = 2;
          break;
        }
        case 0x06:{
          s12 = "t1";
          s12_len = 2;
          break;
        }
        case 0x09:{
          s12 = "s1";
          s12_len = 2;
          break;
        }
        case 0x10:{
          s12 = "a6";
          s12_len = 2;
          break;
        }
        case 0x1B:{
          s12 = "s11";
          s12_len = 3;
          break;
        }
        case 0x1C:{
          s12 = "t3";
          s12_len = 2;
          break;
        }
        case 0x16:{
          s12 = "s6";
          s12_len = 2;
          break;
        }
        case 0x00:{
          s12 = "zero";
          s12_len = 4;
          break;
        }
        case 0x0A:{
          s12 = "a0";
          s12_len = 2;
          break;
        }
        case 0x1A:{
          s12 = "s10";
          s12_len = 3;
          break;
        }
        case 0x17:{
          s12 = "s7";
          s12_len = 2;
          break;
        }
        case 0x0C:{
          s12 = "a2";
          s12_len = 2;
          break;
        }
        case 0x18:{
          s12 = "s8";
          s12_len = 2;
          break;
        }
        case 0x02:{
          s12 = "sp";
          s12_len = 2;
          break;
        }
        case 0x1F:{
          s12 = "t6";
          s12_len = 2;
          break;
        }
        case 0x0B:{
          s12 = "a1";
          s12_len = 2;
          break;
        }
        case 0x07:{
          s12 = "t2";
          s12_len = 2;
          break;
        }
        case 0x13:{
          s12 = "s3";
          s12_len = 2;
          break;
        }
        case 0x04:{
          s12 = "tp";
          s12_len = 2;
          break;
        }
        case 0x19:{
          s12 = "s9";
          s12_len = 2;
          break;
        }
        case 0x12:{
          s12 = "s2";
          s12_len = 2;
          break;
        }
        case 0x14:{
          s12 = "s4";
          s12_len = 2;
          break;
        }
        case 0x0E:{
          s12 = "a4";
          s12_len = 2;
          break;
        }
        case 0x1E:{
          s12 = "t5";
          s12_len = 2;
          break;
        }
        case 0x11:{
          s12 = "a7";
          s12_len = 2;
          break;
        }
        case 0x03:{
          s12 = "gp";
          s12_len = 2;
          break;
        }
        case 0x05:{
          s12 = "t0";
          s12_len = 2;
          break;
        }
        case 0x1D:{
          s12 = "t4";
          s12_len = 2;
          break;
        }
        case 0x0D:{
          s12 = "a3";
          s12_len = 2;
          break;
        }
        case 0x0F:{
          s12 = "a5";
          s12_len = 2;
          break;
        }
      }
      maybe_vmask(tree->ast_node.vluxsegtype.vm, &s13, &s13_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len, s8, s8_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len + s8_len, s9, s9_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len + s8_len + s9_len, s10, s10_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len + s8_len + s9_len + s10_len, s11, s11_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len + s8_len + s9_len + s10_len + s11_len, s12, s12_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len + s8_len + s9_len + s10_len + s11_len + s12_len, s13, s13_len);
      }
    }
    break;
    case RISCV_VLOXSEGTYPE: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      char *s8; size_t s8_len;
      char *s9; size_t s9_len;
      char *s10; size_t s10_len;
      char *s11; size_t s11_len;
      char *s12; size_t s12_len;
      char *s13; size_t s13_len;
      s0 = "vlox";
      s0_len = 4;
      switch (tree->ast_node.vloxsegtype.nf) { 
        case 0x7:{
          s1 = "seg8";
          s1_len = 4;
          break;
        }
        case 0x5:{
          s1 = "seg6";
          s1_len = 4;
          break;
        }
        case 0x1:{
          s1 = "seg2";
          s1_len = 4;
          break;
        }
        case 0x3:{
          s1 = "seg4";
          s1_len = 4;
          break;
        }
        case 0x2:{
          s1 = "seg3";
          s1_len = 4;
          break;
        }
        case 0x4:{
          s1 = "seg5";
          s1_len = 4;
          break;
        }
        case 0x6:{
          s1 = "seg7";
          s1_len = 4;
          break;
        }
        case 0x0:{
          s1 = "";
          s1_len = 0;
          break;
        }
      }
      s2 = "ei";
      s2_len = 2;
      switch (tree->ast_node.vloxsegtype.width) { 
        case RISCV_VLE16:{
          s3 = "16";
          s3_len = 2;
          break;
        }
        case RISCV_VLE32:{
          s3 = "32";
          s3_len = 2;
          break;
        }
        case RISCV_VLE64:{
          s3 = "64";
          s3_len = 2;
          break;
        }
        case RISCV_VLE8:{
          s3 = "8";
          s3_len = 1;
          break;
        }
      }
      s4 = ".v";
      s4_len = 2;
      spc( &s5, &s5_len);
      switch (tree->ast_node.vloxsegtype.vd) { 
        case 0x08:{
          s6 = "v8";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "v21";
          s6_len = 3;
          break;
        }
        case 0x01:{
          s6 = "v1";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "v6";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "v9";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "v16";
          s6_len = 3;
          break;
        }
        case 0x1B:{
          s6 = "v27";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "v28";
          s6_len = 3;
          break;
        }
        case 0x16:{
          s6 = "v22";
          s6_len = 3;
          break;
        }
        case 0x00:{
          s6 = "v0";
          s6_len = 2;
          break;
        }
        case 0x0A:{
          s6 = "v10";
          s6_len = 3;
          break;
        }
        case 0x1A:{
          s6 = "v26";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "v23";
          s6_len = 3;
          break;
        }
        case 0x0C:{
          s6 = "v12";
          s6_len = 3;
          break;
        }
        case 0x18:{
          s6 = "v24";
          s6_len = 3;
          break;
        }
        case 0x02:{
          s6 = "v2";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "v31";
          s6_len = 3;
          break;
        }
        case 0x0B:{
          s6 = "v11";
          s6_len = 3;
          break;
        }
        case 0x07:{
          s6 = "v7";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "v19";
          s6_len = 3;
          break;
        }
        case 0x04:{
          s6 = "v4";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "v25";
          s6_len = 3;
          break;
        }
        case 0x12:{
          s6 = "v18";
          s6_len = 3;
          break;
        }
        case 0x14:{
          s6 = "v20";
          s6_len = 3;
          break;
        }
        case 0x0E:{
          s6 = "v14";
          s6_len = 3;
          break;
        }
        case 0x1E:{
          s6 = "v30";
          s6_len = 3;
          break;
        }
        case 0x11:{
          s6 = "v17";
          s6_len = 3;
          break;
        }
        case 0x03:{
          s6 = "v3";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "v5";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "v29";
          s6_len = 3;
          break;
        }
        case 0x0D:{
          s6 = "v13";
          s6_len = 3;
          break;
        }
        case 0x0F:{
          s6 = "v15";
          s6_len = 3;
          break;
        }
      }
      sep( &s7, &s7_len);
      s8 = "(";
      s8_len = 1;
      switch (tree->ast_node.vloxsegtype.rs1) { 
        case 0x08:{
          s9 = "fp";
          s9_len = 2;
          break;
        }
        case 0x15:{
          s9 = "s5";
          s9_len = 2;
          break;
        }
        case 0x01:{
          s9 = "ra";
          s9_len = 2;
          break;
        }
        case 0x06:{
          s9 = "t1";
          s9_len = 2;
          break;
        }
        case 0x09:{
          s9 = "s1";
          s9_len = 2;
          break;
        }
        case 0x10:{
          s9 = "a6";
          s9_len = 2;
          break;
        }
        case 0x1B:{
          s9 = "s11";
          s9_len = 3;
          break;
        }
        case 0x1C:{
          s9 = "t3";
          s9_len = 2;
          break;
        }
        case 0x16:{
          s9 = "s6";
          s9_len = 2;
          break;
        }
        case 0x00:{
          s9 = "zero";
          s9_len = 4;
          break;
        }
        case 0x0A:{
          s9 = "a0";
          s9_len = 2;
          break;
        }
        case 0x1A:{
          s9 = "s10";
          s9_len = 3;
          break;
        }
        case 0x17:{
          s9 = "s7";
          s9_len = 2;
          break;
        }
        case 0x0C:{
          s9 = "a2";
          s9_len = 2;
          break;
        }
        case 0x18:{
          s9 = "s8";
          s9_len = 2;
          break;
        }
        case 0x02:{
          s9 = "sp";
          s9_len = 2;
          break;
        }
        case 0x1F:{
          s9 = "t6";
          s9_len = 2;
          break;
        }
        case 0x0B:{
          s9 = "a1";
          s9_len = 2;
          break;
        }
        case 0x07:{
          s9 = "t2";
          s9_len = 2;
          break;
        }
        case 0x13:{
          s9 = "s3";
          s9_len = 2;
          break;
        }
        case 0x04:{
          s9 = "tp";
          s9_len = 2;
          break;
        }
        case 0x19:{
          s9 = "s9";
          s9_len = 2;
          break;
        }
        case 0x12:{
          s9 = "s2";
          s9_len = 2;
          break;
        }
        case 0x14:{
          s9 = "s4";
          s9_len = 2;
          break;
        }
        case 0x0E:{
          s9 = "a4";
          s9_len = 2;
          break;
        }
        case 0x1E:{
          s9 = "t5";
          s9_len = 2;
          break;
        }
        case 0x11:{
          s9 = "a7";
          s9_len = 2;
          break;
        }
        case 0x03:{
          s9 = "gp";
          s9_len = 2;
          break;
        }
        case 0x05:{
          s9 = "t0";
          s9_len = 2;
          break;
        }
        case 0x1D:{
          s9 = "t4";
          s9_len = 2;
          break;
        }
        case 0x0D:{
          s9 = "a3";
          s9_len = 2;
          break;
        }
        case 0x0F:{
          s9 = "a5";
          s9_len = 2;
          break;
        }
      }
      s10 = ")";
      s10_len = 1;
      sep( &s11, &s11_len);
      switch (tree->ast_node.vloxsegtype.vs2) { 
        case 0x08:{
          s12 = "fp";
          s12_len = 2;
          break;
        }
        case 0x15:{
          s12 = "s5";
          s12_len = 2;
          break;
        }
        case 0x01:{
          s12 = "ra";
          s12_len = 2;
          break;
        }
        case 0x06:{
          s12 = "t1";
          s12_len = 2;
          break;
        }
        case 0x09:{
          s12 = "s1";
          s12_len = 2;
          break;
        }
        case 0x10:{
          s12 = "a6";
          s12_len = 2;
          break;
        }
        case 0x1B:{
          s12 = "s11";
          s12_len = 3;
          break;
        }
        case 0x1C:{
          s12 = "t3";
          s12_len = 2;
          break;
        }
        case 0x16:{
          s12 = "s6";
          s12_len = 2;
          break;
        }
        case 0x00:{
          s12 = "zero";
          s12_len = 4;
          break;
        }
        case 0x0A:{
          s12 = "a0";
          s12_len = 2;
          break;
        }
        case 0x1A:{
          s12 = "s10";
          s12_len = 3;
          break;
        }
        case 0x17:{
          s12 = "s7";
          s12_len = 2;
          break;
        }
        case 0x0C:{
          s12 = "a2";
          s12_len = 2;
          break;
        }
        case 0x18:{
          s12 = "s8";
          s12_len = 2;
          break;
        }
        case 0x02:{
          s12 = "sp";
          s12_len = 2;
          break;
        }
        case 0x1F:{
          s12 = "t6";
          s12_len = 2;
          break;
        }
        case 0x0B:{
          s12 = "a1";
          s12_len = 2;
          break;
        }
        case 0x07:{
          s12 = "t2";
          s12_len = 2;
          break;
        }
        case 0x13:{
          s12 = "s3";
          s12_len = 2;
          break;
        }
        case 0x04:{
          s12 = "tp";
          s12_len = 2;
          break;
        }
        case 0x19:{
          s12 = "s9";
          s12_len = 2;
          break;
        }
        case 0x12:{
          s12 = "s2";
          s12_len = 2;
          break;
        }
        case 0x14:{
          s12 = "s4";
          s12_len = 2;
          break;
        }
        case 0x0E:{
          s12 = "a4";
          s12_len = 2;
          break;
        }
        case 0x1E:{
          s12 = "t5";
          s12_len = 2;
          break;
        }
        case 0x11:{
          s12 = "a7";
          s12_len = 2;
          break;
        }
        case 0x03:{
          s12 = "gp";
          s12_len = 2;
          break;
        }
        case 0x05:{
          s12 = "t0";
          s12_len = 2;
          break;
        }
        case 0x1D:{
          s12 = "t4";
          s12_len = 2;
          break;
        }
        case 0x0D:{
          s12 = "a3";
          s12_len = 2;
          break;
        }
        case 0x0F:{
          s12 = "a5";
          s12_len = 2;
          break;
        }
      }
      maybe_vmask(tree->ast_node.vloxsegtype.vm, &s13, &s13_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len, s8, s8_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len + s8_len, s9, s9_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len + s8_len + s9_len, s10, s10_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len + s8_len + s9_len + s10_len, s11, s11_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len + s8_len + s9_len + s10_len + s11_len, s12, s12_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len + s8_len + s9_len + s10_len + s11_len + s12_len, s13, s13_len);
      }
    }
    break;
    case RISCV_VSUXSEGTYPE: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      char *s8; size_t s8_len;
      char *s9; size_t s9_len;
      char *s10; size_t s10_len;
      char *s11; size_t s11_len;
      char *s12; size_t s12_len;
      char *s13; size_t s13_len;
      s0 = "vsux";
      s0_len = 4;
      switch (tree->ast_node.vsuxsegtype.nf) { 
        case 0x7:{
          s1 = "seg8";
          s1_len = 4;
          break;
        }
        case 0x5:{
          s1 = "seg6";
          s1_len = 4;
          break;
        }
        case 0x1:{
          s1 = "seg2";
          s1_len = 4;
          break;
        }
        case 0x3:{
          s1 = "seg4";
          s1_len = 4;
          break;
        }
        case 0x2:{
          s1 = "seg3";
          s1_len = 4;
          break;
        }
        case 0x4:{
          s1 = "seg5";
          s1_len = 4;
          break;
        }
        case 0x6:{
          s1 = "seg7";
          s1_len = 4;
          break;
        }
        case 0x0:{
          s1 = "";
          s1_len = 0;
          break;
        }
      }
      s2 = "ei";
      s2_len = 2;
      switch (tree->ast_node.vsuxsegtype.width) { 
        case RISCV_VLE16:{
          s3 = "16";
          s3_len = 2;
          break;
        }
        case RISCV_VLE32:{
          s3 = "32";
          s3_len = 2;
          break;
        }
        case RISCV_VLE64:{
          s3 = "64";
          s3_len = 2;
          break;
        }
        case RISCV_VLE8:{
          s3 = "8";
          s3_len = 1;
          break;
        }
      }
      s4 = ".v";
      s4_len = 2;
      spc( &s5, &s5_len);
      switch (tree->ast_node.vsuxsegtype.vs3) { 
        case 0x08:{
          s6 = "v8";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "v21";
          s6_len = 3;
          break;
        }
        case 0x01:{
          s6 = "v1";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "v6";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "v9";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "v16";
          s6_len = 3;
          break;
        }
        case 0x1B:{
          s6 = "v27";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "v28";
          s6_len = 3;
          break;
        }
        case 0x16:{
          s6 = "v22";
          s6_len = 3;
          break;
        }
        case 0x00:{
          s6 = "v0";
          s6_len = 2;
          break;
        }
        case 0x0A:{
          s6 = "v10";
          s6_len = 3;
          break;
        }
        case 0x1A:{
          s6 = "v26";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "v23";
          s6_len = 3;
          break;
        }
        case 0x0C:{
          s6 = "v12";
          s6_len = 3;
          break;
        }
        case 0x18:{
          s6 = "v24";
          s6_len = 3;
          break;
        }
        case 0x02:{
          s6 = "v2";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "v31";
          s6_len = 3;
          break;
        }
        case 0x0B:{
          s6 = "v11";
          s6_len = 3;
          break;
        }
        case 0x07:{
          s6 = "v7";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "v19";
          s6_len = 3;
          break;
        }
        case 0x04:{
          s6 = "v4";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "v25";
          s6_len = 3;
          break;
        }
        case 0x12:{
          s6 = "v18";
          s6_len = 3;
          break;
        }
        case 0x14:{
          s6 = "v20";
          s6_len = 3;
          break;
        }
        case 0x0E:{
          s6 = "v14";
          s6_len = 3;
          break;
        }
        case 0x1E:{
          s6 = "v30";
          s6_len = 3;
          break;
        }
        case 0x11:{
          s6 = "v17";
          s6_len = 3;
          break;
        }
        case 0x03:{
          s6 = "v3";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "v5";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "v29";
          s6_len = 3;
          break;
        }
        case 0x0D:{
          s6 = "v13";
          s6_len = 3;
          break;
        }
        case 0x0F:{
          s6 = "v15";
          s6_len = 3;
          break;
        }
      }
      sep( &s7, &s7_len);
      s8 = "(";
      s8_len = 1;
      switch (tree->ast_node.vsuxsegtype.rs1) { 
        case 0x08:{
          s9 = "fp";
          s9_len = 2;
          break;
        }
        case 0x15:{
          s9 = "s5";
          s9_len = 2;
          break;
        }
        case 0x01:{
          s9 = "ra";
          s9_len = 2;
          break;
        }
        case 0x06:{
          s9 = "t1";
          s9_len = 2;
          break;
        }
        case 0x09:{
          s9 = "s1";
          s9_len = 2;
          break;
        }
        case 0x10:{
          s9 = "a6";
          s9_len = 2;
          break;
        }
        case 0x1B:{
          s9 = "s11";
          s9_len = 3;
          break;
        }
        case 0x1C:{
          s9 = "t3";
          s9_len = 2;
          break;
        }
        case 0x16:{
          s9 = "s6";
          s9_len = 2;
          break;
        }
        case 0x00:{
          s9 = "zero";
          s9_len = 4;
          break;
        }
        case 0x0A:{
          s9 = "a0";
          s9_len = 2;
          break;
        }
        case 0x1A:{
          s9 = "s10";
          s9_len = 3;
          break;
        }
        case 0x17:{
          s9 = "s7";
          s9_len = 2;
          break;
        }
        case 0x0C:{
          s9 = "a2";
          s9_len = 2;
          break;
        }
        case 0x18:{
          s9 = "s8";
          s9_len = 2;
          break;
        }
        case 0x02:{
          s9 = "sp";
          s9_len = 2;
          break;
        }
        case 0x1F:{
          s9 = "t6";
          s9_len = 2;
          break;
        }
        case 0x0B:{
          s9 = "a1";
          s9_len = 2;
          break;
        }
        case 0x07:{
          s9 = "t2";
          s9_len = 2;
          break;
        }
        case 0x13:{
          s9 = "s3";
          s9_len = 2;
          break;
        }
        case 0x04:{
          s9 = "tp";
          s9_len = 2;
          break;
        }
        case 0x19:{
          s9 = "s9";
          s9_len = 2;
          break;
        }
        case 0x12:{
          s9 = "s2";
          s9_len = 2;
          break;
        }
        case 0x14:{
          s9 = "s4";
          s9_len = 2;
          break;
        }
        case 0x0E:{
          s9 = "a4";
          s9_len = 2;
          break;
        }
        case 0x1E:{
          s9 = "t5";
          s9_len = 2;
          break;
        }
        case 0x11:{
          s9 = "a7";
          s9_len = 2;
          break;
        }
        case 0x03:{
          s9 = "gp";
          s9_len = 2;
          break;
        }
        case 0x05:{
          s9 = "t0";
          s9_len = 2;
          break;
        }
        case 0x1D:{
          s9 = "t4";
          s9_len = 2;
          break;
        }
        case 0x0D:{
          s9 = "a3";
          s9_len = 2;
          break;
        }
        case 0x0F:{
          s9 = "a5";
          s9_len = 2;
          break;
        }
      }
      s10 = ")";
      s10_len = 1;
      sep( &s11, &s11_len);
      switch (tree->ast_node.vsuxsegtype.vs2) { 
        case 0x08:{
          s12 = "fp";
          s12_len = 2;
          break;
        }
        case 0x15:{
          s12 = "s5";
          s12_len = 2;
          break;
        }
        case 0x01:{
          s12 = "ra";
          s12_len = 2;
          break;
        }
        case 0x06:{
          s12 = "t1";
          s12_len = 2;
          break;
        }
        case 0x09:{
          s12 = "s1";
          s12_len = 2;
          break;
        }
        case 0x10:{
          s12 = "a6";
          s12_len = 2;
          break;
        }
        case 0x1B:{
          s12 = "s11";
          s12_len = 3;
          break;
        }
        case 0x1C:{
          s12 = "t3";
          s12_len = 2;
          break;
        }
        case 0x16:{
          s12 = "s6";
          s12_len = 2;
          break;
        }
        case 0x00:{
          s12 = "zero";
          s12_len = 4;
          break;
        }
        case 0x0A:{
          s12 = "a0";
          s12_len = 2;
          break;
        }
        case 0x1A:{
          s12 = "s10";
          s12_len = 3;
          break;
        }
        case 0x17:{
          s12 = "s7";
          s12_len = 2;
          break;
        }
        case 0x0C:{
          s12 = "a2";
          s12_len = 2;
          break;
        }
        case 0x18:{
          s12 = "s8";
          s12_len = 2;
          break;
        }
        case 0x02:{
          s12 = "sp";
          s12_len = 2;
          break;
        }
        case 0x1F:{
          s12 = "t6";
          s12_len = 2;
          break;
        }
        case 0x0B:{
          s12 = "a1";
          s12_len = 2;
          break;
        }
        case 0x07:{
          s12 = "t2";
          s12_len = 2;
          break;
        }
        case 0x13:{
          s12 = "s3";
          s12_len = 2;
          break;
        }
        case 0x04:{
          s12 = "tp";
          s12_len = 2;
          break;
        }
        case 0x19:{
          s12 = "s9";
          s12_len = 2;
          break;
        }
        case 0x12:{
          s12 = "s2";
          s12_len = 2;
          break;
        }
        case 0x14:{
          s12 = "s4";
          s12_len = 2;
          break;
        }
        case 0x0E:{
          s12 = "a4";
          s12_len = 2;
          break;
        }
        case 0x1E:{
          s12 = "t5";
          s12_len = 2;
          break;
        }
        case 0x11:{
          s12 = "a7";
          s12_len = 2;
          break;
        }
        case 0x03:{
          s12 = "gp";
          s12_len = 2;
          break;
        }
        case 0x05:{
          s12 = "t0";
          s12_len = 2;
          break;
        }
        case 0x1D:{
          s12 = "t4";
          s12_len = 2;
          break;
        }
        case 0x0D:{
          s12 = "a3";
          s12_len = 2;
          break;
        }
        case 0x0F:{
          s12 = "a5";
          s12_len = 2;
          break;
        }
      }
      maybe_vmask(tree->ast_node.vsuxsegtype.vm, &s13, &s13_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len, s8, s8_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len + s8_len, s9, s9_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len + s8_len + s9_len, s10, s10_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len + s8_len + s9_len + s10_len, s11, s11_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len + s8_len + s9_len + s10_len + s11_len, s12, s12_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len + s8_len + s9_len + s10_len + s11_len + s12_len, s13, s13_len);
      }{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      char *s8; size_t s8_len;
      char *s9; size_t s9_len;
      char *s10; size_t s10_len;
      char *s11; size_t s11_len;
      char *s12; size_t s12_len;
      char *s13; size_t s13_len;
      s0 = "vsox";
      s0_len = 4;
      switch (tree->ast_node.vsuxsegtype.nf) { 
        case 0x7:{
          s1 = "seg8";
          s1_len = 4;
          break;
        }
        case 0x5:{
          s1 = "seg6";
          s1_len = 4;
          break;
        }
        case 0x1:{
          s1 = "seg2";
          s1_len = 4;
          break;
        }
        case 0x3:{
          s1 = "seg4";
          s1_len = 4;
          break;
        }
        case 0x2:{
          s1 = "seg3";
          s1_len = 4;
          break;
        }
        case 0x4:{
          s1 = "seg5";
          s1_len = 4;
          break;
        }
        case 0x6:{
          s1 = "seg7";
          s1_len = 4;
          break;
        }
        case 0x0:{
          s1 = "";
          s1_len = 0;
          break;
        }
      }
      s2 = "ei";
      s2_len = 2;
      switch (tree->ast_node.vsuxsegtype.width) { 
        case RISCV_VLE16:{
          s3 = "16";
          s3_len = 2;
          break;
        }
        case RISCV_VLE32:{
          s3 = "32";
          s3_len = 2;
          break;
        }
        case RISCV_VLE64:{
          s3 = "64";
          s3_len = 2;
          break;
        }
        case RISCV_VLE8:{
          s3 = "8";
          s3_len = 1;
          break;
        }
      }
      s4 = ".v";
      s4_len = 2;
      spc( &s5, &s5_len);
      switch (tree->ast_node.vsuxsegtype.vs3) { 
        case 0x08:{
          s6 = "v8";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "v21";
          s6_len = 3;
          break;
        }
        case 0x01:{
          s6 = "v1";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "v6";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "v9";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "v16";
          s6_len = 3;
          break;
        }
        case 0x1B:{
          s6 = "v27";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "v28";
          s6_len = 3;
          break;
        }
        case 0x16:{
          s6 = "v22";
          s6_len = 3;
          break;
        }
        case 0x00:{
          s6 = "v0";
          s6_len = 2;
          break;
        }
        case 0x0A:{
          s6 = "v10";
          s6_len = 3;
          break;
        }
        case 0x1A:{
          s6 = "v26";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "v23";
          s6_len = 3;
          break;
        }
        case 0x0C:{
          s6 = "v12";
          s6_len = 3;
          break;
        }
        case 0x18:{
          s6 = "v24";
          s6_len = 3;
          break;
        }
        case 0x02:{
          s6 = "v2";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "v31";
          s6_len = 3;
          break;
        }
        case 0x0B:{
          s6 = "v11";
          s6_len = 3;
          break;
        }
        case 0x07:{
          s6 = "v7";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "v19";
          s6_len = 3;
          break;
        }
        case 0x04:{
          s6 = "v4";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "v25";
          s6_len = 3;
          break;
        }
        case 0x12:{
          s6 = "v18";
          s6_len = 3;
          break;
        }
        case 0x14:{
          s6 = "v20";
          s6_len = 3;
          break;
        }
        case 0x0E:{
          s6 = "v14";
          s6_len = 3;
          break;
        }
        case 0x1E:{
          s6 = "v30";
          s6_len = 3;
          break;
        }
        case 0x11:{
          s6 = "v17";
          s6_len = 3;
          break;
        }
        case 0x03:{
          s6 = "v3";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "v5";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "v29";
          s6_len = 3;
          break;
        }
        case 0x0D:{
          s6 = "v13";
          s6_len = 3;
          break;
        }
        case 0x0F:{
          s6 = "v15";
          s6_len = 3;
          break;
        }
      }
      sep( &s7, &s7_len);
      s8 = "(";
      s8_len = 1;
      switch (tree->ast_node.vsuxsegtype.rs1) { 
        case 0x08:{
          s9 = "fp";
          s9_len = 2;
          break;
        }
        case 0x15:{
          s9 = "s5";
          s9_len = 2;
          break;
        }
        case 0x01:{
          s9 = "ra";
          s9_len = 2;
          break;
        }
        case 0x06:{
          s9 = "t1";
          s9_len = 2;
          break;
        }
        case 0x09:{
          s9 = "s1";
          s9_len = 2;
          break;
        }
        case 0x10:{
          s9 = "a6";
          s9_len = 2;
          break;
        }
        case 0x1B:{
          s9 = "s11";
          s9_len = 3;
          break;
        }
        case 0x1C:{
          s9 = "t3";
          s9_len = 2;
          break;
        }
        case 0x16:{
          s9 = "s6";
          s9_len = 2;
          break;
        }
        case 0x00:{
          s9 = "zero";
          s9_len = 4;
          break;
        }
        case 0x0A:{
          s9 = "a0";
          s9_len = 2;
          break;
        }
        case 0x1A:{
          s9 = "s10";
          s9_len = 3;
          break;
        }
        case 0x17:{
          s9 = "s7";
          s9_len = 2;
          break;
        }
        case 0x0C:{
          s9 = "a2";
          s9_len = 2;
          break;
        }
        case 0x18:{
          s9 = "s8";
          s9_len = 2;
          break;
        }
        case 0x02:{
          s9 = "sp";
          s9_len = 2;
          break;
        }
        case 0x1F:{
          s9 = "t6";
          s9_len = 2;
          break;
        }
        case 0x0B:{
          s9 = "a1";
          s9_len = 2;
          break;
        }
        case 0x07:{
          s9 = "t2";
          s9_len = 2;
          break;
        }
        case 0x13:{
          s9 = "s3";
          s9_len = 2;
          break;
        }
        case 0x04:{
          s9 = "tp";
          s9_len = 2;
          break;
        }
        case 0x19:{
          s9 = "s9";
          s9_len = 2;
          break;
        }
        case 0x12:{
          s9 = "s2";
          s9_len = 2;
          break;
        }
        case 0x14:{
          s9 = "s4";
          s9_len = 2;
          break;
        }
        case 0x0E:{
          s9 = "a4";
          s9_len = 2;
          break;
        }
        case 0x1E:{
          s9 = "t5";
          s9_len = 2;
          break;
        }
        case 0x11:{
          s9 = "a7";
          s9_len = 2;
          break;
        }
        case 0x03:{
          s9 = "gp";
          s9_len = 2;
          break;
        }
        case 0x05:{
          s9 = "t0";
          s9_len = 2;
          break;
        }
        case 0x1D:{
          s9 = "t4";
          s9_len = 2;
          break;
        }
        case 0x0D:{
          s9 = "a3";
          s9_len = 2;
          break;
        }
        case 0x0F:{
          s9 = "a5";
          s9_len = 2;
          break;
        }
      }
      s10 = ")";
      s10_len = 1;
      sep( &s11, &s11_len);
      switch (tree->ast_node.vsuxsegtype.vs2) { 
        case 0x08:{
          s12 = "fp";
          s12_len = 2;
          break;
        }
        case 0x15:{
          s12 = "s5";
          s12_len = 2;
          break;
        }
        case 0x01:{
          s12 = "ra";
          s12_len = 2;
          break;
        }
        case 0x06:{
          s12 = "t1";
          s12_len = 2;
          break;
        }
        case 0x09:{
          s12 = "s1";
          s12_len = 2;
          break;
        }
        case 0x10:{
          s12 = "a6";
          s12_len = 2;
          break;
        }
        case 0x1B:{
          s12 = "s11";
          s12_len = 3;
          break;
        }
        case 0x1C:{
          s12 = "t3";
          s12_len = 2;
          break;
        }
        case 0x16:{
          s12 = "s6";
          s12_len = 2;
          break;
        }
        case 0x00:{
          s12 = "zero";
          s12_len = 4;
          break;
        }
        case 0x0A:{
          s12 = "a0";
          s12_len = 2;
          break;
        }
        case 0x1A:{
          s12 = "s10";
          s12_len = 3;
          break;
        }
        case 0x17:{
          s12 = "s7";
          s12_len = 2;
          break;
        }
        case 0x0C:{
          s12 = "a2";
          s12_len = 2;
          break;
        }
        case 0x18:{
          s12 = "s8";
          s12_len = 2;
          break;
        }
        case 0x02:{
          s12 = "sp";
          s12_len = 2;
          break;
        }
        case 0x1F:{
          s12 = "t6";
          s12_len = 2;
          break;
        }
        case 0x0B:{
          s12 = "a1";
          s12_len = 2;
          break;
        }
        case 0x07:{
          s12 = "t2";
          s12_len = 2;
          break;
        }
        case 0x13:{
          s12 = "s3";
          s12_len = 2;
          break;
        }
        case 0x04:{
          s12 = "tp";
          s12_len = 2;
          break;
        }
        case 0x19:{
          s12 = "s9";
          s12_len = 2;
          break;
        }
        case 0x12:{
          s12 = "s2";
          s12_len = 2;
          break;
        }
        case 0x14:{
          s12 = "s4";
          s12_len = 2;
          break;
        }
        case 0x0E:{
          s12 = "a4";
          s12_len = 2;
          break;
        }
        case 0x1E:{
          s12 = "t5";
          s12_len = 2;
          break;
        }
        case 0x11:{
          s12 = "a7";
          s12_len = 2;
          break;
        }
        case 0x03:{
          s12 = "gp";
          s12_len = 2;
          break;
        }
        case 0x05:{
          s12 = "t0";
          s12_len = 2;
          break;
        }
        case 0x1D:{
          s12 = "t4";
          s12_len = 2;
          break;
        }
        case 0x0D:{
          s12 = "a3";
          s12_len = 2;
          break;
        }
        case 0x0F:{
          s12 = "a5";
          s12_len = 2;
          break;
        }
      }
      maybe_vmask(tree->ast_node.vsuxsegtype.vm, &s13, &s13_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len, s8, s8_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len + s8_len, s9, s9_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len + s8_len + s9_len, s10, s10_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len + s8_len + s9_len + s10_len, s11, s11_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len + s8_len + s9_len + s10_len + s11_len, s12, s12_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len + s8_len + s9_len + s10_len + s11_len + s12_len, s13, s13_len);
      }
    }
    break;
    case RISCV_VLRETYPE: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      char *s8; size_t s8_len;
      char *s9; size_t s9_len;
      char *s10; size_t s10_len;
      s0 = "vl";
      s0_len = 2;
      switch (tree->ast_node.vlretype.nf) { 
        case 0x7:{
          s1 = "seg8";
          s1_len = 4;
          break;
        }
        case 0x5:{
          s1 = "seg6";
          s1_len = 4;
          break;
        }
        case 0x1:{
          s1 = "seg2";
          s1_len = 4;
          break;
        }
        case 0x3:{
          s1 = "seg4";
          s1_len = 4;
          break;
        }
        case 0x2:{
          s1 = "seg3";
          s1_len = 4;
          break;
        }
        case 0x4:{
          s1 = "seg5";
          s1_len = 4;
          break;
        }
        case 0x6:{
          s1 = "seg7";
          s1_len = 4;
          break;
        }
        case 0x0:{
          s1 = "";
          s1_len = 0;
          break;
        }
      }
      s2 = "re";
      s2_len = 2;
      switch (tree->ast_node.vlretype.width) { 
        case RISCV_VLE16:{
          s3 = "16";
          s3_len = 2;
          break;
        }
        case RISCV_VLE32:{
          s3 = "32";
          s3_len = 2;
          break;
        }
        case RISCV_VLE64:{
          s3 = "64";
          s3_len = 2;
          break;
        }
        case RISCV_VLE8:{
          s3 = "8";
          s3_len = 1;
          break;
        }
      }
      s4 = ".v";
      s4_len = 2;
      spc( &s5, &s5_len);
      switch (tree->ast_node.vlretype.vd) { 
        case 0x08:{
          s6 = "v8";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "v21";
          s6_len = 3;
          break;
        }
        case 0x01:{
          s6 = "v1";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "v6";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "v9";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "v16";
          s6_len = 3;
          break;
        }
        case 0x1B:{
          s6 = "v27";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "v28";
          s6_len = 3;
          break;
        }
        case 0x16:{
          s6 = "v22";
          s6_len = 3;
          break;
        }
        case 0x00:{
          s6 = "v0";
          s6_len = 2;
          break;
        }
        case 0x0A:{
          s6 = "v10";
          s6_len = 3;
          break;
        }
        case 0x1A:{
          s6 = "v26";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "v23";
          s6_len = 3;
          break;
        }
        case 0x0C:{
          s6 = "v12";
          s6_len = 3;
          break;
        }
        case 0x18:{
          s6 = "v24";
          s6_len = 3;
          break;
        }
        case 0x02:{
          s6 = "v2";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "v31";
          s6_len = 3;
          break;
        }
        case 0x0B:{
          s6 = "v11";
          s6_len = 3;
          break;
        }
        case 0x07:{
          s6 = "v7";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "v19";
          s6_len = 3;
          break;
        }
        case 0x04:{
          s6 = "v4";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "v25";
          s6_len = 3;
          break;
        }
        case 0x12:{
          s6 = "v18";
          s6_len = 3;
          break;
        }
        case 0x14:{
          s6 = "v20";
          s6_len = 3;
          break;
        }
        case 0x0E:{
          s6 = "v14";
          s6_len = 3;
          break;
        }
        case 0x1E:{
          s6 = "v30";
          s6_len = 3;
          break;
        }
        case 0x11:{
          s6 = "v17";
          s6_len = 3;
          break;
        }
        case 0x03:{
          s6 = "v3";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "v5";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "v29";
          s6_len = 3;
          break;
        }
        case 0x0D:{
          s6 = "v13";
          s6_len = 3;
          break;
        }
        case 0x0F:{
          s6 = "v15";
          s6_len = 3;
          break;
        }
      }
      sep( &s7, &s7_len);
      s8 = "(";
      s8_len = 1;
      switch (tree->ast_node.vlretype.rs1) { 
        case 0x08:{
          s9 = "fp";
          s9_len = 2;
          break;
        }
        case 0x15:{
          s9 = "s5";
          s9_len = 2;
          break;
        }
        case 0x01:{
          s9 = "ra";
          s9_len = 2;
          break;
        }
        case 0x06:{
          s9 = "t1";
          s9_len = 2;
          break;
        }
        case 0x09:{
          s9 = "s1";
          s9_len = 2;
          break;
        }
        case 0x10:{
          s9 = "a6";
          s9_len = 2;
          break;
        }
        case 0x1B:{
          s9 = "s11";
          s9_len = 3;
          break;
        }
        case 0x1C:{
          s9 = "t3";
          s9_len = 2;
          break;
        }
        case 0x16:{
          s9 = "s6";
          s9_len = 2;
          break;
        }
        case 0x00:{
          s9 = "zero";
          s9_len = 4;
          break;
        }
        case 0x0A:{
          s9 = "a0";
          s9_len = 2;
          break;
        }
        case 0x1A:{
          s9 = "s10";
          s9_len = 3;
          break;
        }
        case 0x17:{
          s9 = "s7";
          s9_len = 2;
          break;
        }
        case 0x0C:{
          s9 = "a2";
          s9_len = 2;
          break;
        }
        case 0x18:{
          s9 = "s8";
          s9_len = 2;
          break;
        }
        case 0x02:{
          s9 = "sp";
          s9_len = 2;
          break;
        }
        case 0x1F:{
          s9 = "t6";
          s9_len = 2;
          break;
        }
        case 0x0B:{
          s9 = "a1";
          s9_len = 2;
          break;
        }
        case 0x07:{
          s9 = "t2";
          s9_len = 2;
          break;
        }
        case 0x13:{
          s9 = "s3";
          s9_len = 2;
          break;
        }
        case 0x04:{
          s9 = "tp";
          s9_len = 2;
          break;
        }
        case 0x19:{
          s9 = "s9";
          s9_len = 2;
          break;
        }
        case 0x12:{
          s9 = "s2";
          s9_len = 2;
          break;
        }
        case 0x14:{
          s9 = "s4";
          s9_len = 2;
          break;
        }
        case 0x0E:{
          s9 = "a4";
          s9_len = 2;
          break;
        }
        case 0x1E:{
          s9 = "t5";
          s9_len = 2;
          break;
        }
        case 0x11:{
          s9 = "a7";
          s9_len = 2;
          break;
        }
        case 0x03:{
          s9 = "gp";
          s9_len = 2;
          break;
        }
        case 0x05:{
          s9 = "t0";
          s9_len = 2;
          break;
        }
        case 0x1D:{
          s9 = "t4";
          s9_len = 2;
          break;
        }
        case 0x0D:{
          s9 = "a3";
          s9_len = 2;
          break;
        }
        case 0x0F:{
          s9 = "a5";
          s9_len = 2;
          break;
        }
      }
      s10 = ")";
      s10_len = 1;
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len, s8, s8_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len + s8_len, s9, s9_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len + s8_len + s9_len, s10, s10_len);
      }
    }
    break;
    case RISCV_VSRETYPE: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      char *s8; size_t s8_len;
      s0 = "vs";
      s0_len = 2;
      switch (tree->ast_node.vsretype.nf) { 
        case 0x7:{
          s1 = "seg8";
          s1_len = 4;
          break;
        }
        case 0x5:{
          s1 = "seg6";
          s1_len = 4;
          break;
        }
        case 0x1:{
          s1 = "seg2";
          s1_len = 4;
          break;
        }
        case 0x3:{
          s1 = "seg4";
          s1_len = 4;
          break;
        }
        case 0x2:{
          s1 = "seg3";
          s1_len = 4;
          break;
        }
        case 0x4:{
          s1 = "seg5";
          s1_len = 4;
          break;
        }
        case 0x6:{
          s1 = "seg7";
          s1_len = 4;
          break;
        }
        case 0x0:{
          s1 = "";
          s1_len = 0;
          break;
        }
      }
      s2 = "r.v";
      s2_len = 3;
      spc( &s3, &s3_len);
      switch (tree->ast_node.vsretype.vs3) { 
        case 0x08:{
          s4 = "v8";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "v21";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "v1";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "v6";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "v9";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "v16";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "v27";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "v28";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "v22";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "v0";
          s4_len = 2;
          break;
        }
        case 0x0A:{
          s4 = "v10";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "v26";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "v23";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "v12";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "v24";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "v2";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "v31";
          s4_len = 3;
          break;
        }
        case 0x0B:{
          s4 = "v11";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "v7";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "v19";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "v4";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "v25";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "v18";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "v20";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "v14";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "v30";
          s4_len = 3;
          break;
        }
        case 0x11:{
          s4 = "v17";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "v3";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "v5";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "v29";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "v13";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "v15";
          s4_len = 3;
          break;
        }
      }
      sep( &s5, &s5_len);
      s6 = "(";
      s6_len = 1;
      switch (tree->ast_node.vsretype.rs1) { 
        case 0x08:{
          s7 = "fp";
          s7_len = 2;
          break;
        }
        case 0x15:{
          s7 = "s5";
          s7_len = 2;
          break;
        }
        case 0x01:{
          s7 = "ra";
          s7_len = 2;
          break;
        }
        case 0x06:{
          s7 = "t1";
          s7_len = 2;
          break;
        }
        case 0x09:{
          s7 = "s1";
          s7_len = 2;
          break;
        }
        case 0x10:{
          s7 = "a6";
          s7_len = 2;
          break;
        }
        case 0x1B:{
          s7 = "s11";
          s7_len = 3;
          break;
        }
        case 0x1C:{
          s7 = "t3";
          s7_len = 2;
          break;
        }
        case 0x16:{
          s7 = "s6";
          s7_len = 2;
          break;
        }
        case 0x00:{
          s7 = "zero";
          s7_len = 4;
          break;
        }
        case 0x0A:{
          s7 = "a0";
          s7_len = 2;
          break;
        }
        case 0x1A:{
          s7 = "s10";
          s7_len = 3;
          break;
        }
        case 0x17:{
          s7 = "s7";
          s7_len = 2;
          break;
        }
        case 0x0C:{
          s7 = "a2";
          s7_len = 2;
          break;
        }
        case 0x18:{
          s7 = "s8";
          s7_len = 2;
          break;
        }
        case 0x02:{
          s7 = "sp";
          s7_len = 2;
          break;
        }
        case 0x1F:{
          s7 = "t6";
          s7_len = 2;
          break;
        }
        case 0x0B:{
          s7 = "a1";
          s7_len = 2;
          break;
        }
        case 0x07:{
          s7 = "t2";
          s7_len = 2;
          break;
        }
        case 0x13:{
          s7 = "s3";
          s7_len = 2;
          break;
        }
        case 0x04:{
          s7 = "tp";
          s7_len = 2;
          break;
        }
        case 0x19:{
          s7 = "s9";
          s7_len = 2;
          break;
        }
        case 0x12:{
          s7 = "s2";
          s7_len = 2;
          break;
        }
        case 0x14:{
          s7 = "s4";
          s7_len = 2;
          break;
        }
        case 0x0E:{
          s7 = "a4";
          s7_len = 2;
          break;
        }
        case 0x1E:{
          s7 = "t5";
          s7_len = 2;
          break;
        }
        case 0x11:{
          s7 = "a7";
          s7_len = 2;
          break;
        }
        case 0x03:{
          s7 = "gp";
          s7_len = 2;
          break;
        }
        case 0x05:{
          s7 = "t0";
          s7_len = 2;
          break;
        }
        case 0x1D:{
          s7 = "t4";
          s7_len = 2;
          break;
        }
        case 0x0D:{
          s7 = "a3";
          s7_len = 2;
          break;
        }
        case 0x0F:{
          s7 = "a5";
          s7_len = 2;
          break;
        }
      }
      s8 = ")";
      s8_len = 1;
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len, s8, s8_len);
      }
    }
    break;
    case RISCV_VMTYPE: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      switch (tree->ast_node.vmtype.op) { 
        case RISCV_VLM:{
          s0 = "vlm.v";
          s0_len = 5;
          break;
        }
        case RISCV_VSM:{
          s0 = "vsm.v";
          s0_len = 5;
          break;
        }
      }
      spc( &s1, &s1_len);
      switch (tree->ast_node.vmtype.vd_or_vs3) { 
        case 0x08:{
          s2 = "v8";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "v21";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "v1";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "v6";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "v9";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "v16";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "v27";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "v28";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "v22";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "v0";
          s2_len = 2;
          break;
        }
        case 0x0A:{
          s2 = "v10";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "v26";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "v23";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "v12";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "v24";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "v2";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "v31";
          s2_len = 3;
          break;
        }
        case 0x0B:{
          s2 = "v11";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "v7";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "v19";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "v4";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "v25";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "v18";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "v20";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "v14";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "v30";
          s2_len = 3;
          break;
        }
        case 0x11:{
          s2 = "v17";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "v3";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "v5";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "v29";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "v13";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "v15";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      s4 = "(";
      s4_len = 1;
      switch (tree->ast_node.vmtype.rs1) { 
        case 0x08:{
          s5 = "fp";
          s5_len = 2;
          break;
        }
        case 0x15:{
          s5 = "s5";
          s5_len = 2;
          break;
        }
        case 0x01:{
          s5 = "ra";
          s5_len = 2;
          break;
        }
        case 0x06:{
          s5 = "t1";
          s5_len = 2;
          break;
        }
        case 0x09:{
          s5 = "s1";
          s5_len = 2;
          break;
        }
        case 0x10:{
          s5 = "a6";
          s5_len = 2;
          break;
        }
        case 0x1B:{
          s5 = "s11";
          s5_len = 3;
          break;
        }
        case 0x1C:{
          s5 = "t3";
          s5_len = 2;
          break;
        }
        case 0x16:{
          s5 = "s6";
          s5_len = 2;
          break;
        }
        case 0x00:{
          s5 = "zero";
          s5_len = 4;
          break;
        }
        case 0x0A:{
          s5 = "a0";
          s5_len = 2;
          break;
        }
        case 0x1A:{
          s5 = "s10";
          s5_len = 3;
          break;
        }
        case 0x17:{
          s5 = "s7";
          s5_len = 2;
          break;
        }
        case 0x0C:{
          s5 = "a2";
          s5_len = 2;
          break;
        }
        case 0x18:{
          s5 = "s8";
          s5_len = 2;
          break;
        }
        case 0x02:{
          s5 = "sp";
          s5_len = 2;
          break;
        }
        case 0x1F:{
          s5 = "t6";
          s5_len = 2;
          break;
        }
        case 0x0B:{
          s5 = "a1";
          s5_len = 2;
          break;
        }
        case 0x07:{
          s5 = "t2";
          s5_len = 2;
          break;
        }
        case 0x13:{
          s5 = "s3";
          s5_len = 2;
          break;
        }
        case 0x04:{
          s5 = "tp";
          s5_len = 2;
          break;
        }
        case 0x19:{
          s5 = "s9";
          s5_len = 2;
          break;
        }
        case 0x12:{
          s5 = "s2";
          s5_len = 2;
          break;
        }
        case 0x14:{
          s5 = "s4";
          s5_len = 2;
          break;
        }
        case 0x0E:{
          s5 = "a4";
          s5_len = 2;
          break;
        }
        case 0x1E:{
          s5 = "t5";
          s5_len = 2;
          break;
        }
        case 0x11:{
          s5 = "a7";
          s5_len = 2;
          break;
        }
        case 0x03:{
          s5 = "gp";
          s5_len = 2;
          break;
        }
        case 0x05:{
          s5 = "t0";
          s5_len = 2;
          break;
        }
        case 0x1D:{
          s5 = "t4";
          s5_len = 2;
          break;
        }
        case 0x0D:{
          s5 = "a3";
          s5_len = 2;
          break;
        }
        case 0x0F:{
          s5 = "a5";
          s5_len = 2;
          break;
        }
      }
      s6 = ")";
      s6_len = 1;
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
    }
    break;
    case RISCV_MMTYPE: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      switch (tree->ast_node.mmtype.funct6) { 
        case RISCV_MM_VMANDN:{
          s0 = "vmandn.mm";
          s0_len = 9;
          break;
        }
        case RISCV_MM_VMOR:{
          s0 = "vmor.mm";
          s0_len = 7;
          break;
        }
        case RISCV_MM_VMXOR:{
          s0 = "vmxor.mm";
          s0_len = 8;
          break;
        }
        case RISCV_MM_VMNOR:{
          s0 = "vmnor.mm";
          s0_len = 8;
          break;
        }
        case RISCV_MM_VMORN:{
          s0 = "vmorn.mm";
          s0_len = 8;
          break;
        }
        case RISCV_MM_VMAND:{
          s0 = "vmand.mm";
          s0_len = 8;
          break;
        }
        case RISCV_MM_VMXNOR:{
          s0 = "vmxnor.mm";
          s0_len = 9;
          break;
        }
        case RISCV_MM_VMNAND:{
          s0 = "vmnand.mm";
          s0_len = 9;
          break;
        }
      }
      spc( &s1, &s1_len);
      switch (tree->ast_node.mmtype.vd) { 
        case 0x08:{
          s2 = "v8";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "v21";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "v1";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "v6";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "v9";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "v16";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "v27";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "v28";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "v22";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "v0";
          s2_len = 2;
          break;
        }
        case 0x0A:{
          s2 = "v10";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "v26";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "v23";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "v12";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "v24";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "v2";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "v31";
          s2_len = 3;
          break;
        }
        case 0x0B:{
          s2 = "v11";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "v7";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "v19";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "v4";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "v25";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "v18";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "v20";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "v14";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "v30";
          s2_len = 3;
          break;
        }
        case 0x11:{
          s2 = "v17";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "v3";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "v5";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "v29";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "v13";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "v15";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.mmtype.vs2) { 
        case 0x08:{
          s4 = "v8";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "v21";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "v1";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "v6";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "v9";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "v16";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "v27";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "v28";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "v22";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "v0";
          s4_len = 2;
          break;
        }
        case 0x0A:{
          s4 = "v10";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "v26";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "v23";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "v12";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "v24";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "v2";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "v31";
          s4_len = 3;
          break;
        }
        case 0x0B:{
          s4 = "v11";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "v7";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "v19";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "v4";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "v25";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "v18";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "v20";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "v14";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "v30";
          s4_len = 3;
          break;
        }
        case 0x11:{
          s4 = "v17";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "v3";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "v5";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "v29";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "v13";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "v15";
          s4_len = 3;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.mmtype.vs1) { 
        case 0x08:{
          s6 = "v8";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "v21";
          s6_len = 3;
          break;
        }
        case 0x01:{
          s6 = "v1";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "v6";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "v9";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "v16";
          s6_len = 3;
          break;
        }
        case 0x1B:{
          s6 = "v27";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "v28";
          s6_len = 3;
          break;
        }
        case 0x16:{
          s6 = "v22";
          s6_len = 3;
          break;
        }
        case 0x00:{
          s6 = "v0";
          s6_len = 2;
          break;
        }
        case 0x0A:{
          s6 = "v10";
          s6_len = 3;
          break;
        }
        case 0x1A:{
          s6 = "v26";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "v23";
          s6_len = 3;
          break;
        }
        case 0x0C:{
          s6 = "v12";
          s6_len = 3;
          break;
        }
        case 0x18:{
          s6 = "v24";
          s6_len = 3;
          break;
        }
        case 0x02:{
          s6 = "v2";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "v31";
          s6_len = 3;
          break;
        }
        case 0x0B:{
          s6 = "v11";
          s6_len = 3;
          break;
        }
        case 0x07:{
          s6 = "v7";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "v19";
          s6_len = 3;
          break;
        }
        case 0x04:{
          s6 = "v4";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "v25";
          s6_len = 3;
          break;
        }
        case 0x12:{
          s6 = "v18";
          s6_len = 3;
          break;
        }
        case 0x14:{
          s6 = "v20";
          s6_len = 3;
          break;
        }
        case 0x0E:{
          s6 = "v14";
          s6_len = 3;
          break;
        }
        case 0x1E:{
          s6 = "v30";
          s6_len = 3;
          break;
        }
        case 0x11:{
          s6 = "v17";
          s6_len = 3;
          break;
        }
        case 0x03:{
          s6 = "v3";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "v5";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "v29";
          s6_len = 3;
          break;
        }
        case 0x0D:{
          s6 = "v13";
          s6_len = 3;
          break;
        }
        case 0x0F:{
          s6 = "v15";
          s6_len = 3;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
    }
    break;
    case RISCV_VCPOP_M: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      s0 = "vpopc.m";
      s0_len = 7;
      spc( &s1, &s1_len);
      switch (tree->ast_node.vcpop_m.rd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.vcpop_m.vs2) { 
        case 0x08:{
          s4 = "v8";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "v21";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "v1";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "v6";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "v9";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "v16";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "v27";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "v28";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "v22";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "v0";
          s4_len = 2;
          break;
        }
        case 0x0A:{
          s4 = "v10";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "v26";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "v23";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "v12";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "v24";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "v2";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "v31";
          s4_len = 3;
          break;
        }
        case 0x0B:{
          s4 = "v11";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "v7";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "v19";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "v4";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "v25";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "v18";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "v20";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "v14";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "v30";
          s4_len = 3;
          break;
        }
        case 0x11:{
          s4 = "v17";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "v3";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "v5";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "v29";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "v13";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "v15";
          s4_len = 3;
          break;
        }
      }
      maybe_vmask(tree->ast_node.vcpop_m.vm, &s5, &s5_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      }
    }
    break;
    case RISCV_VFIRST_M: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      s0 = "vfirst.m";
      s0_len = 8;
      spc( &s1, &s1_len);
      switch (tree->ast_node.vfirst_m.rd) { 
        case 0x08:{
          s2 = "fp";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "s5";
          s2_len = 2;
          break;
        }
        case 0x01:{
          s2 = "ra";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "t1";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "s1";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "a6";
          s2_len = 2;
          break;
        }
        case 0x1B:{
          s2 = "s11";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "t3";
          s2_len = 2;
          break;
        }
        case 0x16:{
          s2 = "s6";
          s2_len = 2;
          break;
        }
        case 0x00:{
          s2 = "zero";
          s2_len = 4;
          break;
        }
        case 0x0A:{
          s2 = "a0";
          s2_len = 2;
          break;
        }
        case 0x1A:{
          s2 = "s10";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "s7";
          s2_len = 2;
          break;
        }
        case 0x0C:{
          s2 = "a2";
          s2_len = 2;
          break;
        }
        case 0x18:{
          s2 = "s8";
          s2_len = 2;
          break;
        }
        case 0x02:{
          s2 = "sp";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "t6";
          s2_len = 2;
          break;
        }
        case 0x0B:{
          s2 = "a1";
          s2_len = 2;
          break;
        }
        case 0x07:{
          s2 = "t2";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "s3";
          s2_len = 2;
          break;
        }
        case 0x04:{
          s2 = "tp";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "s9";
          s2_len = 2;
          break;
        }
        case 0x12:{
          s2 = "s2";
          s2_len = 2;
          break;
        }
        case 0x14:{
          s2 = "s4";
          s2_len = 2;
          break;
        }
        case 0x0E:{
          s2 = "a4";
          s2_len = 2;
          break;
        }
        case 0x1E:{
          s2 = "t5";
          s2_len = 2;
          break;
        }
        case 0x11:{
          s2 = "a7";
          s2_len = 2;
          break;
        }
        case 0x03:{
          s2 = "gp";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "t0";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "t4";
          s2_len = 2;
          break;
        }
        case 0x0D:{
          s2 = "a3";
          s2_len = 2;
          break;
        }
        case 0x0F:{
          s2 = "a5";
          s2_len = 2;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.vfirst_m.vs2) { 
        case 0x08:{
          s4 = "v8";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "v21";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "v1";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "v6";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "v9";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "v16";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "v27";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "v28";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "v22";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "v0";
          s4_len = 2;
          break;
        }
        case 0x0A:{
          s4 = "v10";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "v26";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "v23";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "v12";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "v24";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "v2";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "v31";
          s4_len = 3;
          break;
        }
        case 0x0B:{
          s4 = "v11";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "v7";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "v19";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "v4";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "v25";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "v18";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "v20";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "v14";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "v30";
          s4_len = 3;
          break;
        }
        case 0x11:{
          s4 = "v17";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "v3";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "v5";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "v29";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "v13";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "v15";
          s4_len = 3;
          break;
        }
      }
      maybe_vmask(tree->ast_node.vfirst_m.vm, &s5, &s5_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      }
    }
    break;
    case RISCV_VMSBF_M: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      s0 = "vmsbf.m";
      s0_len = 7;
      spc( &s1, &s1_len);
      switch (tree->ast_node.vmsbf_m.vd) { 
        case 0x08:{
          s2 = "v8";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "v21";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "v1";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "v6";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "v9";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "v16";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "v27";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "v28";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "v22";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "v0";
          s2_len = 2;
          break;
        }
        case 0x0A:{
          s2 = "v10";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "v26";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "v23";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "v12";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "v24";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "v2";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "v31";
          s2_len = 3;
          break;
        }
        case 0x0B:{
          s2 = "v11";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "v7";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "v19";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "v4";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "v25";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "v18";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "v20";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "v14";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "v30";
          s2_len = 3;
          break;
        }
        case 0x11:{
          s2 = "v17";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "v3";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "v5";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "v29";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "v13";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "v15";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.vmsbf_m.vs2) { 
        case 0x08:{
          s4 = "v8";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "v21";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "v1";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "v6";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "v9";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "v16";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "v27";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "v28";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "v22";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "v0";
          s4_len = 2;
          break;
        }
        case 0x0A:{
          s4 = "v10";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "v26";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "v23";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "v12";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "v24";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "v2";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "v31";
          s4_len = 3;
          break;
        }
        case 0x0B:{
          s4 = "v11";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "v7";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "v19";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "v4";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "v25";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "v18";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "v20";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "v14";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "v30";
          s4_len = 3;
          break;
        }
        case 0x11:{
          s4 = "v17";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "v3";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "v5";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "v29";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "v13";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "v15";
          s4_len = 3;
          break;
        }
      }
      maybe_vmask(tree->ast_node.vmsbf_m.vm, &s5, &s5_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      }
    }
    break;
    case RISCV_VMSIF_M: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      s0 = "vmsif.m";
      s0_len = 7;
      spc( &s1, &s1_len);
      switch (tree->ast_node.vmsif_m.vd) { 
        case 0x08:{
          s2 = "v8";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "v21";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "v1";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "v6";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "v9";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "v16";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "v27";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "v28";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "v22";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "v0";
          s2_len = 2;
          break;
        }
        case 0x0A:{
          s2 = "v10";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "v26";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "v23";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "v12";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "v24";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "v2";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "v31";
          s2_len = 3;
          break;
        }
        case 0x0B:{
          s2 = "v11";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "v7";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "v19";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "v4";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "v25";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "v18";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "v20";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "v14";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "v30";
          s2_len = 3;
          break;
        }
        case 0x11:{
          s2 = "v17";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "v3";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "v5";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "v29";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "v13";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "v15";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.vmsif_m.vs2) { 
        case 0x08:{
          s4 = "v8";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "v21";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "v1";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "v6";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "v9";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "v16";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "v27";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "v28";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "v22";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "v0";
          s4_len = 2;
          break;
        }
        case 0x0A:{
          s4 = "v10";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "v26";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "v23";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "v12";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "v24";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "v2";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "v31";
          s4_len = 3;
          break;
        }
        case 0x0B:{
          s4 = "v11";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "v7";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "v19";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "v4";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "v25";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "v18";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "v20";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "v14";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "v30";
          s4_len = 3;
          break;
        }
        case 0x11:{
          s4 = "v17";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "v3";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "v5";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "v29";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "v13";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "v15";
          s4_len = 3;
          break;
        }
      }
      maybe_vmask(tree->ast_node.vmsif_m.vm, &s5, &s5_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      }
    }
    break;
    case RISCV_VMSOF_M: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      s0 = "vmsof.m";
      s0_len = 7;
      spc( &s1, &s1_len);
      switch (tree->ast_node.vmsof_m.vd) { 
        case 0x08:{
          s2 = "v8";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "v21";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "v1";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "v6";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "v9";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "v16";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "v27";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "v28";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "v22";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "v0";
          s2_len = 2;
          break;
        }
        case 0x0A:{
          s2 = "v10";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "v26";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "v23";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "v12";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "v24";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "v2";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "v31";
          s2_len = 3;
          break;
        }
        case 0x0B:{
          s2 = "v11";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "v7";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "v19";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "v4";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "v25";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "v18";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "v20";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "v14";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "v30";
          s2_len = 3;
          break;
        }
        case 0x11:{
          s2 = "v17";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "v3";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "v5";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "v29";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "v13";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "v15";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.vmsof_m.vs2) { 
        case 0x08:{
          s4 = "v8";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "v21";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "v1";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "v6";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "v9";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "v16";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "v27";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "v28";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "v22";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "v0";
          s4_len = 2;
          break;
        }
        case 0x0A:{
          s4 = "v10";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "v26";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "v23";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "v12";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "v24";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "v2";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "v31";
          s4_len = 3;
          break;
        }
        case 0x0B:{
          s4 = "v11";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "v7";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "v19";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "v4";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "v25";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "v18";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "v20";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "v14";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "v30";
          s4_len = 3;
          break;
        }
        case 0x11:{
          s4 = "v17";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "v3";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "v5";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "v29";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "v13";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "v15";
          s4_len = 3;
          break;
        }
      }
      maybe_vmask(tree->ast_node.vmsof_m.vm, &s5, &s5_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      }
    }
    break;
    case RISCV_VIOTA_M: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      s0 = "viota.m";
      s0_len = 7;
      spc( &s1, &s1_len);
      switch (tree->ast_node.viota_m.vd) { 
        case 0x08:{
          s2 = "v8";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "v21";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "v1";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "v6";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "v9";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "v16";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "v27";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "v28";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "v22";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "v0";
          s2_len = 2;
          break;
        }
        case 0x0A:{
          s2 = "v10";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "v26";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "v23";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "v12";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "v24";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "v2";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "v31";
          s2_len = 3;
          break;
        }
        case 0x0B:{
          s2 = "v11";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "v7";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "v19";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "v4";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "v25";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "v18";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "v20";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "v14";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "v30";
          s2_len = 3;
          break;
        }
        case 0x11:{
          s2 = "v17";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "v3";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "v5";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "v29";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "v13";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "v15";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.viota_m.vs2) { 
        case 0x08:{
          s4 = "v8";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "v21";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "v1";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "v6";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "v9";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "v16";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "v27";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "v28";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "v22";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "v0";
          s4_len = 2;
          break;
        }
        case 0x0A:{
          s4 = "v10";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "v26";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "v23";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "v12";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "v24";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "v2";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "v31";
          s4_len = 3;
          break;
        }
        case 0x0B:{
          s4 = "v11";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "v7";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "v19";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "v4";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "v25";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "v18";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "v20";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "v14";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "v30";
          s4_len = 3;
          break;
        }
        case 0x11:{
          s4 = "v17";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "v3";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "v5";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "v29";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "v13";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "v15";
          s4_len = 3;
          break;
        }
      }
      maybe_vmask(tree->ast_node.viota_m.vm, &s5, &s5_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      }
    }
    break;
    case RISCV_VID_V: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      s0 = "vid.v";
      s0_len = 5;
      spc( &s1, &s1_len);
      switch (tree->ast_node.vid_v.vd) { 
        case 0x08:{
          s2 = "v8";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "v21";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "v1";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "v6";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "v9";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "v16";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "v27";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "v28";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "v22";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "v0";
          s2_len = 2;
          break;
        }
        case 0x0A:{
          s2 = "v10";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "v26";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "v23";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "v12";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "v24";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "v2";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "v31";
          s2_len = 3;
          break;
        }
        case 0x0B:{
          s2 = "v11";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "v7";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "v19";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "v4";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "v25";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "v18";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "v20";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "v14";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "v30";
          s2_len = 3;
          break;
        }
        case 0x11:{
          s2 = "v17";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "v3";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "v5";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "v29";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "v13";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "v15";
          s2_len = 3;
          break;
        }
      }
      maybe_vmask(tree->ast_node.vid_v.vm, &s3, &s3_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      }
    }
    break;
    case RISCV_VVMTYPE: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      char *s8; size_t s8_len;
      switch (tree->ast_node.vvmtype.funct6) { 
        case RISCV_VVM_VMADC:{
          s0 = "vmadc.vvm";
          s0_len = 9;
          break;
        }
        case RISCV_VVM_VMSBC:{
          s0 = "vmsbc.vvm";
          s0_len = 9;
          break;
        }
      }
      spc( &s1, &s1_len);
      switch (tree->ast_node.vvmtype.vd) { 
        case 0x08:{
          s2 = "v8";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "v21";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "v1";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "v6";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "v9";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "v16";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "v27";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "v28";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "v22";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "v0";
          s2_len = 2;
          break;
        }
        case 0x0A:{
          s2 = "v10";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "v26";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "v23";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "v12";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "v24";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "v2";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "v31";
          s2_len = 3;
          break;
        }
        case 0x0B:{
          s2 = "v11";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "v7";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "v19";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "v4";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "v25";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "v18";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "v20";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "v14";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "v30";
          s2_len = 3;
          break;
        }
        case 0x11:{
          s2 = "v17";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "v3";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "v5";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "v29";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "v13";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "v15";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.vvmtype.vs2) { 
        case 0x08:{
          s4 = "v8";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "v21";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "v1";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "v6";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "v9";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "v16";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "v27";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "v28";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "v22";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "v0";
          s4_len = 2;
          break;
        }
        case 0x0A:{
          s4 = "v10";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "v26";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "v23";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "v12";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "v24";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "v2";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "v31";
          s4_len = 3;
          break;
        }
        case 0x0B:{
          s4 = "v11";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "v7";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "v19";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "v4";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "v25";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "v18";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "v20";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "v14";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "v30";
          s4_len = 3;
          break;
        }
        case 0x11:{
          s4 = "v17";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "v3";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "v5";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "v29";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "v13";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "v15";
          s4_len = 3;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.vvmtype.vs1) { 
        case 0x08:{
          s6 = "v8";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "v21";
          s6_len = 3;
          break;
        }
        case 0x01:{
          s6 = "v1";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "v6";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "v9";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "v16";
          s6_len = 3;
          break;
        }
        case 0x1B:{
          s6 = "v27";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "v28";
          s6_len = 3;
          break;
        }
        case 0x16:{
          s6 = "v22";
          s6_len = 3;
          break;
        }
        case 0x00:{
          s6 = "v0";
          s6_len = 2;
          break;
        }
        case 0x0A:{
          s6 = "v10";
          s6_len = 3;
          break;
        }
        case 0x1A:{
          s6 = "v26";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "v23";
          s6_len = 3;
          break;
        }
        case 0x0C:{
          s6 = "v12";
          s6_len = 3;
          break;
        }
        case 0x18:{
          s6 = "v24";
          s6_len = 3;
          break;
        }
        case 0x02:{
          s6 = "v2";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "v31";
          s6_len = 3;
          break;
        }
        case 0x0B:{
          s6 = "v11";
          s6_len = 3;
          break;
        }
        case 0x07:{
          s6 = "v7";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "v19";
          s6_len = 3;
          break;
        }
        case 0x04:{
          s6 = "v4";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "v25";
          s6_len = 3;
          break;
        }
        case 0x12:{
          s6 = "v18";
          s6_len = 3;
          break;
        }
        case 0x14:{
          s6 = "v20";
          s6_len = 3;
          break;
        }
        case 0x0E:{
          s6 = "v14";
          s6_len = 3;
          break;
        }
        case 0x1E:{
          s6 = "v30";
          s6_len = 3;
          break;
        }
        case 0x11:{
          s6 = "v17";
          s6_len = 3;
          break;
        }
        case 0x03:{
          s6 = "v3";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "v5";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "v29";
          s6_len = 3;
          break;
        }
        case 0x0D:{
          s6 = "v13";
          s6_len = 3;
          break;
        }
        case 0x0F:{
          s6 = "v15";
          s6_len = 3;
          break;
        }
      }
      sep( &s7, &s7_len);
      s8 = "v0";
      s8_len = 2;
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len, s8, s8_len);
      }
    }
    break;
    case RISCV_VVMCTYPE: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      switch (tree->ast_node.vvmctype.funct6) { 
        case RISCV_VVMC_VMADC:{
          s0 = "vmadc.vv";
          s0_len = 8;
          break;
        }
        case RISCV_VVMC_VMSBC:{
          s0 = "vmsbc.vv";
          s0_len = 8;
          break;
        }
      }
      spc( &s1, &s1_len);
      switch (tree->ast_node.vvmctype.vd) { 
        case 0x08:{
          s2 = "v8";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "v21";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "v1";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "v6";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "v9";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "v16";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "v27";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "v28";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "v22";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "v0";
          s2_len = 2;
          break;
        }
        case 0x0A:{
          s2 = "v10";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "v26";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "v23";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "v12";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "v24";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "v2";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "v31";
          s2_len = 3;
          break;
        }
        case 0x0B:{
          s2 = "v11";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "v7";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "v19";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "v4";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "v25";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "v18";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "v20";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "v14";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "v30";
          s2_len = 3;
          break;
        }
        case 0x11:{
          s2 = "v17";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "v3";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "v5";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "v29";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "v13";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "v15";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.vvmctype.vs2) { 
        case 0x08:{
          s4 = "v8";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "v21";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "v1";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "v6";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "v9";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "v16";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "v27";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "v28";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "v22";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "v0";
          s4_len = 2;
          break;
        }
        case 0x0A:{
          s4 = "v10";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "v26";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "v23";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "v12";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "v24";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "v2";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "v31";
          s4_len = 3;
          break;
        }
        case 0x0B:{
          s4 = "v11";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "v7";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "v19";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "v4";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "v25";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "v18";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "v20";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "v14";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "v30";
          s4_len = 3;
          break;
        }
        case 0x11:{
          s4 = "v17";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "v3";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "v5";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "v29";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "v13";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "v15";
          s4_len = 3;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.vvmctype.vs1) { 
        case 0x08:{
          s6 = "v8";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "v21";
          s6_len = 3;
          break;
        }
        case 0x01:{
          s6 = "v1";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "v6";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "v9";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "v16";
          s6_len = 3;
          break;
        }
        case 0x1B:{
          s6 = "v27";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "v28";
          s6_len = 3;
          break;
        }
        case 0x16:{
          s6 = "v22";
          s6_len = 3;
          break;
        }
        case 0x00:{
          s6 = "v0";
          s6_len = 2;
          break;
        }
        case 0x0A:{
          s6 = "v10";
          s6_len = 3;
          break;
        }
        case 0x1A:{
          s6 = "v26";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "v23";
          s6_len = 3;
          break;
        }
        case 0x0C:{
          s6 = "v12";
          s6_len = 3;
          break;
        }
        case 0x18:{
          s6 = "v24";
          s6_len = 3;
          break;
        }
        case 0x02:{
          s6 = "v2";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "v31";
          s6_len = 3;
          break;
        }
        case 0x0B:{
          s6 = "v11";
          s6_len = 3;
          break;
        }
        case 0x07:{
          s6 = "v7";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "v19";
          s6_len = 3;
          break;
        }
        case 0x04:{
          s6 = "v4";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "v25";
          s6_len = 3;
          break;
        }
        case 0x12:{
          s6 = "v18";
          s6_len = 3;
          break;
        }
        case 0x14:{
          s6 = "v20";
          s6_len = 3;
          break;
        }
        case 0x0E:{
          s6 = "v14";
          s6_len = 3;
          break;
        }
        case 0x1E:{
          s6 = "v30";
          s6_len = 3;
          break;
        }
        case 0x11:{
          s6 = "v17";
          s6_len = 3;
          break;
        }
        case 0x03:{
          s6 = "v3";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "v5";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "v29";
          s6_len = 3;
          break;
        }
        case 0x0D:{
          s6 = "v13";
          s6_len = 3;
          break;
        }
        case 0x0F:{
          s6 = "v15";
          s6_len = 3;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
    }
    break;
    case RISCV_VVMSTYPE: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      char *s8; size_t s8_len;
      switch (tree->ast_node.vvmstype.funct6) { 
        case RISCV_VVMS_VSBC:{
          s0 = "vsbc.vvm";
          s0_len = 8;
          break;
        }
        case RISCV_VVMS_VADC:{
          s0 = "vadc.vvm";
          s0_len = 8;
          break;
        }
      }
      spc( &s1, &s1_len);
      switch (tree->ast_node.vvmstype.vd) { 
        case 0x08:{
          s2 = "v8";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "v21";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "v1";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "v6";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "v9";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "v16";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "v27";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "v28";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "v22";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "v0";
          s2_len = 2;
          break;
        }
        case 0x0A:{
          s2 = "v10";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "v26";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "v23";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "v12";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "v24";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "v2";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "v31";
          s2_len = 3;
          break;
        }
        case 0x0B:{
          s2 = "v11";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "v7";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "v19";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "v4";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "v25";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "v18";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "v20";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "v14";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "v30";
          s2_len = 3;
          break;
        }
        case 0x11:{
          s2 = "v17";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "v3";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "v5";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "v29";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "v13";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "v15";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.vvmstype.vs2) { 
        case 0x08:{
          s4 = "v8";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "v21";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "v1";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "v6";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "v9";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "v16";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "v27";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "v28";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "v22";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "v0";
          s4_len = 2;
          break;
        }
        case 0x0A:{
          s4 = "v10";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "v26";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "v23";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "v12";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "v24";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "v2";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "v31";
          s4_len = 3;
          break;
        }
        case 0x0B:{
          s4 = "v11";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "v7";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "v19";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "v4";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "v25";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "v18";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "v20";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "v14";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "v30";
          s4_len = 3;
          break;
        }
        case 0x11:{
          s4 = "v17";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "v3";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "v5";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "v29";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "v13";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "v15";
          s4_len = 3;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.vvmstype.vs1) { 
        case 0x08:{
          s6 = "v8";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "v21";
          s6_len = 3;
          break;
        }
        case 0x01:{
          s6 = "v1";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "v6";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "v9";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "v16";
          s6_len = 3;
          break;
        }
        case 0x1B:{
          s6 = "v27";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "v28";
          s6_len = 3;
          break;
        }
        case 0x16:{
          s6 = "v22";
          s6_len = 3;
          break;
        }
        case 0x00:{
          s6 = "v0";
          s6_len = 2;
          break;
        }
        case 0x0A:{
          s6 = "v10";
          s6_len = 3;
          break;
        }
        case 0x1A:{
          s6 = "v26";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "v23";
          s6_len = 3;
          break;
        }
        case 0x0C:{
          s6 = "v12";
          s6_len = 3;
          break;
        }
        case 0x18:{
          s6 = "v24";
          s6_len = 3;
          break;
        }
        case 0x02:{
          s6 = "v2";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "v31";
          s6_len = 3;
          break;
        }
        case 0x0B:{
          s6 = "v11";
          s6_len = 3;
          break;
        }
        case 0x07:{
          s6 = "v7";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "v19";
          s6_len = 3;
          break;
        }
        case 0x04:{
          s6 = "v4";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "v25";
          s6_len = 3;
          break;
        }
        case 0x12:{
          s6 = "v18";
          s6_len = 3;
          break;
        }
        case 0x14:{
          s6 = "v20";
          s6_len = 3;
          break;
        }
        case 0x0E:{
          s6 = "v14";
          s6_len = 3;
          break;
        }
        case 0x1E:{
          s6 = "v30";
          s6_len = 3;
          break;
        }
        case 0x11:{
          s6 = "v17";
          s6_len = 3;
          break;
        }
        case 0x03:{
          s6 = "v3";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "v5";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "v29";
          s6_len = 3;
          break;
        }
        case 0x0D:{
          s6 = "v13";
          s6_len = 3;
          break;
        }
        case 0x0F:{
          s6 = "v15";
          s6_len = 3;
          break;
        }
      }
      sep( &s7, &s7_len);
      s8 = "v0";
      s8_len = 2;
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len, s8, s8_len);
      }
    }
    break;
    case RISCV_VVCMPTYPE: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      switch (tree->ast_node.vvcmptype.funct6) { 
        case RISCV_VVCMP_VMSEQ:{
          s0 = "vmseq.vv";
          s0_len = 8;
          break;
        }
        case RISCV_VVCMP_VMSLTU:{
          s0 = "vmsltu.vv";
          s0_len = 9;
          break;
        }
        case RISCV_VVCMP_VMSLE:{
          s0 = "vmsle.vv";
          s0_len = 8;
          break;
        }
        case RISCV_VVCMP_VMSLEU:{
          s0 = "vmsleu.vv";
          s0_len = 9;
          break;
        }
        case RISCV_VVCMP_VMSNE:{
          s0 = "vmsne.vv";
          s0_len = 8;
          break;
        }
        case RISCV_VVCMP_VMSLT:{
          s0 = "vmslt.vv";
          s0_len = 8;
          break;
        }
      }
      spc( &s1, &s1_len);
      switch (tree->ast_node.vvcmptype.vd) { 
        case 0x08:{
          s2 = "v8";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "v21";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "v1";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "v6";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "v9";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "v16";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "v27";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "v28";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "v22";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "v0";
          s2_len = 2;
          break;
        }
        case 0x0A:{
          s2 = "v10";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "v26";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "v23";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "v12";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "v24";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "v2";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "v31";
          s2_len = 3;
          break;
        }
        case 0x0B:{
          s2 = "v11";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "v7";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "v19";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "v4";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "v25";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "v18";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "v20";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "v14";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "v30";
          s2_len = 3;
          break;
        }
        case 0x11:{
          s2 = "v17";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "v3";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "v5";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "v29";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "v13";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "v15";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.vvcmptype.vs2) { 
        case 0x08:{
          s4 = "v8";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "v21";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "v1";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "v6";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "v9";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "v16";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "v27";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "v28";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "v22";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "v0";
          s4_len = 2;
          break;
        }
        case 0x0A:{
          s4 = "v10";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "v26";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "v23";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "v12";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "v24";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "v2";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "v31";
          s4_len = 3;
          break;
        }
        case 0x0B:{
          s4 = "v11";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "v7";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "v19";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "v4";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "v25";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "v18";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "v20";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "v14";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "v30";
          s4_len = 3;
          break;
        }
        case 0x11:{
          s4 = "v17";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "v3";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "v5";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "v29";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "v13";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "v15";
          s4_len = 3;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.vvcmptype.vs1) { 
        case 0x08:{
          s6 = "v8";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "v21";
          s6_len = 3;
          break;
        }
        case 0x01:{
          s6 = "v1";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "v6";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "v9";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "v16";
          s6_len = 3;
          break;
        }
        case 0x1B:{
          s6 = "v27";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "v28";
          s6_len = 3;
          break;
        }
        case 0x16:{
          s6 = "v22";
          s6_len = 3;
          break;
        }
        case 0x00:{
          s6 = "v0";
          s6_len = 2;
          break;
        }
        case 0x0A:{
          s6 = "v10";
          s6_len = 3;
          break;
        }
        case 0x1A:{
          s6 = "v26";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "v23";
          s6_len = 3;
          break;
        }
        case 0x0C:{
          s6 = "v12";
          s6_len = 3;
          break;
        }
        case 0x18:{
          s6 = "v24";
          s6_len = 3;
          break;
        }
        case 0x02:{
          s6 = "v2";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "v31";
          s6_len = 3;
          break;
        }
        case 0x0B:{
          s6 = "v11";
          s6_len = 3;
          break;
        }
        case 0x07:{
          s6 = "v7";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "v19";
          s6_len = 3;
          break;
        }
        case 0x04:{
          s6 = "v4";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "v25";
          s6_len = 3;
          break;
        }
        case 0x12:{
          s6 = "v18";
          s6_len = 3;
          break;
        }
        case 0x14:{
          s6 = "v20";
          s6_len = 3;
          break;
        }
        case 0x0E:{
          s6 = "v14";
          s6_len = 3;
          break;
        }
        case 0x1E:{
          s6 = "v30";
          s6_len = 3;
          break;
        }
        case 0x11:{
          s6 = "v17";
          s6_len = 3;
          break;
        }
        case 0x03:{
          s6 = "v3";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "v5";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "v29";
          s6_len = 3;
          break;
        }
        case 0x0D:{
          s6 = "v13";
          s6_len = 3;
          break;
        }
        case 0x0F:{
          s6 = "v15";
          s6_len = 3;
          break;
        }
      }
      maybe_vmask(tree->ast_node.vvcmptype.vm, &s7, &s7_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      }
    }
    break;
    case RISCV_VXMTYPE: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      char *s8; size_t s8_len;
      switch (tree->ast_node.vxmtype.funct6) { 
        case RISCV_VXM_VMSBC:{
          s0 = "vmsbc.vxm";
          s0_len = 9;
          break;
        }
        case RISCV_VXM_VMADC:{
          s0 = "vmadc.vxm";
          s0_len = 9;
          break;
        }
      }
      spc( &s1, &s1_len);
      switch (tree->ast_node.vxmtype.vd) { 
        case 0x08:{
          s2 = "v8";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "v21";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "v1";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "v6";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "v9";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "v16";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "v27";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "v28";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "v22";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "v0";
          s2_len = 2;
          break;
        }
        case 0x0A:{
          s2 = "v10";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "v26";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "v23";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "v12";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "v24";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "v2";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "v31";
          s2_len = 3;
          break;
        }
        case 0x0B:{
          s2 = "v11";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "v7";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "v19";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "v4";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "v25";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "v18";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "v20";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "v14";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "v30";
          s2_len = 3;
          break;
        }
        case 0x11:{
          s2 = "v17";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "v3";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "v5";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "v29";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "v13";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "v15";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.vxmtype.vs2) { 
        case 0x08:{
          s4 = "v8";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "v21";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "v1";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "v6";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "v9";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "v16";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "v27";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "v28";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "v22";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "v0";
          s4_len = 2;
          break;
        }
        case 0x0A:{
          s4 = "v10";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "v26";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "v23";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "v12";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "v24";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "v2";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "v31";
          s4_len = 3;
          break;
        }
        case 0x0B:{
          s4 = "v11";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "v7";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "v19";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "v4";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "v25";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "v18";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "v20";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "v14";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "v30";
          s4_len = 3;
          break;
        }
        case 0x11:{
          s4 = "v17";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "v3";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "v5";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "v29";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "v13";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "v15";
          s4_len = 3;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.vxmtype.rs1) { 
        case 0x08:{
          s6 = "fp";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "s5";
          s6_len = 2;
          break;
        }
        case 0x01:{
          s6 = "ra";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "t1";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "s1";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "a6";
          s6_len = 2;
          break;
        }
        case 0x1B:{
          s6 = "s11";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "t3";
          s6_len = 2;
          break;
        }
        case 0x16:{
          s6 = "s6";
          s6_len = 2;
          break;
        }
        case 0x00:{
          s6 = "zero";
          s6_len = 4;
          break;
        }
        case 0x0A:{
          s6 = "a0";
          s6_len = 2;
          break;
        }
        case 0x1A:{
          s6 = "s10";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "s7";
          s6_len = 2;
          break;
        }
        case 0x0C:{
          s6 = "a2";
          s6_len = 2;
          break;
        }
        case 0x18:{
          s6 = "s8";
          s6_len = 2;
          break;
        }
        case 0x02:{
          s6 = "sp";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "t6";
          s6_len = 2;
          break;
        }
        case 0x0B:{
          s6 = "a1";
          s6_len = 2;
          break;
        }
        case 0x07:{
          s6 = "t2";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "s3";
          s6_len = 2;
          break;
        }
        case 0x04:{
          s6 = "tp";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "s9";
          s6_len = 2;
          break;
        }
        case 0x12:{
          s6 = "s2";
          s6_len = 2;
          break;
        }
        case 0x14:{
          s6 = "s4";
          s6_len = 2;
          break;
        }
        case 0x0E:{
          s6 = "a4";
          s6_len = 2;
          break;
        }
        case 0x1E:{
          s6 = "t5";
          s6_len = 2;
          break;
        }
        case 0x11:{
          s6 = "a7";
          s6_len = 2;
          break;
        }
        case 0x03:{
          s6 = "gp";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "t0";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "t4";
          s6_len = 2;
          break;
        }
        case 0x0D:{
          s6 = "a3";
          s6_len = 2;
          break;
        }
        case 0x0F:{
          s6 = "a5";
          s6_len = 2;
          break;
        }
      }
      sep( &s7, &s7_len);
      s8 = "v0";
      s8_len = 2;
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len, s8, s8_len);
      }
    }
    break;
    case RISCV_VXMCTYPE: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      switch (tree->ast_node.vxmctype.funct6) { 
        case RISCV_VXMC_VMSBC:{
          s0 = "vmsbc.vx";
          s0_len = 8;
          break;
        }
        case RISCV_VXMC_VMADC:{
          s0 = "vmadc.vx";
          s0_len = 8;
          break;
        }
      }
      spc( &s1, &s1_len);
      switch (tree->ast_node.vxmctype.vd) { 
        case 0x08:{
          s2 = "v8";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "v21";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "v1";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "v6";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "v9";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "v16";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "v27";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "v28";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "v22";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "v0";
          s2_len = 2;
          break;
        }
        case 0x0A:{
          s2 = "v10";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "v26";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "v23";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "v12";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "v24";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "v2";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "v31";
          s2_len = 3;
          break;
        }
        case 0x0B:{
          s2 = "v11";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "v7";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "v19";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "v4";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "v25";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "v18";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "v20";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "v14";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "v30";
          s2_len = 3;
          break;
        }
        case 0x11:{
          s2 = "v17";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "v3";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "v5";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "v29";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "v13";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "v15";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.vxmctype.vs2) { 
        case 0x08:{
          s4 = "v8";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "v21";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "v1";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "v6";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "v9";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "v16";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "v27";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "v28";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "v22";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "v0";
          s4_len = 2;
          break;
        }
        case 0x0A:{
          s4 = "v10";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "v26";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "v23";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "v12";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "v24";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "v2";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "v31";
          s4_len = 3;
          break;
        }
        case 0x0B:{
          s4 = "v11";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "v7";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "v19";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "v4";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "v25";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "v18";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "v20";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "v14";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "v30";
          s4_len = 3;
          break;
        }
        case 0x11:{
          s4 = "v17";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "v3";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "v5";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "v29";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "v13";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "v15";
          s4_len = 3;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.vxmctype.rs1) { 
        case 0x08:{
          s6 = "fp";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "s5";
          s6_len = 2;
          break;
        }
        case 0x01:{
          s6 = "ra";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "t1";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "s1";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "a6";
          s6_len = 2;
          break;
        }
        case 0x1B:{
          s6 = "s11";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "t3";
          s6_len = 2;
          break;
        }
        case 0x16:{
          s6 = "s6";
          s6_len = 2;
          break;
        }
        case 0x00:{
          s6 = "zero";
          s6_len = 4;
          break;
        }
        case 0x0A:{
          s6 = "a0";
          s6_len = 2;
          break;
        }
        case 0x1A:{
          s6 = "s10";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "s7";
          s6_len = 2;
          break;
        }
        case 0x0C:{
          s6 = "a2";
          s6_len = 2;
          break;
        }
        case 0x18:{
          s6 = "s8";
          s6_len = 2;
          break;
        }
        case 0x02:{
          s6 = "sp";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "t6";
          s6_len = 2;
          break;
        }
        case 0x0B:{
          s6 = "a1";
          s6_len = 2;
          break;
        }
        case 0x07:{
          s6 = "t2";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "s3";
          s6_len = 2;
          break;
        }
        case 0x04:{
          s6 = "tp";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "s9";
          s6_len = 2;
          break;
        }
        case 0x12:{
          s6 = "s2";
          s6_len = 2;
          break;
        }
        case 0x14:{
          s6 = "s4";
          s6_len = 2;
          break;
        }
        case 0x0E:{
          s6 = "a4";
          s6_len = 2;
          break;
        }
        case 0x1E:{
          s6 = "t5";
          s6_len = 2;
          break;
        }
        case 0x11:{
          s6 = "a7";
          s6_len = 2;
          break;
        }
        case 0x03:{
          s6 = "gp";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "t0";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "t4";
          s6_len = 2;
          break;
        }
        case 0x0D:{
          s6 = "a3";
          s6_len = 2;
          break;
        }
        case 0x0F:{
          s6 = "a5";
          s6_len = 2;
          break;
        }
      }
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
    }
    break;
    case RISCV_VXMSTYPE: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      char *s8; size_t s8_len;
      switch (tree->ast_node.vxmstype.funct6) { 
        case RISCV_VXMS_VADC:{
          s0 = "vadc.vxm";
          s0_len = 8;
          break;
        }
        case RISCV_VXMS_VSBC:{
          s0 = "vsbc.vxm";
          s0_len = 8;
          break;
        }
      }
      spc( &s1, &s1_len);
      switch (tree->ast_node.vxmstype.vd) { 
        case 0x08:{
          s2 = "v8";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "v21";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "v1";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "v6";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "v9";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "v16";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "v27";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "v28";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "v22";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "v0";
          s2_len = 2;
          break;
        }
        case 0x0A:{
          s2 = "v10";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "v26";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "v23";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "v12";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "v24";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "v2";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "v31";
          s2_len = 3;
          break;
        }
        case 0x0B:{
          s2 = "v11";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "v7";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "v19";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "v4";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "v25";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "v18";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "v20";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "v14";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "v30";
          s2_len = 3;
          break;
        }
        case 0x11:{
          s2 = "v17";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "v3";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "v5";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "v29";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "v13";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "v15";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.vxmstype.vs2) { 
        case 0x08:{
          s4 = "v8";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "v21";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "v1";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "v6";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "v9";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "v16";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "v27";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "v28";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "v22";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "v0";
          s4_len = 2;
          break;
        }
        case 0x0A:{
          s4 = "v10";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "v26";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "v23";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "v12";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "v24";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "v2";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "v31";
          s4_len = 3;
          break;
        }
        case 0x0B:{
          s4 = "v11";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "v7";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "v19";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "v4";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "v25";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "v18";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "v20";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "v14";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "v30";
          s4_len = 3;
          break;
        }
        case 0x11:{
          s4 = "v17";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "v3";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "v5";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "v29";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "v13";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "v15";
          s4_len = 3;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.vxmstype.rs1) { 
        case 0x08:{
          s6 = "fp";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "s5";
          s6_len = 2;
          break;
        }
        case 0x01:{
          s6 = "ra";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "t1";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "s1";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "a6";
          s6_len = 2;
          break;
        }
        case 0x1B:{
          s6 = "s11";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "t3";
          s6_len = 2;
          break;
        }
        case 0x16:{
          s6 = "s6";
          s6_len = 2;
          break;
        }
        case 0x00:{
          s6 = "zero";
          s6_len = 4;
          break;
        }
        case 0x0A:{
          s6 = "a0";
          s6_len = 2;
          break;
        }
        case 0x1A:{
          s6 = "s10";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "s7";
          s6_len = 2;
          break;
        }
        case 0x0C:{
          s6 = "a2";
          s6_len = 2;
          break;
        }
        case 0x18:{
          s6 = "s8";
          s6_len = 2;
          break;
        }
        case 0x02:{
          s6 = "sp";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "t6";
          s6_len = 2;
          break;
        }
        case 0x0B:{
          s6 = "a1";
          s6_len = 2;
          break;
        }
        case 0x07:{
          s6 = "t2";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "s3";
          s6_len = 2;
          break;
        }
        case 0x04:{
          s6 = "tp";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "s9";
          s6_len = 2;
          break;
        }
        case 0x12:{
          s6 = "s2";
          s6_len = 2;
          break;
        }
        case 0x14:{
          s6 = "s4";
          s6_len = 2;
          break;
        }
        case 0x0E:{
          s6 = "a4";
          s6_len = 2;
          break;
        }
        case 0x1E:{
          s6 = "t5";
          s6_len = 2;
          break;
        }
        case 0x11:{
          s6 = "a7";
          s6_len = 2;
          break;
        }
        case 0x03:{
          s6 = "gp";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "t0";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "t4";
          s6_len = 2;
          break;
        }
        case 0x0D:{
          s6 = "a3";
          s6_len = 2;
          break;
        }
        case 0x0F:{
          s6 = "a5";
          s6_len = 2;
          break;
        }
      }
      sep( &s7, &s7_len);
      s8 = "v0";
      s8_len = 2;
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len, s8, s8_len);
      }
    }
    break;
    case RISCV_VXCMPTYPE: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      switch (tree->ast_node.vxcmptype.funct6) { 
        case RISCV_VXCMP_VMSLTU:{
          s0 = "vmsltu.vx";
          s0_len = 9;
          break;
        }
        case RISCV_VXCMP_VMSLEU:{
          s0 = "vmsleu.vx";
          s0_len = 9;
          break;
        }
        case RISCV_VXCMP_VMSNE:{
          s0 = "vmsne.vx";
          s0_len = 8;
          break;
        }
        case RISCV_VXCMP_VMSGT:{
          s0 = "vmsgt.vx";
          s0_len = 8;
          break;
        }
        case RISCV_VXCMP_VMSEQ:{
          s0 = "vmseq.vx";
          s0_len = 8;
          break;
        }
        case RISCV_VXCMP_VMSGTU:{
          s0 = "vmsgtu.vx";
          s0_len = 9;
          break;
        }
        case RISCV_VXCMP_VMSLT:{
          s0 = "vmslt.vx";
          s0_len = 8;
          break;
        }
        case RISCV_VXCMP_VMSLE:{
          s0 = "vmsle.vx";
          s0_len = 8;
          break;
        }
      }
      spc( &s1, &s1_len);
      switch (tree->ast_node.vxcmptype.vd) { 
        case 0x08:{
          s2 = "v8";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "v21";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "v1";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "v6";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "v9";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "v16";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "v27";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "v28";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "v22";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "v0";
          s2_len = 2;
          break;
        }
        case 0x0A:{
          s2 = "v10";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "v26";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "v23";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "v12";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "v24";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "v2";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "v31";
          s2_len = 3;
          break;
        }
        case 0x0B:{
          s2 = "v11";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "v7";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "v19";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "v4";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "v25";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "v18";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "v20";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "v14";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "v30";
          s2_len = 3;
          break;
        }
        case 0x11:{
          s2 = "v17";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "v3";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "v5";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "v29";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "v13";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "v15";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.vxcmptype.vs2) { 
        case 0x08:{
          s4 = "v8";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "v21";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "v1";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "v6";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "v9";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "v16";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "v27";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "v28";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "v22";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "v0";
          s4_len = 2;
          break;
        }
        case 0x0A:{
          s4 = "v10";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "v26";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "v23";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "v12";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "v24";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "v2";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "v31";
          s4_len = 3;
          break;
        }
        case 0x0B:{
          s4 = "v11";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "v7";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "v19";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "v4";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "v25";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "v18";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "v20";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "v14";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "v30";
          s4_len = 3;
          break;
        }
        case 0x11:{
          s4 = "v17";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "v3";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "v5";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "v29";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "v13";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "v15";
          s4_len = 3;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.vxcmptype.rs1) { 
        case 0x08:{
          s6 = "fp";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "s5";
          s6_len = 2;
          break;
        }
        case 0x01:{
          s6 = "ra";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "t1";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "s1";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "a6";
          s6_len = 2;
          break;
        }
        case 0x1B:{
          s6 = "s11";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "t3";
          s6_len = 2;
          break;
        }
        case 0x16:{
          s6 = "s6";
          s6_len = 2;
          break;
        }
        case 0x00:{
          s6 = "zero";
          s6_len = 4;
          break;
        }
        case 0x0A:{
          s6 = "a0";
          s6_len = 2;
          break;
        }
        case 0x1A:{
          s6 = "s10";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "s7";
          s6_len = 2;
          break;
        }
        case 0x0C:{
          s6 = "a2";
          s6_len = 2;
          break;
        }
        case 0x18:{
          s6 = "s8";
          s6_len = 2;
          break;
        }
        case 0x02:{
          s6 = "sp";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "t6";
          s6_len = 2;
          break;
        }
        case 0x0B:{
          s6 = "a1";
          s6_len = 2;
          break;
        }
        case 0x07:{
          s6 = "t2";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "s3";
          s6_len = 2;
          break;
        }
        case 0x04:{
          s6 = "tp";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "s9";
          s6_len = 2;
          break;
        }
        case 0x12:{
          s6 = "s2";
          s6_len = 2;
          break;
        }
        case 0x14:{
          s6 = "s4";
          s6_len = 2;
          break;
        }
        case 0x0E:{
          s6 = "a4";
          s6_len = 2;
          break;
        }
        case 0x1E:{
          s6 = "t5";
          s6_len = 2;
          break;
        }
        case 0x11:{
          s6 = "a7";
          s6_len = 2;
          break;
        }
        case 0x03:{
          s6 = "gp";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "t0";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "t4";
          s6_len = 2;
          break;
        }
        case 0x0D:{
          s6 = "a3";
          s6_len = 2;
          break;
        }
        case 0x0F:{
          s6 = "a5";
          s6_len = 2;
          break;
        }
      }
      maybe_vmask(tree->ast_node.vxcmptype.vm, &s7, &s7_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      }
    }
    break;
    case RISCV_VIMTYPE: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      char *s8; size_t s8_len;
      switch (tree->ast_node.vimtype.funct6) { 
        case RISCV_VIM_VMADC:{
          s0 = "vmadc.vim";
          s0_len = 9;
          break;
        }
      }
      spc( &s1, &s1_len);
      switch (tree->ast_node.vimtype.vd) { 
        case 0x08:{
          s2 = "v8";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "v21";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "v1";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "v6";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "v9";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "v16";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "v27";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "v28";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "v22";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "v0";
          s2_len = 2;
          break;
        }
        case 0x0A:{
          s2 = "v10";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "v26";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "v23";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "v12";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "v24";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "v2";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "v31";
          s2_len = 3;
          break;
        }
        case 0x0B:{
          s2 = "v11";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "v7";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "v19";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "v4";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "v25";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "v18";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "v20";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "v14";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "v30";
          s2_len = 3;
          break;
        }
        case 0x11:{
          s2 = "v17";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "v3";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "v5";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "v29";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "v13";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "v15";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.vimtype.vs2) { 
        case 0x08:{
          s4 = "v8";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "v21";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "v1";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "v6";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "v9";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "v16";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "v27";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "v28";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "v22";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "v0";
          s4_len = 2;
          break;
        }
        case 0x0A:{
          s4 = "v10";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "v26";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "v23";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "v12";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "v24";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "v2";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "v31";
          s4_len = 3;
          break;
        }
        case 0x0B:{
          s4 = "v11";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "v7";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "v19";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "v4";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "v25";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "v18";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "v20";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "v14";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "v30";
          s4_len = 3;
          break;
        }
        case 0x11:{
          s4 = "v17";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "v3";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "v5";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "v29";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "v13";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "v15";
          s4_len = 3;
          break;
        }
      }
      sep( &s5, &s5_len);
      hex_bits_5(tree->ast_node.vimtype.simm, &s6, &s6_len);
      sep( &s7, &s7_len);
      s8 = "v0";
      s8_len = 2;
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len, s8, s8_len);
      }
    }
    break;
    case RISCV_VIMCTYPE: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      switch (tree->ast_node.vimctype.funct6) { 
        case RISCV_VIMC_VMADC:{
          s0 = "vmadc.vi";
          s0_len = 8;
          break;
        }
      }
      spc( &s1, &s1_len);
      switch (tree->ast_node.vimctype.vd) { 
        case 0x08:{
          s2 = "v8";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "v21";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "v1";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "v6";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "v9";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "v16";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "v27";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "v28";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "v22";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "v0";
          s2_len = 2;
          break;
        }
        case 0x0A:{
          s2 = "v10";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "v26";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "v23";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "v12";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "v24";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "v2";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "v31";
          s2_len = 3;
          break;
        }
        case 0x0B:{
          s2 = "v11";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "v7";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "v19";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "v4";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "v25";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "v18";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "v20";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "v14";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "v30";
          s2_len = 3;
          break;
        }
        case 0x11:{
          s2 = "v17";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "v3";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "v5";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "v29";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "v13";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "v15";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.vimctype.vs2) { 
        case 0x08:{
          s4 = "v8";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "v21";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "v1";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "v6";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "v9";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "v16";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "v27";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "v28";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "v22";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "v0";
          s4_len = 2;
          break;
        }
        case 0x0A:{
          s4 = "v10";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "v26";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "v23";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "v12";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "v24";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "v2";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "v31";
          s4_len = 3;
          break;
        }
        case 0x0B:{
          s4 = "v11";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "v7";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "v19";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "v4";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "v25";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "v18";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "v20";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "v14";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "v30";
          s4_len = 3;
          break;
        }
        case 0x11:{
          s4 = "v17";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "v3";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "v5";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "v29";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "v13";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "v15";
          s4_len = 3;
          break;
        }
      }
      sep( &s5, &s5_len);
      hex_bits_5(tree->ast_node.vimctype.simm, &s6, &s6_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
    }
    break;
    case RISCV_VIMSTYPE: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      char *s8; size_t s8_len;
      switch (tree->ast_node.vimstype.funct6) { 
        case RISCV_VIMS_VADC:{
          s0 = "vadc.vim";
          s0_len = 8;
          break;
        }
      }
      spc( &s1, &s1_len);
      switch (tree->ast_node.vimstype.vd) { 
        case 0x08:{
          s2 = "v8";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "v21";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "v1";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "v6";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "v9";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "v16";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "v27";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "v28";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "v22";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "v0";
          s2_len = 2;
          break;
        }
        case 0x0A:{
          s2 = "v10";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "v26";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "v23";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "v12";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "v24";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "v2";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "v31";
          s2_len = 3;
          break;
        }
        case 0x0B:{
          s2 = "v11";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "v7";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "v19";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "v4";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "v25";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "v18";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "v20";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "v14";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "v30";
          s2_len = 3;
          break;
        }
        case 0x11:{
          s2 = "v17";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "v3";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "v5";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "v29";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "v13";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "v15";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.vimstype.vs2) { 
        case 0x08:{
          s4 = "v8";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "v21";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "v1";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "v6";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "v9";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "v16";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "v27";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "v28";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "v22";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "v0";
          s4_len = 2;
          break;
        }
        case 0x0A:{
          s4 = "v10";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "v26";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "v23";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "v12";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "v24";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "v2";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "v31";
          s4_len = 3;
          break;
        }
        case 0x0B:{
          s4 = "v11";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "v7";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "v19";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "v4";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "v25";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "v18";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "v20";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "v14";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "v30";
          s4_len = 3;
          break;
        }
        case 0x11:{
          s4 = "v17";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "v3";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "v5";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "v29";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "v13";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "v15";
          s4_len = 3;
          break;
        }
      }
      sep( &s5, &s5_len);
      hex_bits_5(tree->ast_node.vimstype.simm, &s6, &s6_len);
      sep( &s7, &s7_len);
      s8 = "v0";
      s8_len = 2;
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len + s7_len, s8, s8_len);
      }
    }
    break;
    case RISCV_VICMPTYPE: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      switch (tree->ast_node.vicmptype.funct6) { 
        case RISCV_VICMP_VMSEQ:{
          s0 = "vmseq.vi";
          s0_len = 8;
          break;
        }
        case RISCV_VICMP_VMSGTU:{
          s0 = "vmsgtu.vi";
          s0_len = 9;
          break;
        }
        case RISCV_VICMP_VMSLEU:{
          s0 = "vmsleu.vi";
          s0_len = 9;
          break;
        }
        case RISCV_VICMP_VMSLE:{
          s0 = "vmsle.vi";
          s0_len = 8;
          break;
        }
        case RISCV_VICMP_VMSNE:{
          s0 = "vmsne.vi";
          s0_len = 8;
          break;
        }
        case RISCV_VICMP_VMSGT:{
          s0 = "vmsgt.vi";
          s0_len = 8;
          break;
        }
      }
      spc( &s1, &s1_len);
      switch (tree->ast_node.vicmptype.vd) { 
        case 0x08:{
          s2 = "v8";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "v21";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "v1";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "v6";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "v9";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "v16";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "v27";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "v28";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "v22";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "v0";
          s2_len = 2;
          break;
        }
        case 0x0A:{
          s2 = "v10";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "v26";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "v23";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "v12";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "v24";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "v2";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "v31";
          s2_len = 3;
          break;
        }
        case 0x0B:{
          s2 = "v11";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "v7";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "v19";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "v4";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "v25";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "v18";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "v20";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "v14";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "v30";
          s2_len = 3;
          break;
        }
        case 0x11:{
          s2 = "v17";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "v3";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "v5";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "v29";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "v13";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "v15";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.vicmptype.vs2) { 
        case 0x08:{
          s4 = "v8";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "v21";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "v1";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "v6";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "v9";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "v16";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "v27";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "v28";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "v22";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "v0";
          s4_len = 2;
          break;
        }
        case 0x0A:{
          s4 = "v10";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "v26";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "v23";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "v12";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "v24";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "v2";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "v31";
          s4_len = 3;
          break;
        }
        case 0x0B:{
          s4 = "v11";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "v7";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "v19";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "v4";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "v25";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "v18";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "v20";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "v14";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "v30";
          s4_len = 3;
          break;
        }
        case 0x11:{
          s4 = "v17";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "v3";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "v5";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "v29";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "v13";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "v15";
          s4_len = 3;
          break;
        }
      }
      sep( &s5, &s5_len);
      hex_bits_5(tree->ast_node.vicmptype.simm, &s6, &s6_len);
      maybe_vmask(tree->ast_node.vicmptype.vm, &s7, &s7_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      }
    }
    break;
    case RISCV_FVVMTYPE: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      switch (tree->ast_node.fvvmtype.funct6) { 
        case RISCV_FVVM_VMFNE:{
          s0 = "vmfne.vv";
          s0_len = 8;
          break;
        }
        case RISCV_FVVM_VMFEQ:{
          s0 = "vmfeq.vv";
          s0_len = 8;
          break;
        }
        case RISCV_FVVM_VMFLT:{
          s0 = "vmflt.vv";
          s0_len = 8;
          break;
        }
        case RISCV_FVVM_VMFLE:{
          s0 = "vmfle.vv";
          s0_len = 8;
          break;
        }
      }
      spc( &s1, &s1_len);
      switch (tree->ast_node.fvvmtype.vd) { 
        case 0x08:{
          s2 = "v8";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "v21";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "v1";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "v6";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "v9";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "v16";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "v27";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "v28";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "v22";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "v0";
          s2_len = 2;
          break;
        }
        case 0x0A:{
          s2 = "v10";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "v26";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "v23";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "v12";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "v24";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "v2";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "v31";
          s2_len = 3;
          break;
        }
        case 0x0B:{
          s2 = "v11";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "v7";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "v19";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "v4";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "v25";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "v18";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "v20";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "v14";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "v30";
          s2_len = 3;
          break;
        }
        case 0x11:{
          s2 = "v17";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "v3";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "v5";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "v29";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "v13";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "v15";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.fvvmtype.vs2) { 
        case 0x08:{
          s4 = "v8";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "v21";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "v1";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "v6";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "v9";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "v16";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "v27";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "v28";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "v22";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "v0";
          s4_len = 2;
          break;
        }
        case 0x0A:{
          s4 = "v10";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "v26";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "v23";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "v12";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "v24";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "v2";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "v31";
          s4_len = 3;
          break;
        }
        case 0x0B:{
          s4 = "v11";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "v7";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "v19";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "v4";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "v25";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "v18";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "v20";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "v14";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "v30";
          s4_len = 3;
          break;
        }
        case 0x11:{
          s4 = "v17";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "v3";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "v5";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "v29";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "v13";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "v15";
          s4_len = 3;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.fvvmtype.vs1) { 
        case 0x08:{
          s6 = "v8";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "v21";
          s6_len = 3;
          break;
        }
        case 0x01:{
          s6 = "v1";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "v6";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "v9";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "v16";
          s6_len = 3;
          break;
        }
        case 0x1B:{
          s6 = "v27";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "v28";
          s6_len = 3;
          break;
        }
        case 0x16:{
          s6 = "v22";
          s6_len = 3;
          break;
        }
        case 0x00:{
          s6 = "v0";
          s6_len = 2;
          break;
        }
        case 0x0A:{
          s6 = "v10";
          s6_len = 3;
          break;
        }
        case 0x1A:{
          s6 = "v26";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "v23";
          s6_len = 3;
          break;
        }
        case 0x0C:{
          s6 = "v12";
          s6_len = 3;
          break;
        }
        case 0x18:{
          s6 = "v24";
          s6_len = 3;
          break;
        }
        case 0x02:{
          s6 = "v2";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "v31";
          s6_len = 3;
          break;
        }
        case 0x0B:{
          s6 = "v11";
          s6_len = 3;
          break;
        }
        case 0x07:{
          s6 = "v7";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "v19";
          s6_len = 3;
          break;
        }
        case 0x04:{
          s6 = "v4";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "v25";
          s6_len = 3;
          break;
        }
        case 0x12:{
          s6 = "v18";
          s6_len = 3;
          break;
        }
        case 0x14:{
          s6 = "v20";
          s6_len = 3;
          break;
        }
        case 0x0E:{
          s6 = "v14";
          s6_len = 3;
          break;
        }
        case 0x1E:{
          s6 = "v30";
          s6_len = 3;
          break;
        }
        case 0x11:{
          s6 = "v17";
          s6_len = 3;
          break;
        }
        case 0x03:{
          s6 = "v3";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "v5";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "v29";
          s6_len = 3;
          break;
        }
        case 0x0D:{
          s6 = "v13";
          s6_len = 3;
          break;
        }
        case 0x0F:{
          s6 = "v15";
          s6_len = 3;
          break;
        }
      }
      maybe_vmask(tree->ast_node.fvvmtype.vm, &s7, &s7_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      }
    }
    break;
    case RISCV_FVFMTYPE: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      switch (tree->ast_node.fvfmtype.funct6) { 
        case RISCV_VFM_VMFNE:{
          s0 = "vmfne.vf";
          s0_len = 8;
          break;
        }
        case RISCV_VFM_VMFGT:{
          s0 = "vmfgt.vf";
          s0_len = 8;
          break;
        }
        case RISCV_VFM_VMFLT:{
          s0 = "vmflt.vf";
          s0_len = 8;
          break;
        }
        case RISCV_VFM_VMFEQ:{
          s0 = "vmfeq.vf";
          s0_len = 8;
          break;
        }
        case RISCV_VFM_VMFLE:{
          s0 = "vmfle.vf";
          s0_len = 8;
          break;
        }
        case RISCV_VFM_VMFGE:{
          s0 = "vmfge.vf";
          s0_len = 8;
          break;
        }
      }
      spc( &s1, &s1_len);
      switch (tree->ast_node.fvfmtype.vd) { 
        case 0x08:{
          s2 = "v8";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "v21";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "v1";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "v6";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "v9";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "v16";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "v27";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "v28";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "v22";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "v0";
          s2_len = 2;
          break;
        }
        case 0x0A:{
          s2 = "v10";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "v26";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "v23";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "v12";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "v24";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "v2";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "v31";
          s2_len = 3;
          break;
        }
        case 0x0B:{
          s2 = "v11";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "v7";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "v19";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "v4";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "v25";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "v18";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "v20";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "v14";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "v30";
          s2_len = 3;
          break;
        }
        case 0x11:{
          s2 = "v17";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "v3";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "v5";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "v29";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "v13";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "v15";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.fvfmtype.vs2) { 
        case 0x08:{
          s4 = "v8";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "v21";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "v1";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "v6";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "v9";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "v16";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "v27";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "v28";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "v22";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "v0";
          s4_len = 2;
          break;
        }
        case 0x0A:{
          s4 = "v10";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "v26";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "v23";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "v12";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "v24";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "v2";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "v31";
          s4_len = 3;
          break;
        }
        case 0x0B:{
          s4 = "v11";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "v7";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "v19";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "v4";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "v25";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "v18";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "v20";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "v14";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "v30";
          s4_len = 3;
          break;
        }
        case 0x11:{
          s4 = "v17";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "v3";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "v5";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "v29";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "v13";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "v15";
          s4_len = 3;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.fvfmtype.rs1) { 
        case 0x08:{
          s6 = "fp";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "s5";
          s6_len = 2;
          break;
        }
        case 0x01:{
          s6 = "ra";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "t1";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "s1";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "a6";
          s6_len = 2;
          break;
        }
        case 0x1B:{
          s6 = "s11";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "t3";
          s6_len = 2;
          break;
        }
        case 0x16:{
          s6 = "s6";
          s6_len = 2;
          break;
        }
        case 0x00:{
          s6 = "zero";
          s6_len = 4;
          break;
        }
        case 0x0A:{
          s6 = "a0";
          s6_len = 2;
          break;
        }
        case 0x1A:{
          s6 = "s10";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "s7";
          s6_len = 2;
          break;
        }
        case 0x0C:{
          s6 = "a2";
          s6_len = 2;
          break;
        }
        case 0x18:{
          s6 = "s8";
          s6_len = 2;
          break;
        }
        case 0x02:{
          s6 = "sp";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "t6";
          s6_len = 2;
          break;
        }
        case 0x0B:{
          s6 = "a1";
          s6_len = 2;
          break;
        }
        case 0x07:{
          s6 = "t2";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "s3";
          s6_len = 2;
          break;
        }
        case 0x04:{
          s6 = "tp";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "s9";
          s6_len = 2;
          break;
        }
        case 0x12:{
          s6 = "s2";
          s6_len = 2;
          break;
        }
        case 0x14:{
          s6 = "s4";
          s6_len = 2;
          break;
        }
        case 0x0E:{
          s6 = "a4";
          s6_len = 2;
          break;
        }
        case 0x1E:{
          s6 = "t5";
          s6_len = 2;
          break;
        }
        case 0x11:{
          s6 = "a7";
          s6_len = 2;
          break;
        }
        case 0x03:{
          s6 = "gp";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "t0";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "t4";
          s6_len = 2;
          break;
        }
        case 0x0D:{
          s6 = "a3";
          s6_len = 2;
          break;
        }
        case 0x0F:{
          s6 = "a5";
          s6_len = 2;
          break;
        }
      }
      maybe_vmask(tree->ast_node.fvfmtype.vm, &s7, &s7_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      }
    }
    break;
    case RISCV_RIVVTYPE: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      switch (tree->ast_node.rivvtype.funct6) { 
        case RISCV_IVV_VWREDSUMU:{
          s0 = "vwredsumu.vs";
          s0_len = 12;
          break;
        }
        case RISCV_IVV_VWREDSUM:{
          s0 = "vwredsum.vs";
          s0_len = 11;
          break;
        }
      }
      spc( &s1, &s1_len);
      switch (tree->ast_node.rivvtype.vd) { 
        case 0x08:{
          s2 = "v8";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "v21";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "v1";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "v6";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "v9";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "v16";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "v27";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "v28";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "v22";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "v0";
          s2_len = 2;
          break;
        }
        case 0x0A:{
          s2 = "v10";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "v26";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "v23";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "v12";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "v24";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "v2";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "v31";
          s2_len = 3;
          break;
        }
        case 0x0B:{
          s2 = "v11";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "v7";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "v19";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "v4";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "v25";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "v18";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "v20";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "v14";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "v30";
          s2_len = 3;
          break;
        }
        case 0x11:{
          s2 = "v17";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "v3";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "v5";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "v29";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "v13";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "v15";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.rivvtype.vs2) { 
        case 0x08:{
          s4 = "v8";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "v21";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "v1";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "v6";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "v9";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "v16";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "v27";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "v28";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "v22";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "v0";
          s4_len = 2;
          break;
        }
        case 0x0A:{
          s4 = "v10";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "v26";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "v23";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "v12";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "v24";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "v2";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "v31";
          s4_len = 3;
          break;
        }
        case 0x0B:{
          s4 = "v11";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "v7";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "v19";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "v4";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "v25";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "v18";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "v20";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "v14";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "v30";
          s4_len = 3;
          break;
        }
        case 0x11:{
          s4 = "v17";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "v3";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "v5";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "v29";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "v13";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "v15";
          s4_len = 3;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.rivvtype.vs1) { 
        case 0x08:{
          s6 = "v8";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "v21";
          s6_len = 3;
          break;
        }
        case 0x01:{
          s6 = "v1";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "v6";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "v9";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "v16";
          s6_len = 3;
          break;
        }
        case 0x1B:{
          s6 = "v27";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "v28";
          s6_len = 3;
          break;
        }
        case 0x16:{
          s6 = "v22";
          s6_len = 3;
          break;
        }
        case 0x00:{
          s6 = "v0";
          s6_len = 2;
          break;
        }
        case 0x0A:{
          s6 = "v10";
          s6_len = 3;
          break;
        }
        case 0x1A:{
          s6 = "v26";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "v23";
          s6_len = 3;
          break;
        }
        case 0x0C:{
          s6 = "v12";
          s6_len = 3;
          break;
        }
        case 0x18:{
          s6 = "v24";
          s6_len = 3;
          break;
        }
        case 0x02:{
          s6 = "v2";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "v31";
          s6_len = 3;
          break;
        }
        case 0x0B:{
          s6 = "v11";
          s6_len = 3;
          break;
        }
        case 0x07:{
          s6 = "v7";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "v19";
          s6_len = 3;
          break;
        }
        case 0x04:{
          s6 = "v4";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "v25";
          s6_len = 3;
          break;
        }
        case 0x12:{
          s6 = "v18";
          s6_len = 3;
          break;
        }
        case 0x14:{
          s6 = "v20";
          s6_len = 3;
          break;
        }
        case 0x0E:{
          s6 = "v14";
          s6_len = 3;
          break;
        }
        case 0x1E:{
          s6 = "v30";
          s6_len = 3;
          break;
        }
        case 0x11:{
          s6 = "v17";
          s6_len = 3;
          break;
        }
        case 0x03:{
          s6 = "v3";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "v5";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "v29";
          s6_len = 3;
          break;
        }
        case 0x0D:{
          s6 = "v13";
          s6_len = 3;
          break;
        }
        case 0x0F:{
          s6 = "v15";
          s6_len = 3;
          break;
        }
      }
      maybe_vmask(tree->ast_node.rivvtype.vm, &s7, &s7_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      }
    }
    break;
    case RISCV_RMVVTYPE: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      switch (tree->ast_node.rmvvtype.funct6) { 
        case RISCV_MVV_VREDAND:{
          s0 = "vredand.vs";
          s0_len = 10;
          break;
        }
        case RISCV_MVV_VREDXOR:{
          s0 = "vredxor.vs";
          s0_len = 10;
          break;
        }
        case RISCV_MVV_VREDOR:{
          s0 = "vredor.vs";
          s0_len = 9;
          break;
        }
        case RISCV_MVV_VREDMIN:{
          s0 = "vredmin.vs";
          s0_len = 10;
          break;
        }
        case RISCV_MVV_VREDMAXU:{
          s0 = "vredmaxu.vs";
          s0_len = 11;
          break;
        }
        case RISCV_MVV_VREDMINU:{
          s0 = "vredminu.vs";
          s0_len = 11;
          break;
        }
        case RISCV_MVV_VREDSUM:{
          s0 = "vredsum.vs";
          s0_len = 10;
          break;
        }
        case RISCV_MVV_VREDMAX:{
          s0 = "vredmax.vs";
          s0_len = 10;
          break;
        }
      }
      spc( &s1, &s1_len);
      switch (tree->ast_node.rmvvtype.vd) { 
        case 0x08:{
          s2 = "v8";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "v21";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "v1";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "v6";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "v9";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "v16";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "v27";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "v28";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "v22";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "v0";
          s2_len = 2;
          break;
        }
        case 0x0A:{
          s2 = "v10";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "v26";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "v23";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "v12";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "v24";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "v2";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "v31";
          s2_len = 3;
          break;
        }
        case 0x0B:{
          s2 = "v11";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "v7";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "v19";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "v4";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "v25";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "v18";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "v20";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "v14";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "v30";
          s2_len = 3;
          break;
        }
        case 0x11:{
          s2 = "v17";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "v3";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "v5";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "v29";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "v13";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "v15";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.rmvvtype.vs2) { 
        case 0x08:{
          s4 = "v8";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "v21";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "v1";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "v6";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "v9";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "v16";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "v27";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "v28";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "v22";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "v0";
          s4_len = 2;
          break;
        }
        case 0x0A:{
          s4 = "v10";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "v26";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "v23";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "v12";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "v24";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "v2";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "v31";
          s4_len = 3;
          break;
        }
        case 0x0B:{
          s4 = "v11";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "v7";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "v19";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "v4";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "v25";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "v18";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "v20";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "v14";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "v30";
          s4_len = 3;
          break;
        }
        case 0x11:{
          s4 = "v17";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "v3";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "v5";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "v29";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "v13";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "v15";
          s4_len = 3;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.rmvvtype.vs1) { 
        case 0x08:{
          s6 = "v8";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "v21";
          s6_len = 3;
          break;
        }
        case 0x01:{
          s6 = "v1";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "v6";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "v9";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "v16";
          s6_len = 3;
          break;
        }
        case 0x1B:{
          s6 = "v27";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "v28";
          s6_len = 3;
          break;
        }
        case 0x16:{
          s6 = "v22";
          s6_len = 3;
          break;
        }
        case 0x00:{
          s6 = "v0";
          s6_len = 2;
          break;
        }
        case 0x0A:{
          s6 = "v10";
          s6_len = 3;
          break;
        }
        case 0x1A:{
          s6 = "v26";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "v23";
          s6_len = 3;
          break;
        }
        case 0x0C:{
          s6 = "v12";
          s6_len = 3;
          break;
        }
        case 0x18:{
          s6 = "v24";
          s6_len = 3;
          break;
        }
        case 0x02:{
          s6 = "v2";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "v31";
          s6_len = 3;
          break;
        }
        case 0x0B:{
          s6 = "v11";
          s6_len = 3;
          break;
        }
        case 0x07:{
          s6 = "v7";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "v19";
          s6_len = 3;
          break;
        }
        case 0x04:{
          s6 = "v4";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "v25";
          s6_len = 3;
          break;
        }
        case 0x12:{
          s6 = "v18";
          s6_len = 3;
          break;
        }
        case 0x14:{
          s6 = "v20";
          s6_len = 3;
          break;
        }
        case 0x0E:{
          s6 = "v14";
          s6_len = 3;
          break;
        }
        case 0x1E:{
          s6 = "v30";
          s6_len = 3;
          break;
        }
        case 0x11:{
          s6 = "v17";
          s6_len = 3;
          break;
        }
        case 0x03:{
          s6 = "v3";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "v5";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "v29";
          s6_len = 3;
          break;
        }
        case 0x0D:{
          s6 = "v13";
          s6_len = 3;
          break;
        }
        case 0x0F:{
          s6 = "v15";
          s6_len = 3;
          break;
        }
      }
      maybe_vmask(tree->ast_node.rmvvtype.vm, &s7, &s7_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      }
    }
    break;
    case RISCV_RFVVTYPE: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      char *s7; size_t s7_len;
      switch (tree->ast_node.rfvvtype.funct6) { 
        case RISCV_FVV_VFWREDOSUM:{
          s0 = "vfwredosum.vs";
          s0_len = 13;
          break;
        }
        case RISCV_FVV_VFREDOSUM:{
          s0 = "vfredosum.vs";
          s0_len = 12;
          break;
        }
        case RISCV_FVV_VFREDUSUM:{
          s0 = "vfredusum.vs";
          s0_len = 12;
          break;
        }
        case RISCV_FVV_VFREDMIN:{
          s0 = "vfredmin.vs";
          s0_len = 11;
          break;
        }
        case RISCV_FVV_VFWREDUSUM:{
          s0 = "vfwredusum.vs";
          s0_len = 13;
          break;
        }
        case RISCV_FVV_VFREDMAX:{
          s0 = "vfredmax.vs";
          s0_len = 11;
          break;
        }
      }
      spc( &s1, &s1_len);
      switch (tree->ast_node.rfvvtype.vd) { 
        case 0x08:{
          s2 = "v8";
          s2_len = 2;
          break;
        }
        case 0x15:{
          s2 = "v21";
          s2_len = 3;
          break;
        }
        case 0x01:{
          s2 = "v1";
          s2_len = 2;
          break;
        }
        case 0x06:{
          s2 = "v6";
          s2_len = 2;
          break;
        }
        case 0x09:{
          s2 = "v9";
          s2_len = 2;
          break;
        }
        case 0x10:{
          s2 = "v16";
          s2_len = 3;
          break;
        }
        case 0x1B:{
          s2 = "v27";
          s2_len = 3;
          break;
        }
        case 0x1C:{
          s2 = "v28";
          s2_len = 3;
          break;
        }
        case 0x16:{
          s2 = "v22";
          s2_len = 3;
          break;
        }
        case 0x00:{
          s2 = "v0";
          s2_len = 2;
          break;
        }
        case 0x0A:{
          s2 = "v10";
          s2_len = 3;
          break;
        }
        case 0x1A:{
          s2 = "v26";
          s2_len = 3;
          break;
        }
        case 0x17:{
          s2 = "v23";
          s2_len = 3;
          break;
        }
        case 0x0C:{
          s2 = "v12";
          s2_len = 3;
          break;
        }
        case 0x18:{
          s2 = "v24";
          s2_len = 3;
          break;
        }
        case 0x02:{
          s2 = "v2";
          s2_len = 2;
          break;
        }
        case 0x1F:{
          s2 = "v31";
          s2_len = 3;
          break;
        }
        case 0x0B:{
          s2 = "v11";
          s2_len = 3;
          break;
        }
        case 0x07:{
          s2 = "v7";
          s2_len = 2;
          break;
        }
        case 0x13:{
          s2 = "v19";
          s2_len = 3;
          break;
        }
        case 0x04:{
          s2 = "v4";
          s2_len = 2;
          break;
        }
        case 0x19:{
          s2 = "v25";
          s2_len = 3;
          break;
        }
        case 0x12:{
          s2 = "v18";
          s2_len = 3;
          break;
        }
        case 0x14:{
          s2 = "v20";
          s2_len = 3;
          break;
        }
        case 0x0E:{
          s2 = "v14";
          s2_len = 3;
          break;
        }
        case 0x1E:{
          s2 = "v30";
          s2_len = 3;
          break;
        }
        case 0x11:{
          s2 = "v17";
          s2_len = 3;
          break;
        }
        case 0x03:{
          s2 = "v3";
          s2_len = 2;
          break;
        }
        case 0x05:{
          s2 = "v5";
          s2_len = 2;
          break;
        }
        case 0x1D:{
          s2 = "v29";
          s2_len = 3;
          break;
        }
        case 0x0D:{
          s2 = "v13";
          s2_len = 3;
          break;
        }
        case 0x0F:{
          s2 = "v15";
          s2_len = 3;
          break;
        }
      }
      sep( &s3, &s3_len);
      switch (tree->ast_node.rfvvtype.vs2) { 
        case 0x08:{
          s4 = "v8";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "v21";
          s4_len = 3;
          break;
        }
        case 0x01:{
          s4 = "v1";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "v6";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "v9";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "v16";
          s4_len = 3;
          break;
        }
        case 0x1B:{
          s4 = "v27";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "v28";
          s4_len = 3;
          break;
        }
        case 0x16:{
          s4 = "v22";
          s4_len = 3;
          break;
        }
        case 0x00:{
          s4 = "v0";
          s4_len = 2;
          break;
        }
        case 0x0A:{
          s4 = "v10";
          s4_len = 3;
          break;
        }
        case 0x1A:{
          s4 = "v26";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "v23";
          s4_len = 3;
          break;
        }
        case 0x0C:{
          s4 = "v12";
          s4_len = 3;
          break;
        }
        case 0x18:{
          s4 = "v24";
          s4_len = 3;
          break;
        }
        case 0x02:{
          s4 = "v2";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "v31";
          s4_len = 3;
          break;
        }
        case 0x0B:{
          s4 = "v11";
          s4_len = 3;
          break;
        }
        case 0x07:{
          s4 = "v7";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "v19";
          s4_len = 3;
          break;
        }
        case 0x04:{
          s4 = "v4";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "v25";
          s4_len = 3;
          break;
        }
        case 0x12:{
          s4 = "v18";
          s4_len = 3;
          break;
        }
        case 0x14:{
          s4 = "v20";
          s4_len = 3;
          break;
        }
        case 0x0E:{
          s4 = "v14";
          s4_len = 3;
          break;
        }
        case 0x1E:{
          s4 = "v30";
          s4_len = 3;
          break;
        }
        case 0x11:{
          s4 = "v17";
          s4_len = 3;
          break;
        }
        case 0x03:{
          s4 = "v3";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "v5";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "v29";
          s4_len = 3;
          break;
        }
        case 0x0D:{
          s4 = "v13";
          s4_len = 3;
          break;
        }
        case 0x0F:{
          s4 = "v15";
          s4_len = 3;
          break;
        }
      }
      sep( &s5, &s5_len);
      switch (tree->ast_node.rfvvtype.vs1) { 
        case 0x08:{
          s6 = "v8";
          s6_len = 2;
          break;
        }
        case 0x15:{
          s6 = "v21";
          s6_len = 3;
          break;
        }
        case 0x01:{
          s6 = "v1";
          s6_len = 2;
          break;
        }
        case 0x06:{
          s6 = "v6";
          s6_len = 2;
          break;
        }
        case 0x09:{
          s6 = "v9";
          s6_len = 2;
          break;
        }
        case 0x10:{
          s6 = "v16";
          s6_len = 3;
          break;
        }
        case 0x1B:{
          s6 = "v27";
          s6_len = 3;
          break;
        }
        case 0x1C:{
          s6 = "v28";
          s6_len = 3;
          break;
        }
        case 0x16:{
          s6 = "v22";
          s6_len = 3;
          break;
        }
        case 0x00:{
          s6 = "v0";
          s6_len = 2;
          break;
        }
        case 0x0A:{
          s6 = "v10";
          s6_len = 3;
          break;
        }
        case 0x1A:{
          s6 = "v26";
          s6_len = 3;
          break;
        }
        case 0x17:{
          s6 = "v23";
          s6_len = 3;
          break;
        }
        case 0x0C:{
          s6 = "v12";
          s6_len = 3;
          break;
        }
        case 0x18:{
          s6 = "v24";
          s6_len = 3;
          break;
        }
        case 0x02:{
          s6 = "v2";
          s6_len = 2;
          break;
        }
        case 0x1F:{
          s6 = "v31";
          s6_len = 3;
          break;
        }
        case 0x0B:{
          s6 = "v11";
          s6_len = 3;
          break;
        }
        case 0x07:{
          s6 = "v7";
          s6_len = 2;
          break;
        }
        case 0x13:{
          s6 = "v19";
          s6_len = 3;
          break;
        }
        case 0x04:{
          s6 = "v4";
          s6_len = 2;
          break;
        }
        case 0x19:{
          s6 = "v25";
          s6_len = 3;
          break;
        }
        case 0x12:{
          s6 = "v18";
          s6_len = 3;
          break;
        }
        case 0x14:{
          s6 = "v20";
          s6_len = 3;
          break;
        }
        case 0x0E:{
          s6 = "v14";
          s6_len = 3;
          break;
        }
        case 0x1E:{
          s6 = "v30";
          s6_len = 3;
          break;
        }
        case 0x11:{
          s6 = "v17";
          s6_len = 3;
          break;
        }
        case 0x03:{
          s6 = "v3";
          s6_len = 2;
          break;
        }
        case 0x05:{
          s6 = "v5";
          s6_len = 2;
          break;
        }
        case 0x1D:{
          s6 = "v29";
          s6_len = 3;
          break;
        }
        case 0x0D:{
          s6 = "v13";
          s6_len = 3;
          break;
        }
        case 0x0F:{
          s6 = "v15";
          s6_len = 3;
          break;
        }
      }
      maybe_vmask(tree->ast_node.rfvvtype.vm, &s7, &s7_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len + s6_len, s7, s7_len);
      }
    }
    break;
    case RISCV_ZICBOM: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      switch (tree->ast_node.riscv_zicbom.cbop) { 
        case RISCV_CBO_INVAL:{
          s0 = "cbo.inval";
          s0_len = 9;
          break;
        }
        case RISCV_CBO_CLEAN:{
          s0 = "cbo.clean";
          s0_len = 9;
          break;
        }
        case RISCV_CBO_FLUSH:{
          s0 = "cbo.flush";
          s0_len = 9;
          break;
        }
      }
      spc( &s1, &s1_len);
      s2 = "(";
      s2_len = 1;
      opt_spc( &s3, &s3_len);
      switch (tree->ast_node.riscv_zicbom.rs1) { 
        case 0x08:{
          s4 = "fp";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "s5";
          s4_len = 2;
          break;
        }
        case 0x01:{
          s4 = "ra";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "t1";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "a6";
          s4_len = 2;
          break;
        }
        case 0x1B:{
          s4 = "s11";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "t3";
          s4_len = 2;
          break;
        }
        case 0x16:{
          s4 = "s6";
          s4_len = 2;
          break;
        }
        case 0x00:{
          s4 = "zero";
          s4_len = 4;
          break;
        }
        case 0x0A:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x1A:{
          s4 = "s10";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "s7";
          s4_len = 2;
          break;
        }
        case 0x0C:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x18:{
          s4 = "s8";
          s4_len = 2;
          break;
        }
        case 0x02:{
          s4 = "sp";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "t6";
          s4_len = 2;
          break;
        }
        case 0x0B:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x07:{
          s4 = "t2";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "s3";
          s4_len = 2;
          break;
        }
        case 0x04:{
          s4 = "tp";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "s9";
          s4_len = 2;
          break;
        }
        case 0x12:{
          s4 = "s2";
          s4_len = 2;
          break;
        }
        case 0x14:{
          s4 = "s4";
          s4_len = 2;
          break;
        }
        case 0x0E:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x1E:{
          s4 = "t5";
          s4_len = 2;
          break;
        }
        case 0x11:{
          s4 = "a7";
          s4_len = 2;
          break;
        }
        case 0x03:{
          s4 = "gp";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "t0";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "t4";
          s4_len = 2;
          break;
        }
        case 0x0D:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x0F:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
      }
      opt_spc( &s5, &s5_len);
      s6 = ")";
      s6_len = 1;
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
    }
    break;
    case RISCV_ZICBOZ: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      char *s3; size_t s3_len;
      char *s4; size_t s4_len;
      char *s5; size_t s5_len;
      char *s6; size_t s6_len;
      s0 = "cbo.zero";
      s0_len = 8;
      spc( &s1, &s1_len);
      s2 = "(";
      s2_len = 1;
      opt_spc( &s3, &s3_len);
      switch (tree->ast_node.riscv_zicboz) { 
        case 0x08:{
          s4 = "fp";
          s4_len = 2;
          break;
        }
        case 0x15:{
          s4 = "s5";
          s4_len = 2;
          break;
        }
        case 0x01:{
          s4 = "ra";
          s4_len = 2;
          break;
        }
        case 0x06:{
          s4 = "t1";
          s4_len = 2;
          break;
        }
        case 0x09:{
          s4 = "s1";
          s4_len = 2;
          break;
        }
        case 0x10:{
          s4 = "a6";
          s4_len = 2;
          break;
        }
        case 0x1B:{
          s4 = "s11";
          s4_len = 3;
          break;
        }
        case 0x1C:{
          s4 = "t3";
          s4_len = 2;
          break;
        }
        case 0x16:{
          s4 = "s6";
          s4_len = 2;
          break;
        }
        case 0x00:{
          s4 = "zero";
          s4_len = 4;
          break;
        }
        case 0x0A:{
          s4 = "a0";
          s4_len = 2;
          break;
        }
        case 0x1A:{
          s4 = "s10";
          s4_len = 3;
          break;
        }
        case 0x17:{
          s4 = "s7";
          s4_len = 2;
          break;
        }
        case 0x0C:{
          s4 = "a2";
          s4_len = 2;
          break;
        }
        case 0x18:{
          s4 = "s8";
          s4_len = 2;
          break;
        }
        case 0x02:{
          s4 = "sp";
          s4_len = 2;
          break;
        }
        case 0x1F:{
          s4 = "t6";
          s4_len = 2;
          break;
        }
        case 0x0B:{
          s4 = "a1";
          s4_len = 2;
          break;
        }
        case 0x07:{
          s4 = "t2";
          s4_len = 2;
          break;
        }
        case 0x13:{
          s4 = "s3";
          s4_len = 2;
          break;
        }
        case 0x04:{
          s4 = "tp";
          s4_len = 2;
          break;
        }
        case 0x19:{
          s4 = "s9";
          s4_len = 2;
          break;
        }
        case 0x12:{
          s4 = "s2";
          s4_len = 2;
          break;
        }
        case 0x14:{
          s4 = "s4";
          s4_len = 2;
          break;
        }
        case 0x0E:{
          s4 = "a4";
          s4_len = 2;
          break;
        }
        case 0x1E:{
          s4 = "t5";
          s4_len = 2;
          break;
        }
        case 0x11:{
          s4 = "a7";
          s4_len = 2;
          break;
        }
        case 0x03:{
          s4 = "gp";
          s4_len = 2;
          break;
        }
        case 0x05:{
          s4 = "t0";
          s4_len = 2;
          break;
        }
        case 0x1D:{
          s4 = "t4";
          s4_len = 2;
          break;
        }
        case 0x0D:{
          s4 = "a3";
          s4_len = 2;
          break;
        }
        case 0x0F:{
          s4 = "a5";
          s4_len = 2;
          break;
        }
      }
      opt_spc( &s5, &s5_len);
      s6 = ")";
      s6_len = 1;
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      memcpy(buff  + s0_len + s1_len + s2_len, s3, s3_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len, s4, s4_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len, s5, s5_len);
      memcpy(buff  + s0_len + s1_len + s2_len + s3_len + s4_len + s5_len, s6, s6_len);
      }
    }
    break;
    case RISCV_ILLEGAL: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      s0 = "illegal";
      s0_len = 7;
      spc( &s1, &s1_len);
      hex_bits_32(tree->ast_node.illegal, &s2, &s2_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      }
    }
    break;
    case RISCV_C_ILLEGAL: {
{
            char *s0; size_t s0_len;
      char *s1; size_t s1_len;
      char *s2; size_t s2_len;
      s0 = "c.illegal";
      s0_len = 9;
      spc( &s1, &s1_len);
      hex_bits_16(tree->ast_node.c_illegal, &s2, &s2_len);
      memcpy(buff , s0, s0_len);
      memcpy(buff  + s0_len, s1, s1_len);
      memcpy(buff  + s0_len + s1_len, s2, s2_len);
      }
    }
    break;

  }
}