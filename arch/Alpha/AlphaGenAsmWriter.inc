/* Capstone Disassembly Engine, http://www.capstone-engine.org */
/* By Nguyen Anh Quynh <aquynh@gmail.com>, 2013-2022, */
/*    Rot127 <unisono@quyllur.org> 2022-2023 */
/* Automatically generated file by Capstone's LLVM TableGen Disassembler Backend. */

/* LLVM-commit: 92734d6f460a01145443e48418af3a8635ca1afa */
/* LLVM-tag:  */

/* Do not edit. */

/* Capstone's LLVM TableGen Backends: */
/* https://github.com/capstone-engine/llvm-capstone */

#include <capstone/platform.h>
#include <assert.h>

/// getMnemonic - This method is automatically generated by tablegen
/// from the instruction set description.
static MnemonicBitsInfo getMnemonic(MCInst *MI, SStream *O) {
#ifndef CAPSTONE_DIET
  static const char AsmStrs[] = {
  /* 0 */ "MSKLH \0"
  /* 7 */ "INSLH \0"
  /* 14 */ "EXTLH \0"
  /* 21 */ "MSKQH \0"
  /* 28 */ "INSQH \0"
  /* 35 */ "EXTQH \0"
  /* 42 */ "MSKWH \0"
  /* 49 */ "INSWH \0"
  /* 56 */ "EXTWH \0"
  /* 63 */ "MSKBL \0"
  /* 70 */ "INSBL \0"
  /* 77 */ "EXTBL \0"
  /* 84 */ "MSKLL \0"
  /* 91 */ "INSLL \0"
  /* 98 */ "EXTLL \0"
  /* 105 */ "MSKQL \0"
  /* 112 */ "INSQL \0"
  /* 119 */ "EXTQL \0"
  /* 126 */ "MSKWL \0"
  /* 133 */ "INSWL \0"
  /* 140 */ "EXTWL \0"
  /* 147 */ "; ADJDOWN \0"
  /* 158 */ "CTPOP \0"
  /* 165 */ "; ADJUP \0"
  /* 174 */ "CTLZ \0"
  /* 180 */ "CTTZ \0"
  /* 186 */ "lda \0"
  /* 191 */ "sra \0"
  /* 196 */ "stb \0"
  /* 201 */ "sextb \0"
  /* 208 */ "blbc \0"
  /* 214 */ "cmovlbc \0"
  /* 223 */ "rpcc \0"
  /* 229 */ "bic \0"
  /* 234 */ "rc \0"
  /* 238 */ "cvttq/svc \0"
  /* 249 */ "and \0"
  /* 254 */ "fbge \0"
  /* 260 */ "cmpbge \0"
  /* 268 */ "fcmovge \0"
  /* 277 */ "fble \0"
  /* 283 */ "cmple \0"
  /* 290 */ "cmpule \0"
  /* 298 */ "fcmovle \0"
  /* 307 */ "fbne \0"
  /* 313 */ "jsr_coroutine \0"
  /* 328 */ "fcmovne \0"
  /* 337 */ "cpyse \0"
  /* 344 */ "ldah \0"
  /* 350 */ "umulh \0"
  /* 357 */ "cvtqs/sui \0"
  /* 368 */ "cvtts/sui \0"
  /* 379 */ "cvtqt/sui \0"
  /* 390 */ "ldl/l \0"
  /* 397 */ "stl/l \0"
  /* 404 */ "ldq/l \0"
  /* 411 */ "stq/l \0"
  /* 418 */ "s4subl \0"
  /* 426 */ "s8subl \0"
  /* 434 */ "s4addl \0"
  /* 442 */ "s8addl \0"
  /* 450 */ "ldl \0"
  /* 455 */ "sll \0"
  /* 460 */ "mull \0"
  /* 466 */ "srl \0"
  /* 471 */ "stl \0"
  /* 476 */ "cpysn \0"
  /* 483 */ "s4subq \0"
  /* 491 */ "s8subq \0"
  /* 499 */ "s4addq \0"
  /* 507 */ "s8addq \0"
  /* 515 */ "ldq \0"
  /* 520 */ "fbeq \0"
  /* 526 */ "cmpeq \0"
  /* 533 */ "fcmoveq \0"
  /* 542 */ "mulq \0"
  /* 548 */ "stq \0"
  /* 553 */ "xor \0"
  /* 558 */ "cvtst/s \0"
  /* 567 */ "blbs \0"
  /* 573 */ "cmovlbs \0"
  /* 582 */ "lds \0"
  /* 587 */ "itofs \0"
  /* 594 */ "bis \0"
  /* 599 */ "ftois \0"
  /* 606 */ "rs \0"
  /* 610 */ "sts \0"
  /* 615 */ "cpys \0"
  /* 621 */ "ldt \0"
  /* 626 */ "itoft \0"
  /* 633 */ "fbgt \0"
  /* 639 */ "fcmovgt \0"
  /* 648 */ "ftoit \0"
  /* 655 */ "fblt \0"
  /* 661 */ "cmplt \0"
  /* 668 */ "cmpult \0"
  /* 676 */ "fcmovlt \0"
  /* 685 */ "zapnot \0"
  /* 693 */ "ornot \0"
  /* 700 */ "stt \0"
  /* 705 */ "ldq_u \0"
  /* 712 */ "stq_u \0"
  /* 719 */ "ldbu \0"
  /* 725 */ "cmptle/su \0"
  /* 736 */ "cmptun/su \0"
  /* 747 */ "cmpteq/su \0"
  /* 758 */ "subs/su \0"
  /* 767 */ "adds/su \0"
  /* 776 */ "muls/su \0"
  /* 785 */ "sqrts/su \0"
  /* 795 */ "divs/su \0"
  /* 804 */ "subt/su \0"
  /* 813 */ "addt/su \0"
  /* 822 */ "cmptlt/su \0"
  /* 833 */ "mult/su \0"
  /* 842 */ "sqrtt/su \0"
  /* 852 */ "divt/su \0"
  /* 861 */ "ldwu \0"
  /* 867 */ "eqv \0"
  /* 872 */ "stw \0"
  /* 877 */ "sextw \0"
  /* 884 */ "bsr $26,$\0"
  /* 894 */ "LSMARKER$\0"
  /* 904 */ "wh64 (\0"
  /* 911 */ "ecb (\0"
  /* 917 */ "fetch (\0"
  /* 925 */ "fetch_m (\0"
  /* 935 */ "wh64en (\0"
  /* 944 */ "jmp $31,\0"
  /* 953 */ "br $31,\0"
  /* 961 */ "# XRay Function Patchable RET.\0"
  /* 992 */ "# XRay Typed Event Log.\0"
  /* 1016 */ "# XRay Custom Event Log.\0"
  /* 1041 */ "# XRay Function Enter.\0"
  /* 1064 */ "# XRay Tail Call Exit.\0"
  /* 1087 */ "# XRay Function Exit.\0"
  /* 1109 */ "jsr $23,($27),0\0"
  /* 1125 */ "jsr $26,($27),0\0"
  /* 1141 */ "ret $31,($26),1\0"
  /* 1157 */ "COND_BRANCH imm:\0"
  /* 1174 */ "LIFETIME_END\0"
  /* 1187 */ "PSEUDO_PROBE\0"
  /* 1200 */ "BUNDLE\0"
  /* 1207 */ "DBG_VALUE\0"
  /* 1217 */ "DBG_INSTR_REF\0"
  /* 1231 */ "DBG_PHI\0"
  /* 1239 */ "DBG_LABEL\0"
  /* 1249 */ "LIFETIME_START\0"
  /* 1264 */ "DBG_VALUE_LIST\0"
  /* 1279 */ "PCMARKER_\0"
  /* 1289 */ "excb\0"
  /* 1294 */ "wmb\0"
  /* 1298 */ "trapb\0"
  /* 1304 */ "#wtf\0"
  /* 1309 */ "# FEntry call\0"
};
#endif // CAPSTONE_DIET

  static const uint16_t OpInfo0[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// INLINEASM_BR
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// ANNOTATION_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    1208U,	// DBG_VALUE
    1265U,	// DBG_VALUE_LIST
    1218U,	// DBG_INSTR_REF
    1232U,	// DBG_PHI
    1240U,	// DBG_LABEL
    0U,	// REG_SEQUENCE
    0U,	// COPY
    1201U,	// BUNDLE
    1250U,	// LIFETIME_START
    1175U,	// LIFETIME_END
    1188U,	// PSEUDO_PROBE
    0U,	// ARITH_FENCE
    0U,	// STACKMAP
    1310U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// PREALLOCATED_SETUP
    0U,	// PREALLOCATED_ARG
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    1042U,	// PATCHABLE_FUNCTION_ENTER
    962U,	// PATCHABLE_RET
    1088U,	// PATCHABLE_FUNCTION_EXIT
    1065U,	// PATCHABLE_TAIL_CALL
    1017U,	// PATCHABLE_EVENT_CALL
    993U,	// PATCHABLE_TYPED_EVENT_CALL
    0U,	// ICALL_BRANCH_FUNNEL
    0U,	// MEMBARRIER
    0U,	// G_ASSERT_SEXT
    0U,	// G_ASSERT_ZEXT
    0U,	// G_ASSERT_ALIGN
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_SDIVREM
    0U,	// G_UDIVREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_IMPLICIT_DEF
    0U,	// G_PHI
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_MERGE_VALUES
    0U,	// G_BUILD_VECTOR
    0U,	// G_BUILD_VECTOR_TRUNC
    0U,	// G_CONCAT_VECTORS
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_FREEZE
    0U,	// G_INTRINSIC_FPTRUNC_ROUND
    0U,	// G_INTRINSIC_TRUNC
    0U,	// G_INTRINSIC_ROUND
    0U,	// G_INTRINSIC_LRINT
    0U,	// G_INTRINSIC_ROUNDEVEN
    0U,	// G_READCYCLECOUNTER
    0U,	// G_LOAD
    0U,	// G_SEXTLOAD
    0U,	// G_ZEXTLOAD
    0U,	// G_INDEXED_LOAD
    0U,	// G_INDEXED_SEXTLOAD
    0U,	// G_INDEXED_ZEXTLOAD
    0U,	// G_STORE
    0U,	// G_INDEXED_STORE
    0U,	// G_ATOMIC_CMPXCHG_WITH_SUCCESS
    0U,	// G_ATOMIC_CMPXCHG
    0U,	// G_ATOMICRMW_XCHG
    0U,	// G_ATOMICRMW_ADD
    0U,	// G_ATOMICRMW_SUB
    0U,	// G_ATOMICRMW_AND
    0U,	// G_ATOMICRMW_NAND
    0U,	// G_ATOMICRMW_OR
    0U,	// G_ATOMICRMW_XOR
    0U,	// G_ATOMICRMW_MAX
    0U,	// G_ATOMICRMW_MIN
    0U,	// G_ATOMICRMW_UMAX
    0U,	// G_ATOMICRMW_UMIN
    0U,	// G_ATOMICRMW_FADD
    0U,	// G_ATOMICRMW_FSUB
    0U,	// G_ATOMICRMW_FMAX
    0U,	// G_ATOMICRMW_FMIN
    0U,	// G_ATOMICRMW_UINC_WRAP
    0U,	// G_ATOMICRMW_UDEC_WRAP
    0U,	// G_FENCE
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INVOKE_REGION_START
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_SEXT_INREG
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_FSHL
    0U,	// G_FSHR
    0U,	// G_ROTR
    0U,	// G_ROTL
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDO
    0U,	// G_UADDE
    0U,	// G_USUBO
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SADDE
    0U,	// G_SSUBO
    0U,	// G_SSUBE
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_UADDSAT
    0U,	// G_SADDSAT
    0U,	// G_USUBSAT
    0U,	// G_SSUBSAT
    0U,	// G_USHLSAT
    0U,	// G_SSHLSAT
    0U,	// G_SMULFIX
    0U,	// G_UMULFIX
    0U,	// G_SMULFIXSAT
    0U,	// G_UMULFIXSAT
    0U,	// G_SDIVFIX
    0U,	// G_UDIVFIX
    0U,	// G_SDIVFIXSAT
    0U,	// G_UDIVFIXSAT
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FMA
    0U,	// G_FMAD
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FPOWI
    0U,	// G_FEXP
    0U,	// G_FEXP2
    0U,	// G_FLOG
    0U,	// G_FLOG2
    0U,	// G_FLOG10
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_FABS
    0U,	// G_FCOPYSIGN
    0U,	// G_IS_FPCLASS
    0U,	// G_FCANONICALIZE
    0U,	// G_FMINNUM
    0U,	// G_FMAXNUM
    0U,	// G_FMINNUM_IEEE
    0U,	// G_FMAXNUM_IEEE
    0U,	// G_FMINIMUM
    0U,	// G_FMAXIMUM
    0U,	// G_PTR_ADD
    0U,	// G_PTRMASK
    0U,	// G_SMIN
    0U,	// G_SMAX
    0U,	// G_UMIN
    0U,	// G_UMAX
    0U,	// G_ABS
    0U,	// G_LROUND
    0U,	// G_LLROUND
    0U,	// G_BR
    0U,	// G_BRJT
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// G_SHUFFLE_VECTOR
    0U,	// G_CTTZ
    0U,	// G_CTTZ_ZERO_UNDEF
    0U,	// G_CTLZ
    0U,	// G_CTLZ_ZERO_UNDEF
    0U,	// G_CTPOP
    0U,	// G_BSWAP
    0U,	// G_BITREVERSE
    0U,	// G_FCEIL
    0U,	// G_FCOS
    0U,	// G_FSIN
    0U,	// G_FSQRT
    0U,	// G_FFLOOR
    0U,	// G_FRINT
    0U,	// G_FNEARBYINT
    0U,	// G_ADDRSPACE_CAST
    0U,	// G_BLOCK_ADDR
    0U,	// G_JUMP_TABLE
    0U,	// G_DYN_STACKALLOC
    0U,	// G_STRICT_FADD
    0U,	// G_STRICT_FSUB
    0U,	// G_STRICT_FMUL
    0U,	// G_STRICT_FDIV
    0U,	// G_STRICT_FREM
    0U,	// G_STRICT_FMA
    0U,	// G_STRICT_FSQRT
    0U,	// G_READ_REGISTER
    0U,	// G_WRITE_REGISTER
    0U,	// G_MEMCPY
    0U,	// G_MEMCPY_INLINE
    0U,	// G_MEMMOVE
    0U,	// G_MEMSET
    0U,	// G_BZERO
    0U,	// G_VECREDUCE_SEQ_FADD
    0U,	// G_VECREDUCE_SEQ_FMUL
    0U,	// G_VECREDUCE_FADD
    0U,	// G_VECREDUCE_FMUL
    0U,	// G_VECREDUCE_FMAX
    0U,	// G_VECREDUCE_FMIN
    0U,	// G_VECREDUCE_ADD
    0U,	// G_VECREDUCE_MUL
    0U,	// G_VECREDUCE_AND
    0U,	// G_VECREDUCE_OR
    0U,	// G_VECREDUCE_XOR
    0U,	// G_VECREDUCE_SMAX
    0U,	// G_VECREDUCE_SMIN
    0U,	// G_VECREDUCE_UMAX
    0U,	// G_VECREDUCE_UMIN
    0U,	// G_SBFX
    0U,	// G_UBFX
    2196U,	// ADJUSTSTACKDOWN
    2214U,	// ADJUSTSTACKUP
    11133U,	// ALTENT
    0U,	// CAS32
    0U,	// CAS64
    0U,	// LAS32
    0U,	// LAS64
    19327U,	// MEMLABEL
    27904U,	// PCLABEL
    0U,	// SWAP32
    0U,	// SWAP64
    1305U,	// WTF
    37301U,	// ADDLi
    37301U,	// ADDLr
    37366U,	// ADDQi
    37366U,	// ADDQr
    37632U,	// ADDS
    37678U,	// ADDT
    37114U,	// ANDi
    37114U,	// ANDr
    35338U,	// BEQ
    35072U,	// BGE
    35451U,	// BGT
    37094U,	// BICi
    37094U,	// BICr
    37459U,	// BISi
    37459U,	// BISr
    35025U,	// BLBC
    35384U,	// BLBS
    35095U,	// BLE
    35473U,	// BLT
    35125U,	// BNE
    3002U,	// BR
    43893U,	// BSR
    37399U,	// CMOVEQi
    37399U,	// CMOVEQr
    37134U,	// CMOVGEi
    37134U,	// CMOVGEr
    37505U,	// CMOVGTi
    37505U,	// CMOVGTr
    37079U,	// CMOVLBCi
    37079U,	// CMOVLBCr
    37438U,	// CMOVLBSi
    37438U,	// CMOVLBSr
    37164U,	// CMOVLEi
    37164U,	// CMOVLEr
    37542U,	// CMOVLTi
    37542U,	// CMOVLTr
    37194U,	// CMOVNEi
    37194U,	// CMOVNEr
    37125U,	// CMPBGE
    37125U,	// CMPBGEi
    37391U,	// CMPEQ
    37391U,	// CMPEQi
    37148U,	// CMPLE
    37148U,	// CMPLEi
    37526U,	// CMPLT
    37526U,	// CMPLTi
    37612U,	// CMPTEQ
    37590U,	// CMPTLE
    37687U,	// CMPTLT
    37601U,	// CMPTUN
    37155U,	// CMPULE
    37155U,	// CMPULEi
    37533U,	// CMPULT
    37533U,	// CMPULTi
    52358U,	// COND_BRANCH_F
    60550U,	// COND_BRANCH_I
    37202U,	// CPYSES
    37202U,	// CPYSESt
    37202U,	// CPYSET
    37341U,	// CPYSNS
    37341U,	// CPYSNSt
    37341U,	// CPYSNT
    37341U,	// CPYSNTs
    37480U,	// CPYSS
    37480U,	// CPYSSt
    37480U,	// CPYST
    37480U,	// CPYSTs
    37039U,	// CTLZ
    37023U,	// CTPOP
    37045U,	// CTTZ
    37222U,	// CVTQS
    37244U,	// CVTQT
    37423U,	// CVTST
    37103U,	// CVTTQ
    37233U,	// CVTTS
    37660U,	// DIVS
    37717U,	// DIVT
    5008U,	// ECB
    37732U,	// EQVi
    37732U,	// EQVr
    1290U,	// EXCB
    36942U,	// EXTBL
    36942U,	// EXTBLi
    36879U,	// EXTLH
    36879U,	// EXTLHi
    36963U,	// EXTLL
    36963U,	// EXTLLi
    36900U,	// EXTQH
    36900U,	// EXTQHi
    36984U,	// EXTQL
    36984U,	// EXTQLi
    36921U,	// EXTWH
    36921U,	// EXTWHi
    37005U,	// EXTWL
    37005U,	// EXTWLi
    35337U,	// FBEQ
    35071U,	// FBGE
    35450U,	// FBGT
    35094U,	// FBLE
    35472U,	// FBLT
    35124U,	// FBNE
    6678U,	// FCMOVEQS
    6678U,	// FCMOVEQT
    6413U,	// FCMOVGES
    6413U,	// FCMOVGET
    6784U,	// FCMOVGTS
    6784U,	// FCMOVGTT
    6443U,	// FCMOVLES
    6443U,	// FCMOVLET
    6821U,	// FCMOVLTS
    6821U,	// FCMOVLTT
    6473U,	// FCMOVNES
    6473U,	// FCMOVNET
    5014U,	// FETCH
    5022U,	// FETCH_M
    37464U,	// FTOIS
    37513U,	// FTOIT
    36935U,	// INSBL
    36935U,	// INSBLi
    36872U,	// INSLH
    36872U,	// INSLHi
    36956U,	// INSLL
    36956U,	// INSLLi
    36893U,	// INSQH
    36893U,	// INSQHi
    36977U,	// INSQL
    36977U,	// INSQLi
    36914U,	// INSWH
    36914U,	// INSWHi
    36998U,	// INSWL
    36998U,	// INSWLi
    37452U,	// ITOFS
    37491U,	// ITOFT
    11185U,	// JMP
    1126U,	// JSR
    18746U,	// JSR_COROUTINE
    1110U,	// JSRs
    35003U,	// LDA
    35161U,	// LDAH
    26969U,	// LDAHg
    35161U,	// LDAHr
    26811U,	// LDAg
    35003U,	// LDAr
    35536U,	// LDBU
    35536U,	// LDBUr
    35267U,	// LDL
    35207U,	// LDL_L
    35267U,	// LDLr
    35332U,	// LDQ
    35221U,	// LDQ_L
    35522U,	// LDQ_U
    35332U,	// LDQl
    35332U,	// LDQr
    35399U,	// LDS
    35399U,	// LDSr
    35438U,	// LDT
    35438U,	// LDTr
    35678U,	// LDWU
    35678U,	// LDWUr
    1296U,	// MB
    36928U,	// MSKBL
    36928U,	// MSKBLi
    36865U,	// MSKLH
    36865U,	// MSKLHi
    36949U,	// MSKLL
    36949U,	// MSKLLi
    36886U,	// MSKQH
    36886U,	// MSKQHi
    36970U,	// MSKQL
    36970U,	// MSKQLi
    36907U,	// MSKWH
    36907U,	// MSKWHi
    36991U,	// MSKWL
    36991U,	// MSKWLi
    37325U,	// MULLi
    37325U,	// MULLr
    37407U,	// MULQi
    37407U,	// MULQr
    37641U,	// MULS
    37698U,	// MULT
    37558U,	// ORNOTi
    37558U,	// ORNOTr
    2283U,	// RC
    1142U,	// RETDAG
    1142U,	// RETDAGp
    2272U,	// RPCC
    2655U,	// RS
    37299U,	// S4ADDLi
    37299U,	// S4ADDLr
    37364U,	// S4ADDQi
    37364U,	// S4ADDQr
    37283U,	// S4SUBLi
    37283U,	// S4SUBLr
    37348U,	// S4SUBQi
    37348U,	// S4SUBQr
    37307U,	// S8ADDLi
    37307U,	// S8ADDLr
    37372U,	// S8ADDQi
    37372U,	// S8ADDQr
    37291U,	// S8SUBLi
    37291U,	// S8SUBLr
    37356U,	// S8SUBQi
    37356U,	// S8SUBQr
    37066U,	// SEXTB
    37742U,	// SEXTW
    37320U,	// SLi
    37320U,	// SLr
    37650U,	// SQRTS
    37707U,	// SQRTT
    37056U,	// SRAi
    37056U,	// SRAr
    37331U,	// SRLi
    37331U,	// SRLr
    35013U,	// STB
    35013U,	// STBr
    35288U,	// STL
    37262U,	// STL_C
    35288U,	// STLr
    35365U,	// STQ
    37276U,	// STQ_C
    35529U,	// STQ_U
    35365U,	// STQr
    35427U,	// STS
    35427U,	// STSr
    35517U,	// STT
    35517U,	// STTr
    35689U,	// STW
    35689U,	// STWr
    37285U,	// SUBLi
    37285U,	// SUBLr
    37350U,	// SUBQi
    37350U,	// SUBQr
    37623U,	// SUBS
    37669U,	// SUBT
    1299U,	// TRAPB
    37215U,	// UMULHi
    37215U,	// UMULHr
    5001U,	// WH64
    5032U,	// WH64EN
    1295U,	// WMB
    37418U,	// XORi
    37418U,	// XORr
    37550U,	// ZAPNOTi
  };

  static const uint8_t OpInfo1[] = {
    0U,	// PHI
    0U,	// INLINEASM
    0U,	// INLINEASM_BR
    0U,	// CFI_INSTRUCTION
    0U,	// EH_LABEL
    0U,	// GC_LABEL
    0U,	// ANNOTATION_LABEL
    0U,	// KILL
    0U,	// EXTRACT_SUBREG
    0U,	// INSERT_SUBREG
    0U,	// IMPLICIT_DEF
    0U,	// SUBREG_TO_REG
    0U,	// COPY_TO_REGCLASS
    0U,	// DBG_VALUE
    0U,	// DBG_VALUE_LIST
    0U,	// DBG_INSTR_REF
    0U,	// DBG_PHI
    0U,	// DBG_LABEL
    0U,	// REG_SEQUENCE
    0U,	// COPY
    0U,	// BUNDLE
    0U,	// LIFETIME_START
    0U,	// LIFETIME_END
    0U,	// PSEUDO_PROBE
    0U,	// ARITH_FENCE
    0U,	// STACKMAP
    0U,	// FENTRY_CALL
    0U,	// PATCHPOINT
    0U,	// LOAD_STACK_GUARD
    0U,	// PREALLOCATED_SETUP
    0U,	// PREALLOCATED_ARG
    0U,	// STATEPOINT
    0U,	// LOCAL_ESCAPE
    0U,	// FAULTING_OP
    0U,	// PATCHABLE_OP
    0U,	// PATCHABLE_FUNCTION_ENTER
    0U,	// PATCHABLE_RET
    0U,	// PATCHABLE_FUNCTION_EXIT
    0U,	// PATCHABLE_TAIL_CALL
    0U,	// PATCHABLE_EVENT_CALL
    0U,	// PATCHABLE_TYPED_EVENT_CALL
    0U,	// ICALL_BRANCH_FUNNEL
    0U,	// MEMBARRIER
    0U,	// G_ASSERT_SEXT
    0U,	// G_ASSERT_ZEXT
    0U,	// G_ASSERT_ALIGN
    0U,	// G_ADD
    0U,	// G_SUB
    0U,	// G_MUL
    0U,	// G_SDIV
    0U,	// G_UDIV
    0U,	// G_SREM
    0U,	// G_UREM
    0U,	// G_SDIVREM
    0U,	// G_UDIVREM
    0U,	// G_AND
    0U,	// G_OR
    0U,	// G_XOR
    0U,	// G_IMPLICIT_DEF
    0U,	// G_PHI
    0U,	// G_FRAME_INDEX
    0U,	// G_GLOBAL_VALUE
    0U,	// G_EXTRACT
    0U,	// G_UNMERGE_VALUES
    0U,	// G_INSERT
    0U,	// G_MERGE_VALUES
    0U,	// G_BUILD_VECTOR
    0U,	// G_BUILD_VECTOR_TRUNC
    0U,	// G_CONCAT_VECTORS
    0U,	// G_PTRTOINT
    0U,	// G_INTTOPTR
    0U,	// G_BITCAST
    0U,	// G_FREEZE
    0U,	// G_INTRINSIC_FPTRUNC_ROUND
    0U,	// G_INTRINSIC_TRUNC
    0U,	// G_INTRINSIC_ROUND
    0U,	// G_INTRINSIC_LRINT
    0U,	// G_INTRINSIC_ROUNDEVEN
    0U,	// G_READCYCLECOUNTER
    0U,	// G_LOAD
    0U,	// G_SEXTLOAD
    0U,	// G_ZEXTLOAD
    0U,	// G_INDEXED_LOAD
    0U,	// G_INDEXED_SEXTLOAD
    0U,	// G_INDEXED_ZEXTLOAD
    0U,	// G_STORE
    0U,	// G_INDEXED_STORE
    0U,	// G_ATOMIC_CMPXCHG_WITH_SUCCESS
    0U,	// G_ATOMIC_CMPXCHG
    0U,	// G_ATOMICRMW_XCHG
    0U,	// G_ATOMICRMW_ADD
    0U,	// G_ATOMICRMW_SUB
    0U,	// G_ATOMICRMW_AND
    0U,	// G_ATOMICRMW_NAND
    0U,	// G_ATOMICRMW_OR
    0U,	// G_ATOMICRMW_XOR
    0U,	// G_ATOMICRMW_MAX
    0U,	// G_ATOMICRMW_MIN
    0U,	// G_ATOMICRMW_UMAX
    0U,	// G_ATOMICRMW_UMIN
    0U,	// G_ATOMICRMW_FADD
    0U,	// G_ATOMICRMW_FSUB
    0U,	// G_ATOMICRMW_FMAX
    0U,	// G_ATOMICRMW_FMIN
    0U,	// G_ATOMICRMW_UINC_WRAP
    0U,	// G_ATOMICRMW_UDEC_WRAP
    0U,	// G_FENCE
    0U,	// G_BRCOND
    0U,	// G_BRINDIRECT
    0U,	// G_INVOKE_REGION_START
    0U,	// G_INTRINSIC
    0U,	// G_INTRINSIC_W_SIDE_EFFECTS
    0U,	// G_ANYEXT
    0U,	// G_TRUNC
    0U,	// G_CONSTANT
    0U,	// G_FCONSTANT
    0U,	// G_VASTART
    0U,	// G_VAARG
    0U,	// G_SEXT
    0U,	// G_SEXT_INREG
    0U,	// G_ZEXT
    0U,	// G_SHL
    0U,	// G_LSHR
    0U,	// G_ASHR
    0U,	// G_FSHL
    0U,	// G_FSHR
    0U,	// G_ROTR
    0U,	// G_ROTL
    0U,	// G_ICMP
    0U,	// G_FCMP
    0U,	// G_SELECT
    0U,	// G_UADDO
    0U,	// G_UADDE
    0U,	// G_USUBO
    0U,	// G_USUBE
    0U,	// G_SADDO
    0U,	// G_SADDE
    0U,	// G_SSUBO
    0U,	// G_SSUBE
    0U,	// G_UMULO
    0U,	// G_SMULO
    0U,	// G_UMULH
    0U,	// G_SMULH
    0U,	// G_UADDSAT
    0U,	// G_SADDSAT
    0U,	// G_USUBSAT
    0U,	// G_SSUBSAT
    0U,	// G_USHLSAT
    0U,	// G_SSHLSAT
    0U,	// G_SMULFIX
    0U,	// G_UMULFIX
    0U,	// G_SMULFIXSAT
    0U,	// G_UMULFIXSAT
    0U,	// G_SDIVFIX
    0U,	// G_UDIVFIX
    0U,	// G_SDIVFIXSAT
    0U,	// G_UDIVFIXSAT
    0U,	// G_FADD
    0U,	// G_FSUB
    0U,	// G_FMUL
    0U,	// G_FMA
    0U,	// G_FMAD
    0U,	// G_FDIV
    0U,	// G_FREM
    0U,	// G_FPOW
    0U,	// G_FPOWI
    0U,	// G_FEXP
    0U,	// G_FEXP2
    0U,	// G_FLOG
    0U,	// G_FLOG2
    0U,	// G_FLOG10
    0U,	// G_FNEG
    0U,	// G_FPEXT
    0U,	// G_FPTRUNC
    0U,	// G_FPTOSI
    0U,	// G_FPTOUI
    0U,	// G_SITOFP
    0U,	// G_UITOFP
    0U,	// G_FABS
    0U,	// G_FCOPYSIGN
    0U,	// G_IS_FPCLASS
    0U,	// G_FCANONICALIZE
    0U,	// G_FMINNUM
    0U,	// G_FMAXNUM
    0U,	// G_FMINNUM_IEEE
    0U,	// G_FMAXNUM_IEEE
    0U,	// G_FMINIMUM
    0U,	// G_FMAXIMUM
    0U,	// G_PTR_ADD
    0U,	// G_PTRMASK
    0U,	// G_SMIN
    0U,	// G_SMAX
    0U,	// G_UMIN
    0U,	// G_UMAX
    0U,	// G_ABS
    0U,	// G_LROUND
    0U,	// G_LLROUND
    0U,	// G_BR
    0U,	// G_BRJT
    0U,	// G_INSERT_VECTOR_ELT
    0U,	// G_EXTRACT_VECTOR_ELT
    0U,	// G_SHUFFLE_VECTOR
    0U,	// G_CTTZ
    0U,	// G_CTTZ_ZERO_UNDEF
    0U,	// G_CTLZ
    0U,	// G_CTLZ_ZERO_UNDEF
    0U,	// G_CTPOP
    0U,	// G_BSWAP
    0U,	// G_BITREVERSE
    0U,	// G_FCEIL
    0U,	// G_FCOS
    0U,	// G_FSIN
    0U,	// G_FSQRT
    0U,	// G_FFLOOR
    0U,	// G_FRINT
    0U,	// G_FNEARBYINT
    0U,	// G_ADDRSPACE_CAST
    0U,	// G_BLOCK_ADDR
    0U,	// G_JUMP_TABLE
    0U,	// G_DYN_STACKALLOC
    0U,	// G_STRICT_FADD
    0U,	// G_STRICT_FSUB
    0U,	// G_STRICT_FMUL
    0U,	// G_STRICT_FDIV
    0U,	// G_STRICT_FREM
    0U,	// G_STRICT_FMA
    0U,	// G_STRICT_FSQRT
    0U,	// G_READ_REGISTER
    0U,	// G_WRITE_REGISTER
    0U,	// G_MEMCPY
    0U,	// G_MEMCPY_INLINE
    0U,	// G_MEMMOVE
    0U,	// G_MEMSET
    0U,	// G_BZERO
    0U,	// G_VECREDUCE_SEQ_FADD
    0U,	// G_VECREDUCE_SEQ_FMUL
    0U,	// G_VECREDUCE_FADD
    0U,	// G_VECREDUCE_FMUL
    0U,	// G_VECREDUCE_FMAX
    0U,	// G_VECREDUCE_FMIN
    0U,	// G_VECREDUCE_ADD
    0U,	// G_VECREDUCE_MUL
    0U,	// G_VECREDUCE_AND
    0U,	// G_VECREDUCE_OR
    0U,	// G_VECREDUCE_XOR
    0U,	// G_VECREDUCE_SMAX
    0U,	// G_VECREDUCE_SMIN
    0U,	// G_VECREDUCE_UMAX
    0U,	// G_VECREDUCE_UMIN
    0U,	// G_SBFX
    0U,	// G_UBFX
    0U,	// ADJUSTSTACKDOWN
    0U,	// ADJUSTSTACKUP
    0U,	// ALTENT
    0U,	// CAS32
    0U,	// CAS64
    0U,	// LAS32
    0U,	// LAS64
    0U,	// MEMLABEL
    0U,	// PCLABEL
    0U,	// SWAP32
    0U,	// SWAP64
    0U,	// WTF
    0U,	// ADDLi
    0U,	// ADDLr
    0U,	// ADDQi
    0U,	// ADDQr
    0U,	// ADDS
    0U,	// ADDT
    0U,	// ANDi
    0U,	// ANDr
    10U,	// BEQ
    10U,	// BGE
    10U,	// BGT
    0U,	// BICi
    0U,	// BICr
    0U,	// BISi
    0U,	// BISr
    10U,	// BLBC
    10U,	// BLBS
    10U,	// BLE
    10U,	// BLT
    10U,	// BNE
    0U,	// BR
    0U,	// BSR
    0U,	// CMOVEQi
    0U,	// CMOVEQr
    0U,	// CMOVGEi
    0U,	// CMOVGEr
    0U,	// CMOVGTi
    0U,	// CMOVGTr
    0U,	// CMOVLBCi
    0U,	// CMOVLBCr
    0U,	// CMOVLBSi
    0U,	// CMOVLBSr
    0U,	// CMOVLEi
    0U,	// CMOVLEr
    0U,	// CMOVLTi
    0U,	// CMOVLTr
    0U,	// CMOVNEi
    0U,	// CMOVNEr
    0U,	// CMPBGE
    0U,	// CMPBGEi
    0U,	// CMPEQ
    0U,	// CMPEQi
    0U,	// CMPLE
    0U,	// CMPLEi
    0U,	// CMPLT
    0U,	// CMPLTi
    0U,	// CMPTEQ
    0U,	// CMPTLE
    0U,	// CMPTLT
    0U,	// CMPTUN
    0U,	// CMPULE
    0U,	// CMPULEi
    0U,	// CMPULT
    0U,	// CMPULTi
    0U,	// COND_BRANCH_F
    0U,	// COND_BRANCH_I
    0U,	// CPYSES
    0U,	// CPYSESt
    0U,	// CPYSET
    0U,	// CPYSNS
    0U,	// CPYSNSt
    0U,	// CPYSNT
    0U,	// CPYSNTs
    0U,	// CPYSS
    0U,	// CPYSSt
    0U,	// CPYST
    0U,	// CPYSTs
    4U,	// CTLZ
    4U,	// CTPOP
    4U,	// CTTZ
    4U,	// CVTQS
    4U,	// CVTQT
    4U,	// CVTST
    4U,	// CVTTQ
    4U,	// CVTTS
    0U,	// DIVS
    0U,	// DIVT
    1U,	// ECB
    0U,	// EQVi
    0U,	// EQVr
    0U,	// EXCB
    0U,	// EXTBL
    0U,	// EXTBLi
    0U,	// EXTLH
    0U,	// EXTLHi
    0U,	// EXTLL
    0U,	// EXTLLi
    0U,	// EXTQH
    0U,	// EXTQHi
    0U,	// EXTQL
    0U,	// EXTQLi
    0U,	// EXTWH
    0U,	// EXTWHi
    0U,	// EXTWL
    0U,	// EXTWLi
    10U,	// FBEQ
    10U,	// FBGE
    10U,	// FBGT
    10U,	// FBLE
    10U,	// FBLT
    10U,	// FBNE
    0U,	// FCMOVEQS
    0U,	// FCMOVEQT
    0U,	// FCMOVGES
    0U,	// FCMOVGET
    0U,	// FCMOVGTS
    0U,	// FCMOVGTT
    0U,	// FCMOVLES
    0U,	// FCMOVLET
    0U,	// FCMOVLTS
    0U,	// FCMOVLTT
    0U,	// FCMOVNES
    0U,	// FCMOVNET
    1U,	// FETCH
    1U,	// FETCH_M
    4U,	// FTOIS
    4U,	// FTOIT
    0U,	// INSBL
    0U,	// INSBLi
    0U,	// INSLH
    0U,	// INSLHi
    0U,	// INSLL
    0U,	// INSLLi
    0U,	// INSQH
    0U,	// INSQHi
    0U,	// INSQL
    0U,	// INSQLi
    0U,	// INSWH
    0U,	// INSWHi
    0U,	// INSWL
    0U,	// INSWLi
    4U,	// ITOFS
    4U,	// ITOFT
    1U,	// JMP
    0U,	// JSR
    1U,	// JSR_COROUTINE
    0U,	// JSRs
    18U,	// LDA
    18U,	// LDAH
    1U,	// LDAHg
    82U,	// LDAHr
    1U,	// LDAg
    146U,	// LDAr
    18U,	// LDBU
    146U,	// LDBUr
    18U,	// LDL
    18U,	// LDL_L
    146U,	// LDLr
    18U,	// LDQ
    18U,	// LDQ_L
    18U,	// LDQ_U
    210U,	// LDQl
    146U,	// LDQr
    18U,	// LDS
    146U,	// LDSr
    18U,	// LDT
    146U,	// LDTr
    18U,	// LDWU
    146U,	// LDWUr
    0U,	// MB
    0U,	// MSKBL
    0U,	// MSKBLi
    0U,	// MSKLH
    0U,	// MSKLHi
    0U,	// MSKLL
    0U,	// MSKLLi
    0U,	// MSKQH
    0U,	// MSKQHi
    0U,	// MSKQL
    0U,	// MSKQLi
    0U,	// MSKWH
    0U,	// MSKWHi
    0U,	// MSKWL
    0U,	// MSKWLi
    0U,	// MULLi
    0U,	// MULLr
    0U,	// MULQi
    0U,	// MULQr
    0U,	// MULS
    0U,	// MULT
    0U,	// ORNOTi
    0U,	// ORNOTr
    0U,	// RC
    0U,	// RETDAG
    0U,	// RETDAGp
    0U,	// RPCC
    0U,	// RS
    0U,	// S4ADDLi
    0U,	// S4ADDLr
    0U,	// S4ADDQi
    0U,	// S4ADDQr
    0U,	// S4SUBLi
    0U,	// S4SUBLr
    0U,	// S4SUBQi
    0U,	// S4SUBQr
    0U,	// S8ADDLi
    0U,	// S8ADDLr
    0U,	// S8ADDQi
    0U,	// S8ADDQr
    0U,	// S8SUBLi
    0U,	// S8SUBLr
    0U,	// S8SUBQi
    0U,	// S8SUBQr
    4U,	// SEXTB
    4U,	// SEXTW
    0U,	// SLi
    0U,	// SLr
    4U,	// SQRTS
    4U,	// SQRTT
    0U,	// SRAi
    0U,	// SRAr
    0U,	// SRLi
    0U,	// SRLr
    1U,	// STB
    146U,	// STBr
    18U,	// STL
    48U,	// STL_C
    146U,	// STLr
    18U,	// STQ
    48U,	// STQ_C
    1U,	// STQ_U
    146U,	// STQr
    18U,	// STS
    146U,	// STSr
    18U,	// STT
    146U,	// STTr
    18U,	// STW
    146U,	// STWr
    0U,	// SUBLi
    0U,	// SUBLr
    0U,	// SUBQi
    0U,	// SUBQr
    0U,	// SUBS
    0U,	// SUBT
    0U,	// TRAPB
    0U,	// UMULHi
    0U,	// UMULHr
    1U,	// WH64
    1U,	// WH64EN
    0U,	// WMB
    0U,	// XORi
    0U,	// XORr
    0U,	// ZAPNOTi
  };

  // Emit the opcode for the instruction.
  uint32_t Bits = 0;
  Bits |= OpInfo0[MCInst_getOpcode(MI)] << 0;
  Bits |= OpInfo1[MCInst_getOpcode(MI)] << 16;
  MnemonicBitsInfo MBI = {
#ifndef CAPSTONE_DIET
    AsmStrs+(Bits & 2047)-1,
#else
    NULL,
#endif // CAPSTONE_DIET
    Bits
  };
  return MBI;
}

/// printInstruction - This method is automatically generated by tablegen
/// from the instruction set description.
static void printInstruction(MCInst *MI, uint64_t Address, SStream *O) {
  SStream_concat0(O, "");
  MnemonicBitsInfo MnemonicInfo = getMnemonic(MI, O);

  SStream_concat0(O, MnemonicInfo.first);

  uint32_t Bits = MnemonicInfo.second;
  assert(Bits != 0 && "Cannot print this instruction.");

  // Fragment 0 encoded into 2 bits for 4 unique commands.
  switch ((Bits >> 11) & 3) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // DBG_VALUE, DBG_VALUE_LIST, DBG_INSTR_REF, DBG_PHI, DBG_LABEL, BUNDLE, ...
    return;
    break;
  case 1:
    // ADJUSTSTACKDOWN, ADJUSTSTACKUP, ALTENT, MEMLABEL, PCLABEL, BEQ, BGE, B...
    printOperand(MI, 0, O);
    break;
  case 2:
    // ADDLi, ADDLr, ADDQi, ADDQr, ADDS, ADDT, ANDi, ANDr, BICi, BICr, BISi, ...
    printOperand(MI, 1, O);
    break;
  case 3:
    // FCMOVEQS, FCMOVEQT, FCMOVGES, FCMOVGET, FCMOVGTS, FCMOVGTT, FCMOVLES, ...
    printOperand(MI, 3, O);
    SStream_concat1(O, ',');
    printOperand(MI, 2, O);
    SStream_concat1(O, ',');
    printOperand(MI, 0, O);
    return;
    break;
  }


  // Fragment 1 encoded into 4 bits for 13 unique commands.
  switch ((Bits >> 13) & 15) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ADJUSTSTACKDOWN, ADJUSTSTACKUP, BR, RC, RPCC, RS
    return;
    break;
  case 1:
    // ALTENT
    SStream_concat0(O, "..ng:\n");
    return;
    break;
  case 2:
    // MEMLABEL
    SStream_concat1(O, '$');
    printOperand(MI, 1, O);
    SStream_concat1(O, '$');
    printOperand(MI, 2, O);
    SStream_concat1(O, '$');
    printOperand(MI, 3, O);
    SStream_concat1(O, ':');
    return;
    break;
  case 3:
    // PCLABEL
    SStream_concat0(O, ":\n");
    return;
    break;
  case 4:
    // ADDLi, ADDLr, ADDQi, ADDQr, ADDS, ADDT, ANDi, ANDr, BEQ, BGE, BGT, BIC...
    SStream_concat1(O, ',');
    break;
  case 5:
    // BSR
    SStream_concat0(O, " ..ng");
    return;
    break;
  case 6:
    // COND_BRANCH_F
    SStream_concat0(O, ", F8RC:");
    printOperand(MI, 1, O);
    SStream_concat0(O, ", bb:");
    printOperand(MI, 2, O);
    return;
    break;
  case 7:
    // COND_BRANCH_I
    SStream_concat0(O, ", GPRC:");
    printOperand(MI, 1, O);
    SStream_concat0(O, ", bb:");
    printOperand(MI, 2, O);
    return;
    break;
  case 8:
    // ECB, FETCH, FETCH_M, WH64, WH64EN
    SStream_concat1(O, ')');
    return;
    break;
  case 9:
    // JMP
    SStream_concat0(O, ",0");
    return;
    break;
  case 10:
    // JSR_COROUTINE
    SStream_concat0(O, ",( ");
    printOperand(MI, 1, O);
    SStream_concat0(O, " ),");
    printOperand(MI, 2, O);
    return;
    break;
  case 11:
    // LDAHg, LDAg
    SStream_concat0(O, ",0(");
    printOperand(MI, 2, O);
    SStream_concat0(O, ")\t\t!gpdisp!");
    printOperand(MI, 3, O);
    return;
    break;
  case 12:
    // STB, STQ_U
    SStream_concat0(O, ", ");
    printOperand(MI, 1, O);
    SStream_concat1(O, '(');
    printOperand(MI, 2, O);
    SStream_concat1(O, ')');
    return;
    break;
  }


  // Fragment 2 encoded into 2 bits for 3 unique commands.
  switch ((Bits >> 17) & 3) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ADDLi, ADDLr, ADDQi, ADDQr, ADDS, ADDT, ANDi, ANDr, BICi, BICr, BISi, ...
    printOperand(MI, 2, O);
    break;
  case 1:
    // BEQ, BGE, BGT, BLBC, BLBS, BLE, BLT, BNE, FBEQ, FBGE, FBGT, FBLE, FBLT...
    printOperand(MI, 1, O);
    break;
  case 2:
    // CTLZ, CTPOP, CTTZ, CVTQS, CVTQT, CVTST, CVTTQ, CVTTS, FTOIS, FTOIT, IT...
    printOperand(MI, 0, O);
    return;
    break;
  }


  // Fragment 3 encoded into 2 bits for 3 unique commands.
  switch ((Bits >> 19) & 3) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // ADDLi, ADDLr, ADDQi, ADDQr, ADDS, ADDT, ANDi, ANDr, BICi, BICr, BISi, ...
    SStream_concat1(O, ',');
    printOperand(MI, 0, O);
    return;
    break;
  case 1:
    // BEQ, BGE, BGT, BLBC, BLBS, BLE, BLT, BNE, FBEQ, FBGE, FBGT, FBLE, FBLT...
    return;
    break;
  case 2:
    // LDA, LDAH, LDAHr, LDAr, LDBU, LDBUr, LDL, LDL_L, LDLr, LDQ, LDQ_L, LDQ...
    SStream_concat1(O, '(');
    break;
  }


  // Fragment 4 encoded into 1 bits for 2 unique commands.
  if ((Bits >> 21) & 1) {
    // STL_C, STQ_C
    printOperand(MI, 3, O);
    SStream_concat1(O, ')');
    return;
  } else {
    // LDA, LDAH, LDAHr, LDAr, LDBU, LDBUr, LDL, LDL_L, LDLr, LDQ, LDQ_L, LDQ...
    printOperand(MI, 2, O);
  }


  // Fragment 5 encoded into 2 bits for 4 unique commands.
  switch ((Bits >> 22) & 3) {
  default: assert(0 && "Invalid command number.");
  case 0:
    // LDA, LDAH, LDBU, LDL, LDL_L, LDQ, LDQ_L, LDQ_U, LDS, LDT, LDWU, STL, S...
    SStream_concat1(O, ')');
    return;
    break;
  case 1:
    // LDAHr
    SStream_concat0(O, ")\t\t!gprelhigh");
    return;
    break;
  case 2:
    // LDAr, LDBUr, LDLr, LDQr, LDSr, LDTr, LDWUr, STBr, STLr, STQr, STSr, ST...
    SStream_concat0(O, ")\t\t!gprellow");
    return;
    break;
  case 3:
    // LDQl
    SStream_concat0(O, ")\t\t!literal");
    return;
    break;
  }

}


/// getRegisterName - This method is automatically generated by tblgen
/// from the register set description.  This returns the assembler name
/// for the specified register.
static const char *getRegisterName(unsigned RegNo) {
#ifndef CAPSTONE_DIET
  assert(RegNo && RegNo < 65 && "Invalid register number!");

  static const char AsmStrs[] = {
  /* 0 */ "$0\0"
  /* 3 */ "$10\0"
  /* 7 */ "$f10\0"
  /* 12 */ "$20\0"
  /* 16 */ "$f20\0"
  /* 21 */ "$30\0"
  /* 25 */ "$f30\0"
  /* 30 */ "$f0\0"
  /* 34 */ "$1\0"
  /* 37 */ "$11\0"
  /* 41 */ "$f11\0"
  /* 46 */ "$21\0"
  /* 50 */ "$f21\0"
  /* 55 */ "$31\0"
  /* 59 */ "$f31\0"
  /* 64 */ "$f1\0"
  /* 68 */ "$2\0"
  /* 71 */ "$12\0"
  /* 75 */ "$f12\0"
  /* 80 */ "$22\0"
  /* 84 */ "$f22\0"
  /* 89 */ "$f2\0"
  /* 93 */ "$3\0"
  /* 96 */ "$13\0"
  /* 100 */ "$f13\0"
  /* 105 */ "$23\0"
  /* 109 */ "$f23\0"
  /* 114 */ "$f3\0"
  /* 118 */ "$4\0"
  /* 121 */ "$14\0"
  /* 125 */ "$f14\0"
  /* 130 */ "$24\0"
  /* 134 */ "$f24\0"
  /* 139 */ "$f4\0"
  /* 143 */ "$5\0"
  /* 146 */ "$15\0"
  /* 150 */ "$f15\0"
  /* 155 */ "$25\0"
  /* 159 */ "$f25\0"
  /* 164 */ "$f5\0"
  /* 168 */ "$6\0"
  /* 171 */ "$16\0"
  /* 175 */ "$f16\0"
  /* 180 */ "$26\0"
  /* 184 */ "$f26\0"
  /* 189 */ "$f6\0"
  /* 193 */ "$7\0"
  /* 196 */ "$17\0"
  /* 200 */ "$f17\0"
  /* 205 */ "$27\0"
  /* 209 */ "$f27\0"
  /* 214 */ "$f7\0"
  /* 218 */ "$8\0"
  /* 221 */ "$18\0"
  /* 225 */ "$f18\0"
  /* 230 */ "$28\0"
  /* 234 */ "$f28\0"
  /* 239 */ "$f8\0"
  /* 243 */ "$9\0"
  /* 246 */ "$19\0"
  /* 250 */ "$f19\0"
  /* 255 */ "$29\0"
  /* 259 */ "$f29\0"
  /* 264 */ "$f9\0"
};
  static const uint16_t RegAsmOffset[] = {
    30, 64, 89, 114, 139, 164, 189, 214, 239, 264, 7, 41, 75, 100, 
    125, 150, 175, 200, 225, 250, 16, 50, 84, 109, 134, 159, 184, 209, 
    234, 259, 25, 59, 0, 34, 68, 93, 118, 143, 168, 193, 218, 243, 
    3, 37, 71, 96, 121, 146, 171, 196, 221, 246, 12, 46, 80, 105, 
    130, 155, 180, 205, 230, 255, 21, 55, 
  };

  assert (*(AsmStrs+RegAsmOffset[RegNo-1]) &&
          "Invalid alt name index for register!");
  return AsmStrs+RegAsmOffset[RegNo-1];
#else
  return NULL;
#endif // CAPSTONE_DIET
}
#ifdef PRINT_ALIAS_INSTR
#undef PRINT_ALIAS_INSTR

static bool printAliasInstr(MCInst *MI, uint64_t Address, SStream *OS) {
#ifndef CAPSTONE_DIET
  return false;
#endif // CAPSTONE_DIET
}

#endif // PRINT_ALIAS_INSTR
