test_cases:
  -
    input:
      bytes: [ 0x03, 0x00, 0x22, 0x40 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "addl $1,$2,$3"
  -
    input:
      bytes: [ 0x03, 0xd0, 0x3b, 0x40 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "addl $1,0xde,$3"
  -
    input:
      bytes: [ 0x03, 0x04, 0x22, 0x40 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "addq $1,$2,$3"
  -
    input:
      bytes: [ 0x03, 0xd4, 0x3b, 0x40 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "addq $1,0xde,$3"
  -
    input:
      bytes: [ 0x03, 0xb0, 0x22, 0x58 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "adds/su $f1,$f10,$f11"
  -
    input:
      bytes: [ 0x03, 0xb4, 0x22, 0x58 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "addt/su $f1,$f10,$f11"
  -
    input:
      bytes: [ 0x03, 0x00, 0x22, 0x44 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "and $1,$2,$3"
  -
    input:
      bytes: [ 0x03, 0xd0, 0x3b, 0x44 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "and $1,0xde,$3"
  -
    input:
      bytes: [ 0xfc, 0x3f, 0x20, 0xe4 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "beq $1,0xfffffffffffffff4"
  -
    input:
      bytes: [ 0xfc, 0x3f, 0x20, 0xf8 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "bge $1,0xfffffffffffffff4"
  -
    input:
      bytes: [ 0xfc, 0x3f, 0x20, 0xfc ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "bgt $1,0xfffffffffffffff4"
  -
    input:
      bytes: [ 0x03, 0x01, 0x22, 0x44 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "bic $1,$2,$3"
  -
    input:
      bytes: [ 0x03, 0xd1, 0x3b, 0x44 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "bic $1,0xde,$3"
  -
    input:
      bytes: [ 0x03, 0x04, 0x22, 0x44 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "bis $1,$2,$3"
  -
    input:
      bytes: [ 0x03, 0xd4, 0x3b, 0x44 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "bis $1,0xde,$3"
  -
    input:
      bytes: [ 0xfc, 0x3f, 0x20, 0xe0 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "blbc $1,0xfffffffffffffff4"
  -
    input:
      bytes: [ 0xfc, 0x3f, 0x20, 0xf0 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "blbs $1,0xfffffffffffffff4"
  -
    input:
      bytes: [ 0xfc, 0x3f, 0x20, 0xec ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "ble $1,0xfffffffffffffff4"
  -
    input:
      bytes: [ 0xfc, 0x3f, 0x20, 0xe8 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "blt $1,0xfffffffffffffff4"
  -
    input:
      bytes: [ 0xfc, 0x3f, 0x20, 0xf4 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "bne $1,0xfffffffffffffff4"
  -
    input:
      bytes: [ 0xfc, 0x3f, 0xe0, 0xc3 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "br $31,0xfffffffffffffff4"
  -
    input:
      bytes: [ 0xfc, 0x3f, 0x40, 0xd3 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "bsr $26,$0xfffffffffffffff4 ..ng"
  -
    input:
      bytes: [ 0x83, 0x04, 0x22, 0x44 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "cmoveq $1,$2,$3"
  -
    input:
      bytes: [ 0xc3, 0x08, 0x22, 0x44 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "cmovge $1,$2,$3"
  -
    input:
      bytes: [ 0xc3, 0x0c, 0x22, 0x44 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "cmovgt $1,$2,$3"
  -
    input:
      bytes: [ 0xc3, 0x02, 0x22, 0x44 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "cmovlbc $1,$2,$3"
  -
    input:
      bytes: [ 0x83, 0x02, 0x22, 0x44 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "cmovlbs $1,$2,$3"
  -
    input:
      bytes: [ 0x83, 0x0c, 0x22, 0x44 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "cmovle $1,$2,$3"
  -
    input:
      bytes: [ 0x83, 0x08, 0x22, 0x44 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "cmovlt $1,$2,$3"
  -
    input:
      bytes: [ 0xc3, 0x04, 0x22, 0x44 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "cmovne $1,$2,$3"
  -
    input:
      bytes: [ 0xe3, 0x01, 0x22, 0x40 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "cmpbge $1,$2,$3"
  -
    input:
      bytes: [ 0xe3, 0xd1, 0x3b, 0x40 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "cmpbge $1,0xde,$3"
  -
    input:
      bytes: [ 0xa3, 0x05, 0x22, 0x40 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "cmpeq $1,$2,$3"
  -
    input:
      bytes: [ 0xa3, 0xd5, 0x3b, 0x40 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "cmpeq $1,0xde,$3"
  -
    input:
      bytes: [ 0xa3, 0x0d, 0x22, 0x40 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "cmple $1,$2,$3"
  -
    input:
      bytes: [ 0xa3, 0xdd, 0x3b, 0x40 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "cmple $1,0xde,$3"
  -
    input:
      bytes: [ 0xa3, 0x09, 0x22, 0x40 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "cmplt $1,$2,$3"
  -
    input:
      bytes: [ 0xa3, 0xd9, 0x3b, 0x40 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "cmplt $1,0xde,$3"
  -
    input:
      bytes: [ 0xa3, 0xb4, 0x22, 0x58 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "cmpteq/su $f1,$f10,$f11"
  -
    input:
      bytes: [ 0xe3, 0xb4, 0x22, 0x58 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "cmptle/su $f1,$f10,$f11"
  -
    input:
      bytes: [ 0xc3, 0xb4, 0x22, 0x58 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "cmptlt/su $f1,$f10,$f11"
  -
    input:
      bytes: [ 0x83, 0xb4, 0x22, 0x58 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "cmptun/su $f1,$f10,$f11"
  -
    input:
      bytes: [ 0xa3, 0x07, 0x22, 0x40 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "cmpule $1,$2,$3"
  -
    input:
      bytes: [ 0xa3, 0xd7, 0x3b, 0x40 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "cmpule $1,0xde,$3"
  -
    input:
      bytes: [ 0xa3, 0x03, 0x22, 0x40 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "cmpult $1,$2,$3"
  -
    input:
      bytes: [ 0xa3, 0xd3, 0x3b, 0x40 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "cmpult $1,0xde,$3"
  -
    input:
      bytes: [ 0x43, 0x04, 0x22, 0x5c ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "cpyse $f1,$f10,$f11"
  -
    input:
      bytes: [ 0x23, 0x04, 0x22, 0x5c ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "cpysn $f1,$f10,$f11"
  -
    input:
      bytes: [ 0x03, 0x04, 0x22, 0x5c ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "cpys $f1,$f10,$f11"
  -
    input:
      bytes: [ 0x42, 0x06, 0xe1, 0x73 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "ctlz $1,$2"
  -
    input:
      bytes: [ 0x02, 0x06, 0xe1, 0x73 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "ctpop $1,$2"
  -
    input:
      bytes: [ 0x62, 0x06, 0xe1, 0x73 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "cttz $1,$2"
  -
    input:
      bytes: [ 0x82, 0xf7, 0xe1, 0x5b ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "cvtqs/sui $f1,$f10"
  -
    input:
      bytes: [ 0xc2, 0xf7, 0xe1, 0x5b ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "cvtqt/sui $f1,$f10"
  -
    input:
      bytes: [ 0x82, 0xd5, 0xe1, 0x5b ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "cvtst/s $f1,$f10"
  -
    input:
      bytes: [ 0xe2, 0xa5, 0xe1, 0x5b ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "cvttq/svc $f1,$f10"
  -
    input:
      bytes: [ 0x82, 0xf5, 0xe1, 0x5b ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "cvtts/sui $f1,$f10"
  -
    input:
      bytes: [ 0x63, 0xb0, 0x22, 0x58 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "divs/su $f1,$f10,$f11"
  -
    input:
      bytes: [ 0x63, 0xb4, 0x22, 0x58 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "divt/su $f1,$f10,$f11"
  -
    input:
      bytes: [ 0x00, 0xe8, 0xe1, 0x63 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "ecb ($1)"
  -
    input:
      bytes: [ 0x03, 0x09, 0x22, 0x44 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "eqv $1,$2,$3"
  -
    input:
      bytes: [ 0x03, 0xd9, 0x3b, 0x44 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "eqv $1,0xde,$3"
  -
    input:
      bytes: [ 0x00, 0x04, 0x00, 0x60 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "excb"
  -
    input:
      bytes: [ 0xc3, 0x00, 0x22, 0x48 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "extbl $1,$2,$3"
  -
    input:
      bytes: [ 0xc3, 0xd0, 0x3b, 0x48 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "extbl $1,0xde,$3"
  -
    input:
      bytes: [ 0x43, 0x0d, 0x22, 0x48 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "extlh $1,$2,$3"
  -
    input:
      bytes: [ 0x43, 0xdd, 0x3b, 0x48 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "extlh $1,0xde,$3"
  -
    input:
      bytes: [ 0xc3, 0x04, 0x22, 0x48 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "extll $1,$2,$3"
  -
    input:
      bytes: [ 0xc3, 0xd4, 0x3b, 0x48 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "extll $1,0xde,$3"
  -
    input:
      bytes: [ 0x43, 0x0f, 0x22, 0x48 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "extqh $1,$2,$3"
  -
    input:
      bytes: [ 0x43, 0xdf, 0x3b, 0x48 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "extqh $1,0xde,$3"
  -
    input:
      bytes: [ 0xc3, 0x06, 0x22, 0x48 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "extql $1,$2,$3"
  -
    input:
      bytes: [ 0xc3, 0xd6, 0x3b, 0x48 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "extql $1,0xde,$3"
  -
    input:
      bytes: [ 0x43, 0x0b, 0x22, 0x48 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "extwh $1,$2,$3"
  -
    input:
      bytes: [ 0x43, 0xdb, 0x3b, 0x48 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "extwh $1,0xde,$3"
  -
    input:
      bytes: [ 0xc3, 0x02, 0x22, 0x48 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "extwl $1,$2,$3"
  -
    input:
      bytes: [ 0xc3, 0xd2, 0x3b, 0x48 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "extwl $1,0xde,$3"
  -
    input:
      bytes: [ 0xfc, 0x3f, 0x20, 0xc4 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "fbeq $f1,0xfffffffffffffff4"
  -
    input:
      bytes: [ 0xfc, 0x3f, 0x20, 0xd8 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "fbge $f1,0xfffffffffffffff4"
  -
    input:
      bytes: [ 0xfc, 0x3f, 0x20, 0xdc ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "fbgt $f1,0xfffffffffffffff4"
  -
    input:
      bytes: [ 0xfc, 0x3f, 0x20, 0xcc ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "fble $f1,0xfffffffffffffff4"
  -
    input:
      bytes: [ 0xfc, 0x3f, 0x20, 0xc8 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "fblt $f1,0xfffffffffffffff4"
  -
    input:
      bytes: [ 0xfc, 0x3f, 0x20, 0xd4 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "fbne $f1,0xfffffffffffffff4"
  -
    input:
      bytes: [ 0x43, 0x05, 0x22, 0x5c ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "fcmoveq ,$f10,$f11"
  -
    input:
      bytes: [ 0xa3, 0x05, 0x22, 0x5c ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "fcmovge ,$f10,$f11"
  -
    input:
      bytes: [ 0xe3, 0x05, 0x22, 0x5c ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "fcmovgt ,$f10,$f11"
  -
    input:
      bytes: [ 0xc3, 0x05, 0x22, 0x5c ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "fcmovle ,$f10,$f11"
  -
    input:
      bytes: [ 0x83, 0x05, 0x22, 0x5c ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "fcmovlt ,$f10,$f11"
  -
    input:
      bytes: [ 0x63, 0x05, 0x22, 0x5c ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "fcmovne ,$f10,$f11"
  -
    input:
      bytes: [ 0x00, 0x80, 0xe1, 0x63 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "fetch ($1)"
  -
    input:
      bytes: [ 0x00, 0xa0, 0xe1, 0x63 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "fetch_m ($1)"
  -
    input:
      bytes: [ 0x01, 0x0f, 0x3f, 0x70 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "ftois $f1,$1"
  -
    input:
      bytes: [ 0x01, 0x0e, 0x3f, 0x70 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "ftoit $f1,$1"
  -
    input:
      bytes: [ 0x63, 0x01, 0x22, 0x48 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "insbl $1,$2,$3"
  -
    input:
      bytes: [ 0x63, 0xd1, 0x3b, 0x48 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "insbl $1,0xde,$3"
  -
    input:
      bytes: [ 0xe3, 0x0c, 0x22, 0x48 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "inslh $1,$2,$3"
  -
    input:
      bytes: [ 0xe3, 0xdc, 0x3b, 0x48 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "inslh $1,0xde,$3"
  -
    input:
      bytes: [ 0x63, 0x05, 0x22, 0x48 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "insll $1,$2,$3"
  -
    input:
      bytes: [ 0x63, 0xd5, 0x3b, 0x48 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "insll $1,0xde,$3"
  -
    input:
      bytes: [ 0xe3, 0x0e, 0x22, 0x48 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "insqh $1,$2,$3"
  -
    input:
      bytes: [ 0xe3, 0xde, 0x3b, 0x48 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "insqh $1,0xde,$3"
  -
    input:
      bytes: [ 0x63, 0x07, 0x22, 0x48 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "insql $1,$2,$3"
  -
    input:
      bytes: [ 0x63, 0xd7, 0x3b, 0x48 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "insql $1,0xde,$3"
  -
    input:
      bytes: [ 0xe3, 0x0a, 0x22, 0x48 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "inswh $1,$2,$3"
  -
    input:
      bytes: [ 0xe3, 0xda, 0x3b, 0x48 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "inswh $1,0xde,$3"
  -
    input:
      bytes: [ 0x63, 0x03, 0x22, 0x48 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "inswl $1,$2,$3"
  -
    input:
      bytes: [ 0x63, 0xd3, 0x3b, 0x48 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "inswl $1,0xde,$3"
  -
    input:
      bytes: [ 0x81, 0x00, 0x3f, 0x50 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "itofs $1,$f1"
  -
    input:
      bytes: [ 0x81, 0x04, 0x3f, 0x50 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "itoft $1,$f1"
  -
    input:
      bytes: [ 0x00, 0x00, 0xfa, 0x6b ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "jmp $31,$12,0"
  -
    input:
      bytes: [ 0x00, 0x40, 0x5b, 0x6b ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "jsr $26,($27),0"
  -
    input:
      bytes: [ 0xff, 0xcf, 0x22, 0x68 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "jsr_coroutine $1,($2),0xfff"
  -
    input:
      bytes: [ 0x10, 0x00, 0x22, 0x20 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "lda $1,0x10($2)"
  -
    input:
      bytes: [ 0x10, 0x00, 0x22, 0x24 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "ldah $1,0x10($2)"
  -
    input:
      bytes: [ 0x10, 0x00, 0x22, 0x28 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "ldbu $1,0x10($2)"
  -
    input:
      bytes: [ 0x10, 0x00, 0x22, 0xa0 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "ldl $1,0x10($2)"
  -
    input:
      bytes: [ 0x10, 0x00, 0x22, 0xa8 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "ldl_l $1,0x10($2)"
  -
    input:
      bytes: [ 0x10, 0x00, 0x22, 0xa4 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "ldq $1,0x10($2)"
  -
    input:
      bytes: [ 0x10, 0x00, 0x22, 0xac ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "ldq_l $1,0x10($2)"
  -
    input:
      bytes: [ 0x10, 0x00, 0x22, 0x2c ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "ldq_u $1,0x10($2)"
  -
    input:
      bytes: [ 0x10, 0x00, 0x22, 0x88 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "lds $f1,0x10($2)"
  -
    input:
      bytes: [ 0x10, 0x00, 0x22, 0x8c ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "ldt $f1,0x10($2)"
  -
    input:
      bytes: [ 0x10, 0x00, 0x22, 0x30 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "ldwu $1,0x10($2)"
  -
    input:
      bytes: [ 0x00, 0x40, 0x00, 0x60 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "mb"
  -
    input:
      bytes: [ 0x43, 0x00, 0x22, 0x48 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "mskbl $1,$2,$3"
  -
    input:
      bytes: [ 0x43, 0xd0, 0x3b, 0x48 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "mskbl $1,0xde,$3"
  -
    input:
      bytes: [ 0x43, 0x0c, 0x22, 0x48 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "msklh $1,$2,$3"
  -
    input:
      bytes: [ 0x43, 0xdc, 0x3b, 0x48 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "msklh $1,0xde,$3"
  -
    input:
      bytes: [ 0x43, 0x04, 0x22, 0x48 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "mskll $1,$2,$3"
  -
    input:
      bytes: [ 0x43, 0xd4, 0x3b, 0x48 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "mskll $1,0xde,$3"
  -
    input:
      bytes: [ 0x43, 0x0e, 0x22, 0x48 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "mskqh $1,$2,$3"
  -
    input:
      bytes: [ 0x43, 0xde, 0x3b, 0x48 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "mskqh $1,0xde,$3"
  -
    input:
      bytes: [ 0x43, 0x06, 0x22, 0x48 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "mskql $1,$2,$3"
  -
    input:
      bytes: [ 0x43, 0xd6, 0x3b, 0x48 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "mskql $1,0xde,$3"
  -
    input:
      bytes: [ 0x43, 0x0a, 0x22, 0x48 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "mskwh $1,$2,$3"
  -
    input:
      bytes: [ 0x43, 0xda, 0x3b, 0x48 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "mskwh $1,0xde,$3"
  -
    input:
      bytes: [ 0x43, 0x02, 0x22, 0x48 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "mskwl $1,$2,$3"
  -
    input:
      bytes: [ 0x43, 0xd2, 0x3b, 0x48 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "mskwl $1,0xde,$3"
  -
    input:
      bytes: [ 0x03, 0x00, 0x22, 0x4c ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "mull $1,$2,$3"
  -
    input:
      bytes: [ 0x03, 0xd0, 0x3b, 0x4c ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "mull $1,0xde,$3"
  -
    input:
      bytes: [ 0x03, 0x04, 0x22, 0x4c ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "mulq $1,$2,$3"
  -
    input:
      bytes: [ 0x03, 0xd4, 0x3b, 0x4c ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "mulq $1,0xde,$3"
  -
    input:
      bytes: [ 0x43, 0xb0, 0x22, 0x58 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "muls/su $f1,$f10,$f11"
  -
    input:
      bytes: [ 0x43, 0xb4, 0x22, 0x58 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "mult/su $f1,$f10,$f11"
  -
    input:
      bytes: [ 0x03, 0x05, 0x22, 0x44 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "ornot $1,$2,$3"
  -
    input:
      bytes: [ 0x03, 0xd5, 0x3b, 0x44 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "ornot $1,0xde,$3"
  -
    input:
      bytes: [ 0x00, 0xe0, 0x20, 0x60 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "rc $1"
  -
    input:
      bytes: [ 0x01, 0x80, 0xfa, 0x6b ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "ret $31,($26),1"
  -
    input:
      bytes: [ 0x00, 0xc0, 0x1f, 0x60 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "rpcc $0"
  -
    input:
      bytes: [ 0x00, 0xf0, 0x20, 0x60 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "rs $1"
  -
    input:
      bytes: [ 0x43, 0x00, 0x22, 0x40 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "s4addl $1,$2,$3"
  -
    input:
      bytes: [ 0x43, 0xd0, 0x3b, 0x40 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "s4addl $1,0xde,$3"
  -
    input:
      bytes: [ 0x63, 0x01, 0x22, 0x40 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "s4subl $1,$2,$3"
  -
    input:
      bytes: [ 0x63, 0xd1, 0x3b, 0x40 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "s4subl $1,0xde,$3"
  -
    input:
      bytes: [ 0x63, 0x05, 0x22, 0x40 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "s4subq $1,$2,$3"
  -
    input:
      bytes: [ 0x63, 0xd5, 0x3b, 0x40 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "s4subq $1,0xde,$3"
  -
    input:
      bytes: [ 0x43, 0x02, 0x22, 0x40 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "s8addl $1,$2,$3"
  -
    input:
      bytes: [ 0x43, 0xd2, 0x3b, 0x40 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "s8addl $1,0xde,$3"
  -
    input:
      bytes: [ 0x43, 0x06, 0x22, 0x40 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "s8addq $1,$2,$3"
  -
    input:
      bytes: [ 0x43, 0xd6, 0x3b, 0x40 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "s8addq $1,0xde,$3"
  -
    input:
      bytes: [ 0x63, 0x03, 0x22, 0x40 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "s8subl $1,$2,$3"
  -
    input:
      bytes: [ 0x63, 0xd3, 0x3b, 0x40 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "s8subl $1,0xde,$3"
  -
    input:
      bytes: [ 0x63, 0x07, 0x22, 0x40 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "s8subq $1,$2,$3"
  -
    input:
      bytes: [ 0x63, 0xd7, 0x3b, 0x40 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "s8subq $1,0xde,$3"
  -
    input:
      bytes: [ 0x02, 0x00, 0xe1, 0x73 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "sextb $1,$2"
  -
    input:
      bytes: [ 0x22, 0x00, 0xe1, 0x73 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "sextw $1,$2"
  -
    input:
      bytes: [ 0x23, 0x07, 0x22, 0x48 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "sll $1,$2,$3"
  -
    input:
      bytes: [ 0x23, 0xd7, 0x3b, 0x48 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "sll $1,0xde,$3"
  -
    input:
      bytes: [ 0x62, 0xb1, 0xe1, 0x53 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "sqrts/su $f1,$f10"
  -
    input:
      bytes: [ 0x62, 0xb5, 0xe1, 0x53 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "sqrtt/su $f1,$f10"
  -
    input:
      bytes: [ 0x83, 0x07, 0x22, 0x48 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "sra $1,$2,$3"
  -
    input:
      bytes: [ 0x83, 0xd7, 0x3b, 0x48 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "sra $1,0xde,$3"
  -
    input:
      bytes: [ 0x83, 0x06, 0x22, 0x48 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "srl $1,$2,$3"
  -
    input:
      bytes: [ 0x83, 0xd6, 0x3b, 0x48 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "srl $1,0xde,$3"
  -
    input:
      bytes: [ 0x10, 0x00, 0x22, 0x38 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "stb $1, 0x10($2)"
  -
    input:
      bytes: [ 0x10, 0x00, 0x22, 0xb0 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "stl $1,0x10($2)"
  -
    input:
      bytes: [ 0x10, 0x00, 0x22, 0xb8 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "stl_c $1,0x10($2)"
  -
    input:
      bytes: [ 0x10, 0x00, 0x22, 0xb4 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "stq $1,0x10($2)"
  -
    input:
      bytes: [ 0x10, 0x00, 0x22, 0xbc ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "stq_c $1,0x10($2)"
  -
    input:
      bytes: [ 0x10, 0x00, 0x22, 0x3c ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "stq_u $1, 0x10($2)"
  -
    input:
      bytes: [ 0x10, 0x00, 0x22, 0x98 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "sts $f1,0x10($2)"
  -
    input:
      bytes: [ 0x10, 0x00, 0x22, 0x9c ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "stt $f1,0x10($2)"
  -
    input:
      bytes: [ 0x10, 0x00, 0x22, 0x34 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "stw $1,0x10($2)"
  -
    input:
      bytes: [ 0x23, 0x01, 0x22, 0x40 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "subl $1,$2,$3"
  -
    input:
      bytes: [ 0x23, 0xd1, 0x3b, 0x40 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "subl $1,0xde,$3"
  -
    input:
      bytes: [ 0x23, 0x05, 0x22, 0x40 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "subq $1,$2,$3"
  -
    input:
      bytes: [ 0x23, 0xd5, 0x3b, 0x40 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "subq $1,0xde,$3"
  -
    input:
      bytes: [ 0x23, 0xb0, 0x22, 0x58 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "subs/su $f1,$f10,$f11"
  -
    input:
      bytes: [ 0x23, 0xb4, 0x22, 0x58 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "subt/su $f1,$f10,$f11"
  -
    input:
      bytes: [ 0x00, 0x00, 0x00, 0x60 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "trapb"
  -
    input:
      bytes: [ 0x03, 0x06, 0x22, 0x4c ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "umulh $1,$2,$3"
  -
    input:
      bytes: [ 0x03, 0xd6, 0x3b, 0x4c ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "umulh $1,0xde,$3"
  -
    input:
      bytes: [ 0x00, 0xf8, 0xe1, 0x63 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "wh64 ($1)"
  -
    input:
      bytes: [ 0x00, 0xfc, 0xe1, 0x63 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "wh64en ($1)"
  -
    input:
      bytes: [ 0x00, 0x44, 0x00, 0x60 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "wmb"
  -
    input:
      bytes: [ 0x03, 0x08, 0x22, 0x44 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "xor $1,$2,$3"
  -
    input:
      bytes: [ 0x03, 0xd8, 0x3b, 0x44 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "xor $1,0xde,$3"
  -
    input:
      bytes: [ 0x23, 0xd6, 0x3b, 0x48 ]
      arch: "CS_ARCH_ALPHA"
      options: [ "CS_MODE_LITTLE_ENDIAN" ]
    expected:
      insns:
        -
          asm_text: "zapnot $1,0xde,$3"
