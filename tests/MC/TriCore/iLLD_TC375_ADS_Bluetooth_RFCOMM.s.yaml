test_cases:
  -
    input:
      bytes: [ 0x7e, 0xaa ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne d15, d10, #0x14"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x75, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x116"
  -
    input:
      bytes: [ 0xa2, 0x8f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sub d15, d8"
  -
    input:
      bytes: [ 0x1d, 0x00, 0x8c, 0x01 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #0x318"
  -
    input:
      bytes: [ 0xc2, 0x34 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add d4, #0x3"
  -
    input:
      bytes: [ 0x0b, 0x15, 0x90, 0xf2 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "or.lt d15, d5, d1"
  -
    input:
      bytes: [ 0x0b, 0xa8, 0x10, 0x48 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov e4, d8, d10"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x83, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0xfa"
  -
    input:
      bytes: [ 0x6f, 0x9a, 0x0e, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz.t d10, #0x9, #0x1c"
  -
    input:
      bytes: [ 0xbb, 0xf0, 0xfe, 0x0f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.u d0, #0xffef"
  -
    input:
      bytes: [ 0xd9, 0x44, 0xa8, 0x9a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a4, [a4]#-0x5598"
  -
    input:
      bytes: [ 0x8c, 0xa6 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ld.h d15, [sp]#0xc"
  -
    input:
      bytes: [ 0x6b, 0x0c, 0x31, 0xf5 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sub.f d15, d5, d12"
  -
    input:
      bytes: [ 0xce, 0x57 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jgez d5, #0xe"
  -
    input:
      bytes: [ 0x91, 0x40, 0x00, 0x2f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "movh.a a2, #0xf004"
  -
    input:
      bytes: [ 0x61, 0xff, 0x3a, 0xda ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "fcall #-0x4b8c"
  -
    input:
      bytes: [ 0x02, 0xa4 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d4, d10"
  -
    input:
      bytes: [ 0x3f, 0xf0, 0xfd, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jlt.u d0, d15, #-0x6"
  -
    input:
      bytes: [ 0x0b, 0x0f, 0x90, 0xf1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "min.u d15, d15, d0"
  -
    input:
      bytes: [ 0x6f, 0x0a, 0x0e, 0x80 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jnz.t d10, #0, #0x1c"
  -
    input:
      bytes: [ 0x89, 0x4f, 0xa4, 0x08 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "st.h [a4]#0x24, d15"
  -
    input:
      bytes: [ 0x37, 0x04, 0x50, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "extr d0, d4, #0, #0x10"
  -
    input:
      bytes: [ 0x3c, 0x23 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #0x46"
  -
    input:
      bytes: [ 0x40, 0xde ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.aa a14, a13"
  -
    input:
      bytes: [ 0x9b, 0x14, 0x00, 0x40 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "addih d4, d4, #0x1"
  -
    input:
      bytes: [ 0x6f, 0x08, 0x18, 0x80 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jnz.t d8, #0, #0x30"
  -
    input:
      bytes: [ 0x37, 0x0f, 0x70, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "extr.u d0, d15, #0, #0x10"
  -
    input:
      bytes: [ 0xfe, 0x03 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne d15, d0, #0x26"
  -
    input:
      bytes: [ 0x6d, 0xff, 0xe1, 0xfa ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0xa3e"
  -
    input:
      bytes: [ 0x3b, 0x50, 0x04, 0x20 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d2, #0x45"
  -
    input:
      bytes: [ 0x1a, 0x89 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add d15, d9, d8"
  -
    input:
      bytes: [ 0x8f, 0x24, 0x40, 0xf1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "or d15, d4, #0x2"
  -
    input:
      bytes: [ 0xee, 0x0e ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jnz d15, #0x1c"
  -
    input:
      bytes: [ 0x2e, 0x37 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz.t d15, #0x3, #0xe"
  -
    input:
      bytes: [ 0x6e, 0x1d ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz d15, #0x3a"
  -
    input:
      bytes: [ 0xae, 0x04 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jnz.t d15, #0, #0x8"
  -
    input:
      bytes: [ 0x2e, 0x1c ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz.t d15, #0x1, #0x18"
  -
    input:
      bytes: [ 0x40, 0xa4 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.aa a4, sp"
  -
    input:
      bytes: [ 0x4b, 0xbf, 0x01, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "cmp.f d15, d15, d11"
  -
    input:
      bytes: [ 0x02, 0x1f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d15, d1"
  -
    input:
      bytes: [ 0x0b, 0x1b, 0x80, 0xf2 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "or.ne d15, d11, d1"
  -
    input:
      bytes: [ 0xd9, 0x99, 0x00, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a9, [a9]#0"
  -
    input:
      bytes: [ 0x3c, 0x94 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #-0xd8"
  -
    input:
      bytes: [ 0x0b, 0xab, 0x10, 0x48 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov e4, d11, d10"
  -
    input:
      bytes: [ 0xfe, 0x06 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne d15, d0, #0x2c"
  -
    input:
      bytes: [ 0x3c, 0x18 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #0x30"
  -
    input:
      bytes: [ 0x02, 0x94 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d4, d9"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x53, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x15a"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x09, 0x4c ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x167ee"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x5b, 0xfa ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0xb4a"
  -
    input:
      bytes: [ 0xae, 0x17 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jnz.t d15, #0x1, #0xe"
  -
    input:
      bytes: [ 0x3c, 0x19 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #0x32"
  -
    input:
      bytes: [ 0x3c, 0x0c ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #0x18"
  -
    input:
      bytes: [ 0x37, 0x00, 0x50, 0x80 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "extr d8, d0, #0, #0x10"
  -
    input:
      bytes: [ 0xac, 0x42 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "st.h [a4]#0x4, d15"
  -
    input:
      bytes: [ 0xa2, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sub d0, d15"
  -
    input:
      bytes: [ 0xd9, 0x55, 0xa0, 0xca ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a5, [a5]#-0x54e0"
  -
    input:
      bytes: [ 0xdf, 0x02, 0xee, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne d2, #0, #-0x24"
  -
    input:
      bytes: [ 0x49, 0xa2, 0x00, 0x0a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a2, [sp]#0"
  -
    input:
      bytes: [ 0x67, 0x23, 0x80, 0x3f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ins.t d3, d3, #0, d2, #0x1f"
  -
    input:
      bytes: [ 0x82, 0x15 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d5, #0x1"
  -
    input:
      bytes: [ 0x3b, 0x90, 0xd0, 0x33 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d3, #0x3d09"
  -
    input:
      bytes: [ 0x8f, 0x00, 0x01, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sh d0, d0, #0x10"
  -
    input:
      bytes: [ 0x7d, 0xe2, 0x0a, 0x80 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne.a a2, a14, #0x14"
  -
    input:
      bytes: [ 0x3b, 0x00, 0x04, 0x01 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d0, #0x1040"
  -
    input:
      bytes: [ 0xee, 0x2b ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jnz d15, #0x56"
  -
    input:
      bytes: [ 0x0b, 0x27, 0x00, 0xf2 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "and.eq d15, d7, d2"
  -
    input:
      bytes: [ 0x8c, 0x49 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ld.h d15, [a4]#0x12"
  -
    input:
      bytes: [ 0xbb, 0x00, 0x68, 0x89 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.u d8, #0x9680"
  -
    input:
      bytes: [ 0x5f, 0x0f, 0xad, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d15, d0, #0x15a"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x2a, 0x3e ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x183ac"
  -
    input:
      bytes: [ 0x49, 0xf4, 0x04, 0x0a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a4, [a15]#0x4"
  -
    input:
      bytes: [ 0x0e, 0xa4 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jltz d10, #0x8"
  -
    input:
      bytes: [ 0x88, 0x20 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ld.h d0, [a15]#0x4"
  -
    input:
      bytes: [ 0x1d, 0x00, 0xbc, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #0x178"
  -
    input:
      bytes: [ 0x8f, 0x0a, 0x44, 0xa1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "or d10, d10, #0x40"
  -
    input:
      bytes: [ 0x7e, 0x0d ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne d15, d0, #0x1a"
  -
    input:
      bytes: [ 0xa0, 0xa4 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.a a4, #0xa"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x67, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x132"
  -
    input:
      bytes: [ 0x9a, 0xfb ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add d15, d11, #-0x1"
  -
    input:
      bytes: [ 0x02, 0x02 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d2, d0"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x06, 0xf6 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x13f4"
  -
    input:
      bytes: [ 0x0b, 0xd1, 0xd0, 0xd0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "subc d13, d1, d13"
  -
    input:
      bytes: [ 0x8b, 0x05, 0xa0, 0x50 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "addc d5, d5, #0"
  -
    input:
      bytes: [ 0x49, 0xff, 0x20, 0x0a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#0x20"
  -
    input:
      bytes: [ 0x8f, 0xbf, 0x0f, 0x01 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "and d0, d15, #0xfb"
  -
    input:
      bytes: [ 0xae, 0x28 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jnz.t d15, #0x2, #0x10"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x1d, 0x05 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0xa3a"
  -
    input:
      bytes: [ 0x49, 0xa6, 0x04, 0x0a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a6, [sp]#0x4"
  -
    input:
      bytes: [ 0x8b, 0xf0, 0x20, 0x03 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "min.u d0, d0, #0xf"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x85, 0xfd ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x4f6"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x55, 0xfe ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x356"
  -
    input:
      bytes: [ 0x02, 0xab ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d11, d10"
  -
    input:
      bytes: [ 0x8b, 0x0f, 0x01, 0xf2 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "eq d15, d15, #0x10"
  -
    input:
      bytes: [ 0x5e, 0x2b ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne d15, #0x2, #0x16"
  -
    input:
      bytes: [ 0x89, 0xff, 0xb6, 0x08 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "st.h [a15]#0x36, d15"
  -
    input:
      bytes: [ 0xb7, 0x1a, 0x81, 0xa5 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insert d10, d10, #0x1, #0xb, #0x1"
  -
    input:
      bytes: [ 0x53, 0xcf, 0x20, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mul d15, d15, #0xc"
  -
    input:
      bytes: [ 0x6b, 0x0c, 0x31, 0xa5 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sub.f d10, d5, d12"
  -
    input:
      bytes: [ 0x8b, 0x01, 0x03, 0x40 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add d4, d1, #0x30"
  -
    input:
      bytes: [ 0x4b, 0xf1, 0x41, 0x10 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mul.f d1, d1, d15"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x03, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x6"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x07, 0x14 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x280e"
  -
    input:
      bytes: [ 0xab, 0x0f, 0x83, 0x41 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sel d4, d1, d15, #0x30"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x1a, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x34"
  -
    input:
      bytes: [ 0x3f, 0xf0, 0xf6, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jlt.u d0, d15, #-0x14"
  -
    input:
      bytes: [ 0xde, 0x25 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne d15, #0x2, #0x2a"
  -
    input:
      bytes: [ 0xd9, 0xff, 0x0c, 0x10 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#0x4c"
  -
    input:
      bytes: [ 0xb0, 0xc4 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add.a a4, #-0x4"
  -
    input:
      bytes: [ 0x82, 0x20 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d0, #0x2"
  -
    input:
      bytes: [ 0xda, 0x39 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d15, #0x39"
  -
    input:
      bytes: [ 0xab, 0x1f, 0x20, 0xa0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "caddn d10, d0, d15, #0x1"
  -
    input:
      bytes: [ 0x10, 0x25 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "addsc.a a5, a2, d15, #0"
  -
    input:
      bytes: [ 0x89, 0x4f, 0xae, 0x08 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "st.h [a4]#0x2e, d15"
  -
    input:
      bytes: [ 0x09, 0xd4, 0xb4, 0x08 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ld.h d4, [a13]#0x34"
  -
    input:
      bytes: [ 0xd9, 0x55, 0x9c, 0xea ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a5, [a5]#-0x5464"
  -
    input:
      bytes: [ 0x01, 0xf9, 0x00, 0x26 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "addsc.a a2, a15, d9, #0"
  -
    input:
      bytes: [ 0x82, 0x44 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d4, #0x4"
  -
    input:
      bytes: [ 0xd9, 0xee, 0xaa, 0x60 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a14, [a14]#0x9aa"
  -
    input:
      bytes: [ 0x5e, 0x17 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne d15, #0x1, #0xe"
  -
    input:
      bytes: [ 0x49, 0xcf, 0x04, 0x0a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a12]#0x4"
  -
    input:
      bytes: [ 0xdf, 0x0c, 0x1d, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d12, #0, #0x3a"
  -
    input:
      bytes: [ 0x6d, 0x00, 0xbc, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x178"
  -
    input:
      bytes: [ 0xdf, 0x04, 0x7c, 0x7f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d4, #0, #-0x108"
  -
    input:
      bytes: [ 0x09, 0xf0, 0xd8, 0x08 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ld.hu d0, [a15]#0x18"
  -
    input:
      bytes: [ 0x87, 0x55, 0xbf, 0xdf ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "or.t d13, d5, #0x1f, d5, #0x1f"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x0f, 0xfb ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x9e2"
  -
    input:
      bytes: [ 0x8f, 0x89, 0x01, 0xf1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "and d15, d9, #0x18"
  -
    input:
      bytes: [ 0x6f, 0x0f, 0xfc, 0x7f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz.t d15, #0, #-0x8"
  -
    input:
      bytes: [ 0x6d, 0x00, 0xd0, 0x08 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x11a0"
  -
    input:
      bytes: [ 0x49, 0xa6, 0x00, 0x4a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a6, [sp]#0x100"
  -
    input:
      bytes: [ 0x4b, 0x0f, 0x41, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mul.f d15, d15, d0"
  -
    input:
      bytes: [ 0x3c, 0x38 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #0x70"
  -
    input:
      bytes: [ 0xd9, 0x55, 0x48, 0x4a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a5, [a5]#-0x5af8"
  -
    input:
      bytes: [ 0xc5, 0xf5, 0x80, 0x40 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a5, #0xf0000900"
  -
    input:
      bytes: [ 0xd9, 0x55, 0x64, 0x8a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a5, [a5]#-0x59dc"
  -
    input:
      bytes: [ 0x82, 0x12 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d2, #0x1"
  -
    input:
      bytes: [ 0xb7, 0x08, 0x01, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insert d15, d8, #0, #0, #0x1"
  -
    input:
      bytes: [ 0xd9, 0xff, 0x80, 0xc5 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#0x5b00"
  -
    input:
      bytes: [ 0x3b, 0x20, 0xfe, 0x0f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d0, #-0x1e"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x9b, 0x11 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x2336"
  -
    input:
      bytes: [ 0xb7, 0x04, 0x02, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insert d0, d4, #0, #0, #0x2"
  -
    input:
      bytes: [ 0x0b, 0x60, 0x40, 0x80 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "addx d8, d0, d6"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x6c, 0xf5 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x1528"
  -
    input:
      bytes: [ 0x40, 0xcd ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.aa a13, a12"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x4a, 0x01 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x294"
  -
    input:
      bytes: [ 0x89, 0xaf, 0xa0, 0x08 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "st.h [sp]#0x20, d15"
  -
    input:
      bytes: [ 0x49, 0x25, 0x01, 0x0a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a5, [a2]#0x1"
  -
    input:
      bytes: [ 0xbf, 0x10, 0x22, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jlt d0, #0x1, #0x44"
  -
    input:
      bytes: [ 0x1e, 0xf8 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d15, #-0x1, #0x10"
  -
    input:
      bytes: [ 0x89, 0x4f, 0xa2, 0x08 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "st.h [a4]#0x22, d15"
  -
    input:
      bytes: [ 0x96, 0x02 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "or d15, #0x2"
  -
    input:
      bytes: [ 0x6d, 0xff, 0xf2, 0x38 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x18e1c"
  -
    input:
      bytes: [ 0x5f, 0x0f, 0x23, 0x80 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne d15, d0, #0x46"
  -
    input:
      bytes: [ 0x8b, 0x00, 0x01, 0x02 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "eq d0, d0, #0x10"
  -
    input:
      bytes: [ 0x6e, 0x36 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz d15, #0x6c"
  -
    input:
      bytes: [ 0x7b, 0x00, 0x00, 0x11 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "movh d1, #0x1000"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x9b, 0x02 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x536"
  -
    input:
      bytes: [ 0xdf, 0x10, 0x2b, 0x80 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne d0, #0x1, #0x56"
  -
    input:
      bytes: [ 0x6d, 0x00, 0xfd, 0x02 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x5fa"
  -
    input:
      bytes: [ 0x8b, 0x16, 0x80, 0x60 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "addx d6, d6, #0x1"
  -
    input:
      bytes: [ 0x4b, 0xf1, 0x51, 0x20 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "div.f d2, d1, d15"
  -
    input:
      bytes: [ 0x40, 0x42 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.aa a2, a4"
  -
    input:
      bytes: [ 0x6e, 0xf3 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz d15, #-0x1a"
  -
    input:
      bytes: [ 0xda, 0x0a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d15, #0xa"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x1a, 0xfe ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x3cc"
  -
    input:
      bytes: [ 0x5e, 0x15 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne d15, #0x1, #0xa"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x1f, 0x11 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x223e"
  -
    input:
      bytes: [ 0xd9, 0x3f, 0x10, 0x18 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a3]#-0x7fb0"
  -
    input:
      bytes: [ 0x49, 0xf2, 0x3f, 0x2a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a2, [a15]#0xbf"
  -
    input:
      bytes: [ 0xbf, 0x1f, 0x13, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jlt d15, #0x1, #0x26"
  -
    input:
      bytes: [ 0x82, 0x05 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d5, #0"
  -
    input:
      bytes: [ 0x89, 0xa2, 0x80, 0x48 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "st.h [sp]#0x100, d2"
  -
    input:
      bytes: [ 0x9b, 0x88, 0xb9, 0x84 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "addih d8, d8, #0x4b98"
  -
    input:
      bytes: [ 0x09, 0x40, 0xc6, 0x08 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ld.hu d0, [a4]#0x6"
  -
    input:
      bytes: [ 0x82, 0x04 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d4, #0"
  -
    input:
      bytes: [ 0x20, 0x20 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sub.a sp, #0x20"
  -
    input:
      bytes: [ 0xc2, 0x1f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add d15, #0x1"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x22, 0x0f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x1e44"
  -
    input:
      bytes: [ 0xee, 0xc4 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jnz d15, #-0x78"
  -
    input:
      bytes: [ 0x0b, 0x89, 0x10, 0x68 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov e6, d9, d8"
  -
    input:
      bytes: [ 0xd9, 0xff, 0x50, 0xca ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#-0x58f0"
  -
    input:
      bytes: [ 0x5f, 0x5f, 0xfd, 0x7f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d15, d5, #-0x6"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x1d, 0xf6 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x13c6"
  -
    input:
      bytes: [ 0x49, 0xa6, 0x08, 0x4a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a6, [sp]#0x108"
  -
    input:
      bytes: [ 0x92, 0x49 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add d9, d15, #0x4"
  -
    input:
      bytes: [ 0x94, 0xd4 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ld.h d4, [a13]"
  -
    input:
      bytes: [ 0x8f, 0x89, 0x01, 0x01 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "and d0, d9, #0x18"
  -
    input:
      bytes: [ 0x0b, 0xf4, 0x80, 0xf1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "min d15, d4, d15"
  -
    input:
      bytes: [ 0xbf, 0x10, 0xfa, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jlt.u d0, #0x1, #-0xc"
  -
    input:
      bytes: [ 0xfe, 0x02 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne d15, d0, #0x24"
  -
    input:
      bytes: [ 0xa6, 0xf1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "or d1, d15"
  -
    input:
      bytes: [ 0x49, 0xff, 0x10, 0x0a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#0x10"
  -
    input:
      bytes: [ 0x91, 0x10, 0x00, 0xa5 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "movh.a sp, #0x5001"
  -
    input:
      bytes: [ 0xd9, 0x55, 0x64, 0x5a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a5, [a5]#-0x5a9c"
  -
    input:
      bytes: [ 0xbb, 0x00, 0xc2, 0x2b ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.u d2, #0xbc20"
  -
    input:
      bytes: [ 0x6f, 0x3f, 0x30, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz.t d15, #0x3, #0x60"
  -
    input:
      bytes: [ 0x16, 0x1f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "and d15, #0x1f"
  -
    input:
      bytes: [ 0xd9, 0xff, 0xa4, 0xda ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#-0x549c"
  -
    input:
      bytes: [ 0x8f, 0x3c, 0x00, 0x01 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "and d0, d12, #0x3"
  -
    input:
      bytes: [ 0x8b, 0x0f, 0x20, 0x02 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ne d0, d15, #0"
  -
    input:
      bytes: [ 0x1e, 0x17 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d15, #0x1, #0xe"
  -
    input:
      bytes: [ 0xd9, 0xff, 0x28, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#0x28"
  -
    input:
      bytes: [ 0x3f, 0x89, 0xd6, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jlt.u d9, d8, #-0x54"
  -
    input:
      bytes: [ 0x76, 0x43 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz d4, #0x6"
  -
    input:
      bytes: [ 0x3f, 0xfa, 0xf9, 0x7f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jlt d10, d15, #-0xe"
  -
    input:
      bytes: [ 0x82, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d15, #-0x1"
  -
    input:
      bytes: [ 0x0b, 0x51, 0x50, 0x30 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "addc d3, d1, d5"
  -
    input:
      bytes: [ 0x94, 0xd0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ld.h d0, [a13]"
  -
    input:
      bytes: [ 0x82, 0x18 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d8, #0x1"
  -
    input:
      bytes: [ 0x8b, 0x6f, 0x1c, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add d15, d15, #-0x3a"
  -
    input:
      bytes: [ 0x12, 0x50 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add d0, d15, d5"
  -
    input:
      bytes: [ 0xb7, 0x0f, 0x81, 0xf1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insert d15, d15, #0, #0x3, #0x1"
  -
    input:
      bytes: [ 0x67, 0xff, 0xbf, 0xaf ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insn.t d10, d15, #0x1f, d15, #0x1f"
  -
    input:
      bytes: [ 0x53, 0x44, 0x20, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mul d15, d4, #0x4"
  -
    input:
      bytes: [ 0xd9, 0x22, 0x80, 0x0c ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a2, [a2]#-0x3800"
  -
    input:
      bytes: [ 0x0b, 0xa0, 0x50, 0xf1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ge.u d15, d0, d10"
  -
    input:
      bytes: [ 0xc2, 0x2f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add d15, #0x2"
  -
    input:
      bytes: [ 0x7f, 0x1f, 0x04, 0x80 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jge.u d15, d1, #0x8"
  -
    input:
      bytes: [ 0x40, 0x4d ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.aa a13, a4"
  -
    input:
      bytes: [ 0xce, 0x84 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jgez d8, #0x8"
  -
    input:
      bytes: [ 0x3f, 0x89, 0xb8, 0x7e ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jlt d9, d8, #-0x290"
  -
    input:
      bytes: [ 0x26, 0x0a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "and d10, d0"
  -
    input:
      bytes: [ 0xd9, 0x44, 0x24, 0xc0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a4, [a4]#0x324"
  -
    input:
      bytes: [ 0x3f, 0x10, 0x97, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jlt.u d0, d1, #-0xd2"
  -
    input:
      bytes: [ 0x5e, 0x1a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne d15, #0x1, #0x14"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x22, 0xf5 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x15bc"
  -
    input:
      bytes: [ 0xdf, 0x0f, 0xdf, 0x80 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne d15, #0, #0x1be"
  -
    input:
      bytes: [ 0x1d, 0x00, 0x9e, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #0x13c"
  -
    input:
      bytes: [ 0x02, 0xd8 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d8, d13"
  -
    input:
      bytes: [ 0x0b, 0x23, 0x10, 0xa8 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov e10, d3, d2"
  -
    input:
      bytes: [ 0xee, 0x09 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jnz d15, #0x12"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x7a, 0xf7 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x110c"
  -
    input:
      bytes: [ 0xd9, 0xff, 0x00, 0x0e ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#-0x2000"
  -
    input:
      bytes: [ 0xb7, 0x1a, 0x01, 0xa6 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insert d10, d10, #0x1, #0xc, #0x1"
  -
    input:
      bytes: [ 0x1d, 0xff, 0xb5, 0xfd ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #-0x496"
  -
    input:
      bytes: [ 0x49, 0xc2, 0x0c, 0x0a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a2, [a12]#0xc"
  -
    input:
      bytes: [ 0x49, 0xa2, 0x13, 0x0a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a2, [sp]#0x13"
  -
    input:
      bytes: [ 0x2e, 0x25 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz.t d15, #0x2, #0xa"
  -
    input:
      bytes: [ 0x61, 0xff, 0xe0, 0xd9 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "fcall #-0x4c40"
  -
    input:
      bytes: [ 0x01, 0xc8, 0x00, 0xe6 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "addsc.a a14, a12, d8, #0"
  -
    input:
      bytes: [ 0x49, 0x40, 0x40, 0x08 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ldmst [a4]#0, e0"
  -
    input:
      bytes: [ 0x0f, 0x0f, 0xb0, 0xf1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "clz d15, d15"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x5f, 0x0a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x14be"
  -
    input:
      bytes: [ 0xd9, 0xff, 0xc0, 0x09 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#-0x6400"
  -
    input:
      bytes: [ 0xf6, 0xa6 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jnz d10, #0xc"
  -
    input:
      bytes: [ 0x40, 0x2e ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.aa a14, a2"
  -
    input:
      bytes: [ 0xda, 0x80 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d15, #0x80"
  -
    input:
      bytes: [ 0x4b, 0x01, 0x71, 0x11 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ftouz d1, d1"
  -
    input:
      bytes: [ 0xdf, 0x02, 0x12, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d2, #0, #0x24"
  -
    input:
      bytes: [ 0x4b, 0x0a, 0x01, 0x82 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "div e8, d10, d0"
  -
    input:
      bytes: [ 0x3b, 0xc0, 0x04, 0x50 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d5, #0x4c"
  -
    input:
      bytes: [ 0x02, 0xf5 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d5, d15"
  -
    input:
      bytes: [ 0x3c, 0x03 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #0x6"
  -
    input:
      bytes: [ 0xd9, 0x55, 0x74, 0x0a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a5, [a5]#-0x5bcc"
  -
    input:
      bytes: [ 0x6d, 0x00, 0xdd, 0x02 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x5ba"
  -
    input:
      bytes: [ 0x8b, 0xfe, 0x26, 0x82 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ne d8, d14, #0x6f"
  -
    input:
      bytes: [ 0x8f, 0x3f, 0x00, 0xd1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "and d13, d15, #0x3"
  -
    input:
      bytes: [ 0x10, 0xcc ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "addsc.a a12, a12, d15, #0"
  -
    input:
      bytes: [ 0x3b, 0x90, 0x06, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d0, #0x69"
  -
    input:
      bytes: [ 0x3b, 0x60, 0x04, 0x10 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d1, #0x46"
  -
    input:
      bytes: [ 0x3c, 0x26 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #0x4c"
  -
    input:
      bytes: [ 0x3b, 0xe0, 0x02, 0x40 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d4, #0x2e"
  -
    input:
      bytes: [ 0x3e, 0x03 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d15, d0, #0x6"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x37, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x6e"
  -
    input:
      bytes: [ 0x8b, 0x10, 0x80, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "addx d0, d0, #0x1"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x48, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x90"
  -
    input:
      bytes: [ 0x40, 0x6c ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.aa a12, a6"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x36, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x6c"
  -
    input:
      bytes: [ 0x49, 0x55, 0x00, 0x2a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a5, [a5]#0x80"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x6c, 0xf4 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x1728"
  -
    input:
      bytes: [ 0x0b, 0x71, 0x00, 0xf2 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "and.eq d15, d1, d7"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x16, 0xfe ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x3d4"
  -
    input:
      bytes: [ 0x37, 0x0f, 0x04, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insert d15, d15, d0, #0, #0x4"
  -
    input:
      bytes: [ 0x01, 0xc0, 0x00, 0xf6 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "addsc.a a15, a12, d0, #0"
  -
    input:
      bytes: [ 0x49, 0xa2, 0x0a, 0x0a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a2, [sp]#0xa"
  -
    input:
      bytes: [ 0x0b, 0x54, 0x10, 0x88 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov e8, d4, d5"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x5e, 0x11 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x22bc"
  -
    input:
      bytes: [ 0x4b, 0x0f, 0x51, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "div.f d15, d15, d0"
  -
    input:
      bytes: [ 0x5f, 0x0f, 0xc4, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d15, d0, #0x188"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x34, 0x11 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x2268"
  -
    input:
      bytes: [ 0x3b, 0xc0, 0x04, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d0, #0x4c"
  -
    input:
      bytes: [ 0x6e, 0xef ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz d15, #-0x22"
  -
    input:
      bytes: [ 0x01, 0xf0, 0x00, 0x26 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "addsc.a a2, a15, d0, #0"
  -
    input:
      bytes: [ 0x49, 0xa5, 0x08, 0x0a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a5, [sp]#0x8"
  -
    input:
      bytes: [ 0x49, 0xaf, 0x12, 0x0a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [sp]#0x12"
  -
    input:
      bytes: [ 0x7f, 0xfa, 0x1d, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jge d10, d15, #0x3a"
  -
    input:
      bytes: [ 0xbb, 0xf0, 0xfd, 0xaf ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.u d10, #0xffdf"
  -
    input:
      bytes: [ 0x5f, 0x0f, 0x27, 0x80 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne d15, d0, #0x4e"
  -
    input:
      bytes: [ 0x40, 0x5d ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.aa a13, a5"
  -
    input:
      bytes: [ 0xdf, 0x12, 0x49, 0x80 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne d2, #0x1, #0x92"
  -
    input:
      bytes: [ 0xbf, 0x10, 0x13, 0x80 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jlt.u d0, #0x1, #0x26"
  -
    input:
      bytes: [ 0x49, 0xff, 0x04, 0x0a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#0x4"
  -
    input:
      bytes: [ 0x5f, 0x01, 0x04, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d1, d0, #0x8"
  -
    input:
      bytes: [ 0x8b, 0x61, 0x09, 0x11 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "rsub d1, d1, #0x96"
  -
    input:
      bytes: [ 0xdf, 0x04, 0x11, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d4, #0, #0x22"
  -
    input:
      bytes: [ 0xb0, 0x15 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add.a a5, #0x1"
  -
    input:
      bytes: [ 0xd9, 0x00, 0x00, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a0, [a0]#0"
  -
    input:
      bytes: [ 0x01, 0xf2, 0x20, 0xf4 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lt.a d15, a2, a15"
  -
    input:
      bytes: [ 0x6f, 0x08, 0xe2, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jnz.t d8, #0, #-0x3c"
  -
    input:
      bytes: [ 0xd9, 0xff, 0x04, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#0x4"
  -
    input:
      bytes: [ 0x37, 0x0f, 0x81, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insert d15, d15, d0, #0x1, #0x1"
  -
    input:
      bytes: [ 0x82, 0x40 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d0, #0x4"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x8f, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x11e"
  -
    input:
      bytes: [ 0x3b, 0xa0, 0x00, 0x60 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d6, #0xa"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x3b, 0x18 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x3076"
  -
    input:
      bytes: [ 0x3e, 0x06 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d15, d0, #0xc"
  -
    input:
      bytes: [ 0x40, 0xf5 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.aa a5, a15"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x9e, 0x07 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0xf3c"
  -
    input:
      bytes: [ 0x3b, 0x90, 0x00, 0xb0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d11, #0x9"
  -
    input:
      bytes: [ 0x91, 0x00, 0x00, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "movh.a a15, #0"
  -
    input:
      bytes: [ 0x6f, 0x29, 0x09, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz.t d9, #0x2, #0x12"
  -
    input:
      bytes: [ 0x16, 0x03 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "and d15, #0x3"
  -
    input:
      bytes: [ 0x8b, 0x01, 0x01, 0x11 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "rsub d1, d1, #0x10"
  -
    input:
      bytes: [ 0x76, 0x33 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz d3, #0x6"
  -
    input:
      bytes: [ 0x3b, 0x50, 0x06, 0x10 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d1, #0x65"
  -
    input:
      bytes: [ 0xbe, 0xe4 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d15, d14, #0x28"
  -
    input:
      bytes: [ 0xff, 0x14, 0xea, 0x7f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jge d4, #0x1, #-0x2c"
  -
    input:
      bytes: [ 0xf6, 0x82 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jnz d8, #0x4"
  -
    input:
      bytes: [ 0x02, 0x04 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d4, d0"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x8a, 0x02 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x514"
  -
    input:
      bytes: [ 0x3e, 0x0d ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d15, d0, #0x1a"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x85, 0x02 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x50a"
  -
    input:
      bytes: [ 0xc2, 0xcb ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add d11, #-0x4"
  -
    input:
      bytes: [ 0x3f, 0xbc, 0xf9, 0x7f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jlt d12, d11, #-0xe"
  -
    input:
      bytes: [ 0x1d, 0xff, 0x77, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #-0x112"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x7c, 0x03 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x6f8"
  -
    input:
      bytes: [ 0x23, 0x82, 0x0a, 0x0a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "msub d0, d10, d2, d8"
  -
    input:
      bytes: [ 0x8b, 0x02, 0x00, 0x22 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "eq d2, d2, #0"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x7a, 0x11 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x22f4"
  -
    input:
      bytes: [ 0x6d, 0xff, 0xd4, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x58"
  -
    input:
      bytes: [ 0x49, 0xf4, 0x08, 0x5a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a4, [a15]#0x148"
  -
    input:
      bytes: [ 0xdf, 0x09, 0x14, 0x80 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne d9, #0, #0x28"
  -
    input:
      bytes: [ 0x4b, 0x0d, 0x61, 0xa1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "utof d10, d13"
  -
    input:
      bytes: [ 0xff, 0xdf, 0x6f, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jge d15, #-0x3, #0xde"
  -
    input:
      bytes: [ 0x8b, 0x02, 0x03, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add d15, d2, #0x30"
  -
    input:
      bytes: [ 0x49, 0xff, 0x08, 0x0a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#0x8"
  -
    input:
      bytes: [ 0x6f, 0x9a, 0x05, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz.t d10, #0x9, #0xa"
  -
    input:
      bytes: [ 0x3c, 0x0f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #0x1e"
  -
    input:
      bytes: [ 0x37, 0xf0, 0x01, 0xf1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insert d15, d0, d15, #0x2, #0x1"
  -
    input:
      bytes: [ 0x26, 0x02 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "and d2, d0"
  -
    input:
      bytes: [ 0x3f, 0xbf, 0x03, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jlt d15, d11, #0x6"
  -
    input:
      bytes: [ 0x26, 0xa0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "and d0, d10"
  -
    input:
      bytes: [ 0x9b, 0xc0, 0xfc, 0x03 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "addih d0, d0, #0x3fcc"
  -
    input:
      bytes: [ 0x5f, 0x0f, 0x37, 0x80 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne d15, d0, #0x6e"
  -
    input:
      bytes: [ 0xf6, 0x23 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jnz d2, #0x6"
  -
    input:
      bytes: [ 0xdf, 0x05, 0x12, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d5, #0, #0x24"
  -
    input:
      bytes: [ 0x8f, 0x29, 0x00, 0xf1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "and d15, d9, #0x2"
  -
    input:
      bytes: [ 0x8f, 0x24, 0x20, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sha d15, d4, #0x2"
  -
    input:
      bytes: [ 0xd2, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov e0, #0"
  -
    input:
      bytes: [ 0x0f, 0x0a, 0x00, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sh d15, d10, d0"
  -
    input:
      bytes: [ 0x02, 0xf1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d1, d15"
  -
    input:
      bytes: [ 0x89, 0x45, 0x96, 0x08 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "st.h [a4]#0x16, d5"
  -
    input:
      bytes: [ 0xd9, 0x22, 0x28, 0xa6 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a2, [a2]#0x62a8"
  -
    input:
      bytes: [ 0x61, 0xff, 0xcd, 0xd4 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "fcall #-0x5666"
  -
    input:
      bytes: [ 0x02, 0x6a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d10, d6"
  -
    input:
      bytes: [ 0x52, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sub d0, d15, d0"
  -
    input:
      bytes: [ 0x49, 0x4f, 0x08, 0x1a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a4]#0x48"
  -
    input:
      bytes: [ 0xbf, 0x1f, 0x5c, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jlt d15, #0x1, #0xb8"
  -
    input:
      bytes: [ 0x0b, 0x00, 0xd0, 0x01 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "abss d0, d0"
  -
    input:
      bytes: [ 0x3c, 0x04 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #0x8"
  -
    input:
      bytes: [ 0x7e, 0x12 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne d15, d1, #0x4"
  -
    input:
      bytes: [ 0xa6, 0x12 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "or d2, d1"
  -
    input:
      bytes: [ 0x49, 0xfd, 0x08, 0x0a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a13, [a15]#0x8"
  -
    input:
      bytes: [ 0x37, 0xf0, 0x01, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insert d15, d0, d15, #0, #0x1"
  -
    input:
      bytes: [ 0xee, 0x11 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jnz d15, #0x22"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x96, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x12c"
  -
    input:
      bytes: [ 0x37, 0x0f, 0x62, 0xf6 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "extr.u d15, d15, #0xc, #0x2"
  -
    input:
      bytes: [ 0x7d, 0x24, 0x04, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq.a a4, a2, #0x8"
  -
    input:
      bytes: [ 0x3b, 0x50, 0x07, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d0, #0x75"
  -
    input:
      bytes: [ 0xda, 0x5b ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d15, #0x5b"
  -
    input:
      bytes: [ 0xd9, 0xff, 0xa0, 0xea ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#-0x5460"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x2a, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x1ac"
  -
    input:
      bytes: [ 0x5f, 0x0f, 0x38, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d15, d0, #0x70"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x05, 0xfa ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0xbf6"
  -
    input:
      bytes: [ 0x80, 0xf2 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.d d2, a15"
  -
    input:
      bytes: [ 0x82, 0x07 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d7, #0"
  -
    input:
      bytes: [ 0x37, 0x00, 0x62, 0xfe ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "extr.u d15, d0, #0x1c, #0x2"
  -
    input:
      bytes: [ 0xee, 0x0c ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jnz d15, #0x18"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x71, 0x0a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x14e2"
  -
    input:
      bytes: [ 0x8b, 0x00, 0x02, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add d15, d0, #0x20"
  -
    input:
      bytes: [ 0x02, 0x40 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d0, d4"
  -
    input:
      bytes: [ 0x8c, 0x4a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ld.h d15, [a4]#0x14"
  -
    input:
      bytes: [ 0x0f, 0x49, 0x10, 0x90 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sha d9, d9, d4"
  -
    input:
      bytes: [ 0x37, 0x04, 0x48, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "extr d0, d4, #0, #0x8"
  -
    input:
      bytes: [ 0x1d, 0x00, 0x17, 0x01 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #0x22e"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x6f, 0xfe ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x322"
  -
    input:
      bytes: [ 0x91, 0x40, 0x88, 0x4f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "movh.a a4, #0xf884"
  -
    input:
      bytes: [ 0x3b, 0x00, 0x10, 0x40 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d4, #0x100"
  -
    input:
      bytes: [ 0xd9, 0x55, 0x5c, 0x0a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a5, [a5]#-0x5be4"
  -
    input:
      bytes: [ 0x60, 0x14 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.a a4, d1"
  -
    input:
      bytes: [ 0x46, 0x03 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "not d3"
  -
    input:
      bytes: [ 0x8b, 0x0f, 0x20, 0xf2 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ne d15, d15, #0"
  -
    input:
      bytes: [ 0x37, 0xf0, 0x03, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insert d15, d0, d15, #0, #0x3"
  -
    input:
      bytes: [ 0x8b, 0x1a, 0x60, 0xf3 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "max.u d15, d10, #0x1"
  -
    input:
      bytes: [ 0x8f, 0x0a, 0x02, 0xf1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "and d15, d10, #0x20"
  -
    input:
      bytes: [ 0x2e, 0x1b ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz.t d15, #0x1, #0x16"
  -
    input:
      bytes: [ 0x8f, 0x00, 0x21, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sha d0, d0, #0x10"
  -
    input:
      bytes: [ 0xbb, 0x00, 0x68, 0xf9 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.u d15, #0x9680"
  -
    input:
      bytes: [ 0xd9, 0xff, 0x00, 0x40 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#0x100"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x11, 0x11 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x2222"
  -
    input:
      bytes: [ 0xf6, 0x02 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jnz d0, #0x4"
  -
    input:
      bytes: [ 0x6f, 0x09, 0x15, 0x80 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jnz.t d9, #0, #0x2a"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x06, 0x05 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0xa0c"
  -
    input:
      bytes: [ 0x82, 0x24 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d4, #0x2"
  -
    input:
      bytes: [ 0x6d, 0x00, 0xda, 0x03 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x7b4"
  -
    input:
      bytes: [ 0x02, 0xf3 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d3, d15"
  -
    input:
      bytes: [ 0x16, 0xfb ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "and d15, #0xfb"
  -
    input:
      bytes: [ 0x1d, 0x00, 0x03, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #0x6"
  -
    input:
      bytes: [ 0x91, 0x20, 0x00, 0xf8 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "movh.a a15, #0x8002"
  -
    input:
      bytes: [ 0xb7, 0x04, 0x08, 0xfc ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insert d15, d4, #0, #0x18, #0x8"
  -
    input:
      bytes: [ 0x7b, 0x80, 0x2c, 0x04 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "movh d0, #0x42c8"
  -
    input:
      bytes: [ 0x76, 0xf7 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz d15, #0xe"
  -
    input:
      bytes: [ 0x6d, 0x00, 0xa5, 0x21 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x434a"
  -
    input:
      bytes: [ 0xd9, 0x44, 0x0c, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a4, [a4]#0xc"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x5e, 0xfc ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x744"
  -
    input:
      bytes: [ 0xd9, 0x22, 0xa4, 0xba ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a2, [a2]#-0x551c"
  -
    input:
      bytes: [ 0xd9, 0x44, 0x08, 0xc0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a4, [a4]#0x308"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x0f, 0xf6 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x13e2"
  -
    input:
      bytes: [ 0x3b, 0x80, 0x00, 0x10 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d1, #0x8"
  -
    input:
      bytes: [ 0x37, 0x04, 0xe8, 0x1b ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "extr.u d1, d4, #0x17, #0x8"
  -
    input:
      bytes: [ 0xfe, 0xe3 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne d15, d14, #0x26"
  -
    input:
      bytes: [ 0xd9, 0x55, 0xc0, 0x87 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a5, [a5]#0x7e00"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x75, 0x2a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x1ab16"
  -
    input:
      bytes: [ 0xee, 0x04 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jnz d15, #0x8"
  -
    input:
      bytes: [ 0x8f, 0xff, 0x83, 0x21 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "xor d2, d15, #0x3f"
  -
    input:
      bytes: [ 0x7b, 0x00, 0x12, 0xf4 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "movh d15, #0x4120"
  -
    input:
      bytes: [ 0x2e, 0x4a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz.t d15, #0x4, #0x14"
  -
    input:
      bytes: [ 0x6d, 0xff, 0xf4, 0x4b ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x16818"
  -
    input:
      bytes: [ 0x91, 0x40, 0x00, 0x27 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "movh.a a2, #0x7004"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x07, 0x01 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x20e"
  -
    input:
      bytes: [ 0xb7, 0x00, 0x01, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insert d0, d0, #0, #0, #0x1"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x22, 0xfe ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x3bc"
  -
    input:
      bytes: [ 0x0b, 0x08, 0x10, 0x21 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ne d2, d8, d0"
  -
    input:
      bytes: [ 0x88, 0xaf ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ld.h d15, [a15]#0x14"
  -
    input:
      bytes: [ 0x37, 0x0f, 0xe7, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "extr.u d15, d15, #0x1, #0x7"
  -
    input:
      bytes: [ 0xbb, 0xe0, 0x3c, 0x4b ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.u d4, #0xb3ce"
  -
    input:
      bytes: [ 0xdf, 0x1f, 0x70, 0x80 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne d15, #0x1, #0xe0"
  -
    input:
      bytes: [ 0x8c, 0x42 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ld.h d15, [a4]#0x4"
  -
    input:
      bytes: [ 0x26, 0xfa ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "and d10, d15"
  -
    input:
      bytes: [ 0xdf, 0x04, 0xfb, 0x7f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d4, #0, #-0xa"
  -
    input:
      bytes: [ 0x6f, 0x1f, 0x12, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz.t d15, #0x1, #0x24"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x2b, 0xf6 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x13aa"
  -
    input:
      bytes: [ 0x3b, 0x80, 0x05, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d0, #0x58"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x26, 0x11 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x224c"
  -
    input:
      bytes: [ 0x7b, 0x00, 0x00, 0xf4 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "movh d15, #0x4000"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x56, 0x10 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x20ac"
  -
    input:
      bytes: [ 0x01, 0x45, 0x30, 0xf4 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ge.a d15, a5, a4"
  -
    input:
      bytes: [ 0x1d, 0xff, 0xd7, 0xfd ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #-0x452"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x84, 0x01 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x308"
  -
    input:
      bytes: [ 0x6e, 0x10 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz d15, #0x20"
  -
    input:
      bytes: [ 0x0f, 0x0a, 0x80, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "and d15, d10, d0"
  -
    input:
      bytes: [ 0x61, 0xff, 0x02, 0xd9 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "fcall #-0x4dfc"
  -
    input:
      bytes: [ 0x3c, 0x30 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #0x60"
  -
    input:
      bytes: [ 0xab, 0xf0, 0x1f, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "cadd d0, d0, d0, #-0x1"
  -
    input:
      bytes: [ 0x6e, 0x3e ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz d15, #0x7c"
  -
    input:
      bytes: [ 0xba, 0x0f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "eq d15, d15, #0"
  -
    input:
      bytes: [ 0xb7, 0x4f, 0x08, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insert d15, d15, #0x4, #0, #0x8"
  -
    input:
      bytes: [ 0x02, 0x5f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d15, d5"
  -
    input:
      bytes: [ 0xee, 0x90 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jnz d15, #-0xe0"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x50, 0x11 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x22a0"
  -
    input:
      bytes: [ 0x02, 0x9d ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d13, d9"
  -
    input:
      bytes: [ 0x1d, 0x00, 0xa0, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #0x140"
  -
    input:
      bytes: [ 0x76, 0xdb ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz d13, #0x16"
  -
    input:
      bytes: [ 0x6d, 0x00, 0xb7, 0x03 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x76e"
  -
    input:
      bytes: [ 0x37, 0xf0, 0x03, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insert d0, d0, d15, #0, #0x3"
  -
    input:
      bytes: [ 0x8b, 0x0d, 0x00, 0xf4 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "and.eq d15, d13, #0"
  -
    input:
      bytes: [ 0x61, 0xff, 0x94, 0xd8 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "fcall #-0x4ed8"
  -
    input:
      bytes: [ 0x6d, 0xff, 0xac, 0xfd ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x4a8"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x36, 0x0e ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x1c6c"
  -
    input:
      bytes: [ 0x0b, 0x93, 0x00, 0x02 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "and.eq d0, d3, d9"
  -
    input:
      bytes: [ 0x09, 0xf0, 0x3c, 0xfa ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ld.q d0, [a15]#-0x4"
  -
    input:
      bytes: [ 0x3c, 0x05 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #0xa"
  -
    input:
      bytes: [ 0x0b, 0x04, 0x10, 0xf1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ne d15, d4, d0"
  -
    input:
      bytes: [ 0x02, 0xf2 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d2, d15"
  -
    input:
      bytes: [ 0xb7, 0x7f, 0x03, 0xfe ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insert d15, d15, #0x7, #0x1c, #0x3"
  -
    input:
      bytes: [ 0xdf, 0x1f, 0xfb, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne d15, #0x1, #-0xa"
  -
    input:
      bytes: [ 0x8b, 0x08, 0x00, 0x22 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "eq d2, d8, #0"
  -
    input:
      bytes: [ 0x42, 0x08 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add d8, d0"
  -
    input:
      bytes: [ 0x49, 0xa7, 0x00, 0x0a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a7, [sp]#0"
  -
    input:
      bytes: [ 0x6d, 0xff, 0xae, 0xfe ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x2a4"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x69, 0x02 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x4d2"
  -
    input:
      bytes: [ 0x6d, 0xff, 0xb8, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x90"
  -
    input:
      bytes: [ 0x4b, 0xf0, 0x51, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "div.f d15, d0, d15"
  -
    input:
      bytes: [ 0x6d, 0xff, 0xa1, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0xbe"
  -
    input:
      bytes: [ 0xd9, 0xff, 0xcc, 0xaa ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#-0x5174"
  -
    input:
      bytes: [ 0x8b, 0x70, 0x00, 0xf3 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "min d15, d0, #0x7"
  -
    input:
      bytes: [ 0xbf, 0xa0, 0xf6, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jlt.u d0, #0xa, #-0x14"
  -
    input:
      bytes: [ 0x94, 0xf4 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ld.h d4, [a15]"
  -
    input:
      bytes: [ 0x46, 0x01 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "not d1"
  -
    input:
      bytes: [ 0x0b, 0x02, 0x10, 0xf1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ne d15, d2, d0"
  -
    input:
      bytes: [ 0xd9, 0xff, 0x10, 0x10 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#0x50"
  -
    input:
      bytes: [ 0x4b, 0xbc, 0x51, 0x40 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "div.f d4, d12, d11"
  -
    input:
      bytes: [ 0xda, 0x69 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d15, #0x69"
  -
    input:
      bytes: [ 0xdf, 0x2d, 0x0b, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d13, #0x2, #0x16"
  -
    input:
      bytes: [ 0x02, 0x0f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d15, d0"
  -
    input:
      bytes: [ 0x3f, 0x0f, 0xf2, 0x7f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jlt d15, d0, #-0x1c"
  -
    input:
      bytes: [ 0x6d, 0xff, 0xbf, 0xfd ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x482"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x77, 0x02 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x4ee"
  -
    input:
      bytes: [ 0x37, 0x0f, 0x02, 0xf2 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insert d15, d15, d0, #0x4, #0x2"
  -
    input:
      bytes: [ 0x61, 0xff, 0x26, 0xd9 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "fcall #-0x4db4"
  -
    input:
      bytes: [ 0x8f, 0xf4, 0x0f, 0xf1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "and d15, d4, #0xff"
  -
    input:
      bytes: [ 0x9b, 0x34, 0x42, 0x4a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "addih d4, d4, #0xa423"
  -
    input:
      bytes: [ 0x01, 0xf4, 0x20, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sub.a a15, a4, a15"
  -
    input:
      bytes: [ 0x01, 0xc0, 0x00, 0x26 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "addsc.a a2, a12, d0, #0"
  -
    input:
      bytes: [ 0x89, 0xff, 0xba, 0x08 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "st.h [a15]#0x3a, d15"
  -
    input:
      bytes: [ 0x8e, 0x87 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jlez d8, #0xe"
  -
    input:
      bytes: [ 0x3b, 0xc0, 0x06, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d0, #0x6c"
  -
    input:
      bytes: [ 0x40, 0xd4 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.aa a4, a13"
  -
    input:
      bytes: [ 0x7b, 0x60, 0x61, 0xf4 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "movh d15, #0x4616"
  -
    input:
      bytes: [ 0xa0, 0xf4 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.a a4, #0xf"
  -
    input:
      bytes: [ 0x37, 0xf0, 0x83, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insert d15, d0, d15, #0x1, #0x3"
  -
    input:
      bytes: [ 0xa6, 0x30 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "or d0, d3"
  -
    input:
      bytes: [ 0x09, 0xff, 0xe2, 0x08 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ld.hu d15, [a15]#0x22"
  -
    input:
      bytes: [ 0x37, 0x05, 0x68, 0xf4 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "extr.u d15, d5, #0x8, #0x8"
  -
    input:
      bytes: [ 0x8f, 0xf8, 0x00, 0x01 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "and d0, d8, #0xf"
  -
    input:
      bytes: [ 0x8b, 0x48, 0x60, 0xf3 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "max.u d15, d8, #0x4"
  -
    input:
      bytes: [ 0x4b, 0xf0, 0x11, 0x42 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "div.u e4, d0, d15"
  -
    input:
      bytes: [ 0x6d, 0x00, 0xd0, 0x02 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x5a0"
  -
    input:
      bytes: [ 0xbb, 0x00, 0xc2, 0x1b ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.u d1, #0xbc20"
  -
    input:
      bytes: [ 0x49, 0x24, 0x3e, 0x2a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a4, [a2]#0xbe"
  -
    input:
      bytes: [ 0x8f, 0x19, 0x40, 0xf1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "or d15, d9, #0x1"
  -
    input:
      bytes: [ 0xae, 0x75 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jnz.t d15, #0x7, #0xa"
  -
    input:
      bytes: [ 0x3f, 0xf8, 0x07, 0x80 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jlt.u d8, d15, #0xe"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x16, 0x4c ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x167d4"
  -
    input:
      bytes: [ 0xb7, 0x0f, 0x01, 0x80 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insert d8, d15, #0, #0, #0x1"
  -
    input:
      bytes: [ 0x49, 0xae, 0x13, 0x0a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a14, [sp]#0x13"
  -
    input:
      bytes: [ 0x0b, 0x23, 0x10, 0x48 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov e4, d3, d2"
  -
    input:
      bytes: [ 0x8f, 0x10, 0x00, 0x01 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "and d0, d0, #0x1"
  -
    input:
      bytes: [ 0xa6, 0x20 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "or d0, d2"
  -
    input:
      bytes: [ 0x91, 0x10, 0x00, 0x25 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "movh.a a2, #0x5001"
  -
    input:
      bytes: [ 0x4b, 0x0f, 0x11, 0x02 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "div.u e0, d15, d0"
  -
    input:
      bytes: [ 0xe2, 0x10 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mul d0, d1"
  -
    input:
      bytes: [ 0x0b, 0x60, 0xc0, 0xa0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "subx d10, d0, d6"
  -
    input:
      bytes: [ 0x02, 0x0c ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d12, d0"
  -
    input:
      bytes: [ 0x76, 0x12 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz d1, #0x4"
  -
    input:
      bytes: [ 0x91, 0x00, 0x00, 0xf8 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "movh.a a15, #0x8000"
  -
    input:
      bytes: [ 0x02, 0xf6 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d6, d15"
  -
    input:
      bytes: [ 0xb7, 0x00, 0x81, 0x01 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insert d0, d0, #0, #0x3, #0x1"
  -
    input:
      bytes: [ 0x8f, 0x2a, 0x40, 0xa1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "or d10, d10, #0x2"
  -
    input:
      bytes: [ 0x3b, 0xe0, 0x02, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d0, #0x2e"
  -
    input:
      bytes: [ 0xfc, 0x5e ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "loop a5, #-0x4"
  -
    input:
      bytes: [ 0x26, 0x51 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "and d1, d5"
  -
    input:
      bytes: [ 0x3b, 0xb0, 0x00, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d0, #0xb"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x2c, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x1a8"
  -
    input:
      bytes: [ 0x92, 0x30 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add d0, d15, #0x3"
  -
    input:
      bytes: [ 0xa2, 0x0f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sub d15, d0"
  -
    input:
      bytes: [ 0x3c, 0x11 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #0x22"
  -
    input:
      bytes: [ 0x3e, 0x0a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d15, d0, #0x14"
  -
    input:
      bytes: [ 0x3c, 0x1e ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #0x3c"
  -
    input:
      bytes: [ 0xfe, 0x01 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne d15, d0, #0x22"
  -
    input:
      bytes: [ 0x0b, 0x1d, 0x00, 0xf2 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "and.eq d15, d13, d1"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x95, 0x02 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x52a"
  -
    input:
      bytes: [ 0x6d, 0xff, 0xf9, 0x2b ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x1a80e"
  -
    input:
      bytes: [ 0xb7, 0x1a, 0x81, 0xa4 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insert d10, d10, #0x1, #0x9, #0x1"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x66, 0x35 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x19534"
  -
    input:
      bytes: [ 0x4b, 0x12, 0x01, 0x22 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "div e2, d2, d1"
  -
    input:
      bytes: [ 0x06, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sh d0, #-0x1"
  -
    input:
      bytes: [ 0x37, 0x0f, 0x68, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "extr.u d15, d15, #0, #0x8"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x87, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x10e"
  -
    input:
      bytes: [ 0x07, 0x57, 0xff, 0xcf ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "xor.t d12, d7, #0x1f, d5, #0x1f"
  -
    input:
      bytes: [ 0xc2, 0xf4 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add d4, #-0x1"
  -
    input:
      bytes: [ 0xf6, 0x06 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jnz d0, #0xc"
  -
    input:
      bytes: [ 0x8f, 0xff, 0x83, 0x81 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "xor d8, d15, #0x3f"
  -
    input:
      bytes: [ 0x3b, 0x50, 0xeb, 0x56 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d5, #0x6eb5"
  -
    input:
      bytes: [ 0xd9, 0x22, 0x2c, 0x61 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a2, [a2]#0x11ac"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x0c, 0xfc ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x7e8"
  -
    input:
      bytes: [ 0x37, 0x0f, 0xe1, 0xf2 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "extr.u d15, d15, #0x5, #0x1"
  -
    input:
      bytes: [ 0x49, 0x2e, 0x0a, 0x0a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a14, [a2]#0xa"
  -
    input:
      bytes: [ 0x7e, 0x02 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne d15, d0, #0x4"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x23, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x1ba"
  -
    input:
      bytes: [ 0xc6, 0x21 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "xor d1, d2"
  -
    input:
      bytes: [ 0x5f, 0x0f, 0xd3, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d15, d0, #0x1a6"
  -
    input:
      bytes: [ 0x8c, 0xa2 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ld.h d15, [sp]#0x4"
  -
    input:
      bytes: [ 0x6e, 0xc8 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz d15, #-0x70"
  -
    input:
      bytes: [ 0xb7, 0x0f, 0x08, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insert d15, d15, #0, #0, #0x8"
  -
    input:
      bytes: [ 0x3b, 0x00, 0x03, 0x40 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d4, #0x30"
  -
    input:
      bytes: [ 0x01, 0xef, 0x30, 0xf4 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ge.a d15, a15, a14"
  -
    input:
      bytes: [ 0x09, 0xdf, 0xe4, 0x08 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ld.hu d15, [a13]#0x24"
  -
    input:
      bytes: [ 0x37, 0xf0, 0x02, 0xf2 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insert d15, d0, d15, #0x4, #0x2"
  -
    input:
      bytes: [ 0x89, 0x4f, 0xa0, 0x08 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "st.h [a4]#0x20, d15"
  -
    input:
      bytes: [ 0x8f, 0x0a, 0x48, 0xa1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "or d10, d10, #0x80"
  -
    input:
      bytes: [ 0x37, 0xf0, 0x81, 0xf1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insert d15, d0, d15, #0x3, #0x1"
  -
    input:
      bytes: [ 0x4b, 0xdf, 0x41, 0x40 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mul.f d4, d15, d13"
  -
    input:
      bytes: [ 0x3c, 0xeb ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #-0x2a"
  -
    input:
      bytes: [ 0x49, 0xa4, 0x14, 0x0a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a4, [sp]#0x14"
  -
    input:
      bytes: [ 0x89, 0x40, 0xc1, 0x03 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "cachei.wi [a4+]#0x1"
  -
    input:
      bytes: [ 0x49, 0xf2, 0x40, 0x08 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ldmst [a15]#0, e2"
  -
    input:
      bytes: [ 0x9b, 0xf9, 0xff, 0x97 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "addih d9, d9, #0x7fff"
  -
    input:
      bytes: [ 0x5f, 0x0a, 0x0b, 0x80 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne d10, d0, #0x16"
  -
    input:
      bytes: [ 0x9a, 0x18 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add d15, d8, #0x1"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x81, 0x11 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x2302"
  -
    input:
      bytes: [ 0xa2, 0xf2 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sub d2, d15"
  -
    input:
      bytes: [ 0x5f, 0x0f, 0x9f, 0x80 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne d15, d0, #0x13e"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x96, 0x06 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0xd2c"
  -
    input:
      bytes: [ 0x6f, 0x04, 0x04, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz.t d4, #0, #0x8"
  -
    input:
      bytes: [ 0x96, 0x08 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "or d15, #0x8"
  -
    input:
      bytes: [ 0x8f, 0x3a, 0x00, 0xf1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "and d15, d10, #0x3"
  -
    input:
      bytes: [ 0xab, 0xfa, 0x1f, 0xaa ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "cadd d10, d10, d10, #-0x1"
  -
    input:
      bytes: [ 0x09, 0xf4, 0xb6, 0x08 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ld.h d4, [a15]#0x36"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x29, 0x2c ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x1a7ae"
  -
    input:
      bytes: [ 0x5f, 0x0f, 0xf9, 0x7f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d15, d0, #-0xe"
  -
    input:
      bytes: [ 0x02, 0x59 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d9, d5"
  -
    input:
      bytes: [ 0x3b, 0x50, 0x06, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d0, #0x65"
  -
    input:
      bytes: [ 0x6e, 0x75 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz d15, #0xea"
  -
    input:
      bytes: [ 0x6d, 0x00, 0xa0, 0x06 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0xd40"
  -
    input:
      bytes: [ 0x02, 0x42 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d2, d4"
  -
    input:
      bytes: [ 0x6e, 0xca ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz d15, #-0x6c"
  -
    input:
      bytes: [ 0x8b, 0x03, 0x00, 0xf5 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "or.ne d15, d3, #0"
  -
    input:
      bytes: [ 0x7e, 0x0f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne d15, d0, #0x1e"
  -
    input:
      bytes: [ 0xd9, 0xff, 0x00, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#0"
  -
    input:
      bytes: [ 0x37, 0xf0, 0x87, 0x04 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insert d0, d0, d15, #0x9, #0x7"
  -
    input:
      bytes: [ 0x3f, 0xf8, 0x04, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jlt d8, d15, #0x8"
  -
    input:
      bytes: [ 0xda, 0x0c ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d15, #0xc"
  -
    input:
      bytes: [ 0xa6, 0x51 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "or d1, d5"
  -
    input:
      bytes: [ 0x4b, 0x52, 0x51, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "div.f d0, d2, d5"
  -
    input:
      bytes: [ 0x82, 0x1c ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d12, #0x1"
  -
    input:
      bytes: [ 0xc5, 0x02, 0x3f, 0x10 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a2, #0x7f"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x5d, 0xfb ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x946"
  -
    input:
      bytes: [ 0xa0, 0x0f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.a a15, #0"
  -
    input:
      bytes: [ 0xca, 0x70 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "caddn d0, d15, #0x7"
  -
    input:
      bytes: [ 0x8f, 0xc3, 0x1f, 0x10 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sh d1, d3, #-0x4"
  -
    input:
      bytes: [ 0x01, 0x2e, 0x20, 0xf4 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lt.a d15, a14, a2"
  -
    input:
      bytes: [ 0x6e, 0xf6 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz d15, #-0x14"
  -
    input:
      bytes: [ 0x3c, 0x24 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #0x48"
  -
    input:
      bytes: [ 0x09, 0xff, 0xe0, 0x08 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ld.hu d15, [a15]#0x20"
  -
    input:
      bytes: [ 0x37, 0x00, 0x62, 0xfa ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "extr.u d15, d0, #0x14, #0x2"
  -
    input:
      bytes: [ 0x3c, 0x4f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #0x9e"
  -
    input:
      bytes: [ 0x3c, 0x56 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #0xac"
  -
    input:
      bytes: [ 0xf6, 0x14 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jnz d1, #0x8"
  -
    input:
      bytes: [ 0x3f, 0xfb, 0xf2, 0x7f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jlt d11, d15, #-0x1c"
  -
    input:
      bytes: [ 0x3b, 0xa0, 0x03, 0x40 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d4, #0x3a"
  -
    input:
      bytes: [ 0x8f, 0x2a, 0x20, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sha d15, d10, #0x2"
  -
    input:
      bytes: [ 0x0b, 0x89, 0x80, 0xf1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "min d15, d9, d8"
  -
    input:
      bytes: [ 0xbc, 0xf4 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz.a a15, #0x8"
  -
    input:
      bytes: [ 0x6d, 0x00, 0xcc, 0x02 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x598"
  -
    input:
      bytes: [ 0xda, 0x44 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d15, #0x44"
  -
    input:
      bytes: [ 0xa0, 0x0e ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.a a14, #0"
  -
    input:
      bytes: [ 0x53, 0x4f, 0x20, 0x40 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mul d4, d15, #0x4"
  -
    input:
      bytes: [ 0xc2, 0x1d ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add d13, #0x1"
  -
    input:
      bytes: [ 0x37, 0x00, 0x68, 0x40 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "extr.u d4, d0, #0, #0x8"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x96, 0xf9 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0xcd4"
  -
    input:
      bytes: [ 0x6d, 0x00, 0xc4, 0x17 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x2f88"
  -
    input:
      bytes: [ 0x77, 0x23, 0x00, 0x0e ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "dextr d0, d3, d2, #0x1c"
  -
    input:
      bytes: [ 0x3c, 0x12 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #0x24"
  -
    input:
      bytes: [ 0x82, 0x14 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d4, #0x1"
  -
    input:
      bytes: [ 0x09, 0xa0, 0xc4, 0x08 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ld.hu d0, [sp]#0x4"
  -
    input:
      bytes: [ 0x4b, 0x0f, 0x71, 0x01 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ftouz d0, d15"
  -
    input:
      bytes: [ 0x80, 0x2f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.d d15, a2"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x00, 0x01 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x200"
  -
    input:
      bytes: [ 0xda, 0x41 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d15, #0x41"
  -
    input:
      bytes: [ 0x8b, 0x61, 0x09, 0xf1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "rsub d15, d1, #0x96"
  -
    input:
      bytes: [ 0x0b, 0x37, 0x80, 0xf2 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "or.ne d15, d7, d3"
  -
    input:
      bytes: [ 0x91, 0x30, 0x00, 0x3f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "movh.a a3, #0xf003"
  -
    input:
      bytes: [ 0x4b, 0x1f, 0x01, 0x22 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "div e2, d15, d1"
  -
    input:
      bytes: [ 0x6d, 0x00, 0xeb, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x1d6"
  -
    input:
      bytes: [ 0x92, 0x1b ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add d11, d15, #0x1"
  -
    input:
      bytes: [ 0x42, 0xf9 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add d9, d15"
  -
    input:
      bytes: [ 0x1d, 0xff, 0xb3, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #-0x9a"
  -
    input:
      bytes: [ 0x8f, 0xff, 0x83, 0x11 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "xor d1, d15, #0x3f"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x0c, 0x03 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x618"
  -
    input:
      bytes: [ 0x7b, 0x00, 0x18, 0x14 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "movh d1, #0x4180"
  -
    input:
      bytes: [ 0x6f, 0x6a, 0x08, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz.t d10, #0x6, #0x10"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x65, 0x05 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0xaca"
  -
    input:
      bytes: [ 0x4b, 0x12, 0x51, 0x10 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "div.f d1, d2, d1"
  -
    input:
      bytes: [ 0xda, 0x32 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d15, #0x32"
  -
    input:
      bytes: [ 0xa6, 0x82 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "or d2, d8"
  -
    input:
      bytes: [ 0x06, 0x1f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sh d15, #0x1"
  -
    input:
      bytes: [ 0x37, 0x0f, 0x01, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insert d15, d15, d0, #0x1e, #0x1"
  -
    input:
      bytes: [ 0x4b, 0x01, 0x51, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "div.f d0, d1, d0"
  -
    input:
      bytes: [ 0x6d, 0x00, 0xe2, 0x03 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x7c4"
  -
    input:
      bytes: [ 0xd9, 0xff, 0x00, 0x0c ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#-0x4000"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x04, 0xf9 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0xdf8"
  -
    input:
      bytes: [ 0x40, 0x2d ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.aa a13, a2"
  -
    input:
      bytes: [ 0xb7, 0x3f, 0x08, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insert d15, d15, #0x3, #0, #0x8"
  -
    input:
      bytes: [ 0x4b, 0x08, 0x61, 0x01 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "utof d0, d8"
  -
    input:
      bytes: [ 0x8f, 0x0a, 0x42, 0xa1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "or d10, d10, #0x20"
  -
    input:
      bytes: [ 0x1d, 0xff, 0xee, 0xfd ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #-0x424"
  -
    input:
      bytes: [ 0x60, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.a a15, d15"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x87, 0x02 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x50e"
  -
    input:
      bytes: [ 0x40, 0x4c ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.aa a12, a4"
  -
    input:
      bytes: [ 0x37, 0x00, 0x48, 0x40 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "extr d4, d0, #0, #0x8"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x76, 0xfe ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x314"
  -
    input:
      bytes: [ 0xd9, 0x44, 0x28, 0xa6 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a4, [a4]#0x62a8"
  -
    input:
      bytes: [ 0x02, 0x96 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d6, d9"
  -
    input:
      bytes: [ 0x8b, 0x0f, 0x20, 0x42 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ne d4, d15, #0"
  -
    input:
      bytes: [ 0xc6, 0xf2 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "xor d2, d15"
  -
    input:
      bytes: [ 0x4e, 0x03 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jgtz d0, #0x6"
  -
    input:
      bytes: [ 0x49, 0xa7, 0x08, 0x0a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a7, [sp]#0x8"
  -
    input:
      bytes: [ 0x4e, 0xa8 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jgtz d10, #0x10"
  -
    input:
      bytes: [ 0x3b, 0xf0, 0x26, 0xf1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d15, #0x126f"
  -
    input:
      bytes: [ 0xdf, 0x0d, 0x16, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d13, #0, #0x2c"
  -
    input:
      bytes: [ 0x0f, 0xf0, 0xa0, 0x50 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "or d5, d0, d15"
  -
    input:
      bytes: [ 0x1d, 0xff, 0xc9, 0xfd ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #-0x46e"
  -
    input:
      bytes: [ 0x9b, 0xe1, 0xcb, 0x14 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "addih d1, d1, #0x4cbe"
  -
    input:
      bytes: [ 0x1d, 0x00, 0x60, 0x01 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #0x2c0"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x3a, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x18c"
  -
    input:
      bytes: [ 0xff, 0x1f, 0xfc, 0x7f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jge d15, #0x1, #-0x8"
  -
    input:
      bytes: [ 0xd9, 0x55, 0xb8, 0xba ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a5, [a5]#-0x5508"
  -
    input:
      bytes: [ 0x80, 0x4f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.d d15, a4"
  -
    input:
      bytes: [ 0x96, 0x10 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "or d15, #0x10"
  -
    input:
      bytes: [ 0xf6, 0x49 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jnz d4, #0x12"
  -
    input:
      bytes: [ 0xdf, 0x10, 0xf6, 0x7f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d0, #0x1, #-0x14"
  -
    input:
      bytes: [ 0xf6, 0x2e ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jnz d2, #0x1c"
  -
    input:
      bytes: [ 0x06, 0xaf ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sh d15, #-0x6"
  -
    input:
      bytes: [ 0x8b, 0x0f, 0x20, 0x12 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ne d1, d15, #0"
  -
    input:
      bytes: [ 0x40, 0xcf ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.aa a15, a12"
  -
    input:
      bytes: [ 0x3b, 0x60, 0x06, 0x10 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d1, #0x66"
  -
    input:
      bytes: [ 0xd9, 0xff, 0xdc, 0xa2 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#0x2e9c"
  -
    input:
      bytes: [ 0x3f, 0xe8, 0xe6, 0x7f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jlt d8, d14, #-0x34"
  -
    input:
      bytes: [ 0xc2, 0xfc ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add d12, #-0x1"
  -
    input:
      bytes: [ 0x09, 0xff, 0xba, 0x08 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ld.h d15, [a15]#0x3a"
  -
    input:
      bytes: [ 0xbb, 0x00, 0x68, 0x19 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.u d1, #0x9680"
  -
    input:
      bytes: [ 0xac, 0x48 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "st.h [a4]#0x10, d15"
  -
    input:
      bytes: [ 0x02, 0xa0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d0, d10"
  -
    input:
      bytes: [ 0xd9, 0xff, 0xf4, 0xca ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#-0x50cc"
  -
    input:
      bytes: [ 0x3c, 0x14 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #0x28"
  -
    input:
      bytes: [ 0x2e, 0x4c ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz.t d15, #0x4, #0x18"
  -
    input:
      bytes: [ 0xd9, 0x55, 0x64, 0xba ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a5, [a5]#-0x591c"
  -
    input:
      bytes: [ 0x5f, 0x0f, 0x74, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d15, d0, #0xe8"
  -
    input:
      bytes: [ 0xd9, 0x55, 0x88, 0xca ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a5, [a5]#-0x54f8"
  -
    input:
      bytes: [ 0x0b, 0xb1, 0x00, 0xf2 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "and.eq d15, d1, d11"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x14, 0x08 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x1028"
  -
    input:
      bytes: [ 0x01, 0xf9, 0x00, 0x46 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "addsc.a a4, a15, d9, #0"
  -
    input:
      bytes: [ 0x37, 0xf0, 0x02, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insert d15, d0, d15, #0, #0x2"
  -
    input:
      bytes: [ 0xda, 0x6f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d15, #0x6f"
  -
    input:
      bytes: [ 0x5f, 0x0f, 0xbf, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d15, d0, #0x17e"
  -
    input:
      bytes: [ 0x8f, 0x1f, 0x00, 0xa0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sh d10, d15, #0x1"
  -
    input:
      bytes: [ 0x3c, 0xf9 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #-0xe"
  -
    input:
      bytes: [ 0x6d, 0x00, 0xa9, 0x0f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x1f52"
  -
    input:
      bytes: [ 0x0b, 0x45, 0x10, 0x88 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov e8, d5, d4"
  -
    input:
      bytes: [ 0x0b, 0x01, 0x10, 0x48 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov e4, d1, d0"
  -
    input:
      bytes: [ 0x9b, 0x81, 0xb9, 0x14 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "addih d1, d1, #0x4b98"
  -
    input:
      bytes: [ 0xc2, 0x20 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add d0, #0x2"
  -
    input:
      bytes: [ 0xdf, 0x7f, 0xf6, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne d15, #0x7, #-0x14"
  -
    input:
      bytes: [ 0x26, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "and d0, d15"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x04, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x1f8"
  -
    input:
      bytes: [ 0x61, 0xff, 0x35, 0xd9 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "fcall #-0x4d96"
  -
    input:
      bytes: [ 0xf6, 0x22 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jnz d2, #0x4"
  -
    input:
      bytes: [ 0x09, 0xdf, 0xc8, 0x08 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ld.hu d15, [a13]#0x8"
  -
    input:
      bytes: [ 0x49, 0x4f, 0x04, 0x1a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a4]#0x44"
  -
    input:
      bytes: [ 0x37, 0x0f, 0xe2, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "extr.u d15, d15, #0x1, #0x2"
  -
    input:
      bytes: [ 0xdf, 0x0f, 0x37, 0x7f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d15, #0, #-0x192"
  -
    input:
      bytes: [ 0x37, 0x0f, 0x61, 0xf1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "extr.u d15, d15, #0x2, #0x1"
  -
    input:
      bytes: [ 0xd9, 0xff, 0x38, 0x30 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#0xf8"
  -
    input:
      bytes: [ 0x8f, 0xc8, 0x3f, 0x40 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sha d4, d8, #-0x4"
  -
    input:
      bytes: [ 0x61, 0x00, 0x0e, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "fcall #0x1c"
  -
    input:
      bytes: [ 0x67, 0xff, 0xbf, 0xbf ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insn.t d11, d15, #0x1f, d15, #0x1f"
  -
    input:
      bytes: [ 0xce, 0x03 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jgez d0, #0x6"
  -
    input:
      bytes: [ 0x91, 0x10, 0x00, 0x48 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "movh.a a4, #0x8001"
  -
    input:
      bytes: [ 0x2d, 0x0f, 0x20, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jli a15"
  -
    input:
      bytes: [ 0x96, 0x01 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "or d15, #0x1"
  -
    input:
      bytes: [ 0x2d, 0x02, 0x00, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "calli a2"
  -
    input:
      bytes: [ 0x82, 0x50 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d0, #0x5"
  -
    input:
      bytes: [ 0xb7, 0x7f, 0x08, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insert d15, d15, #0x7, #0, #0x8"
  -
    input:
      bytes: [ 0x2e, 0x3c ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz.t d15, #0x3, #0x18"
  -
    input:
      bytes: [ 0x76, 0x47 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz d4, #0xe"
  -
    input:
      bytes: [ 0x8f, 0x2a, 0x40, 0x71 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "or d7, d10, #0x2"
  -
    input:
      bytes: [ 0x6e, 0xfc ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz d15, #-0x8"
  -
    input:
      bytes: [ 0xd2, 0x06 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov e6, #0"
  -
    input:
      bytes: [ 0x12, 0x09 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add d9, d15, d0"
  -
    input:
      bytes: [ 0x10, 0xc4 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "addsc.a a4, a12, d15, #0"
  -
    input:
      bytes: [ 0xc2, 0xf3 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add d3, #-0x1"
  -
    input:
      bytes: [ 0x6f, 0x0f, 0xff, 0x7f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz.t d15, #0, #-0x2"
  -
    input:
      bytes: [ 0x86, 0x4f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sha d15, #0x4"
  -
    input:
      bytes: [ 0xdf, 0x00, 0xc5, 0x7f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d0, #0, #-0x76"
  -
    input:
      bytes: [ 0x02, 0x8f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d15, d8"
  -
    input:
      bytes: [ 0xac, 0xa3 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "st.h [sp]#0x6, d15"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x6d, 0x06 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0xcda"
  -
    input:
      bytes: [ 0x91, 0x00, 0x00, 0x10 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "movh.a a1, #0"
  -
    input:
      bytes: [ 0xd9, 0xee, 0x84, 0x70 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a14, [a14]#0x9c4"
  -
    input:
      bytes: [ 0x8b, 0x60, 0x09, 0xf1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "rsub d15, d0, #0x96"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x3c, 0x0c ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x1878"
  -
    input:
      bytes: [ 0x6d, 0xff, 0xe8, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x30"
  -
    input:
      bytes: [ 0x6d, 0x00, 0xc8, 0x0e ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x1d90"
  -
    input:
      bytes: [ 0xb4, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "st.h [a15], d15"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x92, 0x2c ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x1a6dc"
  -
    input:
      bytes: [ 0xee, 0xbf ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jnz d15, #-0x82"
  -
    input:
      bytes: [ 0x53, 0x80, 0x20, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mul d15, d0, #0x8"
  -
    input:
      bytes: [ 0x86, 0x24 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sha d4, #0x2"
  -
    input:
      bytes: [ 0xa0, 0x02 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.a a2, #0"
  -
    input:
      bytes: [ 0xee, 0x40 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jnz d15, #0x80"
  -
    input:
      bytes: [ 0xda, 0x04 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d15, #0x4"
  -
    input:
      bytes: [ 0x5e, 0x3c ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne d15, #0x3, #0x18"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x02, 0x0e ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x1c04"
  -
    input:
      bytes: [ 0xd9, 0x55, 0x2c, 0xda ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a5, [a5]#-0x5c94"
  -
    input:
      bytes: [ 0x49, 0xf5, 0x3c, 0x0a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a5, [a15]#0x3c"
  -
    input:
      bytes: [ 0x02, 0x6e ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d14, d6"
  -
    input:
      bytes: [ 0x49, 0xa6, 0x00, 0x0a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a6, [sp]#0"
  -
    input:
      bytes: [ 0x03, 0x6d, 0x0a, 0xc0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "madd d12, d0, d13, d6"
  -
    input:
      bytes: [ 0x7f, 0xf0, 0xc3, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jge.u d0, d15, #-0x7a"
  -
    input:
      bytes: [ 0x6e, 0x1a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz d15, #0x34"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x49, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x16e"
  -
    input:
      bytes: [ 0xee, 0xfb ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jnz d15, #-0xa"
  -
    input:
      bytes: [ 0x61, 0xff, 0xda, 0xd9 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "fcall #-0x4c4c"
  -
    input:
      bytes: [ 0xc2, 0xf2 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add d2, #-0x1"
  -
    input:
      bytes: [ 0xa2, 0x98 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sub d8, d9"
  -
    input:
      bytes: [ 0x37, 0x0f, 0x62, 0xf3 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "extr.u d15, d15, #0x6, #0x2"
  -
    input:
      bytes: [ 0x3c, 0xc4 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #-0x78"
  -
    input:
      bytes: [ 0x91, 0x40, 0x00, 0xf7 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "movh.a a15, #0x7004"
  -
    input:
      bytes: [ 0xdf, 0x0b, 0x11, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d11, #0, #0x22"
  -
    input:
      bytes: [ 0x8f, 0xf0, 0x01, 0x50 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sh d5, d0, #0x1f"
  -
    input:
      bytes: [ 0x06, 0x24 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sh d4, #0x2"
  -
    input:
      bytes: [ 0x02, 0xa5 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d5, d10"
  -
    input:
      bytes: [ 0xce, 0x96 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jgez d9, #0xc"
  -
    input:
      bytes: [ 0x37, 0xf3, 0x08, 0x34 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insert d3, d3, d15, #0x8, #0x8"
  -
    input:
      bytes: [ 0xda, 0x30 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d15, #0x30"
  -
    input:
      bytes: [ 0x49, 0xa6, 0x08, 0x0a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a6, [sp]#0x8"
  -
    input:
      bytes: [ 0x6f, 0x0f, 0xf3, 0x7f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz.t d15, #0, #-0x1a"
  -
    input:
      bytes: [ 0x6d, 0xff, 0xb5, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x96"
  -
    input:
      bytes: [ 0x6d, 0xff, 0xeb, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x2a"
  -
    input:
      bytes: [ 0x15, 0xd0, 0xc0, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lducx #0xd0003fc0"
  -
    input:
      bytes: [ 0x37, 0xf0, 0x03, 0xf3 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insert d15, d0, d15, #0x6, #0x3"
  -
    input:
      bytes: [ 0x4b, 0x0f, 0x61, 0xf1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "utof d15, d15"
  -
    input:
      bytes: [ 0x8f, 0x3c, 0x00, 0x41 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "and d4, d12, #0x3"
  -
    input:
      bytes: [ 0x5f, 0x9f, 0xef, 0x80 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne d15, d9, #0x1de"
  -
    input:
      bytes: [ 0x3e, 0xed ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d15, d14, #0x1a"
  -
    input:
      bytes: [ 0x3e, 0x0b ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d15, d0, #0x16"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x88, 0x03 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x710"
  -
    input:
      bytes: [ 0x61, 0xff, 0x4d, 0xda ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "fcall #-0x4b66"
  -
    input:
      bytes: [ 0x09, 0xd4, 0xae, 0x08 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ld.h d4, [a13]#0x2e"
  -
    input:
      bytes: [ 0x6d, 0x00, 0xbc, 0x11 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x2378"
  -
    input:
      bytes: [ 0x42, 0x21 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add d1, d2"
  -
    input:
      bytes: [ 0x3b, 0x50, 0x06, 0x20 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d2, #0x65"
  -
    input:
      bytes: [ 0xd9, 0xff, 0x18, 0x96 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#0x6258"
  -
    input:
      bytes: [ 0x3a, 0x64 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "eq d15, d4, d6"
  -
    input:
      bytes: [ 0xda, 0x25 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d15, #0x25"
  -
    input:
      bytes: [ 0x8b, 0x01, 0x00, 0xf4 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "and.eq d15, d1, #0"
  -
    input:
      bytes: [ 0x0b, 0x39, 0x90, 0x02 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "or.lt d0, d9, d3"
  -
    input:
      bytes: [ 0x8b, 0x0f, 0x02, 0x40 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add d4, d15, #0x20"
  -
    input:
      bytes: [ 0xab, 0x10, 0xa0, 0x9f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "seln d9, d15, d0, #0x1"
  -
    input:
      bytes: [ 0xa6, 0x53 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "or d3, d5"
  -
    input:
      bytes: [ 0x6d, 0xff, 0xa8, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0xb0"
  -
    input:
      bytes: [ 0x9b, 0xf6, 0xff, 0x67 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "addih d6, d6, #0x7fff"
  -
    input:
      bytes: [ 0x3f, 0xac, 0xf8, 0x7f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jlt d12, d10, #-0x10"
  -
    input:
      bytes: [ 0xab, 0xf8, 0x1f, 0x88 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "cadd d8, d8, d8, #-0x1"
  -
    input:
      bytes: [ 0x6f, 0x3a, 0xec, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jnz.t d10, #0x3, #-0x28"
  -
    input:
      bytes: [ 0x3b, 0x80, 0x07, 0x60 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d6, #0x78"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x64, 0x2b ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x1a938"
  -
    input:
      bytes: [ 0xda, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d15, #0"
  -
    input:
      bytes: [ 0xab, 0x69, 0x80, 0x91 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sel d9, d1, d9, #0x6"
  -
    input:
      bytes: [ 0x37, 0x0f, 0x50, 0x20 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "extr d2, d15, #0, #0x10"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x34, 0x02 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x468"
  -
    input:
      bytes: [ 0x10, 0xc5 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "addsc.a a5, a12, d15, #0"
  -
    input:
      bytes: [ 0x94, 0xdf ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ld.h d15, [a13]"
  -
    input:
      bytes: [ 0x1d, 0x00, 0xe1, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #0x1c2"
  -
    input:
      bytes: [ 0xff, 0x1f, 0xf1, 0x7f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jge d15, #0x1, #-0x1e"
  -
    input:
      bytes: [ 0xd9, 0xff, 0x28, 0x10 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#0x68"
  -
    input:
      bytes: [ 0x0b, 0x19, 0x80, 0x22 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "or.ne d2, d9, d1"
  -
    input:
      bytes: [ 0x3f, 0x0f, 0x04, 0x80 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jlt.u d15, d0, #0x8"
  -
    input:
      bytes: [ 0x40, 0xd2 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.aa a2, a13"
  -
    input:
      bytes: [ 0x37, 0x0f, 0xe8, 0xfb ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "extr.u d15, d15, #0x17, #0x8"
  -
    input:
      bytes: [ 0x53, 0xcf, 0x20, 0x10 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mul d1, d15, #0xc"
  -
    input:
      bytes: [ 0x3f, 0xf0, 0xf3, 0x7f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jlt d0, d15, #-0x1a"
  -
    input:
      bytes: [ 0xda, 0x19 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d15, #0x19"
  -
    input:
      bytes: [ 0x67, 0x45, 0x80, 0x5f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ins.t d5, d5, #0, d4, #0x1f"
  -
    input:
      bytes: [ 0x5f, 0x0f, 0x2f, 0x80 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne d15, d0, #0x5e"
  -
    input:
      bytes: [ 0xd9, 0xff, 0x80, 0xc9 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#-0x6500"
  -
    input:
      bytes: [ 0x37, 0x04, 0x68, 0xf4 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "extr.u d15, d4, #0x8, #0x8"
  -
    input:
      bytes: [ 0x0b, 0x71, 0x50, 0x50 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "addc d5, d1, d7"
  -
    input:
      bytes: [ 0xda, 0x43 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d15, #0x43"
  -
    input:
      bytes: [ 0x60, 0x52 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.a a2, d5"
  -
    input:
      bytes: [ 0x4b, 0x00, 0x61, 0x01 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "utof d0, d0"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x67, 0x4c ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x16732"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x65, 0x11 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x22ca"
  -
    input:
      bytes: [ 0x0b, 0x4f, 0x20, 0x01 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lt d0, d15, d4"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x17, 0x03 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x62e"
  -
    input:
      bytes: [ 0x80, 0x55 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.d d5, a5"
  -
    input:
      bytes: [ 0xef, 0x4f, 0x04, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz.t d15, #0x14, #0x8"
  -
    input:
      bytes: [ 0x9b, 0x34, 0x98, 0x4d ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "addih d4, d4, #0xd983"
  -
    input:
      bytes: [ 0x89, 0xf2, 0xb4, 0x08 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "st.h [a15]#0x34, d2"
  -
    input:
      bytes: [ 0xef, 0x8f, 0x0a, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz.t d15, #0x18, #0x14"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x97, 0x3e ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x182d2"
  -
    input:
      bytes: [ 0x37, 0x0f, 0x48, 0x20 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "extr d2, d15, #0, #0x8"
  -
    input:
      bytes: [ 0x10, 0xd2 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "addsc.a a2, a13, d15, #0"
  -
    input:
      bytes: [ 0x9b, 0xef, 0xcb, 0xf4 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "addih d15, d15, #0x4cbe"
  -
    input:
      bytes: [ 0xee, 0x1d ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jnz d15, #0x3a"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x13, 0x0f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x1e26"
  -
    input:
      bytes: [ 0x5f, 0x0f, 0x2c, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d15, d0, #0x58"
  -
    input:
      bytes: [ 0x49, 0xa5, 0x14, 0x0a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a5, [sp]#0x14"
  -
    input:
      bytes: [ 0xb0, 0x05 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add.a a5, #0"
  -
    input:
      bytes: [ 0xd9, 0xff, 0xc0, 0x05 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#0x5c00"
  -
    input:
      bytes: [ 0x91, 0x00, 0x00, 0x47 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "movh.a a4, #0x7000"
  -
    input:
      bytes: [ 0x37, 0x0a, 0x68, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "extr.u d0, d10, #0, #0x8"
  -
    input:
      bytes: [ 0x2e, 0x3e ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz.t d15, #0x3, #0x1c"
  -
    input:
      bytes: [ 0xf6, 0x8a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jnz d8, #0x14"
  -
    input:
      bytes: [ 0xd9, 0x55, 0x40, 0x9a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a5, [a5]#-0x59c0"
  -
    input:
      bytes: [ 0x3b, 0x00, 0x10, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d15, #0x100"
  -
    input:
      bytes: [ 0xd9, 0x55, 0x0c, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a5, [a5]#0xc"
  -
    input:
      bytes: [ 0x3c, 0x0b ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #0x16"
  -
    input:
      bytes: [ 0x49, 0xa4, 0x00, 0x4a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a4, [sp]#0x100"
  -
    input:
      bytes: [ 0x6d, 0x00, 0xab, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x156"
  -
    input:
      bytes: [ 0x7e, 0x06 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne d15, d0, #0xc"
  -
    input:
      bytes: [ 0x9d, 0x00, 0x00, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ja #0"
  -
    input:
      bytes: [ 0x26, 0x31 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "and d1, d3"
  -
    input:
      bytes: [ 0xa0, 0x74 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.a a4, #0x7"
  -
    input:
      bytes: [ 0x01, 0xc9, 0x00, 0xf6 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "addsc.a a15, a12, d9, #0"
  -
    input:
      bytes: [ 0xd9, 0xff, 0x34, 0x20 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#0xb4"
  -
    input:
      bytes: [ 0x91, 0x10, 0x88, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "movh.a a15, #0xf881"
  -
    input:
      bytes: [ 0xfe, 0x08 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne d15, d0, #0x30"
  -
    input:
      bytes: [ 0x37, 0xf0, 0x02, 0xf3 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insert d15, d0, d15, #0x6, #0x2"
  -
    input:
      bytes: [ 0xd9, 0x55, 0x14, 0xea ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a5, [a5]#-0x5c6c"
  -
    input:
      bytes: [ 0x3b, 0x60, 0x06, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d0, #0x66"
  -
    input:
      bytes: [ 0x49, 0xa6, 0x0c, 0x0a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a6, [sp]#0xc"
  -
    input:
      bytes: [ 0x6b, 0x0f, 0x61, 0x41 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "madd.f d4, d1, d15, d0"
  -
    input:
      bytes: [ 0xda, 0x03 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d15, #0x3"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x81, 0xf7 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x10fe"
  -
    input:
      bytes: [ 0xda, 0x42 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d15, #0x42"
  -
    input:
      bytes: [ 0xda, 0x64 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d15, #0x64"
  -
    input:
      bytes: [ 0x4e, 0x0d ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jgtz d0, #0x1a"
  -
    input:
      bytes: [ 0x09, 0xaf, 0xc4, 0x08 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ld.hu d15, [sp]#0x4"
  -
    input:
      bytes: [ 0xd9, 0x22, 0xc0, 0x07 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a2, [a2]#0x7c00"
  -
    input:
      bytes: [ 0xa2, 0x54 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sub d4, d5"
  -
    input:
      bytes: [ 0x37, 0xf0, 0x0c, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insert d15, d0, d15, #0, #0xc"
  -
    input:
      bytes: [ 0x3c, 0x17 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #0x2e"
  -
    input:
      bytes: [ 0x76, 0x07 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz d0, #0xe"
  -
    input:
      bytes: [ 0x0b, 0x71, 0xa0, 0xf2 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "or.lt.u d15, d1, d7"
  -
    input:
      bytes: [ 0xae, 0x03 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jnz.t d15, #0, #0x6"
  -
    input:
      bytes: [ 0xb0, 0x4e ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add.a a14, #0x4"
  -
    input:
      bytes: [ 0x8f, 0x0f, 0x1f, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sh d0, d15, #-0x10"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x7b, 0x4c ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x1670a"
  -
    input:
      bytes: [ 0x6f, 0x5f, 0x21, 0x80 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jnz.t d15, #0x5, #0x42"
  -
    input:
      bytes: [ 0x16, 0x01 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "and d15, #0x1"
  -
    input:
      bytes: [ 0x6e, 0x0b ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz d15, #0x16"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x8b, 0xe1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x3cea"
  -
    input:
      bytes: [ 0xff, 0x1f, 0xf5, 0x7f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jge d15, #0x1, #-0x16"
  -
    input:
      bytes: [ 0xac, 0xf9 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "st.h [a15]#0x12, d15"
  -
    input:
      bytes: [ 0x7e, 0x05 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne d15, d0, #0xa"
  -
    input:
      bytes: [ 0xd9, 0xff, 0x0c, 0x96 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#0x624c"
  -
    input:
      bytes: [ 0x10, 0xc2 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "addsc.a a2, a12, d15, #0"
  -
    input:
      bytes: [ 0x4b, 0x0f, 0x41, 0xf1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "itof d15, d15"
  -
    input:
      bytes: [ 0x8a, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "cadd d15, d15, #-0x1"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x3f, 0xfa ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0xb82"
  -
    input:
      bytes: [ 0x09, 0x40, 0x8e, 0x08 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ld.h d0, [a4]#0xe"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x2f, 0x04 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x85e"
  -
    input:
      bytes: [ 0x3b, 0x50, 0x04, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d0, #0x45"
  -
    input:
      bytes: [ 0x8b, 0x7f, 0x01, 0x40 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add d4, d15, #0x17"
  -
    input:
      bytes: [ 0xd9, 0xff, 0xee, 0xe2 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#0x2fae"
  -
    input:
      bytes: [ 0xd9, 0xff, 0xa4, 0xba ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#-0x551c"
  -
    input:
      bytes: [ 0x8b, 0x1f, 0x00, 0x22 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "eq d2, d15, #0x1"
  -
    input:
      bytes: [ 0x46, 0x04 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "not d4"
  -
    input:
      bytes: [ 0xd9, 0xaa, 0x40, 0x85 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea sp, [sp]#0x5600"
  -
    input:
      bytes: [ 0x76, 0x92 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz d9, #0x4"
  -
    input:
      bytes: [ 0xbd, 0x0e, 0x28, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz.a a14, #0x50"
  -
    input:
      bytes: [ 0x94, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ld.h d15, [a15]"
  -
    input:
      bytes: [ 0x5f, 0x0f, 0xbc, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d15, d0, #0x178"
  -
    input:
      bytes: [ 0x49, 0xff, 0x00, 0x1a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#0x40"
  -
    input:
      bytes: [ 0xd9, 0xff, 0x44, 0x20 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#0x484"
  -
    input:
      bytes: [ 0xda, 0x34 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d15, #0x34"
  -
    input:
      bytes: [ 0x89, 0xff, 0xb4, 0x08 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "st.h [a15]#0x34, d15"
  -
    input:
      bytes: [ 0x7f, 0xf0, 0x03, 0x80 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jge.u d0, d15, #0x6"
  -
    input:
      bytes: [ 0x3f, 0xf9, 0xf7, 0x7f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jlt d9, d15, #-0x12"
  -
    input:
      bytes: [ 0x7b, 0x00, 0xf0, 0x13 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "movh d1, #0x3f00"
  -
    input:
      bytes: [ 0x61, 0xff, 0xbd, 0xd8 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "fcall #-0x4e86"
  -
    input:
      bytes: [ 0xce, 0x77 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jgez d7, #0xe"
  -
    input:
      bytes: [ 0xde, 0x28 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne d15, #0x2, #0x30"
  -
    input:
      bytes: [ 0xee, 0xfc ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jnz d15, #-0x8"
  -
    input:
      bytes: [ 0xb7, 0x01, 0x02, 0x20 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insert d2, d1, #0, #0, #0x2"
  -
    input:
      bytes: [ 0x4b, 0x00, 0x41, 0xf1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "itof d15, d0"
  -
    input:
      bytes: [ 0x8f, 0x1a, 0x40, 0xf1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "or d15, d10, #0x1"
  -
    input:
      bytes: [ 0x2e, 0x23 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz.t d15, #0x2, #0x6"
  -
    input:
      bytes: [ 0x3c, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #0x0"
  -
    input:
      bytes: [ 0x6d, 0xff, 0xab, 0xf9 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0xcaa"
  -
    input:
      bytes: [ 0x80, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.d d0, a15"
  -
    input:
      bytes: [ 0x7e, 0x17 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne d15, d1, #0xe"
  -
    input:
      bytes: [ 0x09, 0xf0, 0xb4, 0x08 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ld.h d0, [a15]#0x34"
  -
    input:
      bytes: [ 0x6d, 0x00, 0xe2, 0x19 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x33c4"
  -
    input:
      bytes: [ 0xda, 0x01 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d15, #0x1"
  -
    input:
      bytes: [ 0x37, 0xf0, 0x81, 0xf3 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insert d15, d0, d15, #0x7, #0x1"
  -
    input:
      bytes: [ 0x4b, 0xf2, 0x51, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "div.f d15, d2, d15"
  -
    input:
      bytes: [ 0xa0, 0x72 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.a a2, #0x7"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x48, 0x02 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x490"
  -
    input:
      bytes: [ 0xac, 0xa1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "st.h [sp]#0x2, d15"
  -
    input:
      bytes: [ 0xd9, 0xff, 0xfc, 0x01 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#0x1c3c"
  -
    input:
      bytes: [ 0xd9, 0xff, 0x30, 0x20 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#0xb0"
  -
    input:
      bytes: [ 0x3e, 0x0e ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d15, d0, #0x1c"
  -
    input:
      bytes: [ 0xd9, 0x22, 0xb8, 0x61 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a2, [a2]#0x19b8"
  -
    input:
      bytes: [ 0x76, 0x15 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz d1, #0xa"
  -
    input:
      bytes: [ 0x2e, 0x27 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz.t d15, #0x2, #0xe"
  -
    input:
      bytes: [ 0xd9, 0xee, 0x9e, 0x70 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a14, [a14]#0x9de"
  -
    input:
      bytes: [ 0x6b, 0x0e, 0x21, 0xf2 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add.f d15, d2, d14"
  -
    input:
      bytes: [ 0x82, 0x1e ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d14, #0x1"
  -
    input:
      bytes: [ 0x86, 0x21 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sha d1, #0x2"
  -
    input:
      bytes: [ 0x4b, 0x0c, 0x61, 0xf1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "utof d15, d12"
  -
    input:
      bytes: [ 0x10, 0x4f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "addsc.a a15, a4, d15, #0"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x27, 0x38 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x18fb2"
  -
    input:
      bytes: [ 0x37, 0xf0, 0x01, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insert d0, d0, d15, #0, #0x1"
  -
    input:
      bytes: [ 0x76, 0xb6 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz d11, #0xc"
  -
    input:
      bytes: [ 0x49, 0x55, 0x0c, 0x0a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a5, [a5]#0xc"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x0a, 0xfe ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x3ec"
  -
    input:
      bytes: [ 0x6d, 0x00, 0xdb, 0x04 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x9b6"
  -
    input:
      bytes: [ 0x5f, 0x8f, 0xc7, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d15, d8, #0x18e"
  -
    input:
      bytes: [ 0xda, 0x09 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d15, #0x9"
  -
    input:
      bytes: [ 0x37, 0x0f, 0x6c, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "extr.u d15, d15, #0, #0xc"
  -
    input:
      bytes: [ 0x37, 0x04, 0x68, 0xfc ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "extr.u d15, d4, #0x18, #0x8"
  -
    input:
      bytes: [ 0x6f, 0x2f, 0x12, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz.t d15, #0x2, #0x24"
  -
    input:
      bytes: [ 0x0f, 0x10, 0x10, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sha d0, d0, d1"
  -
    input:
      bytes: [ 0x6e, 0x02 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz d15, #0x4"
  -
    input:
      bytes: [ 0x09, 0xf0, 0xb6, 0x08 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ld.h d0, [a15]#0x36"
  -
    input:
      bytes: [ 0x5f, 0x0f, 0xd6, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d15, d0, #0x1ac"
  -
    input:
      bytes: [ 0xc2, 0xfe ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add d14, #-0x1"
  -
    input:
      bytes: [ 0x6e, 0x08 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz d15, #0x10"
  -
    input:
      bytes: [ 0x10, 0x2f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "addsc.a a15, a2, d15, #0"
  -
    input:
      bytes: [ 0x6e, 0x0e ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz d15, #0x1c"
  -
    input:
      bytes: [ 0xda, 0x08 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d15, #0x8"
  -
    input:
      bytes: [ 0xbd, 0x0f, 0x1a, 0x80 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jnz.a a15, #0x34"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x01, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x1fe"
  -
    input:
      bytes: [ 0x3c, 0x1f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #0x3e"
  -
    input:
      bytes: [ 0x6d, 0x00, 0xab, 0x02 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x556"
  -
    input:
      bytes: [ 0x5f, 0x8f, 0x21, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d15, d8, #0x42"
  -
    input:
      bytes: [ 0x5f, 0x0f, 0xb9, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d15, d0, #0x172"
  -
    input:
      bytes: [ 0x73, 0xd7, 0x0a, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mul d0, d7, d13"
  -
    input:
      bytes: [ 0x8b, 0x0f, 0x20, 0x32 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ne d3, d15, #0"
  -
    input:
      bytes: [ 0x2e, 0x0c ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz.t d15, #0, #0x18"
  -
    input:
      bytes: [ 0xd9, 0x55, 0x98, 0xca ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a5, [a5]#-0x54e8"
  -
    input:
      bytes: [ 0xd9, 0x44, 0x28, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a4, [a4]#0x28"
  -
    input:
      bytes: [ 0x09, 0x40, 0x84, 0x08 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ld.h d0, [a4]#0x4"
  -
    input:
      bytes: [ 0xfc, 0x2e ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "loop a2, #-0x4"
  -
    input:
      bytes: [ 0xea, 0x69 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "cmovn d9, d15, #0x6"
  -
    input:
      bytes: [ 0x3c, 0xf1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #-0x1e"
  -
    input:
      bytes: [ 0x3c, 0x48 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #0x90"
  -
    input:
      bytes: [ 0xd9, 0xff, 0x00, 0x06 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#0x6000"
  -
    input:
      bytes: [ 0x7a, 0xe8 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lt d15, d8, d14"
  -
    input:
      bytes: [ 0x60, 0x4f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.a a15, d4"
  -
    input:
      bytes: [ 0x82, 0x09 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d9, #0"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x13, 0xf8 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0xfda"
  -
    input:
      bytes: [ 0xdf, 0x0f, 0xcf, 0x81 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne d15, #0, #0x39e"
  -
    input:
      bytes: [ 0x7f, 0x0e, 0xde, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jge.u d14, d0, #-0x44"
  -
    input:
      bytes: [ 0x3b, 0xa0, 0x07, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d0, #0x7a"
  -
    input:
      bytes: [ 0xd9, 0x55, 0x70, 0x4a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a5, [a5]#-0x5ad0"
  -
    input:
      bytes: [ 0xd9, 0x88, 0x00, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a8, [a8]#0"
  -
    input:
      bytes: [ 0xef, 0x7f, 0x06, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz.t d15, #0x17, #0xc"
  -
    input:
      bytes: [ 0xb0, 0x4f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add.a a15, #0x4"
  -
    input:
      bytes: [ 0x92, 0x19 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add d9, d15, #0x1"
  -
    input:
      bytes: [ 0xd9, 0x55, 0xac, 0xca ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a5, [a5]#-0x54d4"
  -
    input:
      bytes: [ 0x6d, 0xff, 0xb3, 0x2a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x1aa9a"
  -
    input:
      bytes: [ 0x40, 0x45 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.aa a5, a4"
  -
    input:
      bytes: [ 0x01, 0xdd, 0x00, 0xd6 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "addsc.a a13, a13, d13, #0"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x2d, 0x11 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x225a"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x5a, 0xf9 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0xd4c"
  -
    input:
      bytes: [ 0x1d, 0xff, 0x04, 0xfe ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #-0x3f8"
  -
    input:
      bytes: [ 0x20, 0x60 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sub.a sp, #0x60"
  -
    input:
      bytes: [ 0x7f, 0x0f, 0x16, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jge d15, d0, #0x2c"
  -
    input:
      bytes: [ 0xc5, 0xff, 0x00, 0x01 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, #0xf0001000"
  -
    input:
      bytes: [ 0xd9, 0xff, 0xa8, 0xda ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#-0x5498"
  -
    input:
      bytes: [ 0x37, 0x0f, 0x01, 0xf1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insert d15, d15, d0, #0x2, #0x1"
  -
    input:
      bytes: [ 0x76, 0x4a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz d4, #0x14"
  -
    input:
      bytes: [ 0x3f, 0x0f, 0xe8, 0x7f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jlt d15, d0, #-0x30"
  -
    input:
      bytes: [ 0xd9, 0x55, 0x8c, 0xda ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a5, [a5]#-0x54b4"
  -
    input:
      bytes: [ 0x8b, 0x01, 0xa0, 0x10 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "addc d1, d1, #0"
  -
    input:
      bytes: [ 0x09, 0xdf, 0xe2, 0x08 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ld.hu d15, [a13]#0x22"
  -
    input:
      bytes: [ 0xd9, 0xee, 0x2e, 0xe0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a14, [a14]#0x3ae"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x18, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x30"
  -
    input:
      bytes: [ 0x3b, 0x80, 0x3e, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d0, #0x3e8"
  -
    input:
      bytes: [ 0xbb, 0xd0, 0xcc, 0x0c ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.u d0, #0xcccd"
  -
    input:
      bytes: [ 0x3e, 0x05 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d15, d0, #0xa"
  -
    input:
      bytes: [ 0xee, 0xfd ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jnz d15, #-0x6"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x10, 0x04 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x820"
  -
    input:
      bytes: [ 0xc6, 0x1f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "xor d15, d1"
  -
    input:
      bytes: [ 0x42, 0x80 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add d0, d8"
  -
    input:
      bytes: [ 0xee, 0xfa ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jnz d15, #-0xc"
  -
    input:
      bytes: [ 0xa6, 0x54 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "or d4, d5"
  -
    input:
      bytes: [ 0x91, 0x40, 0x00, 0xa7 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "movh.a sp, #0x7004"
  -
    input:
      bytes: [ 0x6f, 0x5a, 0x06, 0x80 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jnz.t d10, #0x5, #0xc"
  -
    input:
      bytes: [ 0xd9, 0x22, 0xc0, 0x0b ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a2, [a2]#-0x4400"
  -
    input:
      bytes: [ 0x3e, 0x08 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d15, d0, #0x10"
  -
    input:
      bytes: [ 0x37, 0xf0, 0x02, 0x0a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insert d0, d0, d15, #0x14, #0x2"
  -
    input:
      bytes: [ 0x3c, 0x1a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #0x34"
  -
    input:
      bytes: [ 0x02, 0xa7 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d7, d10"
  -
    input:
      bytes: [ 0xda, 0x05 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d15, #0x5"
  -
    input:
      bytes: [ 0x3b, 0x60, 0xff, 0x1f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d1, #-0xa"
  -
    input:
      bytes: [ 0x4e, 0xf7 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jgtz d15, #0xe"
  -
    input:
      bytes: [ 0x3c, 0x3f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #0x7e"
  -
    input:
      bytes: [ 0x37, 0x0f, 0x50, 0x40 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "extr d4, d15, #0, #0x10"
  -
    input:
      bytes: [ 0x91, 0x00, 0x00, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "movh.a a0, #0"
  -
    input:
      bytes: [ 0x09, 0xf8, 0xb4, 0x08 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ld.h d8, [a15]#0x34"
  -
    input:
      bytes: [ 0x3b, 0x20, 0x05, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d0, #0x52"
  -
    input:
      bytes: [ 0xdf, 0x02, 0x21, 0x80 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne d2, #0, #0x42"
  -
    input:
      bytes: [ 0x6f, 0x20, 0xf8, 0x7f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz.t d0, #0x2, #-0x10"
  -
    input:
      bytes: [ 0x6e, 0x17 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz d15, #0x2e"
  -
    input:
      bytes: [ 0x3c, 0x06 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #0xc"
  -
    input:
      bytes: [ 0x6f, 0x29, 0x1b, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz.t d9, #0x2, #0x36"
  -
    input:
      bytes: [ 0x3b, 0x00, 0x01, 0x50 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d5, #0x10"
  -
    input:
      bytes: [ 0x82, 0x03 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d3, #0"
  -
    input:
      bytes: [ 0xc2, 0xf5 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add d5, #-0x1"
  -
    input:
      bytes: [ 0xd9, 0xff, 0x60, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#0x420"
  -
    input:
      bytes: [ 0x7f, 0xf0, 0x06, 0x80 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jge.u d0, d15, #0xc"
  -
    input:
      bytes: [ 0xee, 0x06 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jnz d15, #0xc"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x94, 0x2a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x1aad8"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x08, 0xfc ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x7f0"
  -
    input:
      bytes: [ 0x37, 0xf3, 0x08, 0x30 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insert d3, d3, d15, #0, #0x8"
  -
    input:
      bytes: [ 0x6d, 0x00, 0xdf, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x1be"
  -
    input:
      bytes: [ 0xd9, 0xff, 0xc8, 0x41 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#0x1d08"
  -
    input:
      bytes: [ 0xd9, 0x22, 0x08, 0x21 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a2, [a2]#0x1088"
  -
    input:
      bytes: [ 0x82, 0x10 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d0, #0x1"
  -
    input:
      bytes: [ 0xab, 0x0f, 0xa2, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "seln d15, d0, d15, #0x20"
  -
    input:
      bytes: [ 0xfe, 0xdb ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne d15, d13, #0x36"
  -
    input:
      bytes: [ 0x37, 0xf0, 0x03, 0x0c ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insert d0, d0, d15, #0x18, #0x3"
  -
    input:
      bytes: [ 0xd9, 0x22, 0x48, 0xe1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a2, [a2]#0x1788"
  -
    input:
      bytes: [ 0x1d, 0x00, 0x6e, 0x01 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #0x2dc"
  -
    input:
      bytes: [ 0xdf, 0x1f, 0x29, 0x80 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne d15, #0x1, #0x52"
  -
    input:
      bytes: [ 0x8f, 0x78, 0x00, 0xf1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "and d15, d8, #0x7"
  -
    input:
      bytes: [ 0x4b, 0xf2, 0x51, 0x20 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "div.f d2, d2, d15"
  -
    input:
      bytes: [ 0x82, 0x0a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d10, #0"
  -
    input:
      bytes: [ 0x37, 0x4f, 0x9f, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insert d15, d15, d4, #0x1, #0x1f"
  -
    input:
      bytes: [ 0x3c, 0x28 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #0x50"
  -
    input:
      bytes: [ 0x49, 0xfc, 0x10, 0x0a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a12, [a15]#0x10"
  -
    input:
      bytes: [ 0xfe, 0x09 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne d15, d0, #0x32"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x0d, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x1e6"
  -
    input:
      bytes: [ 0x3b, 0xc0, 0x00, 0x90 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d9, #0xc"
  -
    input:
      bytes: [ 0xda, 0x11 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d15, #0x11"
  -
    input:
      bytes: [ 0x7b, 0xd0, 0x38, 0x01 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "movh d0, #0x138d"
  -
    input:
      bytes: [ 0xd9, 0x55, 0x48, 0x3a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a5, [a5]#-0x5b38"
  -
    input:
      bytes: [ 0xbb, 0xf0, 0xff, 0x2f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.u d2, #0xffff"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x42, 0xfe ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x37c"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x62, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0xc4"
  -
    input:
      bytes: [ 0x76, 0x09 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz d0, #0x12"
  -
    input:
      bytes: [ 0xd9, 0x44, 0x3c, 0xa0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a4, [a4]#0x2bc"
  -
    input:
      bytes: [ 0x3c, 0x43 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #0x86"
  -
    input:
      bytes: [ 0x7f, 0xf0, 0x28, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jge d0, d15, #0x50"
  -
    input:
      bytes: [ 0x37, 0x04, 0x68, 0xf8 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "extr.u d15, d4, #0x10, #0x8"
  -
    input:
      bytes: [ 0x0b, 0xc0, 0xc0, 0xc0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "subx d12, d0, d12"
  -
    input:
      bytes: [ 0x0f, 0x05, 0xd0, 0x11 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "cls d1, d5"
  -
    input:
      bytes: [ 0xd9, 0xff, 0x14, 0x10 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#0x54"
  -
    input:
      bytes: [ 0x0f, 0x31, 0x10, 0x10 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sha d1, d1, d3"
  -
    input:
      bytes: [ 0xc6, 0x3f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "xor d15, d3"
  -
    input:
      bytes: [ 0xa6, 0xf5 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "or d5, d15"
  -
    input:
      bytes: [ 0x6d, 0xff, 0xda, 0xfa ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0xa4c"
  -
    input:
      bytes: [ 0x6d, 0x00, 0xcc, 0x07 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0xf98"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x28, 0xfe ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x3b0"
  -
    input:
      bytes: [ 0x15, 0xd0, 0xc0, 0xe3 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "stlcx #0xd0003f80"
  -
    input:
      bytes: [ 0x61, 0xff, 0x4c, 0xda ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "fcall #-0x4b68"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x27, 0x03 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x64e"
  -
    input:
      bytes: [ 0x37, 0x09, 0x50, 0x90 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "extr d9, d9, #0, #0x10"
  -
    input:
      bytes: [ 0x8c, 0x22 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ld.h d15, [a2]#0x4"
  -
    input:
      bytes: [ 0x76, 0x2a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz d2, #0x14"
  -
    input:
      bytes: [ 0x3f, 0x98, 0xe0, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jlt.u d8, d9, #-0x40"
  -
    input:
      bytes: [ 0x88, 0x22 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ld.h d2, [a15]#0x4"
  -
    input:
      bytes: [ 0x76, 0x85 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz d8, #0xa"
  -
    input:
      bytes: [ 0xaa, 0x10 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "cmov d0, d15, #0x1"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x91, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0xde"
  -
    input:
      bytes: [ 0x2e, 0x22 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz.t d15, #0x2, #0x4"
  -
    input:
      bytes: [ 0xd9, 0xff, 0x3c, 0x0b ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#-0x4fc4"
  -
    input:
      bytes: [ 0x3c, 0x3c ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #0x78"
  -
    input:
      bytes: [ 0x3b, 0x20, 0x03, 0xa0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d10, #0x32"
  -
    input:
      bytes: [ 0x91, 0x20, 0x88, 0x4f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "movh.a a4, #0xf882"
  -
    input:
      bytes: [ 0x8f, 0xff, 0x83, 0xf1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "xor d15, d15, #0x3f"
  -
    input:
      bytes: [ 0x3b, 0x60, 0x09, 0x40 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d4, #0x96"
  -
    input:
      bytes: [ 0x7f, 0x89, 0x04, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jge d9, d8, #0x8"
  -
    input:
      bytes: [ 0x37, 0x0f, 0x70, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "extr.u d15, d15, #0, #0x10"
  -
    input:
      bytes: [ 0x3e, 0x46 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d15, d4, #0xc"
  -
    input:
      bytes: [ 0xd9, 0x22, 0xa8, 0xa1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a2, [a2]#0x1aa8"
  -
    input:
      bytes: [ 0x37, 0x05, 0x68, 0xfc ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "extr.u d15, d5, #0x18, #0x8"
  -
    input:
      bytes: [ 0xd9, 0x11, 0x00, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a1, [a1]#0"
  -
    input:
      bytes: [ 0x0b, 0x45, 0x10, 0xa8 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov e10, d5, d4"
  -
    input:
      bytes: [ 0x06, 0xf4 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sh d4, #-0x1"
  -
    input:
      bytes: [ 0xd9, 0xff, 0x0c, 0x30 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#0xcc"
  -
    input:
      bytes: [ 0xfe, 0x04 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne d15, d0, #0x28"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x9a, 0x07 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0xf34"
  -
    input:
      bytes: [ 0x3b, 0xa0, 0x02, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d0, #0x2a"
  -
    input:
      bytes: [ 0x6f, 0x2f, 0x34, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz.t d15, #0x2, #0x68"
  -
    input:
      bytes: [ 0x6d, 0x00, 0xbd, 0x03 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x77a"
  -
    input:
      bytes: [ 0xd9, 0xff, 0x00, 0x20 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#0x80"
  -
    input:
      bytes: [ 0x53, 0x8f, 0x20, 0xc0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mul d12, d15, #0x8"
  -
    input:
      bytes: [ 0x17, 0x45, 0x80, 0x01 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "dextr d0, d5, d4, d1"
  -
    input:
      bytes: [ 0x02, 0x45 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d5, d4"
  -
    input:
      bytes: [ 0x82, 0x01 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d1, #0"
  -
    input:
      bytes: [ 0xd9, 0x55, 0x60, 0xba ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a5, [a5]#-0x5920"
  -
    input:
      bytes: [ 0xb7, 0x2f, 0x08, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insert d15, d15, #0x2, #0, #0x8"
  -
    input:
      bytes: [ 0x6e, 0x03 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz d15, #0x6"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x60, 0xfc ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x740"
  -
    input:
      bytes: [ 0x37, 0x04, 0x70, 0x40 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "extr.u d4, d4, #0, #0x10"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x93, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0xda"
  -
    input:
      bytes: [ 0xb7, 0x1a, 0x01, 0xa5 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insert d10, d10, #0x1, #0xa, #0x1"
  -
    input:
      bytes: [ 0x4b, 0x1f, 0x01, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "cmp.f d15, d15, d1"
  -
    input:
      bytes: [ 0xdf, 0x1f, 0xfb, 0x7f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d15, #0x1, #-0xa"
  -
    input:
      bytes: [ 0xc2, 0x12 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add d2, #0x1"
  -
    input:
      bytes: [ 0x37, 0x08, 0x70, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "extr.u d0, d8, #0, #0x10"
  -
    input:
      bytes: [ 0xda, 0x31 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d15, #0x31"
  -
    input:
      bytes: [ 0x8b, 0x0f, 0x1d, 0x80 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add d8, d15, #-0x30"
  -
    input:
      bytes: [ 0xd9, 0x55, 0xb4, 0xba ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a5, [a5]#-0x550c"
  -
    input:
      bytes: [ 0x02, 0x82 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d2, d8"
  -
    input:
      bytes: [ 0x76, 0xb2 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz d11, #0x4"
  -
    input:
      bytes: [ 0x61, 0x00, 0x06, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "fcall #0xc"
  -
    input:
      bytes: [ 0xbe, 0x06 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d15, d0, #0x2c"
  -
    input:
      bytes: [ 0x6d, 0xff, 0xfa, 0xe1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x3c0c"
  -
    input:
      bytes: [ 0x3f, 0x20, 0x0e, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jlt d0, d2, #0x1c"
  -
    input:
      bytes: [ 0x8b, 0x1f, 0x03, 0xa1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "rsub d10, d15, #0x31"
  -
    input:
      bytes: [ 0x6d, 0xff, 0xa7, 0xfc ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x6b2"
  -
    input:
      bytes: [ 0x4b, 0xbf, 0x41, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mul.f d15, d15, d11"
  -
    input:
      bytes: [ 0xfe, 0x05 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne d15, d0, #0x2a"
  -
    input:
      bytes: [ 0x06, 0x14 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sh d4, #0x1"
  -
    input:
      bytes: [ 0x82, 0x78 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d8, #0x7"
  -
    input:
      bytes: [ 0xf6, 0xb6 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jnz d11, #0xc"
  -
    input:
      bytes: [ 0x02, 0x80 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d0, d8"
  -
    input:
      bytes: [ 0x3c, 0x39 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #0x72"
  -
    input:
      bytes: [ 0x06, 0x63 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sh d3, #0x6"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x91, 0x03 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x722"
  -
    input:
      bytes: [ 0x01, 0x42, 0x20, 0x20 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sub.a a2, a2, a4"
  -
    input:
      bytes: [ 0x6d, 0xff, 0xc9, 0xf4 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x166e"
  -
    input:
      bytes: [ 0x37, 0x0f, 0x6e, 0xf1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "extr.u d15, d15, #0x2, #0xe"
  -
    input:
      bytes: [ 0x89, 0xaf, 0xb4, 0x08 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "st.h [sp]#0x34, d15"
  -
    input:
      bytes: [ 0x6f, 0x04, 0x0d, 0x80 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jnz.t d4, #0, #0x1a"
  -
    input:
      bytes: [ 0xd9, 0xff, 0x24, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#0x24"
  -
    input:
      bytes: [ 0x4b, 0xa2, 0x41, 0xa0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mul.f d10, d2, d10"
  -
    input:
      bytes: [ 0x3e, 0x14 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d15, d1, #0x8"
  -
    input:
      bytes: [ 0x37, 0x0f, 0x0c, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insert d15, d15, d0, #0, #0xc"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x0b, 0x2a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x1abea"
  -
    input:
      bytes: [ 0x2b, 0x09, 0x00, 0x9f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "cadd d9, d15, d9, d0"
  -
    input:
      bytes: [ 0x8b, 0x0f, 0x01, 0xf1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "rsub d15, d15, #0x10"
  -
    input:
      bytes: [ 0xd9, 0xff, 0xb8, 0xf1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#0x1bf8"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x47, 0xfd ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x572"
  -
    input:
      bytes: [ 0x6f, 0x1f, 0xfc, 0x7f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz.t d15, #0x1, #-0x8"
  -
    input:
      bytes: [ 0xda, 0x40 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d15, #0x40"
  -
    input:
      bytes: [ 0xdf, 0xf0, 0x51, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d0, #-0x1, #0xa2"
  -
    input:
      bytes: [ 0x5e, 0x23 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne d15, #0x2, #0x6"
  -
    input:
      bytes: [ 0x76, 0xcf ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz d12, #0x1e"
  -
    input:
      bytes: [ 0x9b, 0x8f, 0xb9, 0xf4 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "addih d15, d15, #0x4b98"
  -
    input:
      bytes: [ 0x8b, 0x8f, 0x00, 0x60 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add d6, d15, #0x8"
  -
    input:
      bytes: [ 0x7b, 0x00, 0x00, 0x14 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "movh d1, #0x4000"
  -
    input:
      bytes: [ 0x3c, 0x2c ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #0x58"
  -
    input:
      bytes: [ 0x92, 0x39 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add d9, d15, #0x3"
  -
    input:
      bytes: [ 0x5f, 0x8f, 0x07, 0x01 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d15, d8, #0x20e"
  -
    input:
      bytes: [ 0x80, 0x41 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.d d1, a4"
  -
    input:
      bytes: [ 0x92, 0x10 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add d0, d15, #0x1"
  -
    input:
      bytes: [ 0x86, 0x6f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sha d15, #0x6"
  -
    input:
      bytes: [ 0xd9, 0x55, 0x4c, 0x2a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a5, [a5]#-0x5b74"
  -
    input:
      bytes: [ 0xd9, 0x55, 0x50, 0x1a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a5, [a5]#-0x5bb0"
  -
    input:
      bytes: [ 0xee, 0xf2 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jnz d15, #-0x1c"
  -
    input:
      bytes: [ 0xee, 0xeb ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jnz d15, #-0x2a"
  -
    input:
      bytes: [ 0x49, 0xff, 0x0c, 0x0a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#0xc"
  -
    input:
      bytes: [ 0x13, 0xa8, 0x20, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "madd d15, d15, d8, #0xa"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x18, 0x11 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x2230"
  -
    input:
      bytes: [ 0x8b, 0x0f, 0x1d, 0x90 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add d9, d15, #-0x30"
  -
    input:
      bytes: [ 0xc2, 0x18 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add d8, #0x1"
  -
    input:
      bytes: [ 0x2e, 0x2b ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz.t d15, #0x2, #0x16"
  -
    input:
      bytes: [ 0x0f, 0xa1, 0x10, 0x10 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sha d1, d1, d10"
  -
    input:
      bytes: [ 0x32, 0x58 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "rsub d8"
  -
    input:
      bytes: [ 0xba, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "eq d15, d0, #0"
  -
    input:
      bytes: [ 0x6d, 0xff, 0xc5, 0x29 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x1ac76"
  -
    input:
      bytes: [ 0x5f, 0x0f, 0x59, 0x80 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne d15, d0, #0xb2"
  -
    input:
      bytes: [ 0x5e, 0x16 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne d15, #0x1, #0xc"
  -
    input:
      bytes: [ 0x91, 0x40, 0x00, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "movh.a a15, #0xf004"
  -
    input:
      bytes: [ 0x0b, 0x17, 0x80, 0xf2 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "or.ne d15, d7, d1"
  -
    input:
      bytes: [ 0x6d, 0x00, 0xb9, 0x10 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x2172"
  -
    input:
      bytes: [ 0x37, 0x02, 0x68, 0xc0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "extr.u d12, d2, #0, #0x8"
  -
    input:
      bytes: [ 0x1d, 0x00, 0x8c, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #0x118"
  -
    input:
      bytes: [ 0x3b, 0x10, 0x04, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d0, #0x41"
  -
    input:
      bytes: [ 0x49, 0xf5, 0x3e, 0x0a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a5, [a15]#0x3e"
  -
    input:
      bytes: [ 0x9b, 0x3f, 0xa8, 0xf3 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "addih d15, d15, #0x3a83"
  -
    input:
      bytes: [ 0x6e, 0x0d ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz d15, #0x1a"
  -
    input:
      bytes: [ 0x5e, 0xf3 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne d15, #-0x1, #0x6"
  -
    input:
      bytes: [ 0x3c, 0x09 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #0x12"
  -
    input:
      bytes: [ 0x0b, 0x71, 0xd0, 0xb0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "subc d11, d1, d7"
  -
    input:
      bytes: [ 0x0f, 0x02, 0x10, 0x20 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sha d2, d2, d0"
  -
    input:
      bytes: [ 0xc2, 0xf9 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add d9, #-0x1"
  -
    input:
      bytes: [ 0x5f, 0x8f, 0x78, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d15, d8, #0xf0"
  -
    input:
      bytes: [ 0xbc, 0x2c ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz.a a2, #0x18"
  -
    input:
      bytes: [ 0x6b, 0x00, 0x31, 0xf5 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sub.f d15, d5, d0"
  -
    input:
      bytes: [ 0xd9, 0x44, 0xa0, 0xe5 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a4, [a4]#0x5ba0"
  -
    input:
      bytes: [ 0x9a, 0xd4 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add d15, d4, #-0x3"
  -
    input:
      bytes: [ 0x26, 0x10 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "and d0, d1"
  -
    input:
      bytes: [ 0xee, 0x38 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jnz d15, #0x70"
  -
    input:
      bytes: [ 0x91, 0x50, 0x02, 0x2f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "movh.a a2, #0xf025"
  -
    input:
      bytes: [ 0x4b, 0x19, 0x41, 0x10 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mul.f d1, d9, d1"
  -
    input:
      bytes: [ 0xd9, 0x22, 0x92, 0x31 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a2, [a2]#0x18d2"
  -
    input:
      bytes: [ 0xa2, 0x24 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sub d4, d2"
  -
    input:
      bytes: [ 0x1d, 0x00, 0x9c, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #0x138"
  -
    input:
      bytes: [ 0xfc, 0x2c ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "loop a2, #-0x8"
  -
    input:
      bytes: [ 0xee, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jnz d15, #-0x2"
  -
    input:
      bytes: [ 0x3b, 0x60, 0x06, 0x60 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d6, #0x66"
  -
    input:
      bytes: [ 0x01, 0xa0, 0x00, 0xf6 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "addsc.a a15, sp, d0, #0"
  -
    input:
      bytes: [ 0x9b, 0xb0, 0xbf, 0x04 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "addih d0, d0, #0x4bfb"
  -
    input:
      bytes: [ 0x1d, 0x00, 0x18, 0x02 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #0x430"
  -
    input:
      bytes: [ 0x91, 0x30, 0x00, 0x2f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "movh.a a2, #0xf003"
  -
    input:
      bytes: [ 0x6d, 0x00, 0xa1, 0x10 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x2142"
  -
    input:
      bytes: [ 0x7f, 0xf0, 0x08, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jge d0, d15, #0x10"
  -
    input:
      bytes: [ 0x6d, 0x00, 0xae, 0x0c ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x195c"
  -
    input:
      bytes: [ 0xff, 0x14, 0xfc, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jge.u d4, #0x1, #-0x8"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x3a, 0x05 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0xa74"
  -
    input:
      bytes: [ 0xba, 0x0c ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "eq d15, d12, #0"
  -
    input:
      bytes: [ 0x09, 0x4f, 0xc4, 0x08 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ld.hu d15, [a4]#0x4"
  -
    input:
      bytes: [ 0x7d, 0x2f, 0x15, 0x80 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne.a a15, a2, #0x2a"
  -
    input:
      bytes: [ 0x0b, 0x0f, 0xa0, 0xf1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "max d15, d15, d0"
  -
    input:
      bytes: [ 0x3b, 0x30, 0x06, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d0, #0x63"
  -
    input:
      bytes: [ 0x91, 0x40, 0x00, 0xa6 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "movh.a sp, #0x6004"
  -
    input:
      bytes: [ 0x9b, 0x1f, 0x8d, 0xf3 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "addih d15, d15, #0x38d1"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x3b, 0x10 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x2076"
  -
    input:
      bytes: [ 0x61, 0xff, 0x0f, 0xd5 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "fcall #-0x55e2"
  -
    input:
      bytes: [ 0xab, 0x0f, 0x83, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sel d15, d0, d15, #0x30"
  -
    input:
      bytes: [ 0x6d, 0x00, 0xa0, 0x11 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x2340"
  -
    input:
      bytes: [ 0xbe, 0x08 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d15, d0, #0x30"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x89, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0xee"
  -
    input:
      bytes: [ 0x3f, 0xf0, 0x05, 0x80 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jlt.u d0, d15, #0xa"
  -
    input:
      bytes: [ 0x37, 0x02, 0x48, 0x20 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "extr d2, d2, #0, #0x8"
  -
    input:
      bytes: [ 0x0b, 0x60, 0x40, 0xa0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "addx d10, d0, d6"
  -
    input:
      bytes: [ 0x49, 0xff, 0x00, 0x0a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#0"
  -
    input:
      bytes: [ 0x6d, 0x00, 0xe4, 0x02 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x5c8"
  -
    input:
      bytes: [ 0x6f, 0x3f, 0x2c, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz.t d15, #0x3, #0x58"
  -
    input:
      bytes: [ 0xd9, 0x22, 0x8c, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a2, [a2]#0xbcc"
  -
    input:
      bytes: [ 0x6d, 0x00, 0xc5, 0x10 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x218a"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x7f, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x102"
  -
    input:
      bytes: [ 0x7b, 0x00, 0x12, 0x04 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "movh d0, #0x4120"
  -
    input:
      bytes: [ 0x02, 0x84 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d4, d8"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x11, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x1de"
  -
    input:
      bytes: [ 0x91, 0x20, 0x00, 0x30 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "movh.a a3, #0x2"
  -
    input:
      bytes: [ 0x9e, 0xf2 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d15, #-0x1, #0x24"
  -
    input:
      bytes: [ 0xf6, 0xa5 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jnz d10, #0xa"
  -
    input:
      bytes: [ 0x5f, 0x0f, 0xf6, 0x7f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d15, d0, #-0x14"
  -
    input:
      bytes: [ 0x0f, 0x4f, 0x00, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sh d15, d15, d4"
  -
    input:
      bytes: [ 0x6d, 0x00, 0xd2, 0x14 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x29a4"
  -
    input:
      bytes: [ 0xc2, 0x1a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add d10, #0x1"
  -
    input:
      bytes: [ 0xae, 0x29 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jnz.t d15, #0x2, #0x12"
  -
    input:
      bytes: [ 0xb0, 0x22 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add.a a2, #0x2"
  -
    input:
      bytes: [ 0x3b, 0x40, 0x06, 0x10 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d1, #0x64"
  -
    input:
      bytes: [ 0x10, 0xa2 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "addsc.a a2, sp, d15, #0"
  -
    input:
      bytes: [ 0x7d, 0x4f, 0x0d, 0x80 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne.a a15, a4, #0x1a"
  -
    input:
      bytes: [ 0x8f, 0x0f, 0x01, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sh d15, d15, #0x10"
  -
    input:
      bytes: [ 0x32, 0x5f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "rsub d15"
  -
    input:
      bytes: [ 0xbe, 0x03 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d15, d0, #0x26"
  -
    input:
      bytes: [ 0xee, 0xf9 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jnz d15, #-0xe"
  -
    input:
      bytes: [ 0x3b, 0x00, 0x03, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d0, #0x30"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x3b, 0x11 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x2276"
  -
    input:
      bytes: [ 0x3b, 0x00, 0x04, 0xe0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d14, #0x40"
  -
    input:
      bytes: [ 0x6d, 0xff, 0xb1, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x9e"
  -
    input:
      bytes: [ 0x8b, 0x1f, 0xe0, 0x06 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sh.eq d0, d15, #0x1"
  -
    input:
      bytes: [ 0x32, 0x50 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "rsub d0"
  -
    input:
      bytes: [ 0x92, 0xf4 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add d4, d15, #-0x1"
  -
    input:
      bytes: [ 0xb4, 0xc2 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "st.h [a12], d2"
  -
    input:
      bytes: [ 0x37, 0x01, 0x50, 0x20 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "extr d2, d1, #0, #0x10"
  -
    input:
      bytes: [ 0xbb, 0xf0, 0x28, 0xec ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.u d14, #0xc28f"
  -
    input:
      bytes: [ 0x3e, 0x8c ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d15, d8, #0x18"
  -
    input:
      bytes: [ 0x8f, 0x3c, 0x00, 0xf1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "and d15, d12, #0x3"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x63, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0xc6"
  -
    input:
      bytes: [ 0xdf, 0x08, 0x71, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne d8, #0, #-0x11e"
  -
    input:
      bytes: [ 0x02, 0x48 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d8, d4"
  -
    input:
      bytes: [ 0x76, 0x23 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz d2, #0x6"
  -
    input:
      bytes: [ 0xee, 0xf7 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jnz d15, #-0x12"
  -
    input:
      bytes: [ 0x96, 0x04 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "or d15, #0x4"
  -
    input:
      bytes: [ 0xdf, 0x09, 0x63, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d9, #0, #0xc6"
  -
    input:
      bytes: [ 0x6e, 0xe8 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz d15, #-0x30"
  -
    input:
      bytes: [ 0x10, 0x22 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "addsc.a a2, a2, d15, #0"
  -
    input:
      bytes: [ 0x6d, 0xff, 0xba, 0xfd ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x48c"
  -
    input:
      bytes: [ 0x37, 0x00, 0x68, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "extr.u d0, d0, #0, #0x8"
  -
    input:
      bytes: [ 0x15, 0xd0, 0xc0, 0xeb ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ldlcx #0xd0003f80"
  -
    input:
      bytes: [ 0x1e, 0x12 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d15, #0x1, #0x4"
  -
    input:
      bytes: [ 0xdf, 0x09, 0xf6, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne d9, #0, #-0x14"
  -
    input:
      bytes: [ 0x3b, 0x00, 0x98, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d15, #0x980"
  -
    input:
      bytes: [ 0xb7, 0x0f, 0x03, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insert d15, d15, #0, #0, #0x3"
  -
    input:
      bytes: [ 0x76, 0x87 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz d8, #0xe"
  -
    input:
      bytes: [ 0xda, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d15, #0xff"
  -
    input:
      bytes: [ 0x8f, 0x3f, 0x00, 0x01 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "and d0, d15, #0x3"
  -
    input:
      bytes: [ 0x7f, 0xf1, 0x06, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jge d1, d15, #0xc"
  -
    input:
      bytes: [ 0xda, 0xbc ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d15, #0xbc"
  -
    input:
      bytes: [ 0x6d, 0x00, 0xd4, 0x06 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0xda8"
  -
    input:
      bytes: [ 0x6d, 0x00, 0xb9, 0x06 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0xd72"
  -
    input:
      bytes: [ 0x91, 0x00, 0x00, 0xd7 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "movh.a a13, #0x7000"
  -
    input:
      bytes: [ 0x2e, 0x05 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz.t d15, #0, #0xa"
  -
    input:
      bytes: [ 0x8f, 0x1f, 0x1e, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sh d0, d15, #-0x1f"
  -
    input:
      bytes: [ 0x26, 0x3f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "and d15, d3"
  -
    input:
      bytes: [ 0x6d, 0xff, 0xee, 0xf9 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0xc24"
  -
    input:
      bytes: [ 0x8f, 0x46, 0x1f, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sh d15, d6, #-0xc"
  -
    input:
      bytes: [ 0x4b, 0x00, 0x61, 0xf1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "utof d15, d0"
  -
    input:
      bytes: [ 0x8b, 0xcf, 0x01, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add d15, d15, #0x1c"
  -
    input:
      bytes: [ 0x4e, 0xf4 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jgtz d15, #0x8"
  -
    input:
      bytes: [ 0xb7, 0x0f, 0x81, 0x2f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insert d2, d15, #0, #0x1f, #0x1"
  -
    input:
      bytes: [ 0x26, 0x94 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "and d4, d9"
  -
    input:
      bytes: [ 0x8f, 0x84, 0x1e, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sh d15, d4, #-0x18"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x84, 0xfe ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x2f8"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x0e, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x1c"
  -
    input:
      bytes: [ 0xbb, 0x70, 0x71, 0xfb ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.u d15, #0xb717"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x14, 0x01 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x228"
  -
    input:
      bytes: [ 0x3b, 0x80, 0x00, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d0, #0x8"
  -
    input:
      bytes: [ 0x3b, 0x00, 0x02, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d0, #0x20"
  -
    input:
      bytes: [ 0x8f, 0x1a, 0x40, 0xa1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "or d10, d10, #0x1"
  -
    input:
      bytes: [ 0x6d, 0xff, 0xbd, 0xf9 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0xc86"
  -
    input:
      bytes: [ 0x3f, 0x40, 0xe3, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jlt.u d0, d4, #-0x3a"
  -
    input:
      bytes: [ 0x0b, 0x20, 0x50, 0xf1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ge.u d15, d0, d2"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x6b, 0x4b ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x1692a"
  -
    input:
      bytes: [ 0x6d, 0x00, 0xdc, 0x09 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x13b8"
  -
    input:
      bytes: [ 0x6d, 0xff, 0xaa, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0xac"
  -
    input:
      bytes: [ 0x5f, 0x10, 0x09, 0x80 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne d0, d1, #0x12"
  -
    input:
      bytes: [ 0xa2, 0x10 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sub d0, d1"
  -
    input:
      bytes: [ 0x5f, 0xef, 0x67, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d15, d14, #0xce"
  -
    input:
      bytes: [ 0x49, 0xa5, 0x00, 0x0a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a5, [sp]#0"
  -
    input:
      bytes: [ 0xdf, 0x0c, 0x86, 0x7f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d12, #0, #-0xf4"
  -
    input:
      bytes: [ 0x4e, 0x33 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jgtz d3, #0x6"
  -
    input:
      bytes: [ 0x09, 0xff, 0xb6, 0x08 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ld.h d15, [a15]#0x36"
  -
    input:
      bytes: [ 0x3f, 0xf2, 0x05, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jlt d2, d15, #0xa"
  -
    input:
      bytes: [ 0x3b, 0x80, 0x3e, 0x40 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d4, #0x3e8"
  -
    input:
      bytes: [ 0x76, 0x8e ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz d8, #0x1c"
  -
    input:
      bytes: [ 0x3c, 0x0a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #0x14"
  -
    input:
      bytes: [ 0x6e, 0x21 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz d15, #0x42"
  -
    input:
      bytes: [ 0xdf, 0x1f, 0xf3, 0x7f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d15, #0x1, #-0x1a"
  -
    input:
      bytes: [ 0x46, 0x06 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "not d6"
  -
    input:
      bytes: [ 0x61, 0xff, 0xfb, 0xd8 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "fcall #-0x4e0a"
  -
    input:
      bytes: [ 0x82, 0x19 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d9, #0x1"
  -
    input:
      bytes: [ 0xae, 0x13 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jnz.t d15, #0x1, #0x6"
  -
    input:
      bytes: [ 0x4b, 0x0f, 0x41, 0x10 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mul.f d1, d15, d0"
  -
    input:
      bytes: [ 0x8b, 0x12, 0x80, 0x20 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "addx d2, d2, #0x1"
  -
    input:
      bytes: [ 0x49, 0xa4, 0x04, 0x0a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a4, [sp]#0x4"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x84, 0xfa ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0xaf8"
  -
    input:
      bytes: [ 0xa6, 0xf2 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "or d2, d15"
  -
    input:
      bytes: [ 0x40, 0xc5 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.aa a5, a12"
  -
    input:
      bytes: [ 0xda, 0x2b ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d15, #0x2b"
  -
    input:
      bytes: [ 0x4b, 0x00, 0x71, 0x61 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ftouz d6, d0"
  -
    input:
      bytes: [ 0xd9, 0x55, 0x6c, 0x2a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a5, [a5]#-0x5b54"
  -
    input:
      bytes: [ 0xd9, 0xff, 0xc4, 0x31 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#0x1cc4"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x32, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x64"
  -
    input:
      bytes: [ 0x91, 0x20, 0x00, 0x28 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "movh.a a2, #0x8002"
  -
    input:
      bytes: [ 0x8f, 0x00, 0x21, 0x10 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sha d1, d0, #0x10"
  -
    input:
      bytes: [ 0x40, 0x5c ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.aa a12, a5"
  -
    input:
      bytes: [ 0x02, 0x79 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d9, d7"
  -
    input:
      bytes: [ 0xac, 0xfc ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "st.h [a15]#0x18, d15"
  -
    input:
      bytes: [ 0x6f, 0x3f, 0x37, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz.t d15, #0x3, #0x6e"
  -
    input:
      bytes: [ 0x6f, 0x29, 0x19, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz.t d9, #0x2, #0x32"
  -
    input:
      bytes: [ 0x40, 0xc4 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.aa a4, a12"
  -
    input:
      bytes: [ 0x3f, 0x8b, 0xe7, 0x7f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jlt d11, d8, #-0x32"
  -
    input:
      bytes: [ 0x26, 0x53 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "and d3, d5"
  -
    input:
      bytes: [ 0xb7, 0x0f, 0x81, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insert d15, d15, #0, #0x1, #0x1"
  -
    input:
      bytes: [ 0xd9, 0xff, 0xf0, 0xaa ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#-0x5150"
  -
    input:
      bytes: [ 0xc2, 0xfa ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add d10, #-0x1"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x69, 0x01 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x2d2"
  -
    input:
      bytes: [ 0xd9, 0xff, 0x28, 0xa6 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#0x62a8"
  -
    input:
      bytes: [ 0x91, 0x30, 0x00, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "movh.a a15, #0xf003"
  -
    input:
      bytes: [ 0x6f, 0x3f, 0x2f, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz.t d15, #0x3, #0x5e"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x44, 0x04 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x888"
  -
    input:
      bytes: [ 0x6d, 0xff, 0xd0, 0xf8 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0xe60"
  -
    input:
      bytes: [ 0x37, 0x04, 0x50, 0x40 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "extr d4, d4, #0, #0x10"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x9d, 0x2d ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x1a4c6"
  -
    input:
      bytes: [ 0x8b, 0xc8, 0x01, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add d0, d8, #0x1c"
  -
    input:
      bytes: [ 0xbb, 0x90, 0xff, 0x0f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.u d0, #0xfff9"
  -
    input:
      bytes: [ 0x89, 0xff, 0xa2, 0x08 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "st.h [a15]#0x22, d15"
  -
    input:
      bytes: [ 0xff, 0x28, 0xf6, 0x7f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jge d8, #0x2, #-0x14"
  -
    input:
      bytes: [ 0x01, 0xcf, 0x20, 0x20 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sub.a a2, a15, a12"
  -
    input:
      bytes: [ 0x3c, 0x16 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #0x2c"
  -
    input:
      bytes: [ 0x0b, 0x8f, 0x10, 0x48 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov e4, d15, d8"
  -
    input:
      bytes: [ 0xa6, 0x02 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "or d2, d0"
  -
    input:
      bytes: [ 0x8f, 0xff, 0x83, 0x41 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "xor d4, d15, #0x3f"
  -
    input:
      bytes: [ 0xd9, 0xff, 0x8c, 0xea ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#-0x5474"
  -
    input:
      bytes: [ 0x8b, 0x0d, 0x00, 0xf5 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "or.ne d15, d13, #0"
  -
    input:
      bytes: [ 0x49, 0x33, 0x08, 0x8a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a3, [a3]#-0x1f8"
  -
    input:
      bytes: [ 0x57, 0x0f, 0x61, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "extr.u d15, d15, d0, #0x1"
  -
    input:
      bytes: [ 0x4b, 0x0f, 0x51, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "div.f d0, d15, d0"
  -
    input:
      bytes: [ 0x2e, 0x38 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz.t d15, #0x3, #0x10"
  -
    input:
      bytes: [ 0xde, 0x10 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne d15, #0x1, #0x20"
  -
    input:
      bytes: [ 0x37, 0x0f, 0x68, 0x40 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "extr.u d4, d15, #0, #0x8"
  -
    input:
      bytes: [ 0x82, 0x1b ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d11, #0x1"
  -
    input:
      bytes: [ 0x7d, 0xc2, 0x05, 0x80 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne.a a2, a12, #0xa"
  -
    input:
      bytes: [ 0x2e, 0x26 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz.t d15, #0x2, #0xc"
  -
    input:
      bytes: [ 0x0b, 0x75, 0xa0, 0xf2 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "or.lt.u d15, d5, d7"
  -
    input:
      bytes: [ 0x3f, 0xf1, 0x0a, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jlt d1, d15, #0x14"
  -
    input:
      bytes: [ 0x02, 0x95 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d5, d9"
  -
    input:
      bytes: [ 0xda, 0x17 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d15, #0x17"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x46, 0xfc ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x774"
  -
    input:
      bytes: [ 0x49, 0xdd, 0x10, 0x0a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a13, [a13]#0x10"
  -
    input:
      bytes: [ 0xd9, 0xff, 0x38, 0x20 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#0xb8"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x24, 0x1a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x3448"
  -
    input:
      bytes: [ 0x3f, 0xbf, 0xf8, 0x7f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jlt d15, d11, #-0x10"
  -
    input:
      bytes: [ 0xbd, 0x0c, 0x79, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz.a a12, #0xf2"
  -
    input:
      bytes: [ 0x0b, 0x2f, 0xa0, 0xf1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "max d15, d15, d2"
  -
    input:
      bytes: [ 0x1d, 0x00, 0x08, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #0x10"
  -
    input:
      bytes: [ 0x4b, 0x10, 0x41, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mul.f d0, d0, d1"
  -
    input:
      bytes: [ 0xd9, 0xee, 0x08, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a14, [a14]#0x3c8"
  -
    input:
      bytes: [ 0xdf, 0x2d, 0x05, 0x80 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne d13, #0x2, #0xa"
  -
    input:
      bytes: [ 0xa6, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "or d0, d15"
  -
    input:
      bytes: [ 0x6e, 0x2d ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz d15, #0x5a"
  -
    input:
      bytes: [ 0x4b, 0x0f, 0x71, 0xf1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ftouz d15, d15"
  -
    input:
      bytes: [ 0xbb, 0x00, 0xc2, 0xfb ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.u d15, #0xbc20"
  -
    input:
      bytes: [ 0x8b, 0xff, 0x00, 0x40 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add d4, d15, #0xf"
  -
    input:
      bytes: [ 0x7f, 0x0f, 0x04, 0x80 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jge.u d15, d0, #0x8"
  -
    input:
      bytes: [ 0x4b, 0x0a, 0x41, 0xa0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mul.f d10, d10, d0"
  -
    input:
      bytes: [ 0x61, 0xff, 0x77, 0xda ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "fcall #-0x4b12"
  -
    input:
      bytes: [ 0x3c, 0xfe ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #-0x4"
  -
    input:
      bytes: [ 0xee, 0x37 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jnz d15, #0x6e"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x33, 0xfe ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x39a"
  -
    input:
      bytes: [ 0x8f, 0x21, 0x20, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sha d15, d1, #0x2"
  -
    input:
      bytes: [ 0xb0, 0xfc ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add.a a12, #-0x1"
  -
    input:
      bytes: [ 0x61, 0xff, 0x41, 0xd9 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "fcall #-0x4d7e"
  -
    input:
      bytes: [ 0x8b, 0x1f, 0xe0, 0x26 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sh.eq d2, d15, #0x1"
  -
    input:
      bytes: [ 0xdf, 0x1f, 0xfe, 0x7f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d15, #0x1, #-0x4"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x15, 0x04 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x82a"
  -
    input:
      bytes: [ 0xdf, 0x02, 0xf9, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne d2, #0, #-0xe"
  -
    input:
      bytes: [ 0x82, 0x2d ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d13, #0x2"
  -
    input:
      bytes: [ 0x91, 0x10, 0x00, 0xf5 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "movh.a a15, #0x5001"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x1b, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x1ca"
  -
    input:
      bytes: [ 0x49, 0xaf, 0x0b, 0x0a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [sp]#0xb"
  -
    input:
      bytes: [ 0x3e, 0x07 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d15, d0, #0xe"
  -
    input:
      bytes: [ 0x6d, 0x00, 0xa7, 0x08 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x114e"
  -
    input:
      bytes: [ 0x8b, 0x14, 0x1f, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add d0, d4, #-0xf"
  -
    input:
      bytes: [ 0x2e, 0x0f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz.t d15, #0, #0x1e"
  -
    input:
      bytes: [ 0xda, 0x07 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d15, #0x7"
  -
    input:
      bytes: [ 0x40, 0xc6 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.aa a6, a12"
  -
    input:
      bytes: [ 0x6d, 0xff, 0xa0, 0xfa ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0xac0"
  -
    input:
      bytes: [ 0x15, 0xd0, 0xc0, 0xf7 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "stucx #0xd0003fc0"
  -
    input:
      bytes: [ 0x4b, 0xf1, 0x01, 0x22 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "div e2, d1, d15"
  -
    input:
      bytes: [ 0xa2, 0x5f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sub d15, d5"
  -
    input:
      bytes: [ 0x76, 0x29 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz d2, #0x12"
  -
    input:
      bytes: [ 0xfc, 0xf6 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "loop a15, #-0x14"
  -
    input:
      bytes: [ 0x6d, 0x00, 0xe0, 0x05 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0xbc0"
  -
    input:
      bytes: [ 0x8f, 0x80, 0x20, 0x10 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sha d1, d0, #0x8"
  -
    input:
      bytes: [ 0x3e, 0x04 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d15, d0, #0x8"
  -
    input:
      bytes: [ 0x6d, 0xe8, 0x3d, 0x22 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x2fbb86"
  -
    input:
      bytes: [ 0xc2, 0xfb ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add d11, #-0x1"
  -
    input:
      bytes: [ 0x0b, 0x15, 0x80, 0xf2 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "or.ne d15, d5, d1"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x73, 0x0f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x1ee6"
  -
    input:
      bytes: [ 0x3b, 0xc0, 0x00, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d0, #0xc"
  -
    input:
      bytes: [ 0xd9, 0xff, 0x50, 0xea ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#-0x5870"
  -
    input:
      bytes: [ 0xd9, 0x55, 0x7c, 0x4a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a5, [a5]#-0x5ac4"
  -
    input:
      bytes: [ 0x6f, 0x10, 0xf8, 0x7f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz.t d0, #0x1, #-0x10"
  -
    input:
      bytes: [ 0x0f, 0xcb, 0x10, 0xb0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sha d11, d11, d12"
  -
    input:
      bytes: [ 0x32, 0x5a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "rsub d10"
  -
    input:
      bytes: [ 0x8b, 0x01, 0x20, 0xf2 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ne d15, d1, #0"
  -
    input:
      bytes: [ 0x3f, 0x0f, 0xfd, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jlt.u d15, d0, #-0x6"
  -
    input:
      bytes: [ 0x3f, 0xf9, 0x65, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jlt.u d9, d15, #-0x136"
  -
    input:
      bytes: [ 0x20, 0x50 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sub.a sp, #0x50"
  -
    input:
      bytes: [ 0xe2, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mul d0, d15"
  -
    input:
      bytes: [ 0xff, 0x18, 0xe9, 0x7f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jge d8, #0x1, #-0x2e"
  -
    input:
      bytes: [ 0xd9, 0x44, 0x14, 0x7d ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a4, [a4]#-0x2e2c"
  -
    input:
      bytes: [ 0xd9, 0x44, 0xec, 0x10 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a4, [a4]#0xc6c"
  -
    input:
      bytes: [ 0x3b, 0x10, 0x06, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d0, #0x61"
  -
    input:
      bytes: [ 0x6d, 0x00, 0xf2, 0x02 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x5e4"
  -
    input:
      bytes: [ 0xbc, 0x26 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz.a a2, #0xc"
  -
    input:
      bytes: [ 0x01, 0xca, 0x00, 0x56 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "addsc.a a5, a12, d10, #0"
  -
    input:
      bytes: [ 0x7f, 0x0f, 0x55, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jge d15, d0, #0xaa"
  -
    input:
      bytes: [ 0x8f, 0x4f, 0x1f, 0x10 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sh d1, d15, #-0xc"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x9e, 0x4c ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x166c4"
  -
    input:
      bytes: [ 0x6e, 0x55 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz d15, #0xaa"
  -
    input:
      bytes: [ 0x46, 0x07 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "not d7"
  -
    input:
      bytes: [ 0xa6, 0x2f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "or d15, d2"
  -
    input:
      bytes: [ 0x7f, 0x89, 0x08, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jge d9, d8, #0x10"
  -
    input:
      bytes: [ 0x0f, 0x02, 0x00, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sh d15, d2, d0"
  -
    input:
      bytes: [ 0x6e, 0x12 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz d15, #0x24"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x2d, 0x0e ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x1c5a"
  -
    input:
      bytes: [ 0x10, 0xcf ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "addsc.a a15, a12, d15, #0"
  -
    input:
      bytes: [ 0x3f, 0x21, 0xf9, 0x7f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jlt d1, d2, #-0xe"
  -
    input:
      bytes: [ 0x06, 0x50 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sh d0, #0x5"
  -
    input:
      bytes: [ 0xbf, 0xc0, 0xea, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jlt.u d0, #0xc, #-0x2c"
  -
    input:
      bytes: [ 0x3e, 0x12 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d15, d1, #0x4"
  -
    input:
      bytes: [ 0x06, 0x15 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sh d5, #0x1"
  -
    input:
      bytes: [ 0x53, 0x48, 0x20, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mul d15, d8, #0x4"
  -
    input:
      bytes: [ 0x3e, 0xeb ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d15, d14, #0x16"
  -
    input:
      bytes: [ 0xbb, 0x00, 0x40, 0x2f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.u d2, #0xf400"
  -
    input:
      bytes: [ 0x3f, 0xf2, 0xf3, 0x7f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jlt d2, d15, #-0x1a"
  -
    input:
      bytes: [ 0x3b, 0xb0, 0x02, 0x40 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d4, #0x2b"
  -
    input:
      bytes: [ 0x37, 0x01, 0x10, 0x10 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insert d1, d1, d0, #0, #0x10"
  -
    input:
      bytes: [ 0x49, 0xfc, 0x3f, 0x2a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a12, [a15]#0xbf"
  -
    input:
      bytes: [ 0xac, 0x44 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "st.h [a4]#0x8, d15"
  -
    input:
      bytes: [ 0xd9, 0x22, 0x1a, 0x21 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a2, [a2]#0x109a"
  -
    input:
      bytes: [ 0x37, 0x0f, 0x81, 0xf2 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insert d15, d15, d0, #0x5, #0x1"
  -
    input:
      bytes: [ 0x02, 0x2a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d10, d2"
  -
    input:
      bytes: [ 0xa2, 0xaf ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sub d15, d10"
  -
    input:
      bytes: [ 0x6e, 0xc9 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz d15, #-0x6e"
  -
    input:
      bytes: [ 0x0b, 0x31, 0x00, 0xf2 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "and.eq d15, d1, d3"
  -
    input:
      bytes: [ 0x02, 0xb2 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d2, d11"
  -
    input:
      bytes: [ 0xd9, 0xff, 0x30, 0x10 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#0x70"
  -
    input:
      bytes: [ 0xd9, 0xff, 0xb4, 0xe1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#0x1bb4"
  -
    input:
      bytes: [ 0x4b, 0x80, 0x11, 0x02 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "div.u e0, d0, d8"
  -
    input:
      bytes: [ 0x37, 0x0f, 0x01, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insert d15, d15, d0, #0, #0x1"
  -
    input:
      bytes: [ 0xd9, 0xff, 0xf8, 0xea ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#-0x5048"
  -
    input:
      bytes: [ 0x6d, 0x00, 0xf7, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x1ee"
  -
    input:
      bytes: [ 0xb0, 0x1d ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add.a a13, #0x1"
  -
    input:
      bytes: [ 0x16, 0x02 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "and d15, #0x2"
  -
    input:
      bytes: [ 0x6d, 0xff, 0xc6, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x74"
  -
    input:
      bytes: [ 0x3c, 0x2f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #0x5e"
  -
    input:
      bytes: [ 0xfc, 0x29 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "loop a2, #-0xe"
  -
    input:
      bytes: [ 0xa0, 0x15 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.a a5, #0x1"
  -
    input:
      bytes: [ 0x5f, 0x0f, 0x5d, 0x80 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne d15, d0, #0xba"
  -
    input:
      bytes: [ 0x20, 0x18 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sub.a sp, #0x18"
  -
    input:
      bytes: [ 0x6b, 0x05, 0x00, 0x20 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "pack d2, e0, d5"
  -
    input:
      bytes: [ 0x07, 0xbb, 0x9f, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "nand.t d15, d11, #0x1f, d11, #0x1f"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x93, 0x08 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x1126"
  -
    input:
      bytes: [ 0x6d, 0x00, 0xe8, 0x0d ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x1bd0"
  -
    input:
      bytes: [ 0x82, 0x02 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d2, #0"
  -
    input:
      bytes: [ 0x7d, 0x42, 0x0f, 0x80 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne.a a2, a4, #0x1e"
  -
    input:
      bytes: [ 0xac, 0xfa ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "st.h [a15]#0x14, d15"
  -
    input:
      bytes: [ 0x6e, 0x04 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz d15, #0x8"
  -
    input:
      bytes: [ 0xdf, 0x08, 0xf9, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne d8, #0, #-0xe"
  -
    input:
      bytes: [ 0x6d, 0x00, 0xca, 0x10 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x2194"
  -
    input:
      bytes: [ 0x4b, 0xf8, 0x01, 0x02 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "div e0, d8, d15"
  -
    input:
      bytes: [ 0x02, 0x2f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d15, d2"
  -
    input:
      bytes: [ 0xa0, 0x04 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.a a4, #0"
  -
    input:
      bytes: [ 0x0f, 0x0a, 0x80, 0x10 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "and d1, d10, d0"
  -
    input:
      bytes: [ 0x0f, 0xcf, 0x00, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sh d15, d15, d12"
  -
    input:
      bytes: [ 0x8b, 0x05, 0xc0, 0xfa ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "eqany.b d15, d5, #0"
  -
    input:
      bytes: [ 0x8b, 0x00, 0x20, 0x02 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ne d0, d0, #0"
  -
    input:
      bytes: [ 0x7d, 0x2e, 0x0c, 0x80 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne.a a14, a2, #0x18"
  -
    input:
      bytes: [ 0x6f, 0x29, 0x68, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz.t d9, #0x2, #0xd0"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x5f, 0xfc ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x742"
  -
    input:
      bytes: [ 0x91, 0x00, 0x00, 0x57 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "movh.a a5, #0x7000"
  -
    input:
      bytes: [ 0x91, 0x00, 0x00, 0x80 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "movh.a a8, #0"
  -
    input:
      bytes: [ 0xc2, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add d15, #-0x1"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x3b, 0x05 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0xa76"
  -
    input:
      bytes: [ 0x3c, 0xd9 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #-0x4e"
  -
    input:
      bytes: [ 0x7e, 0xe5 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne d15, d14, #0xa"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x3f, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x182"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x5e, 0x0f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x1ebc"
  -
    input:
      bytes: [ 0x96, 0x40 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "or d15, #0x40"
  -
    input:
      bytes: [ 0x37, 0x01, 0x70, 0x20 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "extr.u d2, d1, #0, #0x10"
  -
    input:
      bytes: [ 0x1e, 0xf4 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d15, #-0x1, #0x8"
  -
    input:
      bytes: [ 0x76, 0x03 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz d0, #0x6"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x50, 0x01 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x2a0"
  -
    input:
      bytes: [ 0x0b, 0x1b, 0x90, 0xf2 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "or.lt d15, d11, d1"
  -
    input:
      bytes: [ 0x80, 0xdf ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.d d15, a13"
  -
    input:
      bytes: [ 0xd9, 0xff, 0x00, 0x0a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#-0x6000"
  -
    input:
      bytes: [ 0x37, 0x00, 0xe1, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "extr.u d0, d0, #0x1, #0x1"
  -
    input:
      bytes: [ 0xd9, 0xff, 0x1c, 0x30 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#0xdc"
  -
    input:
      bytes: [ 0x02, 0x4f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d15, d4"
  -
    input:
      bytes: [ 0x91, 0x20, 0x00, 0x58 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "movh.a a5, #0x8002"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x4c, 0xfb ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x968"
  -
    input:
      bytes: [ 0x3b, 0x00, 0x00, 0xf3 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d15, #0x3000"
  -
    input:
      bytes: [ 0x37, 0xf0, 0x01, 0xf3 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insert d15, d0, d15, #0x6, #0x1"
  -
    input:
      bytes: [ 0x4b, 0x02, 0x41, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mul.f d15, d2, d0"
  -
    input:
      bytes: [ 0xc6, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "xor d0, d15"
  -
    input:
      bytes: [ 0x6e, 0x19 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz d15, #0x32"
  -
    input:
      bytes: [ 0x76, 0x55 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz d5, #0xa"
  -
    input:
      bytes: [ 0x42, 0xf4 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add d4, d15"
  -
    input:
      bytes: [ 0xee, 0xd2 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jnz d15, #-0x5c"
  -
    input:
      bytes: [ 0x5e, 0x26 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne d15, #0x2, #0xc"
  -
    input:
      bytes: [ 0x3c, 0x13 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #0x26"
  -
    input:
      bytes: [ 0x10, 0xf2 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "addsc.a a2, a15, d15, #0"
  -
    input:
      bytes: [ 0x2d, 0x07, 0x00, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "calli a7"
  -
    input:
      bytes: [ 0x6f, 0x2f, 0x17, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz.t d15, #0x2, #0x2e"
  -
    input:
      bytes: [ 0x4b, 0xf5, 0x41, 0x30 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mul.f d3, d5, d15"
  -
    input:
      bytes: [ 0x3c, 0x07 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #0xe"
  -
    input:
      bytes: [ 0x7f, 0x0f, 0x4d, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jge d15, d0, #0x9a"
  -
    input:
      bytes: [ 0xa6, 0x0f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "or d15, d0"
  -
    input:
      bytes: [ 0x89, 0x4f, 0xb4, 0x08 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "st.h [a4]#0x34, d15"
  -
    input:
      bytes: [ 0x6d, 0x00, 0xbd, 0x0e ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x1d7a"
  -
    input:
      bytes: [ 0x91, 0x00, 0x06, 0xf8 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "movh.a a15, #0x8060"
  -
    input:
      bytes: [ 0xdf, 0x12, 0x11, 0x80 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne d2, #0x1, #0x22"
  -
    input:
      bytes: [ 0x0b, 0x0a, 0x10, 0xf1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ne d15, d10, d0"
  -
    input:
      bytes: [ 0x3c, 0x4c ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #0x98"
  -
    input:
      bytes: [ 0xda, 0x1b ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d15, #0x1b"
  -
    input:
      bytes: [ 0xbb, 0xf0, 0xf7, 0x4f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.u d4, #0xff7f"
  -
    input:
      bytes: [ 0x26, 0xf1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "and d1, d15"
  -
    input:
      bytes: [ 0xbd, 0x04, 0x11, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz.a a4, #0x22"
  -
    input:
      bytes: [ 0x26, 0x82 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "and d2, d8"
  -
    input:
      bytes: [ 0xc2, 0x11 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add d1, #0x1"
  -
    input:
      bytes: [ 0x4b, 0x06, 0x61, 0x01 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "utof d0, d6"
  -
    input:
      bytes: [ 0x3f, 0xf8, 0xf3, 0x7f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jlt d8, d15, #-0x1a"
  -
    input:
      bytes: [ 0x37, 0xf0, 0x02, 0x06 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insert d0, d0, d15, #0xc, #0x2"
  -
    input:
      bytes: [ 0x6d, 0x00, 0xb0, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x160"
  -
    input:
      bytes: [ 0x3b, 0xf0, 0x06, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d0, #0x6f"
  -
    input:
      bytes: [ 0x4b, 0xf2, 0x51, 0x80 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "div.f d8, d2, d15"
  -
    input:
      bytes: [ 0x37, 0x09, 0x68, 0x90 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "extr.u d9, d9, #0, #0x8"
  -
    input:
      bytes: [ 0xa2, 0x2f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sub d15, d2"
  -
    input:
      bytes: [ 0x3c, 0x45 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #0x8a"
  -
    input:
      bytes: [ 0x5e, 0xf5 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne d15, #-0x1, #0xa"
  -
    input:
      bytes: [ 0x10, 0x24 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "addsc.a a4, a2, d15, #0"
  -
    input:
      bytes: [ 0x7e, 0x04 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne d15, d0, #0x8"
  -
    input:
      bytes: [ 0xda, 0x2d ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d15, #0x2d"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x4d, 0xfa ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0xb66"
  -
    input:
      bytes: [ 0xdf, 0x0c, 0x9b, 0x7f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d12, #0, #-0xca"
  -
    input:
      bytes: [ 0x40, 0x54 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.aa a4, a5"
  -
    input:
      bytes: [ 0x4b, 0xf9, 0x41, 0x50 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mul.f d5, d9, d15"
  -
    input:
      bytes: [ 0xd9, 0xee, 0x14, 0xe0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a14, [a14]#0x394"
  -
    input:
      bytes: [ 0x8b, 0x08, 0x08, 0xf1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "rsub d15, d8, #0x80"
  -
    input:
      bytes: [ 0x01, 0xcd, 0x00, 0xc6 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "addsc.a a12, a12, d13, #0"
  -
    input:
      bytes: [ 0xd9, 0x55, 0xa8, 0xca ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a5, [a5]#-0x54d8"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x16, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x2c"
  -
    input:
      bytes: [ 0xb7, 0x6f, 0x08, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insert d15, d15, #0x6, #0, #0x8"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x07, 0xd5 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x55f2"
  -
    input:
      bytes: [ 0x0b, 0x00, 0x00, 0x48 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov e4, d0"
  -
    input:
      bytes: [ 0x49, 0xa5, 0x04, 0x0a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a5, [sp]#0x4"
  -
    input:
      bytes: [ 0xd9, 0xff, 0x00, 0x80 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#0x200"
  -
    input:
      bytes: [ 0x40, 0xef ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.aa a15, a14"
  -
    input:
      bytes: [ 0x6e, 0x65 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz d15, #0xca"
  -
    input:
      bytes: [ 0xfa, 0x10 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lt d15, d0, #0x1"
  -
    input:
      bytes: [ 0x26, 0x0f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "and d15, d0"
  -
    input:
      bytes: [ 0x0b, 0x60, 0x30, 0xf1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lt.u d15, d0, d6"
  -
    input:
      bytes: [ 0x6d, 0x00, 0xf2, 0x11 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x23e4"
  -
    input:
      bytes: [ 0x49, 0xaa, 0x38, 0xba ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea sp, [sp]#-0x108"
  -
    input:
      bytes: [ 0x0b, 0x51, 0x00, 0xf2 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "and.eq d15, d1, d5"
  -
    input:
      bytes: [ 0x0f, 0x13, 0x00, 0x30 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sh d3, d3, d1"
  -
    input:
      bytes: [ 0xd9, 0xff, 0x14, 0x30 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#0xd4"
  -
    input:
      bytes: [ 0x3f, 0x0f, 0xeb, 0x7f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jlt d15, d0, #-0x2a"
  -
    input:
      bytes: [ 0xb7, 0x04, 0x89, 0x0b ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insert d0, d4, #0, #0x17, #0x9"
  -
    input:
      bytes: [ 0xb7, 0x5f, 0x08, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insert d15, d15, #0x5, #0, #0x8"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x09, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x12"
  -
    input:
      bytes: [ 0x0b, 0x60, 0x40, 0x40 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "addx d4, d0, d6"
  -
    input:
      bytes: [ 0xbe, 0x0d ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d15, d0, #0x3a"
  -
    input:
      bytes: [ 0x8b, 0xf0, 0x1b, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add d15, d0, #-0x41"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x8e, 0x01 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x31c"
  -
    input:
      bytes: [ 0x1d, 0xff, 0xbe, 0xfd ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #-0x484"
  -
    input:
      bytes: [ 0xd9, 0x44, 0xe8, 0x10 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a4, [a4]#0xc68"
  -
    input:
      bytes: [ 0x8f, 0x8f, 0x01, 0x01 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "and d0, d15, #0x18"
  -
    input:
      bytes: [ 0xd9, 0xff, 0x80, 0xea ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#-0x5480"
  -
    input:
      bytes: [ 0x26, 0xf9 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "and d9, d15"
  -
    input:
      bytes: [ 0x6f, 0x20, 0xf2, 0x7f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz.t d0, #0x2, #-0x1c"
  -
    input:
      bytes: [ 0x4b, 0xaf, 0x01, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "cmp.f d15, d15, d10"
  -
    input:
      bytes: [ 0x8b, 0x07, 0xa0, 0x70 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "addc d7, d7, #0"
  -
    input:
      bytes: [ 0x49, 0xa5, 0x00, 0x4a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a5, [sp]#0x100"
  -
    input:
      bytes: [ 0xdf, 0x10, 0x0a, 0x80 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne d0, #0x1, #0x14"
  -
    input:
      bytes: [ 0x1d, 0x00, 0x98, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #0x130"
  -
    input:
      bytes: [ 0x4b, 0x00, 0x41, 0x01 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "itof d0, d0"
  -
    input:
      bytes: [ 0x3b, 0xd0, 0x02, 0x80 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d8, #0x2d"
  -
    input:
      bytes: [ 0x02, 0xb1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d1, d11"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x0a, 0x11 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x2214"
  -
    input:
      bytes: [ 0x3b, 0xf0, 0x0f, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d0, #0xff"
  -
    input:
      bytes: [ 0x40, 0xa2 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.aa a2, sp"
  -
    input:
      bytes: [ 0xc2, 0x1b ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add d11, #0x1"
  -
    input:
      bytes: [ 0xdf, 0x0f, 0xb1, 0x80 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne d15, #0, #0x162"
  -
    input:
      bytes: [ 0xc2, 0xf1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add d1, #-0x1"
  -
    input:
      bytes: [ 0x89, 0xaf, 0xa2, 0x08 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "st.h [sp]#0x22, d15"
  -
    input:
      bytes: [ 0x3b, 0x40, 0x07, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d0, #0x74"
  -
    input:
      bytes: [ 0xdf, 0x12, 0x03, 0x80 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne d2, #0x1, #0x6"
  -
    input:
      bytes: [ 0x3c, 0x6e ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #0xdc"
  -
    input:
      bytes: [ 0x82, 0x11 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d1, #0x1"
  -
    input:
      bytes: [ 0x7c, 0x23 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jnz.a a2, #0x6"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x80, 0x4c ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x16700"
  -
    input:
      bytes: [ 0x3b, 0x00, 0x00, 0x06 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d0, #0x6000"
  -
    input:
      bytes: [ 0x37, 0xf0, 0x01, 0x0f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insert d0, d0, d15, #0x1e, #0x1"
  -
    input:
      bytes: [ 0x37, 0x00, 0x70, 0xa0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "extr.u d10, d0, #0, #0x10"
  -
    input:
      bytes: [ 0xac, 0xf8 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "st.h [a15]#0x10, d15"
  -
    input:
      bytes: [ 0x16, 0x07 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "and d15, #0x7"
  -
    input:
      bytes: [ 0x7b, 0x00, 0x20, 0x04 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "movh d0, #0x4200"
  -
    input:
      bytes: [ 0x5f, 0x0f, 0xf4, 0x7f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d15, d0, #-0x18"
  -
    input:
      bytes: [ 0x6d, 0x00, 0xd6, 0x02 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x5ac"
  -
    input:
      bytes: [ 0xbb, 0x80, 0x02, 0x4a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.u d4, #0xa028"
  -
    input:
      bytes: [ 0x02, 0x69 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d9, d6"
  -
    input:
      bytes: [ 0x3e, 0x24 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d15, d2, #0x8"
  -
    input:
      bytes: [ 0x37, 0x00, 0xe7, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "extr.u d0, d0, #0x1, #0x7"
  -
    input:
      bytes: [ 0x8b, 0x0f, 0x1d, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add d0, d15, #-0x30"
  -
    input:
      bytes: [ 0x8f, 0x0a, 0x41, 0xa1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "or d10, d10, #0x10"
  -
    input:
      bytes: [ 0xdf, 0x02, 0xf8, 0x7f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d2, #0, #-0x10"
  -
    input:
      bytes: [ 0x6d, 0x00, 0xf4, 0x0d ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x1be8"
  -
    input:
      bytes: [ 0x37, 0x03, 0x68, 0xf4 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "extr.u d15, d3, #0x8, #0x8"
  -
    input:
      bytes: [ 0x37, 0x01, 0xe1, 0x17 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "extr.u d1, d1, #0xf, #0x1"
  -
    input:
      bytes: [ 0xbb, 0x00, 0x20, 0x4c ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.u d4, #0xc200"
  -
    input:
      bytes: [ 0xac, 0x49 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "st.h [a4]#0x12, d15"
  -
    input:
      bytes: [ 0x3c, 0x29 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #0x52"
  -
    input:
      bytes: [ 0x49, 0xaf, 0x0a, 0x0a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [sp]#0xa"
  -
    input:
      bytes: [ 0x53, 0x20, 0x20, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mul d15, d0, #0x2"
  -
    input:
      bytes: [ 0x37, 0x00, 0xe1, 0x07 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "extr.u d0, d0, #0xf, #0x1"
  -
    input:
      bytes: [ 0x09, 0x44, 0x94, 0x08 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ld.h d4, [a4]#0x14"
  -
    input:
      bytes: [ 0x01, 0x24, 0x00, 0x46 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "addsc.a a4, a2, d4, #0"
  -
    input:
      bytes: [ 0x8b, 0xff, 0x0f, 0xc2 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "eq d12, d15, #0xff"
  -
    input:
      bytes: [ 0x37, 0x09, 0x70, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "extr.u d0, d9, #0, #0x10"
  -
    input:
      bytes: [ 0xfd, 0xf0, 0xed, 0x7f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "loop a15, #-0x26"
  -
    input:
      bytes: [ 0x6d, 0x00, 0xb0, 0x03 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x760"
  -
    input:
      bytes: [ 0xda, 0x75 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d15, #0x75"
  -
    input:
      bytes: [ 0x9b, 0xe2, 0xcb, 0x24 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "addih d2, d2, #0x4cbe"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x11, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x22"
  -
    input:
      bytes: [ 0x37, 0xf0, 0x08, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insert d15, d0, d15, #0, #0x8"
  -
    input:
      bytes: [ 0x46, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "not d0"
  -
    input:
      bytes: [ 0x26, 0x93 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "and d3, d9"
  -
    input:
      bytes: [ 0x6e, 0x07 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz d15, #0xe"
  -
    input:
      bytes: [ 0xdf, 0x0a, 0x33, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d10, #0, #0x66"
  -
    input:
      bytes: [ 0xee, 0x07 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jnz d15, #0xe"
  -
    input:
      bytes: [ 0x6d, 0xff, 0xf3, 0xfe ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x21a"
  -
    input:
      bytes: [ 0x09, 0xf0, 0xba, 0x08 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ld.h d0, [a15]#0x3a"
  -
    input:
      bytes: [ 0x8f, 0x14, 0x1e, 0x20 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sh d2, d4, #-0x1f"
  -
    input:
      bytes: [ 0x6d, 0x00, 0xb4, 0x0e ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x1d68"
  -
    input:
      bytes: [ 0xee, 0x0a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jnz d15, #0x14"
  -
    input:
      bytes: [ 0x01, 0x54, 0x20, 0xf4 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lt.a d15, a4, a5"
  -
    input:
      bytes: [ 0xdf, 0x08, 0x11, 0x80 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne d8, #0, #0x22"
  -
    input:
      bytes: [ 0x8f, 0x23, 0x20, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sha d15, d3, #0x2"
  -
    input:
      bytes: [ 0x6d, 0xff, 0xdd, 0x2a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x1aa46"
  -
    input:
      bytes: [ 0x6d, 0x00, 0xf8, 0x11 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x23f0"
  -
    input:
      bytes: [ 0xee, 0x0b ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jnz d15, #0x16"
  -
    input:
      bytes: [ 0xd9, 0xff, 0x00, 0x30 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#0xc0"
  -
    input:
      bytes: [ 0xd9, 0x3f, 0x0c, 0x96 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a3]#0x624c"
  -
    input:
      bytes: [ 0x26, 0x30 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "and d0, d3"
  -
    input:
      bytes: [ 0x3c, 0x2b ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #0x56"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x25, 0xfe ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x3b6"
  -
    input:
      bytes: [ 0x3f, 0x0f, 0xf6, 0x7f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jlt d15, d0, #-0x14"
  -
    input:
      bytes: [ 0x3b, 0x00, 0x40, 0x41 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d4, #0x1400"
  -
    input:
      bytes: [ 0x02, 0x51 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d1, d5"
  -
    input:
      bytes: [ 0x46, 0x02 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "not d2"
  -
    input:
      bytes: [ 0xd9, 0x22, 0x32, 0x11 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a2, [a2]#0x1072"
  -
    input:
      bytes: [ 0x06, 0xd5 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sh d5, #-0x3"
  -
    input:
      bytes: [ 0xdc, 0x0f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ji a15"
  -
    input:
      bytes: [ 0x0b, 0x89, 0x10, 0x48 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov e4, d9, d8"
  -
    input:
      bytes: [ 0x80, 0xcf ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.d d15, a12"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x28, 0x0f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x1e50"
  -
    input:
      bytes: [ 0x76, 0x83 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz d8, #0x6"
  -
    input:
      bytes: [ 0x6d, 0xe8, 0xcf, 0x20 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x2fbe62"
  -
    input:
      bytes: [ 0x76, 0xc5 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz d12, #0xa"
  -
    input:
      bytes: [ 0x3b, 0x10, 0x08, 0x40 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d4, #0x81"
  -
    input:
      bytes: [ 0xda, 0x02 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d15, #0x2"
  -
    input:
      bytes: [ 0x13, 0xa9, 0x20, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "madd d15, d15, d9, #0xa"
  -
    input:
      bytes: [ 0x49, 0xaa, 0x30, 0xba ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea sp, [sp]#-0x110"
  -
    input:
      bytes: [ 0x40, 0xe2 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.aa a2, a14"
  -
    input:
      bytes: [ 0x9b, 0xc0, 0xdc, 0x03 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "addih d0, d0, #0x3dcc"
  -
    input:
      bytes: [ 0x3e, 0x47 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d15, d4, #0xe"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x76, 0xf9 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0xd14"
  -
    input:
      bytes: [ 0xdf, 0x08, 0x40, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d8, #0, #0x80"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x92, 0xfa ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0xadc"
  -
    input:
      bytes: [ 0x09, 0xf0, 0xd4, 0x08 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ld.hu d0, [a15]#0x14"
  -
    input:
      bytes: [ 0x6e, 0x14 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz d15, #0x28"
  -
    input:
      bytes: [ 0xc2, 0x2b ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add d11, #0x2"
  -
    input:
      bytes: [ 0x6b, 0x0e, 0x21, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add.f d15, d15, d14"
  -
    input:
      bytes: [ 0x3b, 0xf0, 0x0f, 0x40 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d4, #0xff"
  -
    input:
      bytes: [ 0xd9, 0xff, 0x08, 0x10 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#0x48"
  -
    input:
      bytes: [ 0x6e, 0x05 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz d15, #0xa"
  -
    input:
      bytes: [ 0x80, 0x20 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.d d0, a2"
  -
    input:
      bytes: [ 0xd9, 0x44, 0xfc, 0xb5 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a4, [a4]#0x5efc"
  -
    input:
      bytes: [ 0x61, 0xff, 0x86, 0xd4 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "fcall #-0x56f4"
  -
    input:
      bytes: [ 0x89, 0x40, 0x94, 0x08 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "st.h [a4]#0x14, d0"
  -
    input:
      bytes: [ 0x6f, 0x8a, 0x45, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz.t d10, #0x8, #0x8a"
  -
    input:
      bytes: [ 0x5e, 0x2d ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne d15, #0x2, #0x1a"
  -
    input:
      bytes: [ 0x8b, 0xff, 0x01, 0xf1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "rsub d15, d15, #0x1f"
  -
    input:
      bytes: [ 0xdf, 0x00, 0x31, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d0, #0, #0x62"
  -
    input:
      bytes: [ 0xbb, 0xb0, 0xff, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.u d15, #0xfffb"
  -
    input:
      bytes: [ 0xd9, 0x55, 0x68, 0x1a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a5, [a5]#-0x5b98"
  -
    input:
      bytes: [ 0x76, 0x05 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz d0, #0xa"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x7f, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0xfe"
  -
    input:
      bytes: [ 0x40, 0x6f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.aa a15, a6"
  -
    input:
      bytes: [ 0x61, 0xff, 0x95, 0xd4 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "fcall #-0x56d6"
  -
    input:
      bytes: [ 0x3c, 0x0d ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #0x1a"
  -
    input:
      bytes: [ 0xa2, 0xfc ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sub d12, d15"
  -
    input:
      bytes: [ 0x5f, 0x8f, 0xef, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d15, d8, #0x1de"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x8a, 0x0d ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x1b14"
  -
    input:
      bytes: [ 0xd9, 0xff, 0x90, 0x9a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#-0x55b0"
  -
    input:
      bytes: [ 0x82, 0x08 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d8, #0"
  -
    input:
      bytes: [ 0x0b, 0x64, 0x30, 0xf1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lt.u d15, d4, d6"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x9f, 0x0d ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x1b3e"
  -
    input:
      bytes: [ 0xa6, 0x93 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "or d3, d9"
  -
    input:
      bytes: [ 0x02, 0x28 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d8, d2"
  -
    input:
      bytes: [ 0xda, 0x7e ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d15, #0x7e"
  -
    input:
      bytes: [ 0x3c, 0x0e ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #0x1c"
  -
    input:
      bytes: [ 0x3b, 0x30, 0x07, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d0, #0x73"
  -
    input:
      bytes: [ 0xdf, 0x10, 0xee, 0x7f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d0, #0x1, #-0x24"
  -
    input:
      bytes: [ 0x4b, 0xab, 0x01, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "cmp.f d15, d11, d10"
  -
    input:
      bytes: [ 0x6f, 0x0f, 0xfc, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jnz.t d15, #0, #-0x8"
  -
    input:
      bytes: [ 0x6f, 0x00, 0x1f, 0x80 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jnz.t d0, #0, #0x3e"
  -
    input:
      bytes: [ 0x6e, 0x0c ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz d15, #0x18"
  -
    input:
      bytes: [ 0x91, 0x00, 0x00, 0x90 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "movh.a a9, #0"
  -
    input:
      bytes: [ 0x10, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "addsc.a a15, a15, d15, #0"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x98, 0xfd ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x4d0"
  -
    input:
      bytes: [ 0x40, 0x7d ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.aa a13, a7"
  -
    input:
      bytes: [ 0xd9, 0x55, 0x64, 0x3a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a5, [a5]#-0x5b1c"
  -
    input:
      bytes: [ 0x91, 0x40, 0x00, 0x3f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "movh.a a3, #0xf004"
  -
    input:
      bytes: [ 0x37, 0x0f, 0xe1, 0xf3 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "extr.u d15, d15, #0x7, #0x1"
  -
    input:
      bytes: [ 0x8f, 0x28, 0x00, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sh d15, d8, #0x2"
  -
    input:
      bytes: [ 0x1d, 0x00, 0x5f, 0x01 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #0x2be"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x32, 0xd5 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x559c"
  -
    input:
      bytes: [ 0x37, 0x10, 0x01, 0x01 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insert d0, d0, d1, #0x2, #0x1"
  -
    input:
      bytes: [ 0x37, 0x02, 0x68, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "extr.u d15, d2, #0, #0x8"
  -
    input:
      bytes: [ 0x8b, 0x0c, 0x20, 0xf2 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ne d15, d12, #0"
  -
    input:
      bytes: [ 0x8b, 0x80, 0x00, 0x40 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add d4, d0, #0x8"
  -
    input:
      bytes: [ 0x46, 0x05 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "not d5"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x9d, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0xc6"
  -
    input:
      bytes: [ 0x26, 0x20 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "and d0, d2"
  -
    input:
      bytes: [ 0x3a, 0x26 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "eq d15, d6, d2"
  -
    input:
      bytes: [ 0x9b, 0xe0, 0xcb, 0x04 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "addih d0, d0, #0x4cbe"
  -
    input:
      bytes: [ 0xfc, 0xe7 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "loop a14, #-0x12"
  -
    input:
      bytes: [ 0x8f, 0x3f, 0x00, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sh d0, d15, #0x3"
  -
    input:
      bytes: [ 0x37, 0x0f, 0x82, 0xf2 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insert d15, d15, d0, #0x5, #0x2"
  -
    input:
      bytes: [ 0xc2, 0x1e ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add d14, #0x1"
  -
    input:
      bytes: [ 0x6e, 0x09 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz d15, #0x12"
  -
    input:
      bytes: [ 0x3b, 0xe0, 0x06, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d0, #0x6e"
  -
    input:
      bytes: [ 0x8c, 0x4b ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ld.h d15, [a4]#0x16"
  -
    input:
      bytes: [ 0xb0, 0x42 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add.a a2, #0x4"
  -
    input:
      bytes: [ 0x3b, 0x80, 0x06, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d0, #0x68"
  -
    input:
      bytes: [ 0x0f, 0x0f, 0x10, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sha d15, d15, d0"
  -
    input:
      bytes: [ 0xbc, 0xfa ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz.a a15, #0x14"
  -
    input:
      bytes: [ 0x0b, 0x71, 0x50, 0xb0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "addc d11, d1, d7"
  -
    input:
      bytes: [ 0x42, 0x04 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add d4, d0"
  -
    input:
      bytes: [ 0x7b, 0xa0, 0x47, 0x04 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "movh d0, #0x447a"
  -
    input:
      bytes: [ 0x0f, 0xf0, 0x10, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sha d0, d0, d15"
  -
    input:
      bytes: [ 0x8f, 0x3f, 0x00, 0x30 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sh d3, d15, #0x3"
  -
    input:
      bytes: [ 0x37, 0x00, 0x70, 0x08 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "extr.u d0, d0, #0x10, #0x10"
  -
    input:
      bytes: [ 0x49, 0xa5, 0x10, 0x0a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a5, [sp]#0x10"
  -
    input:
      bytes: [ 0x37, 0x04, 0x68, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "extr.u d0, d4, #0, #0x8"
  -
    input:
      bytes: [ 0xda, 0x37 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d15, #0x37"
  -
    input:
      bytes: [ 0xd9, 0x44, 0x4c, 0xb0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a4, [a4]#0x6cc"
  -
    input:
      bytes: [ 0x20, 0x28 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sub.a sp, #0x28"
  -
    input:
      bytes: [ 0xb7, 0x0f, 0x01, 0xfc ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insert d15, d15, #0, #0x18, #0x1"
  -
    input:
      bytes: [ 0x49, 0x4f, 0x01, 0x0a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a4]#0x1"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x91, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x122"
  -
    input:
      bytes: [ 0xd9, 0x44, 0x34, 0x8b ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a4, [a4]#-0x4dcc"
  -
    input:
      bytes: [ 0x4b, 0xfa, 0x51, 0xc0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "div.f d12, d10, d15"
  -
    input:
      bytes: [ 0xee, 0x15 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jnz d15, #0x2a"
  -
    input:
      bytes: [ 0x42, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add d0, d15"
  -
    input:
      bytes: [ 0x76, 0xc7 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz d12, #0xe"
  -
    input:
      bytes: [ 0xd9, 0xff, 0x08, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#0x8"
  -
    input:
      bytes: [ 0x3f, 0x1f, 0x05, 0x80 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jlt.u d15, d1, #0xa"
  -
    input:
      bytes: [ 0xd9, 0x55, 0x34, 0xfa ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a5, [a5]#-0x5c0c"
  -
    input:
      bytes: [ 0x76, 0x04 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz d0, #0x8"
  -
    input:
      bytes: [ 0x6d, 0x00, 0xbd, 0x07 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0xf7a"
  -
    input:
      bytes: [ 0x6e, 0x0a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz d15, #0x14"
  -
    input:
      bytes: [ 0xd9, 0xff, 0x18, 0x60 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#0x198"
  -
    input:
      bytes: [ 0x40, 0x2c ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.aa a12, a2"
  -
    input:
      bytes: [ 0x0b, 0x06, 0x10, 0xf1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ne d15, d6, d0"
  -
    input:
      bytes: [ 0x06, 0x13 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sh d3, #0x1"
  -
    input:
      bytes: [ 0xab, 0xf5, 0x3f, 0x55 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "caddn d5, d5, d5, #-0x1"
  -
    input:
      bytes: [ 0x3b, 0xc0, 0x05, 0x50 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d5, #0x5c"
  -
    input:
      bytes: [ 0x7e, 0x08 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne d15, d0, #0x10"
  -
    input:
      bytes: [ 0x3f, 0x8f, 0xf8, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jlt.u d15, d8, #-0x10"
  -
    input:
      bytes: [ 0x6d, 0xe8, 0xc9, 0x21 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x2fbc6e"
  -
    input:
      bytes: [ 0x76, 0x8b ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz d8, #0x16"
  -
    input:
      bytes: [ 0x6d, 0xff, 0xb9, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x8e"
  -
    input:
      bytes: [ 0x3b, 0xc0, 0xf9, 0x1f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d1, #-0x64"
  -
    input:
      bytes: [ 0xd9, 0xff, 0x08, 0x20 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#0x88"
  -
    input:
      bytes: [ 0xf6, 0x47 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jnz d4, #0xe"
  -
    input:
      bytes: [ 0x0b, 0x45, 0x10, 0x68 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov e6, d5, d4"
  -
    input:
      bytes: [ 0x40, 0x24 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.aa a4, a2"
  -
    input:
      bytes: [ 0xa0, 0x64 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.a a4, #0x6"
  -
    input:
      bytes: [ 0x94, 0xaf ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ld.h d15, [sp]"
  -
    input:
      bytes: [ 0x53, 0x4f, 0x20, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mul d15, d15, #0x4"
  -
    input:
      bytes: [ 0x89, 0xaf, 0xae, 0x08 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "st.h [sp]#0x2e, d15"
  -
    input:
      bytes: [ 0x76, 0x25 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz d2, #0xa"
  -
    input:
      bytes: [ 0x3b, 0x00, 0x02, 0x40 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d4, #0x20"
  -
    input:
      bytes: [ 0xb0, 0x14 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add.a a4, #0x1"
  -
    input:
      bytes: [ 0x67, 0x10, 0x1f, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ins.t d0, d0, #0x1f, d1, #0"
  -
    input:
      bytes: [ 0x76, 0x06 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz d0, #0xc"
  -
    input:
      bytes: [ 0xb0, 0x12 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add.a a2, #0x1"
  -
    input:
      bytes: [ 0xd9, 0x32, 0x10, 0x18 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a2, [a3]#-0x7fb0"
  -
    input:
      bytes: [ 0x3b, 0xb0, 0x02, 0x80 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d8, #0x2b"
  -
    input:
      bytes: [ 0xd9, 0xff, 0x64, 0x7a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#-0x5a1c"
  -
    input:
      bytes: [ 0xab, 0x08, 0xa2, 0x8f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "seln d8, d15, d8, #0x20"
  -
    input:
      bytes: [ 0xbf, 0x19, 0x18, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jlt d9, #0x1, #0x30"
  -
    input:
      bytes: [ 0x8f, 0x0f, 0x08, 0x01 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "and d0, d15, #0x80"
  -
    input:
      bytes: [ 0x37, 0x03, 0x68, 0x08 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "extr.u d0, d3, #0x10, #0x8"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x45, 0x0c ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x188a"
  -
    input:
      bytes: [ 0x6d, 0x00, 0xb8, 0x01 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x370"
  -
    input:
      bytes: [ 0xdf, 0x2f, 0x91, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne d15, #0x2, #-0xde"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x23, 0x2c ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x1a7ba"
  -
    input:
      bytes: [ 0x5f, 0x0f, 0xd9, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d15, d0, #0x1b2"
  -
    input:
      bytes: [ 0x80, 0x44 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.d d4, a4"
  -
    input:
      bytes: [ 0x80, 0xd0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.d d0, a13"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x92, 0x01 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x324"
  -
    input:
      bytes: [ 0x53, 0x49, 0x20, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mul d15, d9, #0x4"
  -
    input:
      bytes: [ 0xda, 0x96 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d15, #0x96"
  -
    input:
      bytes: [ 0x3c, 0x64 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #0xc8"
  -
    input:
      bytes: [ 0x4b, 0xf0, 0x11, 0x02 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "div.u e0, d0, d15"
  -
    input:
      bytes: [ 0x6d, 0x00, 0xef, 0x06 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0xdde"
  -
    input:
      bytes: [ 0x02, 0xb0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d0, d11"
  -
    input:
      bytes: [ 0x02, 0xd4 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d4, d13"
  -
    input:
      bytes: [ 0x91, 0x00, 0x03, 0xf8 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "movh.a a15, #0x8030"
  -
    input:
      bytes: [ 0x3c, 0x02 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #0x4"
  -
    input:
      bytes: [ 0x30, 0xf3 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add.a a3, a15"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x26, 0x10 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x204c"
  -
    input:
      bytes: [ 0x1e, 0x13 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d15, #0x1, #0x6"
  -
    input:
      bytes: [ 0x0b, 0x73, 0x50, 0x30 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "addc d3, d3, d7"
  -
    input:
      bytes: [ 0x9b, 0x74, 0x02, 0x40 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "addih d4, d4, #0x27"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x4c, 0x0f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x1e98"
  -
    input:
      bytes: [ 0x06, 0x21 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sh d1, #0x2"
  -
    input:
      bytes: [ 0x37, 0x04, 0x50, 0x20 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "extr d2, d4, #0, #0x10"
  -
    input:
      bytes: [ 0xbb, 0xd0, 0xff, 0x0f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.u d0, #0xfffd"
  -
    input:
      bytes: [ 0x8b, 0xf8, 0x1f, 0x20 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add d2, d8, #-0x1"
  -
    input:
      bytes: [ 0x8b, 0x10, 0x00, 0xe0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add d14, d0, #0x1"
  -
    input:
      bytes: [ 0x6d, 0xff, 0xfc, 0xfe ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x208"
  -
    input:
      bytes: [ 0x8f, 0x80, 0x40, 0xa1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "or d10, d0, #0x8"
  -
    input:
      bytes: [ 0xfb, 0xf0, 0x00, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov e0, #0xf"
  -
    input:
      bytes: [ 0x40, 0xfc ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.aa a12, a15"
  -
    input:
      bytes: [ 0xa0, 0x3e ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.a a14, #0x3"
  -
    input:
      bytes: [ 0x7f, 0xab, 0x05, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jge d11, d10, #0xa"
  -
    input:
      bytes: [ 0x3b, 0xa0, 0x00, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d0, #0xa"
  -
    input:
      bytes: [ 0x8f, 0x1a, 0x00, 0xf1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "and d15, d10, #0x1"
  -
    input:
      bytes: [ 0x3f, 0xf8, 0xf2, 0x7f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jlt d8, d15, #-0x1c"
  -
    input:
      bytes: [ 0x6b, 0x00, 0x31, 0xb5 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sub.f d11, d5, d0"
  -
    input:
      bytes: [ 0x76, 0x82 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz d8, #0x4"
  -
    input:
      bytes: [ 0x4b, 0x0f, 0x41, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mul.f d0, d15, d0"
  -
    input:
      bytes: [ 0x8b, 0x14, 0x80, 0x40 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "addx d4, d4, #0x1"
  -
    input:
      bytes: [ 0x3c, 0xdc ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #-0x48"
  -
    input:
      bytes: [ 0x7b, 0x10, 0x7e, 0xf4 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "movh d15, #0x47e1"
  -
    input:
      bytes: [ 0xb0, 0xc5 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add.a a5, #-0x4"
  -
    input:
      bytes: [ 0x7f, 0x4f, 0x06, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jge d15, d4, #0xc"
  -
    input:
      bytes: [ 0xd9, 0xff, 0x3c, 0xa0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#0x2bc"
  -
    input:
      bytes: [ 0xd9, 0xff, 0x34, 0x10 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#0x74"
  -
    input:
      bytes: [ 0x6d, 0xff, 0xf0, 0x2a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x1aa20"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x38, 0x01 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x270"
  -
    input:
      bytes: [ 0xa6, 0x31 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "or d1, d3"
  -
    input:
      bytes: [ 0xda, 0x33 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d15, #0x33"
  -
    input:
      bytes: [ 0x37, 0x04, 0xe8, 0x0b ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "extr.u d0, d4, #0x17, #0x8"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x10, 0x05 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0xa20"
  -
    input:
      bytes: [ 0xdf, 0x19, 0x22, 0x80 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne d9, #0x1, #0x44"
  -
    input:
      bytes: [ 0x0b, 0x62, 0x40, 0x20 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "addx d2, d2, d6"
  -
    input:
      bytes: [ 0x5f, 0x0f, 0x25, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d15, d0, #0x4a"
  -
    input:
      bytes: [ 0x8b, 0x5f, 0x20, 0xf3 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "min.u d15, d15, #0x5"
  -
    input:
      bytes: [ 0xd9, 0x55, 0x08, 0xc0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a5, [a5]#0x308"
  -
    input:
      bytes: [ 0xd9, 0xff, 0xc0, 0x21 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#0x1c80"
  -
    input:
      bytes: [ 0x1d, 0x00, 0xed, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #0x1da"
  -
    input:
      bytes: [ 0x1d, 0xff, 0x68, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #-0x130"
  -
    input:
      bytes: [ 0x6d, 0x00, 0xb1, 0x06 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0xd62"
  -
    input:
      bytes: [ 0x49, 0xfd, 0x16, 0x0a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a13, [a15]#0x16"
  -
    input:
      bytes: [ 0x6d, 0xe8, 0x11, 0x14 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x2fd7de"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x7f, 0x4c ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x16702"
  -
    input:
      bytes: [ 0xb7, 0x1f, 0x81, 0x1b ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insert d1, d15, #0x1, #0x17, #0x1"
  -
    input:
      bytes: [ 0x09, 0xff, 0xb4, 0x08 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ld.h d15, [a15]#0x34"
  -
    input:
      bytes: [ 0x3b, 0x80, 0x07, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d0, #0x78"
  -
    input:
      bytes: [ 0xc6, 0x30 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "xor d0, d3"
  -
    input:
      bytes: [ 0xb4, 0xdf ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "st.h [a13], d15"
  -
    input:
      bytes: [ 0x4b, 0x0f, 0x31, 0xf1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ftoiz d15, d15"
  -
    input:
      bytes: [ 0xd9, 0xff, 0x88, 0xda ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#-0x54b8"
  -
    input:
      bytes: [ 0x37, 0xf0, 0x04, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insert d15, d0, d15, #0, #0x4"
  -
    input:
      bytes: [ 0x5f, 0x0f, 0x78, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d15, d0, #0xf0"
  -
    input:
      bytes: [ 0x82, 0x30 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d0, #0x3"
  -
    input:
      bytes: [ 0x09, 0xff, 0xd4, 0x08 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ld.hu d15, [a15]#0x14"
  -
    input:
      bytes: [ 0x4b, 0x0a, 0x01, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "cmp.f d15, d10, d0"
  -
    input:
      bytes: [ 0xf6, 0x04 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jnz d0, #0x8"
  -
    input:
      bytes: [ 0x67, 0x01, 0x80, 0x1f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ins.t d1, d1, #0, d0, #0x1f"
  -
    input:
      bytes: [ 0x2e, 0x14 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz.t d15, #0x1, #0x8"
  -
    input:
      bytes: [ 0xee, 0x05 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jnz d15, #0xa"
  -
    input:
      bytes: [ 0x61, 0xff, 0xe9, 0xd9 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "fcall #-0x4c2e"
  -
    input:
      bytes: [ 0xbe, 0x01 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d15, d0, #0x22"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x29, 0x04 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x852"
  -
    input:
      bytes: [ 0x5f, 0x0f, 0x2a, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d15, d0, #0x54"
  -
    input:
      bytes: [ 0x42, 0xf1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add d1, d15"
  -
    input:
      bytes: [ 0x3c, 0x20 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #0x40"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x68, 0x03 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x6d0"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x49, 0x12 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x2492"
  -
    input:
      bytes: [ 0x6d, 0xff, 0xf0, 0xfe ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x220"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x05, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0xa"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x42, 0x11 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x2284"
  -
    input:
      bytes: [ 0xda, 0x1d ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d15, #0x1d"
  -
    input:
      bytes: [ 0x91, 0x30, 0x00, 0x4f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "movh.a a4, #0xf003"
  -
    input:
      bytes: [ 0xb7, 0x00, 0x89, 0x0b ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insert d0, d0, #0, #0x17, #0x9"
  -
    input:
      bytes: [ 0xbd, 0x02, 0x30, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz.a a2, #0x60"
  -
    input:
      bytes: [ 0x40, 0x52 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.aa a2, a5"
  -
    input:
      bytes: [ 0x9b, 0xb1, 0xa5, 0x14 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "addih d1, d1, #0x4a5b"
  -
    input:
      bytes: [ 0x82, 0xf3 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d3, #-0x1"
  -
    input:
      bytes: [ 0x5f, 0x01, 0x0b, 0x80 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne d1, d0, #0x16"
  -
    input:
      bytes: [ 0x49, 0xa4, 0x00, 0x0a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a4, [sp]#0"
  -
    input:
      bytes: [ 0x76, 0xc6 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz d12, #0xc"
  -
    input:
      bytes: [ 0xbb, 0x00, 0x52, 0x0c ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.u d0, #0xc520"
  -
    input:
      bytes: [ 0x3b, 0x40, 0x06, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d0, #0x64"
  -
    input:
      bytes: [ 0x4b, 0x3b, 0x01, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "cmp.f d15, d11, d3"
  -
    input:
      bytes: [ 0xac, 0xa6 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "st.h [sp]#0xc, d15"
  -
    input:
      bytes: [ 0x7f, 0xf1, 0x04, 0x80 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jge.u d1, d15, #0x8"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x94, 0x2b ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x1a8d8"
  -
    input:
      bytes: [ 0xac, 0x47 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "st.h [a4]#0xe, d15"
  -
    input:
      bytes: [ 0x82, 0x1a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d10, #0x1"
  -
    input:
      bytes: [ 0x7f, 0xf0, 0x07, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jge d0, d15, #0xe"
  -
    input:
      bytes: [ 0x73, 0x6d, 0x0a, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mul d15, d13, d6"
  -
    input:
      bytes: [ 0x26, 0x2f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "and d15, d2"
  -
    input:
      bytes: [ 0xd9, 0x22, 0x96, 0x01 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a2, [a2]#0x1816"
  -
    input:
      bytes: [ 0x53, 0x69, 0x20, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mul d15, d9, #0x6"
  -
    input:
      bytes: [ 0x8b, 0x0f, 0x02, 0xc0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add d12, d15, #0x20"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x03, 0xfe ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x3fa"
  -
    input:
      bytes: [ 0x1d, 0x00, 0xe5, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #0x1ca"
  -
    input:
      bytes: [ 0x77, 0x00, 0x00, 0x04 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "dextr d0, d0, d0, #0x8"
  -
    input:
      bytes: [ 0x7f, 0xf1, 0x09, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jge d1, d15, #0x12"
  -
    input:
      bytes: [ 0x3c, 0xe8 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #-0x30"
  -
    input:
      bytes: [ 0x0b, 0xcd, 0x10, 0x48 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov e4, d13, d12"
  -
    input:
      bytes: [ 0x3f, 0x1f, 0x04, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jlt d15, d1, #0x8"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x2b, 0xfa ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0xbaa"
  -
    input:
      bytes: [ 0x8b, 0x00, 0x03, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add d15, d0, #0x30"
  -
    input:
      bytes: [ 0x4b, 0x0a, 0x41, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mul.f d15, d10, d0"
  -
    input:
      bytes: [ 0xb7, 0x0f, 0x89, 0xfb ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insert d15, d15, #0, #0x17, #0x9"
  -
    input:
      bytes: [ 0x6d, 0xff, 0xdc, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x48"
  -
    input:
      bytes: [ 0x40, 0x4f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.aa a15, a4"
  -
    input:
      bytes: [ 0x1d, 0x00, 0x8a, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #0x114"
  -
    input:
      bytes: [ 0x7b, 0x00, 0x05, 0x40 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "movh d4, #0x50"
  -
    input:
      bytes: [ 0xd9, 0x22, 0x06, 0x71 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a2, [a2]#0x11c6"
  -
    input:
      bytes: [ 0x1d, 0x00, 0x4a, 0x01 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #0x294"
  -
    input:
      bytes: [ 0x8b, 0xa0, 0x60, 0xf2 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lt.u d15, d0, #0xa"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x68, 0xf9 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0xd30"
  -
    input:
      bytes: [ 0xda, 0x78 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d15, #0x78"
  -
    input:
      bytes: [ 0x26, 0x40 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "and d0, d4"
  -
    input:
      bytes: [ 0x80, 0xf4 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.d d4, a15"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x5a, 0x03 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x6b4"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x5f, 0x0f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x1ebe"
  -
    input:
      bytes: [ 0x3b, 0x00, 0x08, 0x01 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d0, #0x1080"
  -
    input:
      bytes: [ 0x4b, 0xf0, 0x41, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mul.f d15, d0, d15"
  -
    input:
      bytes: [ 0x6d, 0x00, 0xa3, 0x10 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x2146"
  -
    input:
      bytes: [ 0xee, 0x0d ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jnz d15, #0x1a"
  -
    input:
      bytes: [ 0x37, 0x0c, 0xe8, 0xfb ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "extr.u d15, d12, #0x17, #0x8"
  -
    input:
      bytes: [ 0xd9, 0xff, 0x10, 0x0b ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#-0x4ff0"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x1a, 0xf9 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0xdcc"
  -
    input:
      bytes: [ 0x0b, 0xaa, 0x10, 0x88 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov e8, d10, d10"
  -
    input:
      bytes: [ 0x3b, 0xa0, 0x00, 0x10 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d1, #0xa"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x47, 0xf6 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x1372"
  -
    input:
      bytes: [ 0x3b, 0x80, 0x07, 0x40 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d4, #0x78"
  -
    input:
      bytes: [ 0x7e, 0x55 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne d15, d5, #0xa"
  -
    input:
      bytes: [ 0x0b, 0x01, 0x10, 0x28 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov e2, d1, d0"
  -
    input:
      bytes: [ 0x07, 0x1d, 0xe0, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "xor.t d15, d13, #0, d1, #0x1f"
  -
    input:
      bytes: [ 0x3b, 0xd0, 0x02, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d0, #0x2d"
  -
    input:
      bytes: [ 0x3c, 0x70 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #0xe0"
  -
    input:
      bytes: [ 0x37, 0x0f, 0xe1, 0xf1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "extr.u d15, d15, #0x3, #0x1"
  -
    input:
      bytes: [ 0xd9, 0xff, 0x80, 0x9a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#-0x55c0"
  -
    input:
      bytes: [ 0x53, 0x59, 0x2f, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mul d15, d9, #0xf5"
  -
    input:
      bytes: [ 0xb0, 0x54 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add.a a4, #0x5"
  -
    input:
      bytes: [ 0x91, 0x40, 0x00, 0x57 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "movh.a a5, #0x7004"
  -
    input:
      bytes: [ 0x61, 0xff, 0xe9, 0xd8 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "fcall #-0x4e2e"
  -
    input:
      bytes: [ 0xbc, 0xf1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz.a a15, #0x2"
  -
    input:
      bytes: [ 0xdf, 0x1f, 0xfa, 0x7f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d15, #0x1, #-0xc"
  -
    input:
      bytes: [ 0x0f, 0xf2, 0x00, 0x20 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sh d2, d2, d15"
  -
    input:
      bytes: [ 0x90, 0xdd ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "addsc.a a13, a13, d15, #0x2"
  -
    input:
      bytes: [ 0x8b, 0x40, 0x00, 0x90 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add d9, d0, #0x4"
  -
    input:
      bytes: [ 0x6d, 0xe8, 0xbd, 0x14 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x2fd686"
  -
    input:
      bytes: [ 0xee, 0xf6 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jnz d15, #-0x14"
  -
    input:
      bytes: [ 0x3b, 0x70, 0x06, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d0, #0x67"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x9d, 0x29 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x1acc6"
  -
    input:
      bytes: [ 0xd9, 0x44, 0x40, 0x4b ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a4, [a4]#-0x4b00"
  -
    input:
      bytes: [ 0x9b, 0x1f, 0x00, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "addih d15, d15, #0x1"
  -
    input:
      bytes: [ 0xb7, 0x1f, 0x08, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insert d15, d15, #0x1, #0, #0x8"
  -
    input:
      bytes: [ 0xb7, 0x0f, 0x01, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insert d15, d15, #0, #0, #0x1"
  -
    input:
      bytes: [ 0xff, 0x1f, 0xf7, 0x7f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jge d15, #0x1, #-0x12"
  -
    input:
      bytes: [ 0x6d, 0x00, 0xbf, 0x02 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x57e"
  -
    input:
      bytes: [ 0xd9, 0x55, 0xa4, 0xca ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a5, [a5]#-0x54dc"
  -
    input:
      bytes: [ 0x3c, 0x1b ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #0x36"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x7b, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x10a"
  -
    input:
      bytes: [ 0xa0, 0x94 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.a a4, #0x9"
  -
    input:
      bytes: [ 0x49, 0xa5, 0x02, 0x0a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a5, [sp]#0x2"
  -
    input:
      bytes: [ 0x3b, 0xe0, 0x07, 0x50 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d5, #0x7e"
  -
    input:
      bytes: [ 0xb7, 0x0f, 0x81, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insert d15, d15, #0, #0x1f, #0x1"
  -
    input:
      bytes: [ 0xc2, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add d0, #-0x1"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x04, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x8"
  -
    input:
      bytes: [ 0x37, 0x04, 0x68, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "extr.u d15, d4, #0, #0x8"
  -
    input:
      bytes: [ 0x37, 0x4f, 0x05, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insert d15, d15, d4, #0, #0x5"
  -
    input:
      bytes: [ 0xdc, 0x0b ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ji a11"
  -
    input:
      bytes: [ 0x6d, 0x00, 0xf3, 0x08 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x11e6"
  -
    input:
      bytes: [ 0x3b, 0x00, 0x40, 0x40 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d4, #0x400"
  -
    input:
      bytes: [ 0xee, 0x10 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jnz d15, #0x20"
  -
    input:
      bytes: [ 0x3c, 0x2e ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #0x5c"
  -
    input:
      bytes: [ 0xa0, 0x34 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.a a4, #0x3"
  -
    input:
      bytes: [ 0x0b, 0x13, 0x80, 0xf2 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "or.ne d15, d3, d1"
  -
    input:
      bytes: [ 0xdf, 0x09, 0x38, 0x80 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne d9, #0, #0x70"
  -
    input:
      bytes: [ 0xa6, 0x42 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "or d2, d4"
  -
    input:
      bytes: [ 0x8f, 0x39, 0x00, 0xf1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "and d15, d9, #0x3"
  -
    input:
      bytes: [ 0x37, 0xf0, 0x01, 0xf2 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insert d15, d0, d15, #0x4, #0x1"
  -
    input:
      bytes: [ 0x06, 0x3f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sh d15, #0x3"
  -
    input:
      bytes: [ 0x3c, 0x40 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #0x80"
  -
    input:
      bytes: [ 0xff, 0x1b, 0xf2, 0x7f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jge d11, #0x1, #-0x1c"
  -
    input:
      bytes: [ 0xb7, 0x0f, 0x0c, 0xfa ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insert d15, d15, #0, #0x14, #0xc"
  -
    input:
      bytes: [ 0x3c, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #-0x20"
  -
    input:
      bytes: [ 0x91, 0x00, 0x00, 0xf7 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "movh.a a15, #0x7000"
  -
    input:
      bytes: [ 0x7f, 0xf0, 0x27, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jge d0, d15, #0x4e"
  -
    input:
      bytes: [ 0x4b, 0xf0, 0x51, 0x20 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "div.f d2, d0, d15"
  -
    input:
      bytes: [ 0x52, 0x52 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sub d2, d15, d5"
  -
    input:
      bytes: [ 0x26, 0xf3 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "and d3, d15"
  -
    input:
      bytes: [ 0x8f, 0xec, 0x1f, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sh d15, d12, #-0x2"
  -
    input:
      bytes: [ 0x87, 0x55, 0x9f, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "and.t d15, d5, #0x1f, d5, #0x1f"
  -
    input:
      bytes: [ 0x37, 0x0f, 0x61, 0xf3 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "extr.u d15, d15, #0x6, #0x1"
  -
    input:
      bytes: [ 0xa6, 0x5f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "or d15, d5"
  -
    input:
      bytes: [ 0xce, 0xf6 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jgez d15, #0xc"
  -
    input:
      bytes: [ 0xbd, 0x0e, 0x15, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz.a a14, #0x2a"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x6c, 0x11 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x22d8"
  -
    input:
      bytes: [ 0x4b, 0x0f, 0x41, 0x40 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mul.f d4, d15, d0"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x82, 0x2b ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x1a8fc"
  -
    input:
      bytes: [ 0x37, 0x0f, 0xe1, 0xf7 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "extr.u d15, d15, #0xf, #0x1"
  -
    input:
      bytes: [ 0xbe, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d15, d0, #0x20"
  -
    input:
      bytes: [ 0x96, 0x03 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "or d15, #0x3"
  -
    input:
      bytes: [ 0x8f, 0x8f, 0x01, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sh d0, d15, #0x18"
  -
    input:
      bytes: [ 0x3b, 0x00, 0x08, 0x40 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d4, #0x80"
  -
    input:
      bytes: [ 0x7f, 0xab, 0x04, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jge d11, d10, #0x8"
  -
    input:
      bytes: [ 0x02, 0x58 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d8, d5"
  -
    input:
      bytes: [ 0xdf, 0x08, 0x17, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d8, #0, #0x2e"
  -
    input:
      bytes: [ 0x60, 0xc2 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.a a2, d12"
  -
    input:
      bytes: [ 0x3c, 0xe2 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #-0x3c"
  -
    input:
      bytes: [ 0x49, 0xef, 0x01, 0x0a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a14]#0x1"
  -
    input:
      bytes: [ 0x37, 0x0f, 0x68, 0x10 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "extr.u d1, d15, #0, #0x8"
  -
    input:
      bytes: [ 0x6d, 0x00, 0xdb, 0x10 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x21b6"
  -
    input:
      bytes: [ 0xca, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "caddn d15, d15, #-0x1"
  -
    input:
      bytes: [ 0x0b, 0xf0, 0xa0, 0xf1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "max d15, d0, d15"
  -
    input:
      bytes: [ 0x8b, 0x00, 0x03, 0x40 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add d4, d0, #0x30"
  -
    input:
      bytes: [ 0x02, 0x86 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d6, d8"
  -
    input:
      bytes: [ 0xa2, 0x9f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sub d15, d9"
  -
    input:
      bytes: [ 0x3b, 0xf0, 0xff, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d0, #0xfff"
  -
    input:
      bytes: [ 0x49, 0xaf, 0x00, 0x1a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [sp]#0x40"
  -
    input:
      bytes: [ 0x37, 0x0f, 0x62, 0xf2 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "extr.u d15, d15, #0x4, #0x2"
  -
    input:
      bytes: [ 0xb4, 0xa4 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "st.h [sp], d4"
  -
    input:
      bytes: [ 0x6f, 0x09, 0x14, 0x80 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jnz.t d9, #0, #0x28"
  -
    input:
      bytes: [ 0x6d, 0x00, 0xcc, 0x08 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x1198"
  -
    input:
      bytes: [ 0xc2, 0xe5 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add d5, #-0x2"
  -
    input:
      bytes: [ 0x09, 0xdf, 0xe0, 0x08 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ld.hu d15, [a13]#0x20"
  -
    input:
      bytes: [ 0xee, 0x12 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jnz d15, #0x24"
  -
    input:
      bytes: [ 0x40, 0x7c ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.aa a12, a7"
  -
    input:
      bytes: [ 0x0b, 0xd1, 0x90, 0xf2 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "or.lt d15, d1, d13"
  -
    input:
      bytes: [ 0xff, 0x1a, 0xea, 0x7f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jge d10, #0x1, #-0x2c"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x73, 0x11 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x22e6"
  -
    input:
      bytes: [ 0x3b, 0xf0, 0x49, 0x02 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d0, #0x249f"
  -
    input:
      bytes: [ 0x37, 0x0f, 0x50, 0x10 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "extr d1, d15, #0, #0x10"
  -
    input:
      bytes: [ 0x6d, 0x00, 0xfc, 0x09 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x13f8"
  -
    input:
      bytes: [ 0xa0, 0xb4 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.a a4, #0xb"
  -
    input:
      bytes: [ 0x3b, 0x00, 0x04, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d0, #0x40"
  -
    input:
      bytes: [ 0x3c, 0x22 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #0x44"
  -
    input:
      bytes: [ 0x6f, 0x10, 0xf2, 0x7f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz.t d0, #0x1, #-0x1c"
  -
    input:
      bytes: [ 0x4b, 0xf2, 0x41, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mul.f d15, d2, d15"
  -
    input:
      bytes: [ 0x6d, 0x00, 0xc3, 0x03 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x786"
  -
    input:
      bytes: [ 0x7f, 0x0f, 0x05, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jge d15, d0, #0xa"
  -
    input:
      bytes: [ 0xd9, 0xff, 0x38, 0x10 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#0x78"
  -
    input:
      bytes: [ 0x3b, 0xa0, 0x06, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d0, #0x6a"
  -
    input:
      bytes: [ 0x91, 0x40, 0x00, 0x4f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "movh.a a4, #0xf004"
  -
    input:
      bytes: [ 0x8f, 0xf5, 0x0f, 0xf1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "and d15, d5, #0xff"
  -
    input:
      bytes: [ 0x7f, 0x2f, 0x05, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jge d15, d2, #0xa"
  -
    input:
      bytes: [ 0x3b, 0xc0, 0x00, 0x40 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d4, #0xc"
  -
    input:
      bytes: [ 0x37, 0x00, 0x62, 0xf2 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "extr.u d15, d0, #0x4, #0x2"
  -
    input:
      bytes: [ 0x0b, 0xfa, 0x10, 0x68 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov e6, d10, d15"
  -
    input:
      bytes: [ 0x3b, 0x70, 0x06, 0x10 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d1, #0x67"
  -
    input:
      bytes: [ 0x61, 0xff, 0xd2, 0xd8 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "fcall #-0x4e5c"
  -
    input:
      bytes: [ 0x67, 0xaa, 0xbf, 0xaf ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insn.t d10, d10, #0x1f, d10, #0x1f"
  -
    input:
      bytes: [ 0x8b, 0x0f, 0x03, 0x40 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add d4, d15, #0x30"
  -
    input:
      bytes: [ 0x01, 0xe2, 0x00, 0x26 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "addsc.a a2, a14, d2, #0"
  -
    input:
      bytes: [ 0x8f, 0x71, 0x01, 0x20 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sh d2, d1, #0x17"
  -
    input:
      bytes: [ 0x06, 0x62 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sh d2, #0x6"
  -
    input:
      bytes: [ 0xd9, 0xdd, 0xe4, 0x10 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a13, [a13]#0xc64"
  -
    input:
      bytes: [ 0x0b, 0x82, 0x50, 0x01 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ge.u d0, d2, d8"
  -
    input:
      bytes: [ 0x5f, 0xef, 0x6c, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d15, d14, #0xd8"
  -
    input:
      bytes: [ 0x3c, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #-0x2"
  -
    input:
      bytes: [ 0x6e, 0x0f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz d15, #0x1e"
  -
    input:
      bytes: [ 0x02, 0x12 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d2, d1"
  -
    input:
      bytes: [ 0x5f, 0x0f, 0xf1, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne d15, d0, #-0x1e"
  -
    input:
      bytes: [ 0x37, 0x0f, 0x61, 0xf2 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "extr.u d15, d15, #0x4, #0x1"
  -
    input:
      bytes: [ 0x7b, 0x00, 0xf8, 0xb3 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "movh d11, #0x3f80"
  -
    input:
      bytes: [ 0x49, 0xa5, 0x0c, 0x0a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a5, [sp]#0xc"
  -
    input:
      bytes: [ 0x76, 0x8c ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz d8, #0x18"
  -
    input:
      bytes: [ 0x03, 0x6d, 0x0a, 0x90 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "madd d9, d0, d13, d6"
  -
    input:
      bytes: [ 0xbe, 0x41 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d15, d4, #0x22"
  -
    input:
      bytes: [ 0x57, 0x00, 0x62, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "extr.u d15, d0, d15, #0x2"
  -
    input:
      bytes: [ 0xb7, 0x00, 0x89, 0xfb ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insert d15, d0, #0, #0x17, #0x9"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x86, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0xf4"
  -
    input:
      bytes: [ 0x6d, 0xff, 0xa9, 0xf4 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x16ae"
  -
    input:
      bytes: [ 0x37, 0x04, 0x68, 0x40 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "extr.u d4, d4, #0, #0x8"
  -
    input:
      bytes: [ 0x3b, 0x00, 0x16, 0x50 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d5, #0x160"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x13, 0xfa ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0xbda"
  -
    input:
      bytes: [ 0xd9, 0xff, 0xb0, 0xda ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#-0x5490"
  -
    input:
      bytes: [ 0x7d, 0xef, 0x03, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq.a a15, a14, #0x6"
  -
    input:
      bytes: [ 0x9a, 0x49 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add d15, d9, #0x4"
  -
    input:
      bytes: [ 0xd9, 0x22, 0x36, 0x61 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a2, [a2]#0x11b6"
  -
    input:
      bytes: [ 0x91, 0x40, 0x00, 0xf6 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "movh.a a15, #0x6004"
  -
    input:
      bytes: [ 0xd9, 0xff, 0x30, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#0x3f0"
  -
    input:
      bytes: [ 0x8f, 0x3f, 0x00, 0x10 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sh d1, d15, #0x3"
  -
    input:
      bytes: [ 0x6f, 0x5a, 0x06, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz.t d10, #0x5, #0xc"
  -
    input:
      bytes: [ 0x6d, 0x00, 0xd8, 0x02 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x5b0"
  -
    input:
      bytes: [ 0xa2, 0x1f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sub d15, d1"
  -
    input:
      bytes: [ 0xc2, 0xf8 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add d8, #-0x1"
  -
    input:
      bytes: [ 0x49, 0xfc, 0x14, 0x0a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a12, [a15]#0x14"
  -
    input:
      bytes: [ 0xc6, 0x10 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "xor d0, d1"
  -
    input:
      bytes: [ 0x6b, 0x02, 0x31, 0xf4 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sub.f d15, d4, d2"
  -
    input:
      bytes: [ 0x37, 0x0f, 0x50, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "extr d0, d15, #0, #0x10"
  -
    input:
      bytes: [ 0xbb, 0x00, 0xa0, 0x1b ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.u d1, #0xba00"
  -
    input:
      bytes: [ 0xa2, 0xdc ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sub d12, d13"
  -
    input:
      bytes: [ 0x8b, 0x0f, 0x00, 0x92 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "eq d9, d15, #0"
  -
    input:
      bytes: [ 0x40, 0xf4 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.aa a4, a15"
  -
    input:
      bytes: [ 0x3b, 0xd0, 0x02, 0x40 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d4, #0x2d"
  -
    input:
      bytes: [ 0xee, 0xe9 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jnz d15, #-0x2e"
  -
    input:
      bytes: [ 0xbe, 0x07 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d15, d0, #0x2e"
  -
    input:
      bytes: [ 0xd9, 0x22, 0x96, 0x71 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a2, [a2]#0x19d6"
  -
    input:
      bytes: [ 0x3b, 0x70, 0x04, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d0, #0x47"
  -
    input:
      bytes: [ 0x37, 0x0f, 0x05, 0xf8 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insert d15, d15, d0, #0x10, #0x5"
  -
    input:
      bytes: [ 0x01, 0x2f, 0x10, 0xf4 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ne.a d15, a15, a2"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x79, 0x1a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x34f2"
  -
    input:
      bytes: [ 0x3b, 0x60, 0x04, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d0, #0x46"
  -
    input:
      bytes: [ 0x8b, 0x00, 0x20, 0xf2 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ne d15, d0, #0"
  -
    input:
      bytes: [ 0x42, 0xf8 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add d8, d15"
  -
    input:
      bytes: [ 0x37, 0x0f, 0x50, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "extr d15, d15, #0, #0x10"
  -
    input:
      bytes: [ 0xd9, 0xff, 0x10, 0x20 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#0x90"
  -
    input:
      bytes: [ 0x8f, 0x38, 0x20, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sha d15, d8, #0x3"
  -
    input:
      bytes: [ 0xa2, 0xf4 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sub d4, d15"
  -
    input:
      bytes: [ 0x3b, 0x50, 0x04, 0x10 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d1, #0x45"
  -
    input:
      bytes: [ 0x02, 0xe4 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d4, d14"
  -
    input:
      bytes: [ 0x8f, 0x4a, 0x40, 0xa1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "or d10, d10, #0x4"
  -
    input:
      bytes: [ 0x4b, 0xfa, 0x41, 0x40 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mul.f d4, d10, d15"
  -
    input:
      bytes: [ 0x49, 0xaa, 0x00, 0x8a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea sp, [sp]#-0x200"
  -
    input:
      bytes: [ 0x61, 0xff, 0x60, 0xd9 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "fcall #-0x4d40"
  -
    input:
      bytes: [ 0x6d, 0xff, 0xa6, 0x3e ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x182b4"
  -
    input:
      bytes: [ 0xd9, 0x44, 0x00, 0x0a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a4, [a4]#-0x6000"
  -
    input:
      bytes: [ 0x6d, 0xff, 0xbc, 0xfd ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x488"
  -
    input:
      bytes: [ 0x02, 0x89 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d9, d8"
  -
    input:
      bytes: [ 0x37, 0x0f, 0x01, 0xf2 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insert d15, d15, d0, #0x4, #0x1"
  -
    input:
      bytes: [ 0xf6, 0xa3 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jnz d10, #0x6"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x57, 0x11 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x22ae"
  -
    input:
      bytes: [ 0xc2, 0x19 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add d9, #0x1"
  -
    input:
      bytes: [ 0x3c, 0x15 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #0x2a"
  -
    input:
      bytes: [ 0x6d, 0xff, 0xf0, 0xfd ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x420"
  -
    input:
      bytes: [ 0x3b, 0x20, 0x07, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d0, #0x72"
  -
    input:
      bytes: [ 0x8f, 0x8f, 0x00, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sh d15, d15, #0x8"
  -
    input:
      bytes: [ 0xd9, 0x55, 0x20, 0xfa ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a5, [a5]#-0x5c20"
  -
    input:
      bytes: [ 0x8f, 0x31, 0x40, 0xf1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "or d15, d1, #0x3"
  -
    input:
      bytes: [ 0x80, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.d d15, a15"
  -
    input:
      bytes: [ 0x0b, 0x40, 0x40, 0x20 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "addx d2, d0, d4"
  -
    input:
      bytes: [ 0xb7, 0x0f, 0x02, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insert d15, d15, #0, #0, #0x2"
  -
    input:
      bytes: [ 0x0b, 0x26, 0x10, 0xf1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ne d15, d6, d2"
  -
    input:
      bytes: [ 0x88, 0x8f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ld.h d15, [a15]#0x10"
  -
    input:
      bytes: [ 0x91, 0x00, 0x00, 0x27 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "movh.a a2, #0x7000"
  -
    input:
      bytes: [ 0x6d, 0xff, 0xe7, 0xfe ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x232"
  -
    input:
      bytes: [ 0x5f, 0x0f, 0xc2, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d15, d0, #0x184"
  -
    input:
      bytes: [ 0x09, 0x20, 0x94, 0x08 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ld.h d0, [a2]#0x14"
  -
    input:
      bytes: [ 0x91, 0x50, 0x02, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "movh.a a15, #0xf025"
  -
    input:
      bytes: [ 0x91, 0x40, 0x00, 0x26 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "movh.a a2, #0x6004"
  -
    input:
      bytes: [ 0xbd, 0x04, 0x31, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz.a a4, #0x62"
  -
    input:
      bytes: [ 0xd9, 0x22, 0x1a, 0x11 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a2, [a2]#0x105a"
  -
    input:
      bytes: [ 0x53, 0xc2, 0x20, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mul d15, d2, #0xc"
  -
    input:
      bytes: [ 0xbd, 0x0d, 0x22, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz.a a13, #0x44"
  -
    input:
      bytes: [ 0x0b, 0x71, 0x50, 0x90 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "addc d9, d1, d7"
  -
    input:
      bytes: [ 0x30, 0x43 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add.a a3, a4"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x9f, 0x01 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x33e"
  -
    input:
      bytes: [ 0x02, 0x98 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d8, d9"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x85, 0x12 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x250a"
  -
    input:
      bytes: [ 0x02, 0x01 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d1, d0"
  -
    input:
      bytes: [ 0x20, 0x10 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sub.a sp, #0x10"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x5d, 0xf4 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x1746"
  -
    input:
      bytes: [ 0x91, 0x00, 0x00, 0xe8 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "movh.a a14, #0x8000"
  -
    input:
      bytes: [ 0x02, 0x9c ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d12, d9"
  -
    input:
      bytes: [ 0x7e, 0x1d ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne d15, d1, #0x1a"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x7b, 0xfa ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0xb0a"
  -
    input:
      bytes: [ 0xb7, 0x0f, 0x1c, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insert d15, d15, #0, #0, #0x1c"
  -
    input:
      bytes: [ 0x5f, 0x0f, 0xdc, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d15, d0, #0x1b8"
  -
    input:
      bytes: [ 0x02, 0xc4 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d4, d12"
  -
    input:
      bytes: [ 0xd9, 0x22, 0xb0, 0x4a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a2, [a2]#-0x56d0"
  -
    input:
      bytes: [ 0x8f, 0xff, 0x83, 0x31 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "xor d3, d15, #0x3f"
  -
    input:
      bytes: [ 0x37, 0x0f, 0x81, 0xf1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insert d15, d15, d0, #0x3, #0x1"
  -
    input:
      bytes: [ 0xd9, 0xff, 0x20, 0x80 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#0x220"
  -
    input:
      bytes: [ 0x76, 0x13 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz d1, #0x6"
  -
    input:
      bytes: [ 0x6d, 0x00, 0xf8, 0x10 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x21f0"
  -
    input:
      bytes: [ 0x53, 0x40, 0x20, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mul d15, d0, #0x4"
  -
    input:
      bytes: [ 0xda, 0x0f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d15, #0xf"
  -
    input:
      bytes: [ 0xbf, 0x10, 0xf5, 0x7f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jlt d0, #0x1, #-0x16"
  -
    input:
      bytes: [ 0x8f, 0x41, 0x1f, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sh d15, d1, #-0xc"
  -
    input:
      bytes: [ 0x4b, 0xf0, 0x51, 0xf1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "q31tof d15, d0, d15"
  -
    input:
      bytes: [ 0x89, 0x40, 0x84, 0x08 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "st.h [a4]#0x4, d0"
  -
    input:
      bytes: [ 0x5f, 0x0f, 0x6e, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d15, d0, #0xdc"
  -
    input:
      bytes: [ 0x3b, 0x80, 0x01, 0xb0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d11, #0x18"
  -
    input:
      bytes: [ 0x8f, 0xdf, 0x0f, 0x41 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "and d4, d15, #0xfd"
  -
    input:
      bytes: [ 0x6d, 0x00, 0xc7, 0x0d ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x1b8e"
  -
    input:
      bytes: [ 0xa2, 0x31 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sub d1, d3"
  -
    input:
      bytes: [ 0x0b, 0x13, 0x90, 0xf2 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "or.lt d15, d3, d1"
  -
    input:
      bytes: [ 0xdf, 0x04, 0x50, 0x02 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d4, #0, #0x4a0"
  -
    input:
      bytes: [ 0xd9, 0x44, 0xa8, 0x4a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a4, [a4]#-0x56d8"
  -
    input:
      bytes: [ 0x3b, 0x30, 0x02, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d0, #0x23"
  -
    input:
      bytes: [ 0xc2, 0x10 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add d0, #0x1"
  -
    input:
      bytes: [ 0x5f, 0x0f, 0xed, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne d15, d0, #-0x26"
  -
    input:
      bytes: [ 0x91, 0x00, 0x03, 0xfa ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "movh.a a15, #0xa030"
  -
    input:
      bytes: [ 0xda, 0x0d ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d15, #0xd"
  -
    input:
      bytes: [ 0x7e, 0x44 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne d15, d4, #0x8"
  -
    input:
      bytes: [ 0xf6, 0x84 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jnz d8, #0x8"
  -
    input:
      bytes: [ 0xb7, 0x2f, 0x02, 0xf5 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insert d15, d15, #0x2, #0xa, #0x2"
  -
    input:
      bytes: [ 0x82, 0x74 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d4, #0x7"
  -
    input:
      bytes: [ 0xfc, 0x2f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "loop a2, #-0x2"
  -
    input:
      bytes: [ 0xd9, 0xff, 0x2c, 0x80 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#0x22c"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x0d, 0xf9 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0xde6"
  -
    input:
      bytes: [ 0xd9, 0x55, 0x54, 0x5a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a5, [a5]#-0x5aac"
  -
    input:
      bytes: [ 0x4b, 0xdb, 0x41, 0xb0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mul.f d11, d11, d13"
  -
    input:
      bytes: [ 0xc2, 0x3f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add d15, #0x3"
  -
    input:
      bytes: [ 0x7f, 0x89, 0x2c, 0x7f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jge d9, d8, #-0x1a8"
  -
    input:
      bytes: [ 0x2e, 0x2c ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz.t d15, #0x2, #0x18"
  -
    input:
      bytes: [ 0x40, 0xbf ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.aa a15, a11"
  -
    input:
      bytes: [ 0x6f, 0x1f, 0xfa, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jnz.t d15, #0x1, #-0xc"
  -
    input:
      bytes: [ 0x40, 0xd5 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.aa a5, a13"
  -
    input:
      bytes: [ 0xc2, 0x7f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add d15, #0x7"
  -
    input:
      bytes: [ 0xdf, 0x08, 0xd4, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d8, #0, #0x1a8"
  -
    input:
      bytes: [ 0x37, 0x05, 0x68, 0xf8 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "extr.u d15, d5, #0x10, #0x8"
  -
    input:
      bytes: [ 0x49, 0xa4, 0x06, 0x0a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a4, [sp]#0x6"
  -
    input:
      bytes: [ 0x7f, 0x80, 0x18, 0x80 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jge.u d0, d8, #0x30"
  -
    input:
      bytes: [ 0x6d, 0x00, 0xe5, 0x09 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x13ca"
  -
    input:
      bytes: [ 0x0b, 0x40, 0x50, 0xf1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ge.u d15, d0, d4"
  -
    input:
      bytes: [ 0x53, 0x4b, 0x20, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mul d15, d11, #0x4"
  -
    input:
      bytes: [ 0xbb, 0xf0, 0xff, 0x6f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.u d6, #0xffff"
  -
    input:
      bytes: [ 0x49, 0xf2, 0x1c, 0x0a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a2, [a15]#0x1c"
  -
    input:
      bytes: [ 0x76, 0x28 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz d2, #0x10"
  -
    input:
      bytes: [ 0x7e, 0x07 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne d15, d0, #0xe"
  -
    input:
      bytes: [ 0x6f, 0x08, 0x19, 0x80 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jnz.t d8, #0, #0x32"
  -
    input:
      bytes: [ 0x01, 0xfe, 0x20, 0xf4 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lt.a d15, a14, a15"
  -
    input:
      bytes: [ 0x3f, 0xf0, 0x05, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jlt d0, d15, #0xa"
  -
    input:
      bytes: [ 0x6d, 0xff, 0xf7, 0xfe ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x212"
  -
    input:
      bytes: [ 0xd9, 0xff, 0xac, 0xba ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#-0x5514"
  -
    input:
      bytes: [ 0x02, 0xf4 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d4, d15"
  -
    input:
      bytes: [ 0x8f, 0x24, 0x00, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sh d15, d4, #0x2"
  -
    input:
      bytes: [ 0xd9, 0x44, 0x0c, 0x96 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a4, [a4]#0x624c"
  -
    input:
      bytes: [ 0xd9, 0xff, 0x68, 0x60 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#0x5a8"
  -
    input:
      bytes: [ 0x3c, 0x3b ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #0x76"
  -
    input:
      bytes: [ 0x86, 0x5f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sha d15, #0x5"
  -
    input:
      bytes: [ 0x6e, 0x30 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz d15, #0x60"
  -
    input:
      bytes: [ 0x3f, 0xaf, 0xf7, 0x7f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jlt d15, d10, #-0x12"
  -
    input:
      bytes: [ 0x5f, 0x0f, 0x3c, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d15, d0, #0x78"
  -
    input:
      bytes: [ 0x26, 0x42 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "and d2, d4"
  -
    input:
      bytes: [ 0xfc, 0x4e ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "loop a4, #-0x4"
  -
    input:
      bytes: [ 0x7b, 0x00, 0x00, 0x0d ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "movh d0, #0xd000"
  -
    input:
      bytes: [ 0xd9, 0x55, 0x74, 0x5a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a5, [a5]#-0x5a8c"
  -
    input:
      bytes: [ 0x49, 0xa2, 0x00, 0x1a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a2, [sp]#0x40"
  -
    input:
      bytes: [ 0xdf, 0x08, 0x26, 0x80 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne d8, #0, #0x4c"
  -
    input:
      bytes: [ 0xa6, 0x40 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "or d0, d4"
  -
    input:
      bytes: [ 0x6d, 0xff, 0xc2, 0xfa ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0xa7c"
  -
    input:
      bytes: [ 0x1d, 0xff, 0x4d, 0xfe ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #-0x366"
  -
    input:
      bytes: [ 0x82, 0xf2 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d2, #-0x1"
  -
    input:
      bytes: [ 0xc5, 0xf5, 0x80, 0xc0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a5, #0xf0000b00"
  -
    input:
      bytes: [ 0x3c, 0x33 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #0x66"
  -
    input:
      bytes: [ 0x8b, 0xff, 0x20, 0xf3 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "min.u d15, d15, #0xf"
  -
    input:
      bytes: [ 0xdf, 0x04, 0xfd, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne d4, #0, #-0x6"
  -
    input:
      bytes: [ 0x8f, 0x34, 0x40, 0xf1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "or d15, d4, #0x3"
  -
    input:
      bytes: [ 0x89, 0xff, 0xa0, 0x08 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "st.h [a15]#0x20, d15"
  -
    input:
      bytes: [ 0xed, 0x00, 0x00, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "calla #0"
  -
    input:
      bytes: [ 0x1d, 0xff, 0xa6, 0xfe ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #-0x2b4"
  -
    input:
      bytes: [ 0x80, 0x50 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.d d0, a5"
  -
    input:
      bytes: [ 0x16, 0x0f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "and d15, #0xf"
  -
    input:
      bytes: [ 0x3c, 0x1c ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #0x38"
  -
    input:
      bytes: [ 0xee, 0x1f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jnz d15, #0x3e"
  -
    input:
      bytes: [ 0x82, 0x0b ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d11, #0"
  -
    input:
      bytes: [ 0x7f, 0xf8, 0x0a, 0x80 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jge.u d8, d15, #0x14"
  -
    input:
      bytes: [ 0x8f, 0x0a, 0x02, 0x11 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "and d1, d10, #0x20"
  -
    input:
      bytes: [ 0x8b, 0x0f, 0xc0, 0x4a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "eqany.b d4, d15, #0"
  -
    input:
      bytes: [ 0x49, 0xf2, 0x19, 0x0a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a2, [a15]#0x19"
  -
    input:
      bytes: [ 0xbf, 0x19, 0xe1, 0x7f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jlt d9, #0x1, #-0x3e"
  -
    input:
      bytes: [ 0x3b, 0x00, 0x00, 0x31 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d3, #0x1000"
  -
    input:
      bytes: [ 0x3c, 0x27 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #0x4e"
  -
    input:
      bytes: [ 0x6d, 0xff, 0xf7, 0xf9 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0xc12"
  -
    input:
      bytes: [ 0xbb, 0xf0, 0xff, 0x9f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.u d9, #0xffff"
  -
    input:
      bytes: [ 0x60, 0x22 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.a a2, d2"
  -
    input:
      bytes: [ 0x6d, 0xff, 0xac, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0xa8"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x3d, 0x08 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x107a"
  -
    input:
      bytes: [ 0xb7, 0x04, 0x02, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insert d15, d4, #0, #0, #0x2"
  -
    input:
      bytes: [ 0x2e, 0x08 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz.t d15, #0, #0x10"
  -
    input:
      bytes: [ 0xd9, 0xaa, 0x40, 0x89 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea sp, [sp]#-0x6a00"
  -
    input:
      bytes: [ 0x0b, 0x0c, 0x50, 0xf1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ge.u d15, d12, d0"
  -
    input:
      bytes: [ 0x49, 0xf2, 0x30, 0x0a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a2, [a15]#0x30"
  -
    input:
      bytes: [ 0x40, 0xfd ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.aa a13, a15"
  -
    input:
      bytes: [ 0xf6, 0x83 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jnz d8, #0x6"
  -
    input:
      bytes: [ 0x1d, 0x00, 0xcb, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #0x196"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x4c, 0x07 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0xe98"
  -
    input:
      bytes: [ 0x8f, 0xff, 0x83, 0x91 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "xor d9, d15, #0x3f"
  -
    input:
      bytes: [ 0x3e, 0xe8 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d15, d14, #0x10"
  -
    input:
      bytes: [ 0x0b, 0x0f, 0x20, 0x11 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lt d1, d15, d0"
  -
    input:
      bytes: [ 0x76, 0x26 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz d2, #0xc"
  -
    input:
      bytes: [ 0x02, 0x07 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d7, d0"
  -
    input:
      bytes: [ 0x6d, 0xff, 0xcc, 0xf9 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0xc68"
  -
    input:
      bytes: [ 0xff, 0xdf, 0x33, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jge d15, #-0x3, #0x66"
  -
    input:
      bytes: [ 0x12, 0x80 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add d0, d15, d8"
  -
    input:
      bytes: [ 0xdf, 0x0c, 0xd3, 0x7f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d12, #0, #-0x5a"
  -
    input:
      bytes: [ 0x3c, 0x62 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #0xc4"
  -
    input:
      bytes: [ 0xc2, 0x5f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add d15, #0x5"
  -
    input:
      bytes: [ 0xee, 0x08 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jnz d15, #0x10"
  -
    input:
      bytes: [ 0x37, 0xf0, 0x81, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insert d15, d0, d15, #0x1, #0x1"
  -
    input:
      bytes: [ 0x8b, 0x02, 0x20, 0xf2 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ne d15, d2, #0"
  -
    input:
      bytes: [ 0x1d, 0x00, 0x1b, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #0x36"
  -
    input:
      bytes: [ 0x37, 0x0a, 0x50, 0x40 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "extr d4, d10, #0, #0x10"
  -
    input:
      bytes: [ 0x7b, 0x10, 0x00, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "movh d15, #0x1"
  -
    input:
      bytes: [ 0xd9, 0x22, 0x1a, 0x71 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a2, [a2]#0x11da"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x07, 0x04 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x80e"
  -
    input:
      bytes: [ 0x01, 0x2f, 0x20, 0xf4 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lt.a d15, a15, a2"
  -
    input:
      bytes: [ 0x3b, 0x00, 0x07, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d0, #0x70"
  -
    input:
      bytes: [ 0xbd, 0x0e, 0x1e, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz.a a14, #0x3c"
  -
    input:
      bytes: [ 0xd9, 0xff, 0x40, 0x4b ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#-0x4b00"
  -
    input:
      bytes: [ 0x40, 0x6d ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.aa a13, a6"
  -
    input:
      bytes: [ 0x12, 0x19 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add d9, d15, d1"
  -
    input:
      bytes: [ 0x88, 0x9f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ld.h d15, [a15]#0x12"
  -
    input:
      bytes: [ 0xdf, 0x00, 0x2e, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d0, #0, #0x5c"
  -
    input:
      bytes: [ 0x6d, 0x00, 0xbe, 0x0f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x1f7c"
  -
    input:
      bytes: [ 0x90, 0x22 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "addsc.a a2, a2, d15, #0x2"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x79, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0xf2"
  -
    input:
      bytes: [ 0xd9, 0x22, 0x3e, 0x61 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a2, [a2]#0x11be"
  -
    input:
      bytes: [ 0x8b, 0x0f, 0x02, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add d15, d15, #0x20"
  -
    input:
      bytes: [ 0x6d, 0x00, 0xf2, 0x04 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x9e4"
  -
    input:
      bytes: [ 0x8f, 0x75, 0x00, 0xf1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "and d15, d5, #0x7"
  -
    input:
      bytes: [ 0xda, 0x20 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d15, #0x20"
  -
    input:
      bytes: [ 0xab, 0x1f, 0x18, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "cadd d15, d15, d15, #-0x7f"
  -
    input:
      bytes: [ 0x40, 0xc2 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.aa a2, a12"
  -
    input:
      bytes: [ 0x9b, 0x5e, 0xcf, 0xe3 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "addih d14, d14, #0x3cf5"
  -
    input:
      bytes: [ 0x0f, 0xf1, 0x00, 0x10 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sh d1, d1, d15"
  -
    input:
      bytes: [ 0x3b, 0x00, 0x00, 0x01 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d0, #0x1000"
  -
    input:
      bytes: [ 0xd9, 0x55, 0x90, 0xca ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a5, [a5]#-0x54f0"
  -
    input:
      bytes: [ 0x91, 0x20, 0x00, 0x48 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "movh.a a4, #0x8002"
  -
    input:
      bytes: [ 0x3f, 0xf8, 0xf0, 0x7f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jlt d8, d15, #-0x20"
  -
    input:
      bytes: [ 0x6d, 0xff, 0xd0, 0x2b ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x1a860"
  -
    input:
      bytes: [ 0xbf, 0x19, 0xef, 0x7f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jlt d9, #0x1, #-0x22"
  -
    input:
      bytes: [ 0x6d, 0xff, 0xf6, 0xfe ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x214"
  -
    input:
      bytes: [ 0x0f, 0x20, 0x10, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sha d0, d0, d2"
  -
    input:
      bytes: [ 0x7e, 0x2c ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne d15, d2, #0x18"
  -
    input:
      bytes: [ 0x02, 0x24 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d4, d2"
  -
    input:
      bytes: [ 0x8b, 0x70, 0x01, 0x01 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "rsub d0, d0, #0x17"
  -
    input:
      bytes: [ 0xbb, 0x00, 0xc2, 0x0b ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.u d0, #0xbc20"
  -
    input:
      bytes: [ 0x40, 0x64 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.aa a4, a6"
  -
    input:
      bytes: [ 0xda, 0x58 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d15, #0x58"
  -
    input:
      bytes: [ 0x49, 0xa6, 0x02, 0x0a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a6, [sp]#0x2"
  -
    input:
      bytes: [ 0x6f, 0x0f, 0x16, 0x80 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jnz.t d15, #0, #0x2c"
  -
    input:
      bytes: [ 0xd9, 0xff, 0x1c, 0x0b ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#-0x4fe4"
  -
    input:
      bytes: [ 0xbc, 0xf3 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz.a a15, #0x6"
  -
    input:
      bytes: [ 0x6d, 0xff, 0xa6, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0xb4"
  -
    input:
      bytes: [ 0x8b, 0x03, 0xa0, 0x30 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "addc d3, d3, #0"
  -
    input:
      bytes: [ 0x5f, 0xef, 0x73, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d15, d14, #0xe6"
  -
    input:
      bytes: [ 0x1d, 0xff, 0x28, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #-0x1b0"
  -
    input:
      bytes: [ 0x37, 0x0f, 0x02, 0xf3 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insert d15, d15, d0, #0x6, #0x2"
  -
    input:
      bytes: [ 0xd2, 0x04 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov e4, #0"
  -
    input:
      bytes: [ 0x82, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d0, #0"
  -
    input:
      bytes: [ 0x4b, 0x30, 0x11, 0x42 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "div.u e4, d0, d3"
  -
    input:
      bytes: [ 0x6d, 0x00, 0xcd, 0x0c ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x199a"
  -
    input:
      bytes: [ 0x8f, 0xff, 0x83, 0xa1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "xor d10, d15, #0x3f"
  -
    input:
      bytes: [ 0x3f, 0x10, 0xee, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jlt.u d0, d1, #-0x24"
  -
    input:
      bytes: [ 0x16, 0x04 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "and d15, #0x4"
  -
    input:
      bytes: [ 0x3c, 0x1d ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #0x3a"
  -
    input:
      bytes: [ 0xd9, 0xff, 0xce, 0x61 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#0x1d8e"
  -
    input:
      bytes: [ 0x3b, 0xb0, 0x0d, 0x40 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d4, #0xdb"
  -
    input:
      bytes: [ 0x49, 0xc2, 0x04, 0x0a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a2, [a12]#0x4"
  -
    input:
      bytes: [ 0x32, 0x52 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "rsub d2"
  -
    input:
      bytes: [ 0xd9, 0xdd, 0xac, 0xba ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a13, [a13]#-0x5514"
  -
    input:
      bytes: [ 0x7e, 0x13 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne d15, d1, #0x6"
  -
    input:
      bytes: [ 0xae, 0x22 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jnz.t d15, #0x2, #0x4"
  -
    input:
      bytes: [ 0xd9, 0xff, 0xcc, 0x51 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#0x1d4c"
  -
    input:
      bytes: [ 0x6d, 0xff, 0xfc, 0xf7 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x1008"
  -
    input:
      bytes: [ 0x10, 0xaf ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "addsc.a a15, sp, d15, #0"
  -
    input:
      bytes: [ 0x7b, 0xc0, 0xff, 0x0f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "movh d0, #0xfffc"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x5d, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0xba"
  -
    input:
      bytes: [ 0xd9, 0xff, 0xe4, 0x2a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#-0x535c"
  -
    input:
      bytes: [ 0x4b, 0x1f, 0x51, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "div.f d15, d15, d1"
  -
    input:
      bytes: [ 0x9a, 0x48 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add d15, d8, #0x4"
  -
    input:
      bytes: [ 0x37, 0xf3, 0x08, 0x38 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insert d3, d3, d15, #0x10, #0x8"
  -
    input:
      bytes: [ 0x82, 0x0c ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d12, #0"
  -
    input:
      bytes: [ 0x6d, 0xe8, 0x91, 0x0b ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x2fe8de"
  -
    input:
      bytes: [ 0x6d, 0x00, 0xae, 0x0d ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x1b5c"
  -
    input:
      bytes: [ 0xb0, 0x4c ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add.a a12, #0x4"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x43, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x17a"
  -
    input:
      bytes: [ 0xd9, 0xdd, 0xb0, 0xba ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a13, [a13]#-0x5510"
  -
    input:
      bytes: [ 0x9b, 0x04, 0x05, 0x40 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "addih d4, d4, #0x50"
  -
    input:
      bytes: [ 0x1d, 0x00, 0x02, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #0x4"
  -
    input:
      bytes: [ 0x37, 0x00, 0x61, 0x03 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "extr.u d0, d0, #0x6, #0x1"
  -
    input:
      bytes: [ 0x6e, 0x06 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz d15, #0xc"
  -
    input:
      bytes: [ 0xdf, 0x1f, 0x23, 0x80 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne d15, #0x1, #0x46"
  -
    input:
      bytes: [ 0xb0, 0x1f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add.a a15, #0x1"
  -
    input:
      bytes: [ 0xbf, 0x85, 0x23, 0x80 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jlt.u d5, #0x8, #0x46"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x10, 0xfe ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x3e0"
  -
    input:
      bytes: [ 0x40, 0x5f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.aa a15, a5"
  -
    input:
      bytes: [ 0x3c, 0x08 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #0x10"
  -
    input:
      bytes: [ 0xdf, 0x0c, 0xe0, 0x7f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d12, #0, #-0x40"
  -
    input:
      bytes: [ 0xd9, 0x22, 0x26, 0x11 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a2, [a2]#0x1066"
  -
    input:
      bytes: [ 0xfe, 0x0c ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne d15, d0, #0x38"
  -
    input:
      bytes: [ 0x60, 0xf2 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.a a2, d15"
  -
    input:
      bytes: [ 0x2e, 0x36 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz.t d15, #0x3, #0xc"
  -
    input:
      bytes: [ 0x6f, 0x19, 0x13, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz.t d9, #0x1, #0x26"
  -
    input:
      bytes: [ 0x3f, 0x0f, 0xf0, 0x7f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jlt d15, d0, #-0x20"
  -
    input:
      bytes: [ 0x4b, 0xf1, 0x51, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "div.f d0, d1, d15"
  -
    input:
      bytes: [ 0xda, 0x7f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d15, #0x7f"
  -
    input:
      bytes: [ 0xd9, 0x55, 0xc0, 0x88 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a5, [a5]#-0x7200"
  -
    input:
      bytes: [ 0x0f, 0x00, 0xb0, 0x21 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "clz d2, d0"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x67, 0xfe ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x332"
  -
    input:
      bytes: [ 0x1d, 0x00, 0xaa, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #0x154"
  -
    input:
      bytes: [ 0xf6, 0x0a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jnz d0, #0x14"
  -
    input:
      bytes: [ 0x2e, 0x03 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jz.t d15, #0, #0x6"
  -
    input:
      bytes: [ 0x6d, 0xff, 0xba, 0xf9 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0xc8c"
  -
    input:
      bytes: [ 0x37, 0x0f, 0xe1, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "extr.u d15, d15, #0x1, #0x1"
  -
    input:
      bytes: [ 0x06, 0xec ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sh d12, #-0x2"
  -
    input:
      bytes: [ 0x37, 0xf0, 0x02, 0x0f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insert d0, d0, d15, #0x1e, #0x2"
  -
    input:
      bytes: [ 0x6d, 0x00, 0xfc, 0x11 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x23f8"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x32, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x19c"
  -
    input:
      bytes: [ 0x37, 0x9f, 0x83, 0xf1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insert d15, d15, d9, #0x3, #0x3"
  -
    input:
      bytes: [ 0x5f, 0x0f, 0x28, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d15, d0, #0x50"
  -
    input:
      bytes: [ 0xd9, 0x22, 0x22, 0x61 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a2, [a2]#0x11a2"
  -
    input:
      bytes: [ 0x3b, 0x00, 0x50, 0x50 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d5, #0x500"
  -
    input:
      bytes: [ 0x6f, 0x0f, 0xfe, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jnz.t d15, #0, #-0x4"
  -
    input:
      bytes: [ 0xee, 0xfe ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jnz d15, #-0x4"
  -
    input:
      bytes: [ 0xdf, 0x08, 0x6a, 0x80 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne d8, #0, #0xd4"
  -
    input:
      bytes: [ 0x7f, 0xf0, 0x50, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jge d0, d15, #0xa0"
  -
    input:
      bytes: [ 0xee, 0x22 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jnz d15, #0x44"
  -
    input:
      bytes: [ 0x8f, 0xf0, 0x01, 0x20 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sh d2, d0, #0x1f"
  -
    input:
      bytes: [ 0x02, 0x92 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d2, d9"
  -
    input:
      bytes: [ 0x8f, 0x21, 0x00, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sh d15, d1, #0x2"
  -
    input:
      bytes: [ 0x3b, 0x00, 0x08, 0x50 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d5, #0x80"
  -
    input:
      bytes: [ 0x4e, 0xf3 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jgtz d15, #0x6"
  -
    input:
      bytes: [ 0xee, 0x03 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jnz d15, #0x6"
  -
    input:
      bytes: [ 0xac, 0xa2 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "st.h [sp]#0x4, d15"
  -
    input:
      bytes: [ 0xb7, 0x1f, 0x81, 0x2b ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insert d2, d15, #0x1, #0x17, #0x1"
  -
    input:
      bytes: [ 0x3b, 0x70, 0x04, 0x10 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d1, #0x47"
  -
    input:
      bytes: [ 0x20, 0x08 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sub.a sp, #0x8"
  -
    input:
      bytes: [ 0x8b, 0x03, 0x03, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add d15, d3, #0x30"
  -
    input:
      bytes: [ 0x9a, 0xf0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add d15, d0, #-0x1"
  -
    input:
      bytes: [ 0xd9, 0x55, 0x3c, 0xea ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a5, [a5]#-0x5c44"
  -
    input:
      bytes: [ 0x09, 0x41, 0x84, 0x08 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ld.h d1, [a4]#0x4"
  -
    input:
      bytes: [ 0x89, 0xaf, 0xa4, 0x08 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "st.h [sp]#0x24, d15"
  -
    input:
      bytes: [ 0xa0, 0x55 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov.a a5, #0x5"
  -
    input:
      bytes: [ 0x37, 0x0f, 0xe8, 0x1b ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "extr.u d1, d15, #0x17, #0x8"
  -
    input:
      bytes: [ 0x3c, 0x01 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #0x2"
  -
    input:
      bytes: [ 0x37, 0x00, 0x68, 0x50 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "extr.u d5, d0, #0, #0x8"
  -
    input:
      bytes: [ 0x5f, 0x8f, 0x66, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d15, d8, #0xcc"
  -
    input:
      bytes: [ 0xda, 0x22 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d15, #0x22"
  -
    input:
      bytes: [ 0x49, 0x33, 0x14, 0x8a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a3, [a3]#-0x1ec"
  -
    input:
      bytes: [ 0x8f, 0x0a, 0x50, 0xa1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "or d10, d10, #0x100"
  -
    input:
      bytes: [ 0x91, 0x00, 0x00, 0x28 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "movh.a a2, #0x8000"
  -
    input:
      bytes: [ 0x8f, 0x28, 0x20, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sha d0, d8, #0x2"
  -
    input:
      bytes: [ 0x49, 0x44, 0x00, 0x1a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a4, [a4]#0x40"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x49, 0x11 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x2292"
  -
    input:
      bytes: [ 0xee, 0x17 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jnz d15, #0x2e"
  -
    input:
      bytes: [ 0x6d, 0x00, 0x8b, 0x02 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #0x516"
  -
    input:
      bytes: [ 0x5f, 0x0f, 0xdf, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d15, d0, #0x1be"
  -
    input:
      bytes: [ 0xa6, 0x52 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "or d2, d5"
  -
    input:
      bytes: [ 0x1e, 0xf3 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d15, #-0x1, #0x6"
  -
    input:
      bytes: [ 0x37, 0xf0, 0x02, 0x02 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insert d0, d0, d15, #0x4, #0x2"
  -
    input:
      bytes: [ 0xdf, 0x0f, 0x68, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne d15, #0, #-0x130"
  -
    input:
      bytes: [ 0x06, 0x11 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sh d1, #0x1"
  -
    input:
      bytes: [ 0x37, 0x0f, 0x02, 0xfe ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insert d15, d15, d0, #0x1c, #0x2"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x94, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0xd8"
  -
    input:
      bytes: [ 0x2d, 0x0f, 0x00, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "calli a15"
  -
    input:
      bytes: [ 0x0b, 0x75, 0x00, 0xf2 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "and.eq d15, d5, d7"
  -
    input:
      bytes: [ 0x82, 0x54 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d4, #0x5"
  -
    input:
      bytes: [ 0x37, 0xf0, 0x02, 0x0e ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insert d0, d0, d15, #0x1c, #0x2"
  -
    input:
      bytes: [ 0xee, 0xf1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jnz d15, #-0x1e"
  -
    input:
      bytes: [ 0x6d, 0xff, 0xeb, 0x3d ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x1842a"
  -
    input:
      bytes: [ 0xd9, 0xff, 0xe4, 0x10 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#0xc64"
  -
    input:
      bytes: [ 0x5f, 0x01, 0x0d, 0x80 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne d1, d0, #0x1a"
  -
    input:
      bytes: [ 0x91, 0x30, 0x00, 0x57 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "movh.a a5, #0x7003"
  -
    input:
      bytes: [ 0x0b, 0x00, 0x00, 0x08 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov e0, d0"
  -
    input:
      bytes: [ 0xde, 0x1c ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne d15, #0x1, #0x38"
  -
    input:
      bytes: [ 0x6d, 0xff, 0xb1, 0x2a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x1aa9e"
  -
    input:
      bytes: [ 0x7b, 0x00, 0x12, 0xd4 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "movh d13, #0x4120"
  -
    input:
      bytes: [ 0x49, 0xf2, 0x08, 0x0a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a2, [a15]#0x8"
  -
    input:
      bytes: [ 0x37, 0xf0, 0x03, 0x04 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "insert d0, d0, d15, #0x8, #0x3"
  -
    input:
      bytes: [ 0xee, 0x02 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jnz d15, #0x4"
  -
    input:
      bytes: [ 0x06, 0xf1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "sh d1, #-0x1"
  -
    input:
      bytes: [ 0x7e, 0x03 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jne d15, d0, #0x6"
  -
    input:
      bytes: [ 0x6d, 0xff, 0x58, 0xfb ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x950"
  -
    input:
      bytes: [ 0xd9, 0xff, 0x20, 0x10 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#0x60"
  -
    input:
      bytes: [ 0x6d, 0xff, 0xa7, 0xfe ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "call #-0x2b2"
  -
    input:
      bytes: [ 0x02, 0x68 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d8, d6"
  -
    input:
      bytes: [ 0x1d, 0x00, 0x8a, 0x01 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #0x314"
  -
    input:
      bytes: [ 0xd7, 0x10, 0x21, 0x0f ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "imask e0, #0x1, d15, #0x1"
  -
    input:
      bytes: [ 0x49, 0xa4, 0x08, 0x0a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a4, [sp]#0x8"
  -
    input:
      bytes: [ 0x82, 0x34 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d4, #0x3"
  -
    input:
      bytes: [ 0x92, 0x44 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "add d4, d15, #0x4"
  -
    input:
      bytes: [ 0x91, 0x20, 0x00, 0xd8 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "movh.a a13, #0x8002"
  -
    input:
      bytes: [ 0x82, 0xf1 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d1, #-0x1"
  -
    input:
      bytes: [ 0x3b, 0x80, 0x00, 0x40 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d4, #0x8"
  -
    input:
      bytes: [ 0x3c, 0x3a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #0x74"
  -
    input:
      bytes: [ 0x82, 0x64 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d4, #0x6"
  -
    input:
      bytes: [ 0x01, 0x2f, 0x30, 0xf4 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ge.a d15, a15, a2"
  -
    input:
      bytes: [ 0xd9, 0xff, 0x24, 0x96 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a15, [a15]#0x6264"
  -
    input:
      bytes: [ 0x8e, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jlez d15, #0x1e"
  -
    input:
      bytes: [ 0x91, 0x00, 0x00, 0x48 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "movh.a a4, #0x8000"
  -
    input:
      bytes: [ 0xa6, 0x10 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "or d0, d1"
  -
    input:
      bytes: [ 0xdc, 0x0e ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "ji a14"
  -
    input:
      bytes: [ 0x1d, 0x00, 0x83, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "j #0x106"
  -
    input:
      bytes: [ 0xd9, 0x22, 0x4c, 0xb0 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "lea a2, [a2]#0x6cc"
  -
    input:
      bytes: [ 0x5f, 0x0f, 0x29, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jeq d15, d0, #0x52"
  -
    input:
      bytes: [ 0x37, 0x00, 0xe8, 0xfb ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "extr.u d15, d0, #0x17, #0x8"
  -
    input:
      bytes: [ 0x6f, 0x0f, 0xf5, 0xff ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jnz.t d15, #0, #-0x16"
  -
    input:
      bytes: [ 0x3b, 0xb0, 0x02, 0x00 ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "mov d0, #0x2b"
  -
    input:
      bytes: [ 0x7c, 0x2a ]
      arch: "CS_ARCH_TRICORE"
      options: [ "CS_MODE_TRICORE_162" ]
    expected:
      insns:
        -
          asm_text: "jnz.a a2, #0x14"
