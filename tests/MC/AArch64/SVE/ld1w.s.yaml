test_cases:
  -
    input:
      bytes: [ 0x00, 0xa0, 0x40, 0xa5 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "ld1w { z0.s }, p0/z, [x0]"

  -
    input:
      bytes: [ 0x00, 0xa0, 0x60, 0xa5 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "ld1w { z0.d }, p0/z, [x0]"

  -
    input:
      bytes: [ 0x00, 0xa0, 0x40, 0xa5 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "ld1w { z0.s }, p0/z, [x0]"

  -
    input:
      bytes: [ 0x00, 0xa0, 0x60, 0xa5 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "ld1w { z0.d }, p0/z, [x0]"

  -
    input:
      bytes: [ 0xff, 0xbf, 0x4f, 0xa5 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "ld1w { z31.s }, p7/z, [sp, #-1, mul vl]"

  -
    input:
      bytes: [ 0x55, 0xb5, 0x45, 0xa5 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "ld1w { z21.s }, p5/z, [x10, #5, mul vl]"

  -
    input:
      bytes: [ 0xff, 0xbf, 0x6f, 0xa5 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "ld1w { z31.d }, p7/z, [sp, #-1, mul vl]"

  -
    input:
      bytes: [ 0x55, 0xb5, 0x65, 0xa5 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "ld1w { z21.d }, p5/z, [x10, #5, mul vl]"

  -
    input:
      bytes: [ 0xf5, 0x57, 0x55, 0xa5 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "ld1w { z21.s }, p5/z, [sp, x21, lsl #2]"

  -
    input:
      bytes: [ 0x55, 0x55, 0x55, 0xa5 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "ld1w { z21.s }, p5/z, [x10, x21, lsl #2]"

  -
    input:
      bytes: [ 0xb7, 0x4d, 0x68, 0xa5 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "ld1w { z23.d }, p3/z, [x13, x8, lsl #2]"

  -
    input:
      bytes: [ 0x00, 0xa0, 0x40, 0xa5 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "ld1w { z0.s }, p0/z, [x0]"

  -
    input:
      bytes: [ 0x00, 0xa0, 0x60, 0xa5 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "ld1w { z0.d }, p0/z, [x0]"

  -
    input:
      bytes: [ 0x00, 0xa0, 0x40, 0xa5 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "ld1w { z0.s }, p0/z, [x0]"

  -
    input:
      bytes: [ 0x00, 0xa0, 0x60, 0xa5 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "ld1w { z0.d }, p0/z, [x0]"

  -
    input:
      bytes: [ 0xff, 0xbf, 0x4f, 0xa5 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "ld1w { z31.s }, p7/z, [sp, #-1, mul vl]"

  -
    input:
      bytes: [ 0x55, 0xb5, 0x45, 0xa5 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "ld1w { z21.s }, p5/z, [x10, #5, mul vl]"

  -
    input:
      bytes: [ 0xff, 0xbf, 0x6f, 0xa5 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "ld1w { z31.d }, p7/z, [sp, #-1, mul vl]"

  -
    input:
      bytes: [ 0x55, 0xb5, 0x65, 0xa5 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "ld1w { z21.d }, p5/z, [x10, #5, mul vl]"

  -
    input:
      bytes: [ 0xf5, 0x57, 0x55, 0xa5 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "ld1w { z21.s }, p5/z, [sp, x21, lsl #2]"

  -
    input:
      bytes: [ 0x55, 0x55, 0x55, 0xa5 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "ld1w { z21.s }, p5/z, [x10, x21, lsl #2]"

  -
    input:
      bytes: [ 0xb7, 0x4d, 0x68, 0xa5 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "ld1w { z23.d }, p3/z, [x13, x8, lsl #2]"
