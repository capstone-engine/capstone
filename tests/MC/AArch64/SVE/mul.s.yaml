test_cases:
  -
    input:
      bytes: [ 0xe0, 0x1f, 0x10, 0x04 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "mul z0.b, p7/m, z0.b, z31.b"

  -
    input:
      bytes: [ 0xe0, 0x1f, 0x50, 0x04 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "mul z0.h, p7/m, z0.h, z31.h"

  -
    input:
      bytes: [ 0xe0, 0x1f, 0x90, 0x04 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "mul z0.s, p7/m, z0.s, z31.s"

  -
    input:
      bytes: [ 0xe0, 0x1f, 0xd0, 0x04 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "mul z0.d, p7/m, z0.d, z31.d"

  -
    input:
      bytes: [ 0x1f, 0xd0, 0x30, 0x25 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "mul z31.b, z31.b, #-128"

  -
    input:
      bytes: [ 0xff, 0xcf, 0x30, 0x25 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "mul z31.b, z31.b, #127"

  -
    input:
      bytes: [ 0x1f, 0xd0, 0x70, 0x25 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "mul z31.h, z31.h, #-128"

  -
    input:
      bytes: [ 0xff, 0xcf, 0x70, 0x25 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "mul z31.h, z31.h, #127"

  -
    input:
      bytes: [ 0x1f, 0xd0, 0xb0, 0x25 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "mul z31.s, z31.s, #-128"

  -
    input:
      bytes: [ 0xff, 0xcf, 0xb0, 0x25 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "mul z31.s, z31.s, #127"

  -
    input:
      bytes: [ 0x1f, 0xd0, 0xf0, 0x25 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "mul z31.d, z31.d, #-128"

  -
    input:
      bytes: [ 0xff, 0xcf, 0xf0, 0x25 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "mul z31.d, z31.d, #127"

  -
    input:
      bytes: [ 0xe0, 0x3c, 0xd0, 0x04 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "movprfx z0.d, p7/z, z7.d"

  -
    input:
      bytes: [ 0xe0, 0x1f, 0xd0, 0x04 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "mul z0.d, p7/m, z0.d, z31.d"

  -
    input:
      bytes: [ 0xe0, 0xbc, 0x20, 0x04 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "movprfx z0, z7"

  -
    input:
      bytes: [ 0xe0, 0x1f, 0xd0, 0x04 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "mul z0.d, p7/m, z0.d, z31.d"

  -
    input:
      bytes: [ 0xdf, 0xbc, 0x20, 0x04 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "movprfx z31, z6"

  -
    input:
      bytes: [ 0xff, 0xcf, 0xf0, 0x25 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "mul z31.d, z31.d, #127"

  -
    input:
      bytes: [ 0xe0, 0x1f, 0x10, 0x04 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "mul z0.b, p7/m, z0.b, z31.b"

  -
    input:
      bytes: [ 0xe0, 0x1f, 0x50, 0x04 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "mul z0.h, p7/m, z0.h, z31.h"

  -
    input:
      bytes: [ 0xe0, 0x1f, 0x90, 0x04 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "mul z0.s, p7/m, z0.s, z31.s"

  -
    input:
      bytes: [ 0xe0, 0x1f, 0xd0, 0x04 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "mul z0.d, p7/m, z0.d, z31.d"

  -
    input:
      bytes: [ 0x1f, 0xd0, 0x30, 0x25 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "mul z31.b, z31.b, #-128"

  -
    input:
      bytes: [ 0xff, 0xcf, 0x30, 0x25 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "mul z31.b, z31.b, #127"

  -
    input:
      bytes: [ 0x1f, 0xd0, 0x70, 0x25 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "mul z31.h, z31.h, #-128"

  -
    input:
      bytes: [ 0xff, 0xcf, 0x70, 0x25 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "mul z31.h, z31.h, #127"

  -
    input:
      bytes: [ 0x1f, 0xd0, 0xb0, 0x25 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "mul z31.s, z31.s, #-128"

  -
    input:
      bytes: [ 0xff, 0xcf, 0xb0, 0x25 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "mul z31.s, z31.s, #127"

  -
    input:
      bytes: [ 0x1f, 0xd0, 0xf0, 0x25 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "mul z31.d, z31.d, #-128"

  -
    input:
      bytes: [ 0xff, 0xcf, 0xf0, 0x25 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "mul z31.d, z31.d, #127"

  -
    input:
      bytes: [ 0xe0, 0x3c, 0xd0, 0x04 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "movprfx z0.d, p7/z, z7.d"

  -
    input:
      bytes: [ 0xe0, 0x1f, 0xd0, 0x04 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "mul z0.d, p7/m, z0.d, z31.d"

  -
    input:
      bytes: [ 0xe0, 0xbc, 0x20, 0x04 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "movprfx z0, z7"

  -
    input:
      bytes: [ 0xe0, 0x1f, 0xd0, 0x04 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "mul z0.d, p7/m, z0.d, z31.d"

  -
    input:
      bytes: [ 0xdf, 0xbc, 0x20, 0x04 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "movprfx z31, z6"

  -
    input:
      bytes: [ 0xff, 0xcf, 0xf0, 0x25 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "mul z31.d, z31.d, #127"
