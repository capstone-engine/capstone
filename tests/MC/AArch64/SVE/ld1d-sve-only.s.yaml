test_cases:
  -
    input:
      bytes: [ 0xff, 0xdf, 0xdf, 0xc5 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "ld1d { z31.d }, p7/z, [sp, z31.d]"

  -
    input:
      bytes: [ 0xb7, 0xcd, 0xe8, 0xc5 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "ld1d { z23.d }, p3/z, [x13, z8.d, lsl #3]"

  -
    input:
      bytes: [ 0x55, 0x55, 0x95, 0xc5 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "ld1d { z21.d }, p5/z, [x10, z21.d, uxtw]"

  -
    input:
      bytes: [ 0x55, 0x55, 0xd5, 0xc5 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "ld1d { z21.d }, p5/z, [x10, z21.d, sxtw]"

  -
    input:
      bytes: [ 0x00, 0x40, 0xa0, 0xc5 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "ld1d { z0.d }, p0/z, [x0, z0.d, uxtw #3]"

  -
    input:
      bytes: [ 0x00, 0x40, 0xe0, 0xc5 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "ld1d { z0.d }, p0/z, [x0, z0.d, sxtw #3]"

  -
    input:
      bytes: [ 0xff, 0xdf, 0xbf, 0xc5 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "ld1d { z31.d }, p7/z, [z31.d, #248]"

  -
    input:
      bytes: [ 0x00, 0xc0, 0xa0, 0xc5 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "ld1d { z0.d }, p0/z, [z0.d]"
