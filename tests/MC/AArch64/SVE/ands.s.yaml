test_cases:
  -
    input:
      bytes: [ 0x00, 0x40, 0x41, 0x25 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "CS_OPT_NO_BRANCH_OFFSET", "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "ands p0.b, p0/z, p0.b, p1.b"

  -
    input:
      bytes: [ 0x00, 0x40, 0x40, 0x25 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "CS_OPT_NO_BRANCH_OFFSET", "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "movs p0.b, p0/z, p0.b"

  -
    input:
      bytes: [ 0xef, 0x7d, 0x4f, 0x25 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "CS_OPT_NO_BRANCH_OFFSET", "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "movs p15.b, p15/z, p15.b"

  -
    input:
      bytes: [ 0x00, 0x40, 0x41, 0x25 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "CS_OPT_NO_BRANCH_OFFSET", "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "ands p0.b, p0/z, p0.b, p1.b"

  -
    input:
      bytes: [ 0x00, 0x40, 0x40, 0x25 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "CS_OPT_NO_BRANCH_OFFSET", "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "movs p0.b, p0/z, p0.b"

  -
    input:
      bytes: [ 0xef, 0x7d, 0x4f, 0x25 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "CS_OPT_NO_BRANCH_OFFSET", "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "movs p15.b, p15/z, p15.b"
