test_cases:
  -
    input:
      bytes: [ 0x00,0x80,0x5d,0x65 ]
      arch: "AArch64"
      options: [ "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "fminnm z0.h, p0/m, z0.h, #0.0"

  -
    input:
      bytes: [ 0x00,0x80,0x5d,0x65 ]
      arch: "AArch64"
      options: [ "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "fminnm z0.h, p0/m, z0.h, #0.0"

  -
    input:
      bytes: [ 0x00,0x80,0x9d,0x65 ]
      arch: "AArch64"
      options: [ "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "fminnm z0.s, p0/m, z0.s, #0.0"

  -
    input:
      bytes: [ 0x00,0x80,0xdd,0x65 ]
      arch: "AArch64"
      options: [ "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "fminnm z0.d, p0/m, z0.d, #0.0"

  -
    input:
      bytes: [ 0x3f,0x9c,0x5d,0x65 ]
      arch: "AArch64"
      options: [ "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "fminnm z31.h, p7/m, z31.h, #1.0"

  -
    input:
      bytes: [ 0x3f,0x9c,0x5d,0x65 ]
      arch: "AArch64"
      options: [ "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "fminnm z31.h, p7/m, z31.h, #1.0"

  -
    input:
      bytes: [ 0x3f,0x9c,0x9d,0x65 ]
      arch: "AArch64"
      options: [ "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "fminnm z31.s, p7/m, z31.s, #1.0"

  -
    input:
      bytes: [ 0x3f,0x9c,0xdd,0x65 ]
      arch: "AArch64"
      options: [ "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "fminnm z31.d, p7/m, z31.d, #1.0"

  -
    input:
      bytes: [ 0xe0,0x9f,0x45,0x65 ]
      arch: "AArch64"
      options: [ "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "fminnm z0.h, p7/m, z0.h, z31.h"

  -
    input:
      bytes: [ 0xe0,0x9f,0x85,0x65 ]
      arch: "AArch64"
      options: [ "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "fminnm z0.s, p7/m, z0.s, z31.s"

  -
    input:
      bytes: [ 0xe0,0x9f,0xc5,0x65 ]
      arch: "AArch64"
      options: [ "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "fminnm z0.d, p7/m, z0.d, z31.d"

  -
    input:
      bytes: [ 0xdf,0x3c,0xd0,0x04 ]
      arch: "AArch64"
      options: [ "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "movprfx z31.d, p7/z, z6.d"

  -
    input:
      bytes: [ 0x3f,0x9c,0xdd,0x65 ]
      arch: "AArch64"
      options: [ "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "fminnm z31.d, p7/m, z31.d, #1.0"

  -
    input:
      bytes: [ 0xdf,0xbc,0x20,0x04 ]
      arch: "AArch64"
      options: [ "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "movprfx z31, z6"

  -
    input:
      bytes: [ 0x3f,0x9c,0xdd,0x65 ]
      arch: "AArch64"
      options: [ "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "fminnm z31.d, p7/m, z31.d, #1.0"

  -
    input:
      bytes: [ 0xe0,0x3c,0xd0,0x04 ]
      arch: "AArch64"
      options: [ "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "movprfx z0.d, p7/z, z7.d"

  -
    input:
      bytes: [ 0xe0,0x9f,0xc5,0x65 ]
      arch: "AArch64"
      options: [ "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "fminnm z0.d, p7/m, z0.d, z31.d"

  -
    input:
      bytes: [ 0xe0,0xbc,0x20,0x04 ]
      arch: "AArch64"
      options: [ "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "movprfx z0, z7"

  -
    input:
      bytes: [ 0xe0,0x9f,0xc5,0x65 ]
      arch: "AArch64"
      options: [ "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "fminnm z0.d, p7/m, z0.d, z31.d"

  -
    input:
      bytes: [ 0x00,0x80,0x5d,0x65 ]
      arch: "AArch64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "fminnm z0.h, p0/m, z0.h, #0.0"

  -
    input:
      bytes: [ 0x00,0x80,0x5d,0x65 ]
      arch: "AArch64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "fminnm z0.h, p0/m, z0.h, #0.0"

  -
    input:
      bytes: [ 0x00,0x80,0x9d,0x65 ]
      arch: "AArch64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "fminnm z0.s, p0/m, z0.s, #0.0"

  -
    input:
      bytes: [ 0x00,0x80,0xdd,0x65 ]
      arch: "AArch64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "fminnm z0.d, p0/m, z0.d, #0.0"

  -
    input:
      bytes: [ 0x3f,0x9c,0x5d,0x65 ]
      arch: "AArch64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "fminnm z31.h, p7/m, z31.h, #1.0"

  -
    input:
      bytes: [ 0x3f,0x9c,0x5d,0x65 ]
      arch: "AArch64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "fminnm z31.h, p7/m, z31.h, #1.0"

  -
    input:
      bytes: [ 0x3f,0x9c,0x9d,0x65 ]
      arch: "AArch64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "fminnm z31.s, p7/m, z31.s, #1.0"

  -
    input:
      bytes: [ 0x3f,0x9c,0xdd,0x65 ]
      arch: "AArch64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "fminnm z31.d, p7/m, z31.d, #1.0"

  -
    input:
      bytes: [ 0xe0,0x9f,0x45,0x65 ]
      arch: "AArch64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "fminnm z0.h, p7/m, z0.h, z31.h"

  -
    input:
      bytes: [ 0xe0,0x9f,0x85,0x65 ]
      arch: "AArch64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "fminnm z0.s, p7/m, z0.s, z31.s"

  -
    input:
      bytes: [ 0xe0,0x9f,0xc5,0x65 ]
      arch: "AArch64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "fminnm z0.d, p7/m, z0.d, z31.d"

  -
    input:
      bytes: [ 0xdf,0x3c,0xd0,0x04 ]
      arch: "AArch64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "movprfx z31.d, p7/z, z6.d"

  -
    input:
      bytes: [ 0x3f,0x9c,0xdd,0x65 ]
      arch: "AArch64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "fminnm z31.d, p7/m, z31.d, #1.0"

  -
    input:
      bytes: [ 0xdf,0xbc,0x20,0x04 ]
      arch: "AArch64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "movprfx z31, z6"

  -
    input:
      bytes: [ 0x3f,0x9c,0xdd,0x65 ]
      arch: "AArch64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "fminnm z31.d, p7/m, z31.d, #1.0"

  -
    input:
      bytes: [ 0xe0,0x3c,0xd0,0x04 ]
      arch: "AArch64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "movprfx z0.d, p7/z, z7.d"

  -
    input:
      bytes: [ 0xe0,0x9f,0xc5,0x65 ]
      arch: "AArch64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "fminnm z0.d, p7/m, z0.d, z31.d"

  -
    input:
      bytes: [ 0xe0,0xbc,0x20,0x04 ]
      arch: "AArch64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "movprfx z0, z7"

  -
    input:
      bytes: [ 0xe0,0x9f,0xc5,0x65 ]
      arch: "AArch64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "fminnm z0.d, p7/m, z0.d, z31.d"
