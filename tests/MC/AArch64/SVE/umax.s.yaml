test_cases:
  -
    input:
      bytes: [ 0x00, 0xc0, 0x29, 0x25 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "umax z0.b, z0.b, #0"

  -
    input:
      bytes: [ 0xff, 0xdf, 0x29, 0x25 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "umax z31.b, z31.b, #255"

  -
    input:
      bytes: [ 0x00, 0xc0, 0x29, 0x25 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "umax z0.b, z0.b, #0"

  -
    input:
      bytes: [ 0xff, 0xdf, 0x29, 0x25 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "umax z31.b, z31.b, #255"

  -
    input:
      bytes: [ 0x00, 0xc0, 0x29, 0x25 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "umax z0.b, z0.b, #0"

  -
    input:
      bytes: [ 0xff, 0xdf, 0x29, 0x25 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "umax z31.b, z31.b, #255"

  -
    input:
      bytes: [ 0x00, 0xc0, 0x29, 0x25 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "umax z0.b, z0.b, #0"

  -
    input:
      bytes: [ 0xff, 0xdf, 0x29, 0x25 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "umax z31.b, z31.b, #255"

  -
    input:
      bytes: [ 0xff, 0x1f, 0x09, 0x04 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "umax z31.b, p7/m, z31.b, z31.b"

  -
    input:
      bytes: [ 0xff, 0x1f, 0x49, 0x04 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "umax z31.h, p7/m, z31.h, z31.h"

  -
    input:
      bytes: [ 0xff, 0x1f, 0x89, 0x04 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "umax z31.s, p7/m, z31.s, z31.s"

  -
    input:
      bytes: [ 0xff, 0x1f, 0xc9, 0x04 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "umax z31.d, p7/m, z31.d, z31.d"

  -
    input:
      bytes: [ 0xc4, 0x3c, 0xd0, 0x04 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "movprfx z4.d, p7/z, z6.d"

  -
    input:
      bytes: [ 0xe4, 0x1f, 0xc9, 0x04 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "umax z4.d, p7/m, z4.d, z31.d"

  -
    input:
      bytes: [ 0xc4, 0xbc, 0x20, 0x04 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "movprfx z4, z6"

  -
    input:
      bytes: [ 0xe4, 0x1f, 0xc9, 0x04 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "umax z4.d, p7/m, z4.d, z31.d"

  -
    input:
      bytes: [ 0xdf, 0xbc, 0x20, 0x04 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "movprfx z31, z6"

  -
    input:
      bytes: [ 0xff, 0xdf, 0x29, 0x25 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "umax z31.b, z31.b, #255"

  -
    input:
      bytes: [ 0x00, 0xc0, 0x29, 0x25 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "umax z0.b, z0.b, #0"

  -
    input:
      bytes: [ 0xff, 0xdf, 0x29, 0x25 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "umax z31.b, z31.b, #255"

  -
    input:
      bytes: [ 0x00, 0xc0, 0x29, 0x25 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "umax z0.b, z0.b, #0"

  -
    input:
      bytes: [ 0xff, 0xdf, 0x29, 0x25 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "umax z31.b, z31.b, #255"

  -
    input:
      bytes: [ 0x00, 0xc0, 0x29, 0x25 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "umax z0.b, z0.b, #0"

  -
    input:
      bytes: [ 0xff, 0xdf, 0x29, 0x25 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "umax z31.b, z31.b, #255"

  -
    input:
      bytes: [ 0x00, 0xc0, 0x29, 0x25 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "umax z0.b, z0.b, #0"

  -
    input:
      bytes: [ 0xff, 0xdf, 0x29, 0x25 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "umax z31.b, z31.b, #255"

  -
    input:
      bytes: [ 0xff, 0x1f, 0x09, 0x04 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "umax z31.b, p7/m, z31.b, z31.b"

  -
    input:
      bytes: [ 0xff, 0x1f, 0x49, 0x04 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "umax z31.h, p7/m, z31.h, z31.h"

  -
    input:
      bytes: [ 0xff, 0x1f, 0x89, 0x04 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "umax z31.s, p7/m, z31.s, z31.s"

  -
    input:
      bytes: [ 0xff, 0x1f, 0xc9, 0x04 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "umax z31.d, p7/m, z31.d, z31.d"

  -
    input:
      bytes: [ 0xc4, 0x3c, 0xd0, 0x04 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "movprfx z4.d, p7/z, z6.d"

  -
    input:
      bytes: [ 0xe4, 0x1f, 0xc9, 0x04 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "umax z4.d, p7/m, z4.d, z31.d"

  -
    input:
      bytes: [ 0xc4, 0xbc, 0x20, 0x04 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "movprfx z4, z6"

  -
    input:
      bytes: [ 0xe4, 0x1f, 0xc9, 0x04 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "umax z4.d, p7/m, z4.d, z31.d"

  -
    input:
      bytes: [ 0xdf, 0xbc, 0x20, 0x04 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "movprfx z31, z6"

  -
    input:
      bytes: [ 0xff, 0xdf, 0x29, 0x25 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "umax z31.b, z31.b, #255"
