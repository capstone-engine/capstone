test_cases:
  -
    input:
      bytes: [ 0x00,0xa0,0x50,0xa5 ]
      arch: "AArch64"
      options: [ "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "ldnf1w { z0.s }, p0/z, [x0]"

  -
    input:
      bytes: [ 0x00,0xa0,0x70,0xa5 ]
      arch: "AArch64"
      options: [ "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "ldnf1w { z0.d }, p0/z, [x0]"

  -
    input:
      bytes: [ 0x00,0xa0,0x50,0xa5 ]
      arch: "AArch64"
      options: [ "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "ldnf1w { z0.s }, p0/z, [x0]"

  -
    input:
      bytes: [ 0x00,0xa0,0x70,0xa5 ]
      arch: "AArch64"
      options: [ "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "ldnf1w { z0.d }, p0/z, [x0]"

  -
    input:
      bytes: [ 0xff,0xbf,0x5f,0xa5 ]
      arch: "AArch64"
      options: [ "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "ldnf1w { z31.s }, p7/z, [sp, #-1, mul vl]"

  -
    input:
      bytes: [ 0x55,0xb5,0x55,0xa5 ]
      arch: "AArch64"
      options: [ "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "ldnf1w { z21.s }, p5/z, [x10, #5, mul vl]"

  -
    input:
      bytes: [ 0xff,0xbf,0x7f,0xa5 ]
      arch: "AArch64"
      options: [ "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "ldnf1w { z31.d }, p7/z, [sp, #-1, mul vl]"

  -
    input:
      bytes: [ 0x55,0xb5,0x75,0xa5 ]
      arch: "AArch64"
      options: [ "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "ldnf1w { z21.d }, p5/z, [x10, #5, mul vl]"
