test_cases:
  -
    input:
      bytes: [ 0x00, 0xc0, 0x40, 0x85 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "CS_OPT_NO_BRANCH_OFFSET", "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "ld1rw { z0.s }, p0/z, [x0]"

  -
    input:
      bytes: [ 0x00, 0xe0, 0x40, 0x85 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "CS_OPT_NO_BRANCH_OFFSET", "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "ld1rw { z0.d }, p0/z, [x0]"

  -
    input:
      bytes: [ 0xff, 0xdf, 0x7f, 0x85 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "CS_OPT_NO_BRANCH_OFFSET", "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "ld1rw { z31.s }, p7/z, [sp, #252]"

  -
    input:
      bytes: [ 0xff, 0xff, 0x7f, 0x85 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "CS_OPT_NO_BRANCH_OFFSET", "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "ld1rw { z31.d }, p7/z, [sp, #252]"

  -
    input:
      bytes: [ 0x00, 0xc0, 0x40, 0x85 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "CS_OPT_NO_BRANCH_OFFSET", "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "ld1rw { z0.s }, p0/z, [x0]"

  -
    input:
      bytes: [ 0x00, 0xe0, 0x40, 0x85 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "CS_OPT_NO_BRANCH_OFFSET", "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "ld1rw { z0.d }, p0/z, [x0]"

  -
    input:
      bytes: [ 0xff, 0xdf, 0x7f, 0x85 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "CS_OPT_NO_BRANCH_OFFSET", "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "ld1rw { z31.s }, p7/z, [sp, #252]"

  -
    input:
      bytes: [ 0xff, 0xff, 0x7f, 0x85 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "CS_OPT_NO_BRANCH_OFFSET", "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "ld1rw { z31.d }, p7/z, [sp, #252]"
