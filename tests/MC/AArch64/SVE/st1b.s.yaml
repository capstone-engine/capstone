test_cases:
  -
    input:
      bytes: [ 0x00,0xe0,0x00,0xe4 ]
      arch: "AArch64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "st1b { z0.b }, p0, [x0]"

  -
    input:
      bytes: [ 0x00,0xe0,0x20,0xe4 ]
      arch: "AArch64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "st1b { z0.h }, p0, [x0]"

  -
    input:
      bytes: [ 0x00,0xe0,0x40,0xe4 ]
      arch: "AArch64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "st1b { z0.s }, p0, [x0]"

  -
    input:
      bytes: [ 0x00,0xe0,0x60,0xe4 ]
      arch: "AArch64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "st1b { z0.d }, p0, [x0]"

  -
    input:
      bytes: [ 0x00,0xe0,0x00,0xe4 ]
      arch: "AArch64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "st1b { z0.b }, p0, [x0]"

  -
    input:
      bytes: [ 0x00,0xe0,0x20,0xe4 ]
      arch: "AArch64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "st1b { z0.h }, p0, [x0]"

  -
    input:
      bytes: [ 0x00,0xe0,0x40,0xe4 ]
      arch: "AArch64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "st1b { z0.s }, p0, [x0]"

  -
    input:
      bytes: [ 0x00,0xe0,0x60,0xe4 ]
      arch: "AArch64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "st1b { z0.d }, p0, [x0]"

  -
    input:
      bytes: [ 0xff,0xff,0x0f,0xe4 ]
      arch: "AArch64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "st1b { z31.b }, p7, [sp, #-1, mul vl]"

  -
    input:
      bytes: [ 0x55,0xf5,0x05,0xe4 ]
      arch: "AArch64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "st1b { z21.b }, p5, [x10, #5, mul vl]"

  -
    input:
      bytes: [ 0xff,0xff,0x2f,0xe4 ]
      arch: "AArch64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "st1b { z31.h }, p7, [sp, #-1, mul vl]"

  -
    input:
      bytes: [ 0x55,0xf5,0x25,0xe4 ]
      arch: "AArch64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "st1b { z21.h }, p5, [x10, #5, mul vl]"

  -
    input:
      bytes: [ 0xff,0xff,0x4f,0xe4 ]
      arch: "AArch64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "st1b { z31.s }, p7, [sp, #-1, mul vl]"

  -
    input:
      bytes: [ 0x55,0xf5,0x45,0xe4 ]
      arch: "AArch64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "st1b { z21.s }, p5, [x10, #5, mul vl]"

  -
    input:
      bytes: [ 0xff,0xff,0x6f,0xe4 ]
      arch: "AArch64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "st1b { z31.d }, p7, [sp, #-1, mul vl]"

  -
    input:
      bytes: [ 0x55,0xf5,0x65,0xe4 ]
      arch: "AArch64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "st1b { z21.d }, p5, [x10, #5, mul vl]"

  -
    input:
      bytes: [ 0x00,0x40,0x00,0xe4 ]
      arch: "AArch64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "st1b { z0.b }, p0, [x0, x0]"

  -
    input:
      bytes: [ 0x00,0x40,0x20,0xe4 ]
      arch: "AArch64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "st1b { z0.h }, p0, [x0, x0]"

  -
    input:
      bytes: [ 0x00,0x40,0x40,0xe4 ]
      arch: "AArch64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "st1b { z0.s }, p0, [x0, x0]"

  -
    input:
      bytes: [ 0x00,0x40,0x60,0xe4 ]
      arch: "AArch64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "st1b { z0.d }, p0, [x0, x0]"
