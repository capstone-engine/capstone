test_cases:
  -
    input:
      bytes: [ 0x00, 0xa0, 0xa0, 0xa4 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "CS_OPT_NO_BRANCH_OFFSET", "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "ld1h { z0.h }, p0/z, [x0]"

  -
    input:
      bytes: [ 0x00, 0xa0, 0xc0, 0xa4 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "CS_OPT_NO_BRANCH_OFFSET", "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "ld1h { z0.s }, p0/z, [x0]"

  -
    input:
      bytes: [ 0x00, 0xa0, 0xe0, 0xa4 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "CS_OPT_NO_BRANCH_OFFSET", "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "ld1h { z0.d }, p0/z, [x0]"

  -
    input:
      bytes: [ 0x00, 0xa0, 0xa0, 0xa4 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "CS_OPT_NO_BRANCH_OFFSET", "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "ld1h { z0.h }, p0/z, [x0]"

  -
    input:
      bytes: [ 0x00, 0xa0, 0xc0, 0xa4 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "CS_OPT_NO_BRANCH_OFFSET", "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "ld1h { z0.s }, p0/z, [x0]"

  -
    input:
      bytes: [ 0x00, 0xa0, 0xe0, 0xa4 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "CS_OPT_NO_BRANCH_OFFSET", "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "ld1h { z0.d }, p0/z, [x0]"

  -
    input:
      bytes: [ 0xff, 0xbf, 0xaf, 0xa4 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "CS_OPT_NO_BRANCH_OFFSET", "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "ld1h { z31.h }, p7/z, [sp, #-1, mul vl]"

  -
    input:
      bytes: [ 0x55, 0xb5, 0xa5, 0xa4 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "CS_OPT_NO_BRANCH_OFFSET", "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "ld1h { z21.h }, p5/z, [x10, #5, mul vl]"

  -
    input:
      bytes: [ 0xff, 0xbf, 0xcf, 0xa4 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "CS_OPT_NO_BRANCH_OFFSET", "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "ld1h { z31.s }, p7/z, [sp, #-1, mul vl]"

  -
    input:
      bytes: [ 0x55, 0xb5, 0xc5, 0xa4 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "CS_OPT_NO_BRANCH_OFFSET", "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "ld1h { z21.s }, p5/z, [x10, #5, mul vl]"

  -
    input:
      bytes: [ 0xff, 0xbf, 0xef, 0xa4 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "CS_OPT_NO_BRANCH_OFFSET", "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "ld1h { z31.d }, p7/z, [sp, #-1, mul vl]"

  -
    input:
      bytes: [ 0x55, 0xb5, 0xe5, 0xa4 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "CS_OPT_NO_BRANCH_OFFSET", "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "ld1h { z21.d }, p5/z, [x10, #5, mul vl]"

  -
    input:
      bytes: [ 0xe5, 0x4f, 0xb0, 0xa4 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "CS_OPT_NO_BRANCH_OFFSET", "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "ld1h { z5.h }, p3/z, [sp, x16, lsl #1]"

  -
    input:
      bytes: [ 0x25, 0x4e, 0xb0, 0xa4 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "CS_OPT_NO_BRANCH_OFFSET", "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "ld1h { z5.h }, p3/z, [x17, x16, lsl #1]"

  -
    input:
      bytes: [ 0x55, 0x55, 0xd5, 0xa4 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "CS_OPT_NO_BRANCH_OFFSET", "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "ld1h { z21.s }, p5/z, [x10, x21, lsl #1]"

  -
    input:
      bytes: [ 0xb7, 0x4d, 0xe8, 0xa4 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "CS_OPT_NO_BRANCH_OFFSET", "aarch64", "sve" ]
    expected:
      insns:
        -
          asm_text: "ld1h { z23.d }, p3/z, [x13, x8, lsl #1]"

  -
    input:
      bytes: [ 0x00, 0xa0, 0xa0, 0xa4 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "CS_OPT_NO_BRANCH_OFFSET", "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "ld1h { z0.h }, p0/z, [x0]"

  -
    input:
      bytes: [ 0x00, 0xa0, 0xc0, 0xa4 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "CS_OPT_NO_BRANCH_OFFSET", "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "ld1h { z0.s }, p0/z, [x0]"

  -
    input:
      bytes: [ 0x00, 0xa0, 0xe0, 0xa4 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "CS_OPT_NO_BRANCH_OFFSET", "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "ld1h { z0.d }, p0/z, [x0]"

  -
    input:
      bytes: [ 0x00, 0xa0, 0xa0, 0xa4 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "CS_OPT_NO_BRANCH_OFFSET", "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "ld1h { z0.h }, p0/z, [x0]"

  -
    input:
      bytes: [ 0x00, 0xa0, 0xc0, 0xa4 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "CS_OPT_NO_BRANCH_OFFSET", "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "ld1h { z0.s }, p0/z, [x0]"

  -
    input:
      bytes: [ 0x00, 0xa0, 0xe0, 0xa4 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "CS_OPT_NO_BRANCH_OFFSET", "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "ld1h { z0.d }, p0/z, [x0]"

  -
    input:
      bytes: [ 0xff, 0xbf, 0xaf, 0xa4 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "CS_OPT_NO_BRANCH_OFFSET", "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "ld1h { z31.h }, p7/z, [sp, #-1, mul vl]"

  -
    input:
      bytes: [ 0x55, 0xb5, 0xa5, 0xa4 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "CS_OPT_NO_BRANCH_OFFSET", "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "ld1h { z21.h }, p5/z, [x10, #5, mul vl]"

  -
    input:
      bytes: [ 0xff, 0xbf, 0xcf, 0xa4 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "CS_OPT_NO_BRANCH_OFFSET", "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "ld1h { z31.s }, p7/z, [sp, #-1, mul vl]"

  -
    input:
      bytes: [ 0x55, 0xb5, 0xc5, 0xa4 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "CS_OPT_NO_BRANCH_OFFSET", "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "ld1h { z21.s }, p5/z, [x10, #5, mul vl]"

  -
    input:
      bytes: [ 0xff, 0xbf, 0xef, 0xa4 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "CS_OPT_NO_BRANCH_OFFSET", "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "ld1h { z31.d }, p7/z, [sp, #-1, mul vl]"

  -
    input:
      bytes: [ 0x55, 0xb5, 0xe5, 0xa4 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "CS_OPT_NO_BRANCH_OFFSET", "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "ld1h { z21.d }, p5/z, [x10, #5, mul vl]"

  -
    input:
      bytes: [ 0xe5, 0x4f, 0xb0, 0xa4 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "CS_OPT_NO_BRANCH_OFFSET", "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "ld1h { z5.h }, p3/z, [sp, x16, lsl #1]"

  -
    input:
      bytes: [ 0x25, 0x4e, 0xb0, 0xa4 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "CS_OPT_NO_BRANCH_OFFSET", "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "ld1h { z5.h }, p3/z, [x17, x16, lsl #1]"

  -
    input:
      bytes: [ 0x55, 0x55, 0xd5, 0xa4 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "CS_OPT_NO_BRANCH_OFFSET", "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "ld1h { z21.s }, p5/z, [x10, x21, lsl #1]"

  -
    input:
      bytes: [ 0xb7, 0x4d, 0xe8, 0xa4 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "CS_OPT_NO_BRANCH_OFFSET", "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "ld1h { z23.d }, p3/z, [x13, x8, lsl #1]"
