test_cases:
  -
    input:
      bytes: [ 0x20, 0x80, 0x62, 0x64 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve", "+bf16" ]
    expected:
      insns:
        -
          asm_text: "bfdot z0.s, z1.h, z2.h"

  -
    input:
      bytes: [ 0x20, 0x40, 0x62, 0x64 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve", "+bf16" ]
    expected:
      insns:
        -
          asm_text: "bfdot z0.s, z1.h, z2.h[0]"

  -
    input:
      bytes: [ 0x20, 0x40, 0x7a, 0x64 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve", "+bf16" ]
    expected:
      insns:
        -
          asm_text: "bfdot z0.s, z1.h, z2.h[3]"

  -
    input:
      bytes: [ 0xe0, 0xbc, 0x20, 0x04 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve", "+bf16" ]
    expected:
      insns:
        -
          asm_text: "movprfx z0, z7"

  -
    input:
      bytes: [ 0x20, 0x80, 0x62, 0x64 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve", "+bf16" ]
    expected:
      insns:
        -
          asm_text: "bfdot z0.s, z1.h, z2.h"

  -
    input:
      bytes: [ 0xe0, 0xbc, 0x20, 0x04 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve", "+bf16" ]
    expected:
      insns:
        -
          asm_text: "movprfx z0, z7"

  -
    input:
      bytes: [ 0x20, 0x40, 0x62, 0x64 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve", "+bf16" ]
    expected:
      insns:
        -
          asm_text: "bfdot z0.s, z1.h, z2.h[0]"

  -
    input:
      bytes: [ 0xe0, 0xbc, 0x20, 0x04 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve", "+bf16" ]
    expected:
      insns:
        -
          asm_text: "movprfx z0, z7"

  -
    input:
      bytes: [ 0x20, 0x40, 0x7a, 0x64 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve", "+bf16" ]
    expected:
      insns:
        -
          asm_text: "bfdot z0.s, z1.h, z2.h[3]"

  -
    input:
      bytes: [ 0x20, 0x80, 0x62, 0x64 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme", "+bf16" ]
    expected:
      insns:
        -
          asm_text: "bfdot z0.s, z1.h, z2.h"

  -
    input:
      bytes: [ 0x20, 0x40, 0x62, 0x64 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme", "+bf16" ]
    expected:
      insns:
        -
          asm_text: "bfdot z0.s, z1.h, z2.h[0]"

  -
    input:
      bytes: [ 0x20, 0x40, 0x7a, 0x64 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme", "+bf16" ]
    expected:
      insns:
        -
          asm_text: "bfdot z0.s, z1.h, z2.h[3]"

  -
    input:
      bytes: [ 0xe0, 0xbc, 0x20, 0x04 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme", "+bf16" ]
    expected:
      insns:
        -
          asm_text: "movprfx z0, z7"

  -
    input:
      bytes: [ 0x20, 0x80, 0x62, 0x64 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme", "+bf16" ]
    expected:
      insns:
        -
          asm_text: "bfdot z0.s, z1.h, z2.h"

  -
    input:
      bytes: [ 0xe0, 0xbc, 0x20, 0x04 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme", "+bf16" ]
    expected:
      insns:
        -
          asm_text: "movprfx z0, z7"

  -
    input:
      bytes: [ 0x20, 0x40, 0x62, 0x64 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme", "+bf16" ]
    expected:
      insns:
        -
          asm_text: "bfdot z0.s, z1.h, z2.h[0]"

  -
    input:
      bytes: [ 0xe0, 0xbc, 0x20, 0x04 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme", "+bf16" ]
    expected:
      insns:
        -
          asm_text: "movprfx z0, z7"

  -
    input:
      bytes: [ 0x20, 0x40, 0x7a, 0x64 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme", "+bf16" ]
    expected:
      insns:
        -
          asm_text: "bfdot z0.s, z1.h, z2.h[3]"
