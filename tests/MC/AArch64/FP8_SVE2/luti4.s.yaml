test_cases:
  -
    input:
      bytes: [ 0x00, 0xa4, 0x60, 0x45 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve2", "+lut" ]
    expected:
      insns:
        -
          asm_text: "luti4 z0.b, { z0.b }, z0[0]"

  -
    input:
      bytes: [ 0xff, 0xa7, 0xff, 0x45 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve2", "+lut" ]
    expected:
      insns:
        -
          asm_text: "luti4 z31.b, { z31.b }, z31[1]"

  -
    input:
      bytes: [ 0x00, 0xbc, 0x20, 0x45 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve2", "+lut" ]
    expected:
      insns:
        -
          asm_text: "luti4 z0.h, { z0.h }, z0[0]"

  -
    input:
      bytes: [ 0x55, 0xbd, 0x75, 0x45 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve2", "+lut" ]
    expected:
      insns:
        -
          asm_text: "luti4 z21.h, { z10.h }, z21[1]"

  -
    input:
      bytes: [ 0xff, 0xbf, 0xff, 0x45 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve2", "+lut" ]
    expected:
      insns:
        -
          asm_text: "luti4 z31.h, { z31.h }, z31[3]"

  -
    input:
      bytes: [ 0x00, 0xb4, 0x20, 0x45 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve2", "+lut" ]
    expected:
      insns:
        -
          asm_text: "luti4 z0.h, { z0.h, z1.h }, z0[0]"

  -
    input:
      bytes: [ 0x55, 0xb5, 0x75, 0x45 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve2", "+lut" ]
    expected:
      insns:
        -
          asm_text: "luti4 z21.h, { z10.h, z11.h }, z21[1]"

  -
    input:
      bytes: [ 0xff, 0xb7, 0xff, 0x45 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve2", "+lut" ]
    expected:
      insns:
        -
          asm_text: "luti4 z31.h, { z31.h, z0.h }, z31[3]"
