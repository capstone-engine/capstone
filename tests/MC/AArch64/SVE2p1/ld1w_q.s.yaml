test_cases:
  -
    input:
      bytes: [ 0x00, 0x80, 0x00, 0xa5 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "CS_OPT_NO_BRANCH_OFFSET", "aarch64", "sve2p1" ]
    expected:
      insns:
        -
          asm_text: "ld1w { z0.q }, p0/z, [x0, x0, lsl #2]"

  -
    input:
      bytes: [ 0x55, 0x95, 0x15, 0xa5 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "CS_OPT_NO_BRANCH_OFFSET", "aarch64", "sve2p1" ]
    expected:
      insns:
        -
          asm_text: "ld1w { z21.q }, p5/z, [x10, x21, lsl #2]"

  -
    input:
      bytes: [ 0xb7, 0x8d, 0x08, 0xa5 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "CS_OPT_NO_BRANCH_OFFSET", "aarch64", "sve2p1" ]
    expected:
      insns:
        -
          asm_text: "ld1w { z23.q }, p3/z, [x13, x8, lsl #2]"

  -
    input:
      bytes: [ 0xb7, 0x8d, 0x08, 0xa5 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "CS_OPT_NO_BRANCH_OFFSET", "aarch64", "sve2p1" ]
    expected:
      insns:
        -
          asm_text: "ld1w { z23.q }, p3/z, [x13, x8, lsl #2]"

  -
    input:
      bytes: [ 0x00, 0x20, 0x10, 0xa5 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "CS_OPT_NO_BRANCH_OFFSET", "aarch64", "sve2p1" ]
    expected:
      insns:
        -
          asm_text: "ld1w { z0.q }, p0/z, [x0]"

  -
    input:
      bytes: [ 0x55, 0x35, 0x15, 0xa5 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "CS_OPT_NO_BRANCH_OFFSET", "aarch64", "sve2p1" ]
    expected:
      insns:
        -
          asm_text: "ld1w { z21.q }, p5/z, [x10, #5, mul vl]"

  -
    input:
      bytes: [ 0xb7, 0x2d, 0x18, 0xa5 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "CS_OPT_NO_BRANCH_OFFSET", "aarch64", "sve2p1" ]
    expected:
      insns:
        -
          asm_text: "ld1w { z23.q }, p3/z, [x13, #-8, mul vl]"

  -
    input:
      bytes: [ 0xff, 0x3f, 0x1f, 0xa5 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "CS_OPT_NO_BRANCH_OFFSET", "aarch64", "sve2p1" ]
    expected:
      insns:
        -
          asm_text: "ld1w { z31.q }, p7/z, [sp, #-1, mul vl]"
