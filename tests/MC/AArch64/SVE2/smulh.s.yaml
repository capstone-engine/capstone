test_cases:
  -
    input:
      bytes: [ 0x20, 0x68, 0x22, 0x04 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve2" ]
    expected:
      insns:
        -
          asm_text: "smulh z0.b, z1.b, z2.b"

  -
    input:
      bytes: [ 0x20, 0x68, 0x62, 0x04 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve2" ]
    expected:
      insns:
        -
          asm_text: "smulh z0.h, z1.h, z2.h"

  -
    input:
      bytes: [ 0xdd, 0x6b, 0xbf, 0x04 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve2" ]
    expected:
      insns:
        -
          asm_text: "smulh z29.s, z30.s, z31.s"

  -
    input:
      bytes: [ 0xff, 0x6b, 0xff, 0x04 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve2" ]
    expected:
      insns:
        -
          asm_text: "smulh z31.d, z31.d, z31.d"

  -
    input:
      bytes: [ 0x20, 0x68, 0x22, 0x04 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "smulh z0.b, z1.b, z2.b"

  -
    input:
      bytes: [ 0x20, 0x68, 0x62, 0x04 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "smulh z0.h, z1.h, z2.h"

  -
    input:
      bytes: [ 0xdd, 0x6b, 0xbf, 0x04 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "smulh z29.s, z30.s, z31.s"

  -
    input:
      bytes: [ 0xff, 0x6b, 0xff, 0x04 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "smulh z31.d, z31.d, z31.d"
