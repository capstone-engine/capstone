test_cases:
  -
    input:
      bytes: [ 0x20, 0x80, 0x0c, 0x44 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve2" ]
    expected:
      insns:
        -
          asm_text: "sqshlr z0.b, p0/m, z0.b, z1.b"

  -
    input:
      bytes: [ 0x20, 0x80, 0x4c, 0x44 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve2" ]
    expected:
      insns:
        -
          asm_text: "sqshlr z0.h, p0/m, z0.h, z1.h"

  -
    input:
      bytes: [ 0xdd, 0x9f, 0x8c, 0x44 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve2" ]
    expected:
      insns:
        -
          asm_text: "sqshlr z29.s, p7/m, z29.s, z30.s"

  -
    input:
      bytes: [ 0xdf, 0x9f, 0xcc, 0x44 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve2" ]
    expected:
      insns:
        -
          asm_text: "sqshlr z31.d, p7/m, z31.d, z30.d"

  -
    input:
      bytes: [ 0xdf, 0x20, 0xd0, 0x04 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve2" ]
    expected:
      insns:
        -
          asm_text: "movprfx z31.d, p0/z, z6.d"

  -
    input:
      bytes: [ 0xdf, 0x83, 0xcc, 0x44 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve2" ]
    expected:
      insns:
        -
          asm_text: "sqshlr z31.d, p0/m, z31.d, z30.d"

  -
    input:
      bytes: [ 0xdf, 0xbc, 0x20, 0x04 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve2" ]
    expected:
      insns:
        -
          asm_text: "movprfx z31, z6"

  -
    input:
      bytes: [ 0xdf, 0x9f, 0xcc, 0x44 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve2" ]
    expected:
      insns:
        -
          asm_text: "sqshlr z31.d, p7/m, z31.d, z30.d"

  -
    input:
      bytes: [ 0x20, 0x80, 0x0c, 0x44 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "sqshlr z0.b, p0/m, z0.b, z1.b"

  -
    input:
      bytes: [ 0x20, 0x80, 0x4c, 0x44 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "sqshlr z0.h, p0/m, z0.h, z1.h"

  -
    input:
      bytes: [ 0xdd, 0x9f, 0x8c, 0x44 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "sqshlr z29.s, p7/m, z29.s, z30.s"

  -
    input:
      bytes: [ 0xdf, 0x9f, 0xcc, 0x44 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "sqshlr z31.d, p7/m, z31.d, z30.d"

  -
    input:
      bytes: [ 0xdf, 0x20, 0xd0, 0x04 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "movprfx z31.d, p0/z, z6.d"

  -
    input:
      bytes: [ 0xdf, 0x83, 0xcc, 0x44 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "sqshlr z31.d, p0/m, z31.d, z30.d"

  -
    input:
      bytes: [ 0xdf, 0xbc, 0x20, 0x04 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "movprfx z31, z6"

  -
    input:
      bytes: [ 0xdf, 0x9f, 0xcc, 0x44 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "sqshlr z31.d, p7/m, z31.d, z30.d"
