test_cases:
  -
    input:
      bytes: [ 0x20,0x08,0x7f,0x44 ]
      arch: "AArch64"
      options: [ "aarch64", "sve2" ]
    expected:
      insns:
        -
          asm_text: "mla z0.h, z1.h, z7.h[7]"

  -
    input:
      bytes: [ 0x20,0x08,0xbf,0x44 ]
      arch: "AArch64"
      options: [ "aarch64", "sve2" ]
    expected:
      insns:
        -
          asm_text: "mla z0.s, z1.s, z7.s[3]"

  -
    input:
      bytes: [ 0x20,0x08,0xf7,0x44 ]
      arch: "AArch64"
      options: [ "aarch64", "sve2" ]
    expected:
      insns:
        -
          asm_text: "mla z0.d, z1.d, z7.d[1]"

  -
    input:
      bytes: [ 0xe0,0xbc,0x20,0x04 ]
      arch: "AArch64"
      options: [ "aarch64", "sve2" ]
    expected:
      insns:
        -
          asm_text: "movprfx z0, z7"

  -
    input:
      bytes: [ 0x20,0x08,0xf7,0x44 ]
      arch: "AArch64"
      options: [ "aarch64", "sve2" ]
    expected:
      insns:
        -
          asm_text: "mla z0.d, z1.d, z7.d[1]"

  -
    input:
      bytes: [ 0x20,0x08,0x7f,0x44 ]
      arch: "AArch64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "mla z0.h, z1.h, z7.h[7]"

  -
    input:
      bytes: [ 0x20,0x08,0xbf,0x44 ]
      arch: "AArch64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "mla z0.s, z1.s, z7.s[3]"

  -
    input:
      bytes: [ 0x20,0x08,0xf7,0x44 ]
      arch: "AArch64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "mla z0.d, z1.d, z7.d[1]"

  -
    input:
      bytes: [ 0xe0,0xbc,0x20,0x04 ]
      arch: "AArch64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "movprfx z0, z7"

  -
    input:
      bytes: [ 0x20,0x08,0xf7,0x44 ]
      arch: "AArch64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "mla z0.d, z1.d, z7.d[1]"
