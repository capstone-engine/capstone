test_cases:
  -
    input:
      bytes: [ 0xe0, 0x81, 0x0c, 0x04 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve2" ]
    expected:
      insns:
        -
          asm_text: "srshr z0.b, p0/m, z0.b, #1"

  -
    input:
      bytes: [ 0x1f, 0x81, 0x0c, 0x04 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve2" ]
    expected:
      insns:
        -
          asm_text: "srshr z31.b, p0/m, z31.b, #8"

  -
    input:
      bytes: [ 0xe0, 0x83, 0x0c, 0x04 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve2" ]
    expected:
      insns:
        -
          asm_text: "srshr z0.h, p0/m, z0.h, #1"

  -
    input:
      bytes: [ 0x1f, 0x82, 0x0c, 0x04 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve2" ]
    expected:
      insns:
        -
          asm_text: "srshr z31.h, p0/m, z31.h, #16"

  -
    input:
      bytes: [ 0xe0, 0x83, 0x4c, 0x04 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve2" ]
    expected:
      insns:
        -
          asm_text: "srshr z0.s, p0/m, z0.s, #1"

  -
    input:
      bytes: [ 0x1f, 0x80, 0x4c, 0x04 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve2" ]
    expected:
      insns:
        -
          asm_text: "srshr z31.s, p0/m, z31.s, #32"

  -
    input:
      bytes: [ 0xe0, 0x83, 0xcc, 0x04 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve2" ]
    expected:
      insns:
        -
          asm_text: "srshr z0.d, p0/m, z0.d, #1"

  -
    input:
      bytes: [ 0x1f, 0x80, 0x8c, 0x04 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve2" ]
    expected:
      insns:
        -
          asm_text: "srshr z31.d, p0/m, z31.d, #64"

  -
    input:
      bytes: [ 0xdf, 0x20, 0xd0, 0x04 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve2" ]
    expected:
      insns:
        -
          asm_text: "movprfx z31.d, p0/z, z6.d"

  -
    input:
      bytes: [ 0x1f, 0x80, 0x8c, 0x04 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve2" ]
    expected:
      insns:
        -
          asm_text: "srshr z31.d, p0/m, z31.d, #64"

  -
    input:
      bytes: [ 0xdf, 0xbc, 0x20, 0x04 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve2" ]
    expected:
      insns:
        -
          asm_text: "movprfx z31, z6"

  -
    input:
      bytes: [ 0x1f, 0x80, 0x8c, 0x04 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve2" ]
    expected:
      insns:
        -
          asm_text: "srshr z31.d, p0/m, z31.d, #64"

  -
    input:
      bytes: [ 0xe0, 0x81, 0x0c, 0x04 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "srshr z0.b, p0/m, z0.b, #1"

  -
    input:
      bytes: [ 0x1f, 0x81, 0x0c, 0x04 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "srshr z31.b, p0/m, z31.b, #8"

  -
    input:
      bytes: [ 0xe0, 0x83, 0x0c, 0x04 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "srshr z0.h, p0/m, z0.h, #1"

  -
    input:
      bytes: [ 0x1f, 0x82, 0x0c, 0x04 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "srshr z31.h, p0/m, z31.h, #16"

  -
    input:
      bytes: [ 0xe0, 0x83, 0x4c, 0x04 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "srshr z0.s, p0/m, z0.s, #1"

  -
    input:
      bytes: [ 0x1f, 0x80, 0x4c, 0x04 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "srshr z31.s, p0/m, z31.s, #32"

  -
    input:
      bytes: [ 0xe0, 0x83, 0xcc, 0x04 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "srshr z0.d, p0/m, z0.d, #1"

  -
    input:
      bytes: [ 0x1f, 0x80, 0x8c, 0x04 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "srshr z31.d, p0/m, z31.d, #64"

  -
    input:
      bytes: [ 0xdf, 0x20, 0xd0, 0x04 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "movprfx z31.d, p0/z, z6.d"

  -
    input:
      bytes: [ 0x1f, 0x80, 0x8c, 0x04 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "srshr z31.d, p0/m, z31.d, #64"

  -
    input:
      bytes: [ 0xdf, 0xbc, 0x20, 0x04 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "movprfx z31, z6"

  -
    input:
      bytes: [ 0x1f, 0x80, 0x8c, 0x04 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "srshr z31.d, p0/m, z31.d, #64"
