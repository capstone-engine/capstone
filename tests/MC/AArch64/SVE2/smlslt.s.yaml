test_cases:
  -
    input:
      bytes: [ 0x20, 0x54, 0x5f, 0x44 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve2" ]
    expected:
      insns:
        -
          asm_text: "smlslt z0.h, z1.b, z31.b"

  -
    input:
      bytes: [ 0x20, 0x54, 0x9f, 0x44 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve2" ]
    expected:
      insns:
        -
          asm_text: "smlslt z0.s, z1.h, z31.h"

  -
    input:
      bytes: [ 0x20, 0x54, 0xdf, 0x44 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve2" ]
    expected:
      insns:
        -
          asm_text: "smlslt z0.d, z1.s, z31.s"

  -
    input:
      bytes: [ 0x20, 0xac, 0xbf, 0x44 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve2" ]
    expected:
      insns:
        -
          asm_text: "smlslt z0.s, z1.h, z7.h[7]"

  -
    input:
      bytes: [ 0x20, 0xac, 0xef, 0x44 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve2" ]
    expected:
      insns:
        -
          asm_text: "smlslt z0.d, z1.s, z15.s[1]"

  -
    input:
      bytes: [ 0x95, 0xbf, 0x20, 0x04 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve2" ]
    expected:
      insns:
        -
          asm_text: "movprfx z21, z28"

  -
    input:
      bytes: [ 0x35, 0x54, 0xdf, 0x44 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve2" ]
    expected:
      insns:
        -
          asm_text: "smlslt z21.d, z1.s, z31.s"

  -
    input:
      bytes: [ 0x95, 0xbf, 0x20, 0x04 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve2" ]
    expected:
      insns:
        -
          asm_text: "movprfx z21, z28"

  -
    input:
      bytes: [ 0x55, 0xad, 0xe5, 0x44 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sve2" ]
    expected:
      insns:
        -
          asm_text: "smlslt z21.d, z10.s, z5.s[1]"

  -
    input:
      bytes: [ 0x20, 0x54, 0x5f, 0x44 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "smlslt z0.h, z1.b, z31.b"

  -
    input:
      bytes: [ 0x20, 0x54, 0x9f, 0x44 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "smlslt z0.s, z1.h, z31.h"

  -
    input:
      bytes: [ 0x20, 0x54, 0xdf, 0x44 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "smlslt z0.d, z1.s, z31.s"

  -
    input:
      bytes: [ 0x20, 0xac, 0xbf, 0x44 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "smlslt z0.s, z1.h, z7.h[7]"

  -
    input:
      bytes: [ 0x20, 0xac, 0xef, 0x44 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "smlslt z0.d, z1.s, z15.s[1]"

  -
    input:
      bytes: [ 0x95, 0xbf, 0x20, 0x04 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "movprfx z21, z28"

  -
    input:
      bytes: [ 0x35, 0x54, 0xdf, 0x44 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "smlslt z21.d, z1.s, z31.s"

  -
    input:
      bytes: [ 0x95, 0xbf, 0x20, 0x04 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "movprfx z21, z28"

  -
    input:
      bytes: [ 0x55, 0xad, 0xe5, 0x44 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "aarch64", "sme" ]
    expected:
      insns:
        -
          asm_text: "smlslt z21.d, z10.s, z5.s[1]"
