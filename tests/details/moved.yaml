test_cases:
  -
    input:
      name: "issue 0 ARM operand groups 0x90,0xe8,0x0e,0x00 == ldm.w r0, {r1, r2, r3} ;"
      bytes: [ 0x90,0xe8,0x0e,0x00 ]
      arch: "CS_ARCH_ARM"
      options: [ CS_MODE_THUMB, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "ldm.w r0, {r1, r2, r3}"
        details:
          arm:
            operands:
              -
                type: ARM_OP_REG
                reg: r0
                access: CS_AC_READ
              -
                type: ARM_OP_REG
                reg: r1
                access: CS_AC_WRITE
              -
                type: ARM_OP_REG
                reg: r2
                access: CS_AC_WRITE
              -
                type: ARM_OP_REG
                reg: r3
                access: CS_AC_WRITE
          regs_read: [ r0 ]
          regs_write: [ r1, r2, r3 ]
          groups: [ IsThumb2 ]
  -
    input:
      name: "issue 0 ARM operand groups 0x0e,0xc8 == ldm r0!, {r1, r2, r3} ;"
      bytes: [ 0x0e,0xc8 ]
      arch: "CS_ARCH_ARM"
      options: [ CS_MODE_THUMB, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "ldm r0!, {r1, r2, r3}"
        details:
          arm:
            operands:
              -
                type: ARM_OP_REG
                reg: r0
                access: CS_AC_READ_WRITE
              -
                type: ARM_OP_REG
                reg: r1
                access: CS_AC_WRITE
              -
                type: ARM_OP_REG
                reg: r2
                access: CS_AC_WRITE
              -
                type: ARM_OP_REG
                reg: r3
                access: CS_AC_WRITE
            Write-back: True
          regs_read: [ r0 ]
          regs_write: [ r0, r1, r2, r3 ]
          groups: [ IsThumb ]
  -
    input:
      name: "issue 0 ARM operand groups 0x00,0x2a,0xf7,0xee == vmov.f32 s5, #1.000000e+00 ;"
      bytes: [ 0x00,0x2a,0xf7,0xee ]
      arch: "CS_ARCH_ARM"
      options: [ CS_MODE_ARM, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "vmov.f32 s5, #1.000000e+00"
        details:
          arm:
            operands:
              -
                type: ARM_OP_REG
                reg: s5
                access: CS_AC_WRITE
              -
                type: ARM_OP_FP
          regs_write: [ s5 ]
          groups: [ HasVFP3 ]
  -
    input:
      name: "issue 0 ARM operand groups 0x0f,0x00,0x71,0xe3 == cmn r1, #15 ;"
      bytes: [ 0x0f,0x00,0x71,0xe3 ]
      arch: "CS_ARCH_ARM"
      options: [ CS_MODE_ARM, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "cmn r1, #0xf"
        details:
          arm:
            operands:
              -
                type: ARM_OP_REG
                reg: r1
                access: CS_AC_READ
              -
                type: ARM_OP_IMM
                imm: 0xf
                access: CS_AC_READ
            Update-flags: True
          regs_read: [ r1 ]
          regs_write: [ cpsr ]
          groups: [ IsARM ]
  -
    input:
      name: "issue 0 ARM operand groups 0x03,0x20,0xb0,0xe1 == movs r2, r3 ;"
      bytes: [ 0x03,0x20,0xb0,0xe1 ]
      arch: "CS_ARCH_ARM"
      options: [ CS_MODE_ARM, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "movs r2, r3"
        details:
          arm:
            operands:
              -
                type: ARM_OP_REG
                reg: r2
                access: CS_AC_WRITE
              -
                type: ARM_OP_REG
                reg: r3
                access: CS_AC_READ
            Update-flags: True
          regs_read: [ r3 ]
          regs_write: [ cpsr, r2 ]
          groups: [ IsARM ]
  -
    input:
      name: "issue 0 ARM operand groups 0xfd,0x8f == ldrh r5, [r7, #62] ;"
      bytes: [ 0xfd,0x8f ]
      arch: "CS_ARCH_ARM"
      options: [ CS_MODE_THUMB, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "ldrh r5, [r7, #0x3e]"
        details:
          arm:
            operands:
              -
                type: ARM_OP_REG
                reg: r5
                access: CS_AC_WRITE
              -
                type: ARM_OP_MEM
                mem:
                mem_base: REG = r7
                mem_disp: 0x3e
                access: CS_AC_READ
          regs_read: [ r7 ]
          regs_write: [ r5 ]
          groups: [ IsThumb ]
  -
    input:
      name: "issue 0 ARM operand groups 0x61,0xb6 == cpsie f ;"
      bytes: [ 0x61,0xb6 ]
      arch: "CS_ARCH_ARM"
      options: [ CS_MODE_THUMB, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "cpsie f"
            CPSI-mode: 2
            CPSI-flag: 1
          groups: [ IsThumb ]
  -
    input:
      name: "issue 0 ARM operand groups 0x18,0xf8,0x03,0x1e == ldrbt r1, [r8, #3] ;"
      bytes: [ 0x18,0xf8,0x03,0x1e ]
      arch: "CS_ARCH_ARM"
      options: [ CS_MODE_THUMB, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "ldrbt r1, [r8, #3]"
        details:
          arm:
            operands:
              -
                type: ARM_OP_REG
                reg: r1
                access: CS_AC_WRITE
              -
                type: ARM_OP_MEM
                mem:
                mem_base: REG = r8
                mem_disp: 0x3
                access: CS_AC_READ
          regs_read: [ r8 ]
          regs_write: [ r1 ]
          groups: [ IsThumb2 ]
  -
    input:
      name: "issue 0 ARM operand groups 0xb0,0xf8,0x01,0xf1 == pldw [r0, #257] ;"
      bytes: [ 0xb0,0xf8,0x01,0xf1 ]
      arch: "CS_ARCH_ARM"
      options: [ CS_MODE_THUMB, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "pldw [r0, #0x101]"
        details:
          arm:
            operands:
              -
                type: ARM_OP_MEM
                mem:
                mem_base: REG = r0
                mem_disp: 0x101
                access: CS_AC_READ
          regs_read: [ r0 ]
          groups: [ IsThumb2, HasV7, HasMP ]
  -
    input:
      name: "issue 0 ARM operand groups 0xd3,0xe8,0x08,0xf0 == tbb [r3, r8] ;"
      bytes: [ 0xd3,0xe8,0x08,0xf0 ]
      arch: "CS_ARCH_ARM"
      options: [ CS_MODE_THUMB, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "tbb [r3, r8]"
        details:
          arm:
            operands:
              -
                type: ARM_OP_MEM
                mem:
                mem_base: REG = r3
                mem_index: REG = r8
                access: CS_AC_READ
          regs_read: [ r3, r8 ]
          groups: [ jump, IsThumb2 ]
  -
    input:
      name: "issue 0 ARM operand groups 0xd3,0xe8,0x18,0xf0 == tbh [r3, r8, lsl #1] ;"
      bytes: [ 0xd3,0xe8,0x18,0xf0 ]
      arch: "CS_ARCH_ARM"
      options: [ CS_MODE_THUMB, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "tbh [r3, r8, lsl #1]"
        details:
          arm:
            operands:
              -
                type: ARM_OP_MEM
                mem:
                mem_base: REG = r3
                mem_index: REG = r8
                mem_lshift: 0x1
                access: CS_AC_READ
            Shift: 2 = 1
          regs_read: [ r3, r8 ]
          groups: [ jump, IsThumb2 ]
  -
    input:
      name: "issue 0 ARM operand groups 0xaf,0xf3,0x43,0x85 == cpsie i, #3 ;"
      bytes: [ 0xaf,0xf3,0x43,0x85 ]
      arch: "CS_ARCH_ARM"
      options: [ CS_MODE_THUMB, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "cpsie i, #3"
            cpsie i, #3
        details:
          arm:
            operands:
              -
                type: ARM_OP_IMM
                imm: 0x3
                access: CS_AC_READ
            CPSI-mode: 2
            CPSI-flag: 2
          groups: [ IsThumb2, IsNotMClass ]
  -
    input:
      name: "issue 0 ARM operand groups 0xbf,0xf3,0x6f,0x8f == isb sy ;"
      bytes: [ 0xbf,0xf3,0x6f,0x8f ]
      arch: "CS_ARCH_ARM"
      options: [ CS_MODE_THUMB, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "isb sy"
            isb sy
            Memory-barrier: 15
          groups: [ IsThumb, HasDB ]
  -
    input:
      name: "issue 0 ARM operand groups 0x59,0xea,0x7b,0x89 == csel r9, r9, r11, vc ;"
      bytes: [ 0x59,0xea,0x7b,0x89 ]
      arch: "CS_ARCH_ARM"
      options: [ CS_MODE_THUMB, CS_MODE_V8, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "csel r9, r9, r11, vc"
        details:
          arm:
            operands:
              -
                type: ARM_OP_REG
                reg: r9
                access: CS_AC_WRITE
              -
                type: ARM_OP_REG
                reg: r9
                access: CS_AC_READ
              -
                type: ARM_OP_REG
                reg: r11
                access: CS_AC_READ
            Code condition: 7
          regs_read: [ cpsr, r9, r11 ]
          regs_write: [ r9 ]
          groups: [ HasV8_1MMainline ]
  -
    input:
      name: "issue 0 ARM operand groups 0xbf,0xf3,0x56,0x8f == dmb nshst ;"
      bytes: [ 0xbf,0xf3,0x56,0x8f ]
      arch: "CS_ARCH_ARM"
      options: [ CS_MODE_THUMB, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "dmb nshst"
            dmb nshst
            Memory-barrier: 6
          groups: [ IsThumb, HasDB ]
  -
    input:
      name: "issue 0 ARM operand groups 0x31,0xfa,0x02,0xf2 == lsrs.w r2, r1, r2 ;"
      bytes: [ 0x31,0xfa,0x02,0xf2 ]
      arch: "CS_ARCH_ARM"
      options: [ CS_MODE_THUMB, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "lsrs.w r2, r1, r2"
        details:
          arm:
            operands:
              -
                type: ARM_OP_REG
                reg: r2
                access: CS_AC_WRITE
              -
                type: ARM_OP_REG
                reg: r1
                access: CS_AC_READ
              -
                type: ARM_OP_REG
                reg: r2
                access: CS_AC_READ
            Update-flags: True
          regs_read: [ r1, r2 ]
          regs_write: [ cpsr, r2 ]
          groups: [ IsThumb2 ]
  -
    input:
      name: "issue 0 ARM operand groups 0x5f,0xf0,0x0c,0x01 == movseq.w r1, #12 ;"
      bytes: [ 0x08,0xbf ]
      arch: "CS_ARCH_ARM"
      options: [ CS_MODE_THUMB, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "it eq"
            Code condition: 0
            Predicate Mask: 0x1
          regs_write: [ itstate ]
          groups: [ IsThumb2 ]
  -
    input:
      name: "issue 0 ARM operand groups 0x5f,0xf0,0x0c,0x01 == movseq.w r1, #12 ;"
      bytes: [ 0x5f,0xf0,0x0c,0x01 ]
      arch: "CS_ARCH_ARM"
      options: [ CS_MODE_THUMB, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "movseq.w r1, #0xc"
        details:
          arm:
            operands:
              -
                type: ARM_OP_REG
                reg: r1
                access: CS_AC_WRITE
              -
                type: ARM_OP_IMM
                imm: 0xc
                access: CS_AC_READ
            Code condition: 0
            Update-flags: True
          regs_write: [ cpsr, r1 ]
          groups: [ IsThumb2 ]
  -
    input:
      name: "issue 0 ARM operand groups 0x52,0xe8,0x01,0x1f == ldrex r1, [r2, #4] ;"
      bytes: [ 0x52,0xe8,0x01,0x1f ]
      arch: "CS_ARCH_ARM"
      options: [ CS_MODE_THUMB, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "ldrex r1, [r2, #4]"
        details:
          arm:
            operands:
              -
                type: ARM_OP_REG
                reg: r1
                access: CS_AC_WRITE
              -
                type: ARM_OP_MEM
                mem:
                mem_base: REG = r2
                mem_disp: 0x4
                access: CS_AC_READ
          regs_read: [ r2 ]
          regs_write: [ r1 ]
          groups: [ IsThumb, HasV8MBaseline ]
  -
    input:
      name: "issue 0 ARM operand groups 0xdf,0xec,0x1d,0x1a == vscclrmhi {s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, s24, s25, s26, s27, s28, s29, s30, s31, vpr} ;"
      bytes: [ 0x88,0xbf ]
      arch: "CS_ARCH_ARM"
      options: [ CS_MODE_THUMB, CS_MODE_V8, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "it hi"
            Code condition: 8
            Predicate Mask: 0x1
          groups: [ IsThumb2 ]
  -
    input:
      name: "issue 0 ARM operand groups 0xdf,0xec,0x1d,0x1a == vscclrmhi {s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, s24, s25, s26, s27, s28, s29, s30, s31, vpr} ;"
      bytes: [ 0xdf,0xec,0x1d,0x1a ]
      arch: "CS_ARCH_ARM"
      options: [ CS_MODE_THUMB, CS_MODE_V8, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "vscclrmhi {s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, s24, s25, s26, s27, s28, s29, s30, s31, vpr}"
        details:
          arm:
            operands:
              -
                type: ARM_OP_REG
                reg: s3
                access: CS_AC_WRITE
              -
                type: ARM_OP_REG
                reg: s4
                access: CS_AC_WRITE
              -
                type: ARM_OP_REG
                reg: s5
                access: CS_AC_WRITE
              -
                type: ARM_OP_REG
                reg: s6
                access: CS_AC_WRITE
              -
                type: ARM_OP_REG
                reg: s7
                access: CS_AC_WRITE
              -
                type: ARM_OP_REG
                reg: s8
                access: CS_AC_WRITE
              -
                type: ARM_OP_REG
                reg: s9
                access: CS_AC_WRITE
              -
                type: ARM_OP_REG
                reg: s10
                access: CS_AC_WRITE
              -
                type: ARM_OP_REG
                reg: s11
                access: CS_AC_WRITE
              -
                type: ARM_OP_REG
                reg: s12
                access: CS_AC_WRITE
            operands[10].type: REG = s13
            operands[10].access: WRITE
            operands[11].type: REG = s14
            operands[11].access: WRITE
            operands[12].type: REG = s15
            operands[12].access: WRITE
            operands[13].type: REG = s16
            operands[13].access: WRITE
            operands[14].type: REG = s17
            operands[14].access: WRITE
            operands[15].type: REG = s18
            operands[15].access: WRITE
            operands[16].type: REG = s19
            operands[16].access: WRITE
            operands[17].type: REG = s20
            operands[17].access: WRITE
            operands[18].type: REG = s21
            operands[18].access: WRITE
            operands[19].type: REG = s22
            operands[19].access: WRITE
            operands[20].type: REG = s23
            operands[20].access: WRITE
            operands[21].type: REG = s24
            operands[21].access: WRITE
            operands[22].type: REG = s25
            operands[22].access: WRITE
            operands[23].type: REG = s26
            operands[23].access: WRITE
            operands[24].type: REG = s27
            operands[24].access: WRITE
            operands[25].type: REG = s28
            operands[25].access: WRITE
            operands[26].type: REG = s29
            operands[26].access: WRITE
            operands[27].type: REG = s30
            operands[27].access: WRITE
            operands[28].type: REG = s31
            operands[28].access: WRITE
            operands[29].type: REG = vpr
            operands[29].access: WRITE
            Code condition: 8
          regs_write: [ s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, s24, s25, s26, s27, s28, s29, s30, s31, vpr ]
          groups: [ HasV8_1MMainline, Has8MSecExt ]
  -
    input:
      name: "issue 0 ARM operand groups 0x9f,0xec,0x06,0x5b == vscclrm {d5, d6, d7, vpr} ;"
      bytes: [ 0x9f,0xec,0x06,0x5b ]
      arch: "CS_ARCH_ARM"
      options: [ CS_MODE_THUMB, CS_MODE_V8, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "vscclrm {d5, d6, d7, vpr}"
        details:
          arm:
            operands:
              -
                type: ARM_OP_REG
                reg: d5
                access: CS_AC_WRITE
              -
                type: ARM_OP_REG
                reg: d6
                access: CS_AC_WRITE
              -
                type: ARM_OP_REG
                reg: d7
                access: CS_AC_WRITE
              -
                type: ARM_OP_REG
                reg: vpr
                access: CS_AC_WRITE
          regs_write: [ d5, d6, d7, vpr ]
          groups: [ HasV8_1MMainline, Has8MSecExt ]
  -
    input:
      name: "issue 0 ARM operand groups 0xbc,0xfd,0x7f,0xaf == vldrh.u32 q5, [r4, #254]! ;"
      bytes: [ 0xbc,0xfd,0x7f,0xaf ]
      arch: "CS_ARCH_ARM"
      options: [ CS_MODE_THUMB, CS_MODE_V8, CS_MODE_MCLASS, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "vldrh.u32 q5, [r4, #0xfe]!"
        details:
          arm:
            operands:
              -
                type: ARM_OP_REG
                reg: q5
                access: CS_AC_WRITE
              -
                type: ARM_OP_MEM
                mem:
                mem_base: REG = r4
                mem_disp: 0xfe
                access: CS_AC_READ
            Write-back: True
          regs_read: [ r4 ]
          regs_write: [ r4, q5 ]
          groups: [ HasMVEInt ]
  -
    input:
      name: "issue 0 ARM operand groups 0x80,0xfc,0x80,0x1e == vst20.16 {q0, q1}, [r0] ;"
      bytes: [ 0x80,0xfc,0x80,0x1e ]
      arch: "CS_ARCH_ARM"
      options: [ CS_MODE_THUMB, CS_MODE_MCLASS, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "vst20.16 {q0, q1}, [r0]"
        details:
          arm:
            operands:
              -
                type: ARM_OP_REG
                reg: q0
                access: CS_AC_READ
              -
                type: ARM_OP_REG
                reg: q1
                access: CS_AC_READ
              -
                type: ARM_OP_MEM
                mem:
                mem_base: REG = r0
                access: CS_AC_WRITE
          regs_read: [ q0, q1, r0 ]
          groups: [ HasMVEInt ]
  -
    input:
      name: "issue 0 ARM operand groups 0x98,0xfc,0x4e,0x08 == vcadd.f32 q0, q4, q7, #90 ;"
      bytes: [ 0x98,0xfc,0x4e,0x08 ]
      arch: "CS_ARCH_ARM"
      options: [ CS_MODE_THUMB, CS_MODE_MCLASS, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "vcadd.f32 q0, q4, q7, #90"
        details:
          arm:
            operands:
              -
                type: ARM_OP_REG
                reg: q0
                access: CS_AC_READ_WRITE
              -
                type: ARM_OP_REG
                reg: q4
                access: CS_AC_READ
              -
                type: ARM_OP_REG
                reg: q7
                access: CS_AC_READ
              -
                type: ARM_OP_IMM
                imm: 0x5a
                access: CS_AC_READ
          regs_read: [ q0, q4, q7 ]
          regs_write: [ q0 ]
          groups: [ HasMVEFloat ]
  -
    input:
      name: "issue 0 ARM operand groups 0x94,0xfd,0x46,0x48 == vcadd.f32 q2, q2, q3, #270 ;"
      bytes: [ 0x94,0xfd,0x46,0x48 ]
      arch: "CS_ARCH_ARM"
      options: [ CS_MODE_THUMB, CS_MODE_V8, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "vcadd.f32 q2, q2, q3, #270"
        details:
          arm:
            operands:
              -
                type: ARM_OP_REG
                reg: q2
                access: CS_AC_WRITE
              -
                type: ARM_OP_REG
                reg: q2
                access: CS_AC_READ
              -
                type: ARM_OP_REG
                reg: q3
                access: CS_AC_READ
              -
                type: ARM_OP_IMM
                imm: 0x10e
                access: CS_AC_READ
          regs_read: [ q2, q3 ]
          regs_write: [ q2 ]
          groups: [ HasNEON, HasV8_3a ]
  -
    input:
      name: "issue 0 ARM operand groups 0x9d,0xec,0x82,0x6e == vldrb.s16 q3, [sp, q1] ;"
      bytes: [ 0x9d,0xec,0x82,0x6e ]
      arch: "CS_ARCH_ARM"
      options: [ CS_MODE_THUMB, CS_MODE_MCLASS, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "vldrb.s16 q3, [sp, q1]"
        details:
          arm:
            operands:
              -
                type: ARM_OP_REG
                reg: q3
                access: CS_AC_WRITE
              -
                type: ARM_OP_MEM
                mem:
                mem_base: REG = r13
                mem_index: REG = q1
                access: CS_AC_READ
          regs_read: [ r13, q1 ]
          regs_write: [ q3 ]
          groups: [ HasMVEInt ]
  -
    input:
      name: "issue 0 ARM operand groups 0x90,0xec,0x12,0x6f == vldrh.s32 q3, [r0, q1] ;"
      bytes: [ 0x90,0xec,0x12,0x6f ]
      arch: "CS_ARCH_ARM"
      options: [ CS_MODE_THUMB, CS_MODE_MCLASS, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "vldrh.s32 q3, [r0, q1]"
        details:
          arm:
            operands:
              -
                type: ARM_OP_REG
                reg: q3
                access: CS_AC_WRITE
              -
                type: ARM_OP_MEM
                mem:
                mem_base: REG = r0
                mem_index: REG = q1
                access: CS_AC_READ
          regs_read: [ r0, q1 ]
          regs_write: [ q3 ]
          groups: [ HasMVEInt ]
  -
    input:
      name: "issue 0 ARM operand groups 0x5f,0xea,0x2d,0x83 == sqrshrl lr, r3, #64, r8 ;"
      bytes: [ 0x5f,0xea,0x2d,0x83 ]
      arch: "CS_ARCH_ARM"
      options: [ CS_MODE_THUMB, CS_MODE_V8, CS_MODE_MCLASS, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "sqrshrl lr, r3, #0x40, r8"
        details:
          arm:
            operands:
              -
                type: ARM_OP_REG
                reg: r14
                access: CS_AC_READ_WRITE
              -
                type: ARM_OP_REG
                reg: r3
                access: CS_AC_READ_WRITE
              -
                type: ARM_OP_IMM
                imm: 0x40
                access: CS_AC_READ
              -
                type: ARM_OP_REG
                reg: r8
                access: CS_AC_READ
            Write-back: True
          regs_read: [ r14, r3, r8 ]
          regs_write: [ r14, r3 ]
          groups: [ HasV8_1MMainline, HasMVEInt ]
  -
    input:
      name: "issue 0 ARM operand groups 0x82,0xfd,0x21,0xff == vstrd.64 q7, [q1, #264] ;"
      bytes: [ 0x82,0xfd,0x21,0xff ]
      arch: "CS_ARCH_ARM"
      options: [ CS_MODE_THUMB, CS_MODE_MCLASS, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "vstrd.64 q7, [q1, #0x108]"
        details:
          arm:
            operands:
              -
                type: ARM_OP_REG
                reg: q7
                access: CS_AC_READ
              -
                type: ARM_OP_MEM
                mem:
                mem_base: REG = q1
                mem_disp: 0x108
                access: CS_AC_WRITE
          regs_read: [ q7, q1 ]
          groups: [ HasMVEInt ]
  -
    input:
      name: "issue 0 ARM operand groups 0x06,0x16,0x72,0xe6 == ldrbt r1, [r2], -r6, lsl #12 ;"
      bytes: [ 0x06,0x16,0x72,0xe6 ]
      arch: "CS_ARCH_ARM"
      options: [ CS_MODE_ARM, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "ldrbt r1, [r2], -r6, lsl #12"
        details:
          arm:
            operands:
              -
                type: ARM_OP_REG
                reg: r1
                access: CS_AC_WRITE
              -
                type: ARM_OP_MEM
                mem:
                mem_base: REG = r2
                mem_index: REG = r6
                access: CS_AC_READ
            Shift: 2 = 12
            Subtracted: True
            Write-back: True
          regs_read: [ r2, r6 ]
          regs_write: [ r2, r1 ]
          groups: [ IsARM ]
  -
    input:
      name: "issue 0 ARM operand groups 0xf6,0x50,0x33,0xe1 == ldrsh r5, [r3, -r6]! ;"
      bytes: [ 0xf6,0x50,0x33,0xe1 ]
      arch: "CS_ARCH_ARM"
      options: [ CS_MODE_ARM, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "ldrsh r5, [r3, -r6]!"
        details:
          arm:
            operands:
              -
                type: ARM_OP_REG
                reg: r5
                access: CS_AC_WRITE
              -
                type: ARM_OP_MEM
                mem:
                mem_base: REG = r3
                mem_index: REG = r6
                access: CS_AC_READ
            Subtracted: True
            Write-back: True
          regs_read: [ r3, r6 ]
          regs_write: [ r3, r5 ]
          groups: [ IsARM ]
  -
    input:
      name: "issue 0 ARM operand groups 0x1e,0x19,0x7a,0xfd == ldc2l p9, c1, [r10, #-120]! ;"
      bytes: [ 0x1e,0x19,0x7a,0xfd ]
      arch: "CS_ARCH_ARM"
      options: [ CS_MODE_ARM, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "ldc2l p9, c1, [r10, #-0x78]!"
        details:
          arm:
            operands:
              -
                type: ARM_OP_P-IMM
                imm: 9
                access: CS_AC_READ
              -
                type: ARM_OP_C-IMM
                imm: 1
                access: CS_AC_READ
              -
                type: ARM_OP_MEM
                mem:
                mem_base: REG = r10
                mem_disp: 0x78
                access: CS_AC_READ
          regs_read: [ r10 ]
          regs_write: [ r10 ]
          groups: [ IsARM, PreV8 ]
  -
    input:
      name: "issue 0 ARM operand groups 0x12,0x31,0x7c,0xfc == ldc2l p1, c3, [r12], #-72 ;"
      bytes: [ 0x12,0x31,0x7c,0xfc ]
      arch: "CS_ARCH_ARM"
      options: [ CS_MODE_ARM, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "ldc2l p1, c3, [r12], #-0x48"
        details:
          arm:
            operands:
              -
                type: ARM_OP_P-IMM
                imm: 1
                access: CS_AC_READ
              -
                type: ARM_OP_C-IMM
                imm: 3
                access: CS_AC_READ
              -
                type: ARM_OP_MEM
                mem:
                mem_base: REG = r12
                access: CS_AC_READ
                mem_disp: 0x48
            Subtracted: True
          regs_read: [ r12 ]
          groups: [ IsARM, PreV8 ]
  -
    input:
      name: "issue 0 ARM operand groups 0xa4,0xf9,0x6d,0x0e == vld3.16 {d0[], d2[], d4[]}, [r4]! ;"
      bytes: [ 0xa4,0xf9,0x6d,0x0e ]
      arch: "CS_ARCH_ARM"
      options: [ CS_MODE_THUMB, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "vld3.16 {d0[], d2[], d4[]}, [r4]!"
        details:
          arm:
            operands:
              -
                type: ARM_OP_REG
                reg: d0
                access: CS_AC_WRITE
              -
                type: ARM_OP_REG
                reg: d2
                access: CS_AC_WRITE
              -
                type: ARM_OP_REG
                reg: d4
                access: CS_AC_WRITE
              -
                type: ARM_OP_MEM
                mem:
                mem_base: REG = r4
                access: CS_AC_READ_WRITE
            Write-back: True
          regs_read: [ r4 ]
          regs_write: [ r4, d0, d2, d4 ]
  -
    input:
      name: "issue 0 ARM operand groups 0x0d,0x50,0x66,0xe4 == strbt r5, [r6], #-13 ;"
      bytes: [ 0x0d,0x50,0x66,0xe4 ]
      arch: "CS_ARCH_ARM"
      options: [ CS_MODE_ARM, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "strbt r5, [r6], #-0xd"
        details:
          arm:
            operands:
              -
                type: ARM_OP_REG
                reg: r5
                access: CS_AC_READ
              -
                type: ARM_OP_MEM
                mem:
                mem_base: REG = r6
                access: CS_AC_WRITE
                mem_disp: 0xd
            Subtracted: True
            Write-back: True
          regs_read: [ r5, r6 ]
          regs_write: [ r6 ]
          groups: [ IsARM ]
  -
    input:
      name: "issue 0 ARM operand groups 0x00,0x10,0x4f,0xe2 == sub r1, pc, #0 ;"
      bytes: [ 0x00,0x10,0x4f,0xe2 ]
      arch: "CS_ARCH_ARM"
      options: [ CS_MODE_ARM, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "sub r1, pc, #0"
        details:
          arm:
            operands:
              -
                type: ARM_OP_REG
                reg: r1
                access: CS_AC_WRITE
              -
                type: ARM_OP_REG
                reg: r15
                access: CS_AC_READ
              -
                type: ARM_OP_IMM
                imm: 0x0
                access: CS_AC_READ
          regs_read: [ r15 ]
          regs_write: [ r1 ]
          groups: [ IsARM ]
  -
    input:
      name: "issue 0 ARM operand groups 0x9f,0x51,0xd3,0xe7 == bfc r5, #3, #17 ;"
      bytes: [ 0x9f,0x51,0xd3,0xe7 ]
      arch: "CS_ARCH_ARM"
      options: [ CS_MODE_ARM, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "bfc r5, #3, #0x11"
        details:
          arm:
            operands:
              -
                type: ARM_OP_REG
                reg: r5
                access: CS_AC_READ_WRITE
              -
                type: ARM_OP_IMM
                imm: 0x3
                access: CS_AC_READ
              -
                type: ARM_OP_IMM
                imm: 0x11
                access: CS_AC_READ
            Write-back: True
          regs_read: [ r5 ]
          regs_write: [ r5 ]
          groups: [ IsARM, HasV6T2 ]
  -
    input:
      name: "issue 0 ARM operand groups 0xd8,0xe8,0xff,0x67 == ldaexd r6, r7, [r8] ;"
      bytes: [ 0xd8,0xe8,0xff,0x67 ]
      arch: "CS_ARCH_ARM"
      options: [ CS_MODE_THUMB, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "ldaexd r6, r7, [r8]"
        details:
          arm:
            operands:
              -
                type: ARM_OP_REG
                reg: r6
                access: CS_AC_WRITE
              -
                type: ARM_OP_REG
                reg: r7
                access: CS_AC_WRITE
              -
                type: ARM_OP_MEM
                mem:
                mem_base: REG = r8
                access: CS_AC_READ
          regs_read: [ r8 ]
          regs_write: [ r6, r7 ]
          groups: [ IsThumb, HasAcquireRelease, HasV7Clrex, IsNotMClass ]
  -
    input:
      name: "issue 0 ARM operand groups 0x30,0x0f,0xa6,0xe6 == ssat16 r0, #7, r0 ;"
      bytes: [ 0x30,0x0f,0xa6,0xe6 ]
      arch: "CS_ARCH_ARM"
      options: [ CS_MODE_ARM, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "ssat16 r0, #7, r0"
        details:
          arm:
            operands:
              -
                type: ARM_OP_REG
                reg: r0
                access: CS_AC_WRITE
              -
                type: ARM_OP_IMM
                imm: 0x7
                access: CS_AC_READ
              -
                type: ARM_OP_REG
                reg: r0
                access: CS_AC_READ
          regs_read: [ r0 ]
          regs_write: [ r0 ]
          groups: [ IsARM, HasV6 ]
  -
    input:
      name: "issue 0 ARM operand groups 0x9a,0x8f,0xa0,0xe6 == ssat r8, #1, r10, lsl #31 ;"
      bytes: [ 0x9a,0x8f,0xa0,0xe6 ]
      arch: "CS_ARCH_ARM"
      options: [ CS_MODE_ARM, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "ssat r8, #1, r10, lsl #0x1f"
        details:
          arm:
            operands:
              -
                type: ARM_OP_REG
                reg: r8
                access: CS_AC_WRITE
              -
                type: ARM_OP_IMM
                imm: 0x1
                access: CS_AC_READ
              -
                type: ARM_OP_REG
                reg: r10
                access: CS_AC_READ
            Shift: 2 = 31
          regs_read: [ r10 ]
          regs_write: [ r8 ]
          groups: [ IsARM, HasV6 ]
  -
    input:
      name: "issue 0 ARM operand groups 0x40,0x1b,0xf5,0xee == vcmp.f64 d17, #0 ;"
      bytes: [ 0x40,0x1b,0xf5,0xee ]
      arch: "CS_ARCH_ARM"
      options: [ CS_MODE_ARM, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "vcmp.f64 d17, #0"
        details:
          arm:
            operands:
              -
                type: ARM_OP_REG
                reg: d17
                access: CS_AC_READ
              -
                type: ARM_OP_IMM
                imm: 0x0
                access: CS_AC_READ
            Update-flags: True
          regs_read: [ d17 ]
          regs_write: [ fpscr_nzcv ]
          groups: [ HasVFP2, HasDPVFP ]
  -
    input:
      name: "issue 0 ARM operand groups 0x05,0xf0,0x2f,0xe3 == msr CPSR_fsxc, #5 ;"
      bytes: [ 0x05,0xf0,0x2f,0xe3 ]
      arch: "CS_ARCH_ARM"
      options: [ CS_MODE_ARM, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "msr cpsr_fsxc, #5"
        details:
          arm:
            operands:
              -
                type: ARM_OP_CPSR
        details:
          arm:
            operands:
              -
                type: ARM_OP_MASK
                access: CS_AC_WRITE
              -
                type: ARM_OP_IMM
                imm: 0x5
                access: CS_AC_READ
            Update-flags: True
          regs_write: [ cpsr ]
          groups: [ IsARM ]
  -
    input:
      name: "issue 0 ARM operand groups 0xa4,0xf9,0xed,0x0b == vld4.32 {d0[1], d2[1], d4[1], d6[1]}, [r4:128]! ;"
      bytes: [ 0xa4,0xf9,0xed,0x0b ]
      arch: "CS_ARCH_ARM"
      options: [ CS_MODE_THUMB, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "vld4.32 {d0[1], d2[1], d4[1], d6[1]}, [r4:0x80]!"
        details:
          arm:
            operands:
              -
                type: ARM_OP_REG
                reg: d0
                neon_lane = 1
                access: CS_AC_READ_WRITE
              -
                type: ARM_OP_REG
                reg: d2
                neon_lane = 1
                access: CS_AC_READ_WRITE
              -
                type: ARM_OP_REG
                reg: d4
                neon_lane = 1
                access: CS_AC_READ_WRITE
              -
                type: ARM_OP_REG
                reg: d6
                neon_lane = 1
                access: CS_AC_READ_WRITE
              -
                type: ARM_OP_MEM
                mem:
                mem_base: REG = r4
                mem_align: 0x80
                access: CS_AC_READ_WRITE
            Write-back: True
          regs_read: [ d0, d2, d4, d6, r4 ]
          regs_write: [ r4, d0, d2, d4, d6 ]
  -
    input:
      name: "issue 0 ARM operand groups 0x42,0x03,0xb0,0xf3 == aesd.8 q0, q1 ;"
      bytes: [ 0x42,0x03,0xb0,0xf3 ]
      arch: "CS_ARCH_ARM"
      options: [ CS_MODE_ARM, CS_MODE_V8, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "aesd.8 q0, q1"
        details:
          arm:
            operands:
              -
                type: ARM_OP_REG
                reg: q0
                access: CS_AC_READ_WRITE
              -
                type: ARM_OP_REG
                reg: q1
                access: CS_AC_READ
            Write-back: True
          regs_read: [ q0, q1 ]
          regs_write: [ q0 ]
          groups: [ HasV8, HasAES ]
  -
    input:
      name: "issue 0 ARM operand groups 0x11,0x57,0x54,0xfc == mrrc2 p7, #1, r5, r4, c1 ;"
      bytes: [ 0x11,0x57,0x54,0xfc ]
      arch: "CS_ARCH_ARM"
      options: [ CS_MODE_ARM, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "mrrc2 p7, #1, r5, r4, c1"
        details:
          arm:
            operands:
              -
                type: ARM_OP_P-IMM
                imm: 7
                access: CS_AC_READ
              -
                type: ARM_OP_IMM
                imm: 0x1
                access: CS_AC_READ
              -
                type: ARM_OP_REG
                reg: r5
                access: CS_AC_WRITE
              -
                type: ARM_OP_REG
                reg: r4
                access: CS_AC_WRITE
              -
                type: ARM_OP_C-IMM
                imm: 1
                access: CS_AC_READ
          regs_write: [ r5, r4 ]
          groups: [ IsARM, PreV8 ]
  -
    input:
      name: "issue 0 ARM operand groups 0xd3,0x2f,0x82,0xe6 == pkhtb r2, r2, r3, asr #31 ;"
      bytes: [ 0xd3,0x2f,0x82,0xe6 ]
      arch: "CS_ARCH_ARM"
      options: [ CS_MODE_ARM, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "pkhtb r2, r2, r3, asr #0x1f"
        details:
          arm:
            operands:
              -
                type: ARM_OP_REG
                reg: r2
                access: CS_AC_WRITE
              -
                type: ARM_OP_REG
                reg: r2
                access: CS_AC_READ
              -
                type: ARM_OP_REG
                reg: r3
                access: CS_AC_READ
            Shift: 1 = 31
          regs_read: [ r2, r3 ]
          regs_write: [ r2 ]
          groups: [ IsARM, HasV6 ]
  -
    input:
      name: "issue 0 ARM operand groups 0x93,0x27,0x82,0xe6 == pkhbt r2, r2, r3, lsl #15 ;"
      bytes: [ 0x93,0x27,0x82,0xe6 ]
      arch: "CS_ARCH_ARM"
      options: [ CS_MODE_ARM, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "pkhbt r2, r2, r3, lsl #0xf"
        details:
          arm:
            operands:
              -
                type: ARM_OP_REG
                reg: r2
                access: CS_AC_WRITE
              -
                type: ARM_OP_REG
                reg: r2
                access: CS_AC_READ
              -
                type: ARM_OP_REG
                reg: r3
                access: CS_AC_READ
            Shift: 2 = 15
          regs_read: [ r2, r3 ]
          regs_write: [ r2 ]
          groups: [ IsARM, HasV6 ]
  -
    input:
      name: "issue 0 ARM operand groups 0xb4,0x10,0xf0,0xe0 == ldrht r1, [r0], #4 ;"
      bytes: [ 0xb4,0x10,0xf0,0xe0 ]
      arch: "CS_ARCH_ARM"
      options: [ CS_MODE_ARM, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "ldrht r1, [r0], #4"
        details:
          arm:
            operands:
              -
                type: ARM_OP_REG
                reg: r1
                access: CS_AC_WRITE
              -
                type: ARM_OP_MEM
                mem:
                mem_base: REG = r0
                access: CS_AC_READ
                mem_disp: 0x4
            Write-back: True
          regs_read: [ r0 ]
          regs_write: [ r0, r1 ]
          groups: [ IsARM ]
  -
    input:
      name: "issue 0 ARM operand groups 0x2f,0xfa,0xa1,0xf3 == sxtb16 r3, r1, ror #16 ;"
      bytes: [ 0x2f,0xfa,0xa1,0xf3 ]
      arch: "CS_ARCH_ARM"
      options: [ CS_MODE_THUMB, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "sxtb16 r3, r1, ror #16"
        details:
          arm:
            operands:
              -
                type: ARM_OP_REG
                reg: r3
                access: CS_AC_WRITE
              -
                type: ARM_OP_REG
                reg: r1
                access: CS_AC_READ
            Shift: 4 = 16
          regs_read: [ r1 ]
          regs_write: [ r3 ]
          groups: [ HasDSP, IsThumb2 ]
  -
    input:
      name: "issue 0 ARM operand groups 0x00,0x02,0x01,0xf1 == setend be ;"
      bytes: [ 0x00,0x02,0x01,0xf1 ]
      arch: "CS_ARCH_ARM"
      options: [ CS_MODE_ARM, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "setend be"
        details:
          arm:
            operands:
              -
                type: ARM_OP_SETEND
          groups: [ IsARM ]
  -
    input:
      name: "issue 0 ARM operand groups 0xd0,0xe8,0xaf,0x0f == lda r0, [r0]"
      bytes: [ 0xd0,0xe8,0xaf,0x0f ]
      arch: "CS_ARCH_ARM"
      options: [ CS_MODE_THUMB, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "lda r0, [r0]"
        details:
          arm:
            operands:
              -
                type: ARM_OP_REG
                reg: r0
                access: CS_AC_WRITE
              -
                type: ARM_OP_MEM
                mem:
                mem_base: REG = r0
                access: CS_AC_READ
          regs_read: [ r0 ]
          regs_write: [ r0 ]
          groups: [ IsThumb, HasAcquireRelease ]
  -
    input:
      name: "issue 0 ARM operand groups 0xef,0xf3,0x11,0x85 == ldrhi pc, [r1, #-0x3ef]"
      bytes: [ 0xef,0xf3,0x11,0x85 ]
      arch: "CS_ARCH_ARM"
      options: [ CS_MODE_ARM, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "ldrhi pc, [r1, #-0x3ef]"
        details:
          arm:
            operands:
              -
                type: ARM_OP_REG
                reg: r15
                access: CS_AC_WRITE
              -
                type: ARM_OP_MEM
                mem:
                mem_base: REG = r1
                mem_disp: 0x3ef
                access: CS_AC_READ
            Code condition: 8
          regs_read: [ cpsr, r1 ]
          regs_write: [ r15 ]
          groups: [ IsARM, jump ]
  -
    input:
      name: "issue 0 PPC operand groups 0x54,0x22,0xe0,0x06 == slwi r2, r1, 0x1c"
      bytes: [ 0x54,0x22,0xe0,0x06 ]
      arch: "CS_ARCH_PPC"
      options: [ CS_MODE_32, CS_MODE_BIG_ENDIAN, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "slwi r2, r1, 0x1c"
        details:
          ppc:
            operands:
              -
                type: PPC_OP_REG
                reg: r2
              -
                type: PPC_OP_REG
                reg: r1
              -
                type: PPC_OP_IMM
                imm: 0x1c
  -
    input:
      name: "issue 0 PPC operand groups 0x54,0x66,0xf0,0xbe == srwi r6, r3, 2"
      bytes: [ 0x54,0x66,0xf0,0xbe ]
      arch: "CS_ARCH_PPC"
      options: [ CS_MODE_32, CS_MODE_BIG_ENDIAN, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "srwi r6, r3, 2"
        details:
          ppc:
            operands:
              -
                type: PPC_OP_REG
                reg: r6
              -
                type: PPC_OP_REG
                reg: r3
              -
                type: PPC_OP_IMM
                imm: 0x2
  -
    input:
      name: "issue 0 PPC operand groups 0x78,0x62,0x26,0xe4 == sldi r2, r3, 4"
      bytes: [ 0x78,0x62,0x26,0xe4 ]
      arch: "CS_ARCH_PPC"
      options: [ CS_MODE_32, CS_MODE_BIG_ENDIAN, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "sldi r2, r3, 4"
        details:
          ppc:
            operands:
              -
                type: PPC_OP_REG
                reg: r2
              -
                type: PPC_OP_REG
                reg: r3
              -
                type: PPC_OP_IMM
                imm: 0x4
  -
    input:
      name: "issue 0 RISCV operand groups 0x37,0x34,0x00,0x00 == lui s0, 3"
      bytes: [ 0x37,0x34,0x00,0x00 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCV32, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "lui s0, 3"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: s0
                access: CS_AC_WRITE
              -
                type: RISCV_OP_IMM
                imm: 0x3
                access: CS_AC_READ
  -
    input:
      name: "issue 0 RISCV operand groups 0x97,0x82,0x00,0x00 == auipc t0, 8"
      bytes: [ 0x97,0x82,0x00,0x00 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCV32, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "auipc t0, 8"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: t0
                access: CS_AC_WRITE
              -
                type: RISCV_OP_IMM
                imm: 0x8
                access: CS_AC_READ
  -
    input:
      name: "issue 0 RISCV operand groups 0xef,0x00,0x80,0x00 == jal 8"
      bytes: [ 0xef,0x00,0x80,0x00 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCV32, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "jal 8"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_IMM
                imm: 0x8
                access: CS_AC_READ
          groups: [ call ]
  -
    input:
      name: "issue 0 RISCV operand groups 0xef,0xf0,0x1f,0xff == jal -0x10"
      bytes: [ 0xef,0xf0,0x1f,0xff ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCV32, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "jal -0x10"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_IMM
                imm: 0xfffffff0
                access: CS_AC_READ
          groups: [ call ]
  -
    input:
      name: "issue 0 RISCV operand groups 0xe7,0x00,0x45,0x00 == jalr ra, a0, 4"
      bytes: [ 0xe7,0x00,0x45,0x00 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCV32, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "jalr ra, a0, 4"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: ra
                access: CS_AC_WRITE
              -
                type: RISCV_OP_REG
                reg: a0
                access: CS_AC_READ
              -
                type: RISCV_OP_IMM
                imm: 0x4
                access: CS_AC_READ
          groups: [ call ]
  -
    input:
      name: "issue 0 RISCV operand groups 0xe7,0x00,0xc0,0xff == jalr ra, zero, -4"
      bytes: [ 0xe7,0x00,0xc0,0xff ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCV32, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "jalr ra, zero, -4"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: ra
                access: CS_AC_WRITE
              -
                type: RISCV_OP_REG
                reg: zero
                access: CS_AC_READ
              -
                type: RISCV_OP_IMM
                imm: 0xfffffffc
                access: CS_AC_READ
          groups: [ call ]
  -
    input:
      name: "issue 0 RISCV operand groups 0x63,0x05,0x41,0x00 == beq sp, tp, 0xa"
      bytes: [ 0x63,0x05,0x41,0x00 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCV32, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "beq sp, tp, 0xa"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: sp
                access: CS_AC_READ
              -
                type: RISCV_OP_REG
                reg: tp
                access: CS_AC_READ
              -
                type: RISCV_OP_IMM
                imm: 0xa
                access: CS_AC_READ
          groups: [ branch_relative, jump ]
  -
    input:
      name: "issue 0 RISCV operand groups 0xe3,0x9d,0x61,0xfe == bne gp, t1, -6"
      bytes: [ 0xe3,0x9d,0x61,0xfe ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCV32, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "bne gp, t1, -6"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: gp
                access: CS_AC_READ
              -
                type: RISCV_OP_REG
                reg: t1
                access: CS_AC_READ
              -
                type: RISCV_OP_IMM
                imm: 0xfffffffa
                access: CS_AC_READ
          groups: [ branch_relative, jump ]
  -
    input:
      name: "issue 0 RISCV operand groups 0x63,0xca,0x93,0x00 == blt t2, s1, 0x14"
      bytes: [ 0x63,0xca,0x93,0x00 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCV32, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "blt t2, s1, 0x14"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: t2
                access: CS_AC_READ
              -
                type: RISCV_OP_REG
                reg: s1
                access: CS_AC_READ
              -
                type: RISCV_OP_IMM
                imm: 0x14
                access: CS_AC_READ
          groups: [ branch_relative, jump ]
  -
    input:
      name: "issue 0 RISCV operand groups 0x63,0x53,0xb5,0x00 == bge a0, a1, 6"
      bytes: [ 0x63,0x53,0xb5,0x00 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCV32, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "bge a0, a1, 6"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: a0
                access: CS_AC_READ
              -
                type: RISCV_OP_REG
                reg: a1
                access: CS_AC_READ
              -
                type: RISCV_OP_IMM
                imm: 0x6
                access: CS_AC_READ
          groups: [ branch_relative, jump ]
  -
    input:
      name: "issue 0 RISCV operand groups 0x63,0x65,0xd6,0x00 == bltu a2, a3, 0xa"
      bytes: [ 0x63,0x65,0xd6,0x00 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCV32, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "bltu a2, a3, 0xa"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: a2
                access: CS_AC_READ
              -
                type: RISCV_OP_REG
                reg: a3
                access: CS_AC_READ
              -
                type: RISCV_OP_IMM
                imm: 0xa
                access: CS_AC_READ
          groups: [ branch_relative, jump ]
  -
    input:
      name: "issue 0 RISCV operand groups 0x63,0x76,0xf7,0x00 == bgeu a4, a5, 0xc"
      bytes: [ 0x63,0x76,0xf7,0x00 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCV32, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "bgeu a4, a5, 0xc"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: a4
                access: CS_AC_READ
              -
                type: RISCV_OP_REG
                reg: a5
                access: CS_AC_READ
              -
                type: RISCV_OP_IMM
                imm: 0xc
                access: CS_AC_READ
          groups: [ branch_relative, jump ]
  -
    input:
      name: "issue 0 RISCV operand groups 0x03,0x88,0x18,0x00 == lb a6, 1(a7)"
      bytes: [ 0x03,0x88,0x18,0x00 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCV32, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "lb a6, 1(a7)"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: a6
                access: CS_AC_WRITE
              -
                type: RISCV_OP_MEM
                mem:
                mem_base: REG = a7
                mem_disp: 0x1
                access: CS_AC_READ
  -
    input:
      name: "issue 0 RISCV operand groups 0x03,0x99,0x49,0x00 == lh s2, 4(s3)"
      bytes: [ 0x03,0x99,0x49,0x00 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCV32, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "lh s2, 4(s3)"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: s2
                access: CS_AC_WRITE
              -
                type: RISCV_OP_MEM
                mem:
                mem_base: REG = s3
                mem_disp: 0x4
                access: CS_AC_READ
  -
    input:
      name: "issue 0 RISCV operand groups 0x03,0xaa,0x6a,0x00 == lw s4, 6(s5)"
      bytes: [ 0x03,0xaa,0x6a,0x00 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCV32, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "lw s4, 6(s5)"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: s4
                access: CS_AC_WRITE
              -
                type: RISCV_OP_MEM
                mem:
                mem_base: REG = s5
                mem_disp: 0x6
                access: CS_AC_READ
  -
    input:
      name: "issue 0 RISCV operand groups 0x03,0xcb,0x2b,0x01 == lbu s6, 0x12(s7)"
      bytes: [ 0x03,0xcb,0x2b,0x01 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCV32, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "lbu s6, 0x12(s7)"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: s6
                access: CS_AC_WRITE
              -
                type: RISCV_OP_MEM
                mem:
                mem_base: REG = s7
                mem_disp: 0x12
                access: CS_AC_READ
  -
    input:
      name: "issue 0 RISCV operand groups 0x03,0xdc,0x8c,0x01 == lhu s8, 0x18(s9)"
      bytes: [ 0x03,0xdc,0x8c,0x01 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCV32, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "lhu s8, 0x18(s9)"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: s8
                access: CS_AC_WRITE
              -
                type: RISCV_OP_MEM
                mem:
                mem_base: REG = s9
                mem_disp: 0x18
                access: CS_AC_READ
  -
    input:
      name: "issue 0 RISCV operand groups 0x23,0x86,0xad,0x03 == sb s10, 0x2c(s11)"
      bytes: [ 0x23,0x86,0xad,0x03 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCV32, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "sb s10, 0x2c(s11)"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: s10
                access: CS_AC_READ
              -
                type: RISCV_OP_MEM
                mem:
                mem_base: REG = s11
                mem_disp: 0x2c
                access: CS_AC_WRITE
  -
    input:
      name: "issue 0 RISCV operand groups 0x23,0x9a,0xce,0x03 == sh t3, 0x34(t4)"
      bytes: [ 0x23,0x9a,0xce,0x03 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCV32, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "sh t3, 0x34(t4)"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: t3
                access: CS_AC_READ
              -
                type: RISCV_OP_MEM
                mem:
                mem_base: REG = t4
                mem_disp: 0x34
                access: CS_AC_WRITE
  -
    input:
      name: "issue 0 RISCV operand groups 0x23,0x8f,0xef,0x01 == sb t5, 0x1e(t6)"
      bytes: [ 0x23,0x8f,0xef,0x01 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCV32, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "sb t5, 0x1e(t6)"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: t5
                access: CS_AC_READ
              -
                type: RISCV_OP_MEM
                mem:
                mem_base: REG = t6
                mem_disp: 0x1e
                access: CS_AC_WRITE
  -
    input:
      name: "issue 0 RISCV operand groups 0x93,0x00,0xe0,0x00 == addi ra, zero, 0xe"
      bytes: [ 0x93,0x00,0xe0,0x00 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCV32, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "addi ra, zero, 0xe"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: ra
                access: CS_AC_WRITE
              -
                type: RISCV_OP_REG
                reg: zero
                access: CS_AC_READ
              -
                type: RISCV_OP_IMM
                imm: 0xe
                access: CS_AC_READ
  -
    input:
      name: "issue 0 RISCV operand groups 0x13,0xa1,0x01,0x01 == slti sp, gp, 0x10"
      bytes: [ 0x13,0xa1,0x01,0x01 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCV32, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "slti sp, gp, 0x10"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: sp
                access: CS_AC_WRITE
              -
                type: RISCV_OP_REG
                reg: gp
                access: CS_AC_READ
              -
                type: RISCV_OP_IMM
                imm: 0x10
                access: CS_AC_READ
  -
    input:
      name: "issue 0 RISCV operand groups 0x13,0xb2,0x02,0x7d == sltiu tp, t0, 0x7d0"
      bytes: [ 0x13,0xb2,0x02,0x7d ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCV32, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "sltiu tp, t0, 0x7d0"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: tp
                access: CS_AC_WRITE
              -
                type: RISCV_OP_REG
                reg: t0
                access: CS_AC_READ
              -
                type: RISCV_OP_IMM
                imm: 0x7d0
                access: CS_AC_READ
  -
    input:
      name: "issue 0 RISCV operand groups 0x13,0xc3,0x03,0xdd == xori t1, t2, -0x230"
      bytes: [ 0x13,0xc3,0x03,0xdd ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCV32, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "xori t1, t2, -0x230"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: t1
                access: CS_AC_WRITE
              -
                type: RISCV_OP_REG
                reg: t2
                access: CS_AC_READ
              -
                type: RISCV_OP_IMM
                imm: 0xfffffdd0
                access: CS_AC_READ
  -
    input:
      name: "issue 0 RISCV operand groups 0x13,0xe4,0xc4,0x12 == ori s0, s1, 0x12c"
      bytes: [ 0x13,0xe4,0xc4,0x12 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCV32, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "ori s0, s1, 0x12c"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: s0
                access: CS_AC_WRITE
              -
                type: RISCV_OP_REG
                reg: s1
                access: CS_AC_READ
              -
                type: RISCV_OP_IMM
                imm: 0x12c
                access: CS_AC_READ
  -
    input:
      name: "issue 0 RISCV operand groups 0x13,0xf5,0x85,0x0c == andi a0, a1, 0xc8"
      bytes: [ 0x13,0xf5,0x85,0x0c ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCV32, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "andi a0, a1, 0xc8"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: a0
                access: CS_AC_WRITE
              -
                type: RISCV_OP_REG
                reg: a1
                access: CS_AC_READ
              -
                type: RISCV_OP_IMM
                imm: 0xc8
                access: CS_AC_READ
  -
    input:
      name: "issue 0 RISCV operand groups 0x13,0x96,0xe6,0x01 == slli a2, a3, 0x1e"
      bytes: [ 0x13,0x96,0xe6,0x01 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCV32, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "slli a2, a3, 0x1e"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: a2
                access: CS_AC_WRITE
              -
                type: RISCV_OP_REG
                reg: a3
                access: CS_AC_READ
              -
                type: RISCV_OP_IMM
                imm: 0x1e
                access: CS_AC_READ
  -
    input:
      name: "issue 0 RISCV operand groups 0x13,0xd7,0x97,0x01 == srli a4, a5, 0x19"
      bytes: [ 0x13,0xd7,0x97,0x01 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCV32, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "srli a4, a5, 0x19"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: a4
                access: CS_AC_WRITE
              -
                type: RISCV_OP_REG
                reg: a5
                access: CS_AC_READ
              -
                type: RISCV_OP_IMM
                imm: 0x19
                access: CS_AC_READ
  -
    input:
      name: "issue 0 RISCV operand groups 0x13,0xd8,0xf8,0x40 == srai a6, a7, 0xf"
      bytes: [ 0x13,0xd8,0xf8,0x40 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCV32, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "srai a6, a7, 0xf"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: a6
                access: CS_AC_WRITE
              -
                type: RISCV_OP_REG
                reg: a7
                access: CS_AC_READ
              -
                type: RISCV_OP_IMM
                imm: 0xf
                access: CS_AC_READ
  -
    input:
      name: "issue 0 RISCV operand groups 0x33,0x89,0x49,0x01 == add s2, s3, s4"
      bytes: [ 0x33,0x89,0x49,0x01 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCV32, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "add s2, s3, s4"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: s2
                access: CS_AC_WRITE
              -
                type: RISCV_OP_REG
                reg: s3
                access: CS_AC_READ
              -
                type: RISCV_OP_REG
                reg: s4
                access: CS_AC_READ
  -
    input:
      name: "issue 0 RISCV operand groups 0xb3,0x0a,0x7b,0x41 == sub s5, s6, s7"
      bytes: [ 0xb3,0x0a,0x7b,0x41 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCV32, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "sub s5, s6, s7"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: s5
                access: CS_AC_WRITE
              -
                type: RISCV_OP_REG
                reg: s6
                access: CS_AC_READ
              -
                type: RISCV_OP_REG
                reg: s7
                access: CS_AC_READ
  -
    input:
      name: "issue 0 RISCV operand groups 0x33,0xac,0xac,0x01 == slt s8, s9, s10"
      bytes: [ 0x33,0xac,0xac,0x01 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCV32, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "slt s8, s9, s10"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: s8
                access: CS_AC_WRITE
              -
                type: RISCV_OP_REG
                reg: s9
                access: CS_AC_READ
              -
                type: RISCV_OP_REG
                reg: s10
                access: CS_AC_READ
  -
    input:
      name: "issue 0 RISCV operand groups 0xb3,0x3d,0xde,0x01 == sltu s11, t3, t4"
      bytes: [ 0xb3,0x3d,0xde,0x01 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCV32, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "sltu s11, t3, t4"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: s11
                access: CS_AC_WRITE
              -
                type: RISCV_OP_REG
                reg: t3
                access: CS_AC_READ
              -
                type: RISCV_OP_REG
                reg: t4
                access: CS_AC_READ
  -
    input:
      name: "issue 0 RISCV operand groups 0x33,0xd2,0x62,0x40 == sra tp, t0, t1"
      bytes: [ 0x33,0xd2,0x62,0x40 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCV32, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "sra tp, t0, t1"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: tp
                access: CS_AC_WRITE
              -
                type: RISCV_OP_REG
                reg: t0
                access: CS_AC_READ
              -
                type: RISCV_OP_REG
                reg: t1
                access: CS_AC_READ
  -
    input:
      name: "issue 0 RISCV operand groups 0xb3,0x43,0x94,0x00 == xor t2, s0, s1"
      bytes: [ 0xb3,0x43,0x94,0x00 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCV32, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "xor t2, s0, s1"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: t2
                access: CS_AC_WRITE
              -
                type: RISCV_OP_REG
                reg: s0
                access: CS_AC_READ
              -
                type: RISCV_OP_REG
                reg: s1
                access: CS_AC_READ
  -
    input:
      name: "issue 0 RISCV operand groups 0x33,0xe5,0xc5,0x00 == or a0, a1, a2"
      bytes: [ 0x33,0xe5,0xc5,0x00 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCV32, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "or a0, a1, a2"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: a0
                access: CS_AC_WRITE
              -
                type: RISCV_OP_REG
                reg: a1
                access: CS_AC_READ
              -
                type: RISCV_OP_REG
                reg: a2
                access: CS_AC_READ
  -
    input:
      name: "issue 0 RISCV operand groups 0xb3,0x76,0xf7,0x00 == and a3, a4, a5"
      bytes: [ 0xb3,0x76,0xf7,0x00 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCV32, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "and a3, a4, a5"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: a3
                access: CS_AC_WRITE
              -
                type: RISCV_OP_REG
                reg: a4
                access: CS_AC_READ
              -
                type: RISCV_OP_REG
                reg: a5
                access: CS_AC_READ
  -
    input:
      name: "issue 0 RISCV operand groups 0xb3,0x54,0x39,0x01 == srl s1, s2, s3"
      bytes: [ 0xb3,0x54,0x39,0x01 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCV32, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "srl s1, s2, s3"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: s1
                access: CS_AC_WRITE
              -
                type: RISCV_OP_REG
                reg: s2
                access: CS_AC_READ
              -
                type: RISCV_OP_REG
                reg: s3
                access: CS_AC_READ
  -
    input:
      name: "issue 0 RISCV operand groups 0xb3,0x50,0x31,0x00 == srl ra, sp, gp"
      bytes: [ 0xb3,0x50,0x31,0x00 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCV32, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "srl ra, sp, gp"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: ra
                access: CS_AC_WRITE
              -
                type: RISCV_OP_REG
                reg: sp
                access: CS_AC_READ
              -
                type: RISCV_OP_REG
                reg: gp
                access: CS_AC_READ
  -
    input:
      name: "issue 0 RISCV operand groups 0x33,0x9f,0x0f,0x00 == sll t5, t6, zero"
      bytes: [ 0x33,0x9f,0x0f,0x00 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCV32, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "sll t5, t6, zero"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: t5
                access: CS_AC_WRITE
              -
                type: RISCV_OP_REG
                reg: t6
                access: CS_AC_READ
              -
                type: RISCV_OP_REG
                reg: zero
                access: CS_AC_READ
  -
    input:
      name: "issue 0 RISCV operand groups 0x73,0x15,0x04,0xb0 == csrrw a0, mcycle, s0"
      bytes: [ 0x73,0x15,0x04,0xb0 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCV32, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "csrrw a0, mcycle, s0"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: a0
                access: CS_AC_WRITE
              -
                type: RISCV_OP_REG
                reg: s0
                access: CS_AC_READ
  -
    input:
      name: "issue 0 RISCV operand groups 0xf3,0x56,0x00,0x10 == csrrwi a3, sstatus, 0"
      bytes: [ 0xf3,0x56,0x00,0x10 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCV32, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "csrrwi a3, sstatus, 0"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: a3
                access: CS_AC_WRITE
              -
                type: RISCV_OP_IMM
                imm: 0x0
                access: CS_AC_READ
  -
    input:
      name: "issue 0 RISCV operand groups 0x33,0x05,0x7b,0x03 == mul a0, s6, s7"
      bytes: [ 0x33,0x05,0x7b,0x03 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCV32, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "mul a0, s6, s7"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: a0
                access: CS_AC_WRITE
              -
                type: RISCV_OP_REG
                reg: s6
                access: CS_AC_READ
              -
                type: RISCV_OP_REG
                reg: s7
                access: CS_AC_READ
          groups: [ hasStdExtM ]
  -
    input:
      name: "issue 0 RISCV operand groups 0xb3,0x45,0x9c,0x03 == div a1, s8, s9"
      bytes: [ 0xb3,0x45,0x9c,0x03 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCV32, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "div a1, s8, s9"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: a1
                access: CS_AC_WRITE
              -
                type: RISCV_OP_REG
                reg: s8
                access: CS_AC_READ
              -
                type: RISCV_OP_REG
                reg: s9
                access: CS_AC_READ
          groups: [ hasStdExtM ]
  -
    input:
      name: "issue 0 RISCV operand groups 0x33,0x66,0xbd,0x03 == rem a2, s10, s11"
      bytes: [ 0x33,0x66,0xbd,0x03 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCV32, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "rem a2, s10, s11"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: a2
                access: CS_AC_WRITE
              -
                type: RISCV_OP_REG
                reg: s10
                access: CS_AC_READ
              -
                type: RISCV_OP_REG
                reg: s11
                access: CS_AC_READ
          groups: [ hasStdExtM ]
  -
    input:
      name: "issue 0 RISCV operand groups 0x2f,0xa4,0x02,0x10 == lr.w s0, (t0)"
      bytes: [ 0x2f,0xa4,0x02,0x10 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCV32, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "lr.w s0, (t0)"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: s0
                access: CS_AC_WRITE
              -
                type: RISCV_OP_MEM
                mem:
                mem_base: REG = t0
                access: CS_AC_READ
          groups: [ hasStdExtA ]
  -
    input:
      name: "issue 0 RISCV operand groups 0xaf,0x23,0x65,0x18 == sc.w t2, t1, (a0)"
      bytes: [ 0xaf,0x23,0x65,0x18 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCV32, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "sc.w t2, t1, (a0)"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: t2
                access: CS_AC_WRITE
              -
                type: RISCV_OP_REG
                reg: t1
                access: CS_AC_READ
              -
                type: RISCV_OP_MEM
                mem:
                mem_base: REG = a0
                access: CS_AC_WRITE
          groups: [ hasStdExtA ]
  -
    input:
      name: "issue 0 RISCV operand groups 0x2f,0x27,0x2f,0x01 == amoadd.w a4, s2, (t5)"
      bytes: [ 0x2f,0x27,0x2f,0x01 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCV32, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "amoadd.w a4, s2, (t5)"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: a4
                access: CS_AC_WRITE
              -
                type: RISCV_OP_REG
                reg: s2
                access: CS_AC_READ
              -
                type: RISCV_OP_MEM
                mem:
                mem_base: REG = t5
                access: CS_AC_READ_WRITE
          groups: [ hasStdExtA ]
  -
    input:
      name: "issue 0 RISCV operand groups 0x43,0xf0,0x20,0x18 == fmadd.s ft0, ft1, ft2, ft3"
      bytes: [ 0x43,0xf0,0x20,0x18 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCV32, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "fmadd.s ft0, ft1, ft2, ft3"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: ft0
                access: CS_AC_WRITE
              -
                type: RISCV_OP_REG
                reg: ft1
                access: CS_AC_READ
              -
                type: RISCV_OP_REG
                reg: ft2
                access: CS_AC_READ
              -
                type: RISCV_OP_REG
                reg: ft3
                access: CS_AC_READ
          groups: [ hasStdExtF ]
  -
    input:
      name: "issue 0 RISCV operand groups 0xd3,0x72,0x73,0x00 == fadd.s ft5, ft6, ft7"
      bytes: [ 0xd3,0x72,0x73,0x00 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCV32, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "fadd.s ft5, ft6, ft7"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: ft5
                access: CS_AC_WRITE
              -
                type: RISCV_OP_REG
                reg: ft6
                access: CS_AC_READ
              -
                type: RISCV_OP_REG
                reg: ft7
                access: CS_AC_READ
          groups: [ hasStdExtF ]
  -
    input:
      name: "issue 0 RISCV operand groups 0x53,0xf4,0x04,0x58 == fsqrt.s fs0, fs1"
      bytes: [ 0x53,0xf4,0x04,0x58 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCV32, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "fsqrt.s fs0, fs1"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: fs0
                access: CS_AC_WRITE
              -
                type: RISCV_OP_REG
                reg: fs1
                access: CS_AC_READ
          groups: [ hasStdExtF ]
  -
    input:
      name: "issue 0 RISCV operand groups 0x53,0x85,0xc5,0x28 == fmin.s fa0, fa1, fa2"
      bytes: [ 0x53,0x85,0xc5,0x28 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCV32, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "fmin.s fa0, fa1, fa2"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: fa0
                access: CS_AC_WRITE
              -
                type: RISCV_OP_REG
                reg: fa1
                access: CS_AC_READ
              -
                type: RISCV_OP_REG
                reg: fa2
                access: CS_AC_READ
          groups: [ hasStdExtF ]
  -
    input:
      name: "issue 0 RISCV operand groups 0x53,0x2e,0xde,0xa1 == feq.s t3, ft8, ft9"
      bytes: [ 0x53,0x2e,0xde,0xa1 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCV32, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "feq.s t3, ft8, ft9"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: t3
                access: CS_AC_WRITE
              -
                type: RISCV_OP_REG
                reg: ft8
                access: CS_AC_READ
              -
                type: RISCV_OP_REG
                reg: ft9
                access: CS_AC_READ
          groups: [ hasStdExtF ]
  -
    input:
      name: "issue 0 RISCV operand groups 0xd3,0x84,0x05,0xf0 == fmv.w.x fs1, a1"
      bytes: [ 0xd3,0x84,0x05,0xf0 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCV32, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "fmv.w.x fs1, a1"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: fs1
                access: CS_AC_WRITE
              -
                type: RISCV_OP_REG
                reg: a1
                access: CS_AC_READ
          groups: [ hasStdExtF ]
  -
    input:
      name: "issue 0 RISCV operand groups 0x53,0x06,0x05,0xe0 == fmv.x.w a2, fa0"
      bytes: [ 0x53,0x06,0x05,0xe0 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCV32, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "fmv.x.w a2, fa0"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: a2
                access: CS_AC_WRITE
              -
                type: RISCV_OP_REG
                reg: fa0
                access: CS_AC_READ
          groups: [ hasStdExtF ]
  -
    input:
      name: "issue 0 RISCV operand groups 0x53,0x75,0x00,0xc0 == fcvt.w.s a0, ft0"
      bytes: [ 0x53,0x75,0x00,0xc0 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCV32, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "fcvt.w.s a0, ft0"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: a0
                access: CS_AC_WRITE
              -
                type: RISCV_OP_REG
                reg: ft0
                access: CS_AC_READ
          groups: [ hasStdExtF ]
  -
    input:
      name: "issue 0 RISCV operand groups 0xd3,0xf0,0x05,0xd0 == fcvt.s.w ft1, a1"
      bytes: [ 0xd3,0xf0,0x05,0xd0 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCV32, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "fcvt.s.w ft1, a1"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: ft1
                access: CS_AC_WRITE
              -
                type: RISCV_OP_REG
                reg: a1
                access: CS_AC_READ
          groups: [ hasStdExtF ]
  -
    input:
      name: "issue 0 RISCV operand groups 0xd3,0x15,0x08,0xe0 == fclass.s a1, fa6"
      bytes: [ 0xd3,0x15,0x08,0xe0 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCV32, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "fclass.s a1, fa6"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: a1
                access: CS_AC_WRITE
              -
                type: RISCV_OP_REG
                reg: fa6
                access: CS_AC_READ
          groups: [ hasStdExtF ]
  -
    input:
      name: "issue 0 RISCV operand groups 0x87,0xaa,0x75,0x00 == flw fs5, 7(a1)"
      bytes: [ 0x87,0xaa,0x75,0x00 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCV32, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "flw fs5, 7(a1)"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: fs5
                access: CS_AC_WRITE
              -
                type: RISCV_OP_MEM
                mem:
                mem_base: REG = a1
                mem_disp: 0x7
                access: CS_AC_READ
          groups: [ hasStdExtF ]
  -
    input:
      name: "issue 0 RISCV operand groups 0x27,0x27,0x66,0x01 == fsw fs6, 0xe(a2)"
      bytes: [ 0x27,0x27,0x66,0x01 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCV32, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "fsw fs6, 0xe(a2)"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: fs6
                access: CS_AC_READ
              -
                type: RISCV_OP_MEM
                mem:
                mem_base: REG = a2
                mem_disp: 0xe
                access: CS_AC_WRITE
          groups: [ hasStdExtF ]
  -
    input:
      name: "issue 0 RISCV operand groups 0x43,0xf0,0x20,0x1a == fmadd.d ft0, ft1, ft2, ft3"
      bytes: [ 0x43,0xf0,0x20,0x1a ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCV32, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "fmadd.d ft0, ft1, ft2, ft3"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: ft0
                access: CS_AC_WRITE
              -
                type: RISCV_OP_REG
                reg: ft1
                access: CS_AC_READ
              -
                type: RISCV_OP_REG
                reg: ft2
                access: CS_AC_READ
              -
                type: RISCV_OP_REG
                reg: ft3
                access: CS_AC_READ
          groups: [ hasStdExtD ]
  -
    input:
      name: "issue 0 RISCV operand groups 0xd3,0x72,0x73,0x02 == fadd.d ft5, ft6, ft7"
      bytes: [ 0xd3,0x72,0x73,0x02 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCV32, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "fadd.d ft5, ft6, ft7"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: ft5
                access: CS_AC_WRITE
              -
                type: RISCV_OP_REG
                reg: ft6
                access: CS_AC_READ
              -
                type: RISCV_OP_REG
                reg: ft7
                access: CS_AC_READ
          groups: [ hasStdExtD ]
  -
    input:
      name: "issue 0 RISCV operand groups 0x53,0xf4,0x04,0x5a == fsqrt.d fs0, fs1"
      bytes: [ 0x53,0xf4,0x04,0x5a ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCV32, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "fsqrt.d fs0, fs1"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: fs0
                access: CS_AC_WRITE
              -
                type: RISCV_OP_REG
                reg: fs1
                access: CS_AC_READ
          groups: [ hasStdExtD ]
  -
    input:
      name: "issue 0 RISCV operand groups 0x53,0x85,0xc5,0x2a == fmin.d fa0, fa1, fa2"
      bytes: [ 0x53,0x85,0xc5,0x2a ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCV32, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "fmin.d fa0, fa1, fa2"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: fa0
                access: CS_AC_WRITE
              -
                type: RISCV_OP_REG
                reg: fa1
                access: CS_AC_READ
              -
                type: RISCV_OP_REG
                reg: fa2
                access: CS_AC_READ
          groups: [ hasStdExtD ]
  -
    input:
      name: "issue 0 RISCV operand groups 0x53,0x2e,0xde,0xa3 == feq.d t3, ft8, ft9"
      bytes: [ 0x53,0x2e,0xde,0xa3 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCV32, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "feq.d t3, ft8, ft9"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: t3
                access: CS_AC_WRITE
              -
                type: RISCV_OP_REG
                reg: ft8
                access: CS_AC_READ
              -
                type: RISCV_OP_REG
                reg: ft9
                access: CS_AC_READ
          groups: [ hasStdExtD ]
  -
    input:
      name: "issue 0 RISCV operand groups 0x13,0x04,0xa8,0x7a == addi s0, a6, 0x7aa"
      bytes: [ 0x13,0x04,0xa8,0x7a ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCV64, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "addi s0, a6, 0x7aa"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: s0
                access: CS_AC_WRITE
              -
                type: RISCV_OP_REG
                reg: a6
                access: CS_AC_READ
              -
                type: RISCV_OP_IMM
                imm: 0x7aa
                access: CS_AC_READ
  -
    input:
      name: "issue 0 RISCV operand groups 0xbb,0x07,0x9c,0x02 == mulw a5, s8, s1"
      bytes: [ 0xbb,0x07,0x9c,0x02 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCV64, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "mulw a5, s8, s1"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: a5
                access: CS_AC_WRITE
              -
                type: RISCV_OP_REG
                reg: s8
                access: CS_AC_READ
              -
                type: RISCV_OP_REG
                reg: s1
                access: CS_AC_READ
          groups: [ hasStdExtM, isrv64 ]
  -
    input:
      name: "issue 0 RISCV operand groups 0xbb,0x40,0x5d,0x02 == divw ra, s10, t0"
      bytes: [ 0xbb,0x40,0x5d,0x02 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCV64, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "divw ra, s10, t0"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: ra
                access: CS_AC_WRITE
              -
                type: RISCV_OP_REG
                reg: s10
                access: CS_AC_READ
              -
                type: RISCV_OP_REG
                reg: t0
                access: CS_AC_READ
          groups: [ hasStdExtM, isrv64 ]
  -
    input:
      name: "issue 0 RISCV operand groups 0x3b,0x63,0xb7,0x03 == remw t1, a4, s11"
      bytes: [ 0x3b,0x63,0xb7,0x03 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCV64, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "remw t1, a4, s11"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: t1
                access: CS_AC_WRITE
              -
                type: RISCV_OP_REG
                reg: a4
                access: CS_AC_READ
              -
                type: RISCV_OP_REG
                reg: s11
                access: CS_AC_READ
          groups: [ hasStdExtM, isrv64 ]
  -
    input:
      name: "issue 0 RISCV operand groups 0x2f,0xb4,0x02,0x10 == lr.d s0, (t0)"
      bytes: [ 0x2f,0xb4,0x02,0x10 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCV64, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "lr.d s0, (t0)"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: s0
                access: CS_AC_WRITE
              -
                type: RISCV_OP_MEM
                mem:
                mem_base: REG = t0
                access: CS_AC_READ
          groups: [ hasStdExtA, isrv64 ]
  -
    input:
      name: "issue 0 RISCV operand groups 0xaf,0x33,0x65,0x18 == sc.d t2, t1, (a0)"
      bytes: [ 0xaf,0x33,0x65,0x18 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCV64, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "sc.d t2, t1, (a0)"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: t2
                access: CS_AC_WRITE
              -
                type: RISCV_OP_REG
                reg: t1
                access: CS_AC_READ
              -
                type: RISCV_OP_MEM
                mem:
                mem_base: REG = a0
                access: CS_AC_WRITE
          groups: [ hasStdExtA, isrv64 ]
  -
    input:
      name: "issue 0 RISCV operand groups 0x2f,0x37,0x2f,0x01 == amoadd.d a4, s2, (t5)"
      bytes: [ 0x2f,0x37,0x2f,0x01 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCV64, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "amoadd.d a4, s2, (t5)"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: a4
                access: CS_AC_WRITE
              -
                type: RISCV_OP_REG
                reg: s2
                access: CS_AC_READ
              -
                type: RISCV_OP_MEM
                mem:
                mem_base: REG = t5
                access: CS_AC_READ_WRITE
          groups: [ hasStdExtA, isrv64 ]
  -
    input:
      name: "issue 0 RISCV operand groups 0x53,0x75,0x20,0xc0 == fcvt.l.s a0, ft0"
      bytes: [ 0x53,0x75,0x20,0xc0 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCV64, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "fcvt.l.s a0, ft0"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: a0
                access: CS_AC_WRITE
              -
                type: RISCV_OP_REG
                reg: ft0
                access: CS_AC_READ
          groups: [ hasStdExtF, isrv64 ]
  -
    input:
      name: "issue 0 RISCV operand groups 0xd3,0xf0,0x25,0xd0 == fcvt.s.l ft1, a1"
      bytes: [ 0xd3,0xf0,0x25,0xd0 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCV64, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "fcvt.s.l ft1, a1"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: ft1
                access: CS_AC_WRITE
              -
                type: RISCV_OP_REG
                reg: a1
                access: CS_AC_READ
          groups: [ hasStdExtF, isrv64 ]
  -
    input:
      name: "issue 0 RISCV operand groups 0xd3,0x84,0x05,0xf2 == fmv.d.x fs1, a1"
      bytes: [ 0xd3,0x84,0x05,0xf2 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCV64, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "fmv.d.x fs1, a1"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: fs1
                access: CS_AC_WRITE
              -
                type: RISCV_OP_REG
                reg: a1
                access: CS_AC_READ
          groups: [ hasStdExtD, isrv64 ]
  -
    input:
      name: "issue 0 RISCV operand groups 0x53,0x06,0x05,0xe2 == fmv.x.d a2, fa0"
      bytes: [ 0x53,0x06,0x05,0xe2 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCV64, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "fmv.x.d a2, fa0"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: a2
                access: CS_AC_WRITE
              -
                type: RISCV_OP_REG
                reg: fa0
                access: CS_AC_READ
          groups: [ hasStdExtD, isrv64 ]
  -
    input:
      name: "issue 0 RISCV operand groups 0x53,0x75,0x00,0xc2 == fcvt.w.d a0, ft0"
      bytes: [ 0x53,0x75,0x00,0xc2 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCV64, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "fcvt.w.d a0, ft0"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: a0
                access: CS_AC_WRITE
              -
                type: RISCV_OP_REG
                reg: ft0
                access: CS_AC_READ
          groups: [ hasStdExtD ]
  -
    input:
      name: "issue 0 RISCV operand groups 0xd3,0x80,0x05,0xd2 == fcvt.d.w ft1, a1"
      bytes: [ 0xd3,0x80,0x05,0xd2 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCV64, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "fcvt.d.w ft1, a1"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: ft1
                access: CS_AC_WRITE
              -
                type: RISCV_OP_REG
                reg: a1
                access: CS_AC_READ
          groups: [ hasStdExtD ]
  -
    input:
      name: "issue 0 RISCV operand groups 0xd3,0x15,0x08,0xe2 == fclass.d a1, fa6"
      bytes: [ 0xd3,0x15,0x08,0xe2 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCV64, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "fclass.d a1, fa6"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: a1
                access: CS_AC_WRITE
              -
                type: RISCV_OP_REG
                reg: fa6
                access: CS_AC_READ
          groups: [ hasStdExtD ]
  -
    input:
      name: "issue 0 RISCV operand groups 0x87,0xba,0x75,0x00 == fld fs5, 7(a1)"
      bytes: [ 0x87,0xba,0x75,0x00 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCV64, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "fld fs5, 7(a1)"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: fs5
                access: CS_AC_WRITE
              -
                type: RISCV_OP_MEM
                mem:
                mem_base: REG = a1
                mem_disp: 0x7
                access: CS_AC_READ
          groups: [ hasStdExtD ]
  -
    input:
      name: "issue 0 RISCV operand groups 0x27,0x37,0x66,0x01 == fsd fs6, 0xe(a2)"
      bytes: [ 0x27,0x37,0x66,0x01 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCV64, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "fsd fs6, 0xe(a2)"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: fs6
                access: CS_AC_READ
              -
                type: RISCV_OP_MEM
                mem:
                mem_base: REG = a2
                mem_disp: 0xe
                access: CS_AC_WRITE
          groups: [ hasStdExtD ]
  -
    input:
      name: "issue 0 RISCV operand groups 0xe8,0x1f == c.addi4spn a0, sp, 0x3fc"
      bytes: [ 0xe8,0x1f ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCVC, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "c.addi4spn a0, sp, 0x3fc"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: a0
                access: CS_AC_WRITE
              -
                type: RISCV_OP_REG
                reg: sp
                access: CS_AC_READ
              -
                type: RISCV_OP_IMM
                imm: 0x3fc
                access: CS_AC_READ
          groups: [ hasStdExtC ]
  -
    input:
      name: "issue 0 RISCV operand groups 0x7d,0x61 == c.addi16sp sp, 0x1f0"
      bytes: [ 0x7d,0x61 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCVC, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "c.addi16sp sp, 0x1f0"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: sp
                access: CS_AC_READ_WRITE
              -
                type: RISCV_OP_IMM
                imm: 0x1f0
                access: CS_AC_READ
          groups: [ hasStdExtC ]
  -
    input:
      name: "issue 0 RISCV operand groups 0x80,0x25 == c.fld fs0, 8(a1)"
      bytes: [ 0x80,0x25 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCVC, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "c.fld fs0, 8(a1)"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: fs0
                access: CS_AC_WRITE
              -
                type: RISCV_OP_MEM
                mem:
                mem_base: REG = a1
                mem_disp: 0x8
                access: CS_AC_READ
          groups: [ hasStdExtC, hasStdExtD ]
  -
    input:
      name: "issue 0 RISCV operand groups 0x00,0x46 == c.lw s0, 8(a2)"
      bytes: [ 0x00,0x46 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCVC, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "c.lw s0, 8(a2)"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: s0
                access: CS_AC_WRITE
              -
                type: RISCV_OP_MEM
                mem:
                mem_base: REG = a2
                mem_disp: 0x8
                access: CS_AC_READ
          groups: [ hasStdExtC ]
  -
    input:
      name: "issue 0 RISCV operand groups 0x88,0xa2 == c.fsd fa0, 0(a3)"
      bytes: [ 0x88,0xa2 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCVC, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "c.fsd fa0, 0(a3)"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: fa0
                access: CS_AC_READ
              -
                type: RISCV_OP_MEM
                mem:
                mem_base: REG = a3
                access: CS_AC_WRITE
          groups: [ hasStdExtC, hasStdExtD ]
  -
    input:
      name: "issue 0 RISCV operand groups 0x04,0xcb == c.sw s1, 0x10(a4)"
      bytes: [ 0x04,0xcb ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCVC, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "c.sw s1, 0x10(a4)"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: s1
                access: CS_AC_READ
              -
                type: RISCV_OP_MEM
                mem:
                mem_base: REG = a4
                mem_disp: 0x10
                access: CS_AC_WRITE
          groups: [ hasStdExtC ]
  -
    input:
      name: "issue 0 RISCV operand groups 0x55,0x13 == c.addi t1, -0xb"
      bytes: [ 0x55,0x13 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCVC, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "c.addi t1, -0xb"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: t1
                access: CS_AC_READ_WRITE
              -
                type: RISCV_OP_IMM
                imm: 0xfffffff5
                access: CS_AC_READ
          groups: [ hasStdExtC ]
  -
    input:
      name: "issue 0 RISCV operand groups 0xf2,0x93 == c.add t2, t3"
      bytes: [ 0xf2,0x93 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCVC, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "c.add t2, t3"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: t2
                access: CS_AC_READ_WRITE
              -
                type: RISCV_OP_REG
                reg: t3
                access: CS_AC_READ
          groups: [ hasStdExtC ]
  -
    input:
      name: "issue 0 RISCV operand groups 0x5d,0x45 == c.li a0, 0x17"
      bytes: [ 0x5d,0x45 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCVC, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "c.li a0, 0x17"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: a0
                access: CS_AC_WRITE
              -
                type: RISCV_OP_IMM
                imm: 0x17
                access: CS_AC_READ
          groups: [ hasStdExtC ]
  -
    input:
      name: "issue 0 RISCV operand groups 0x19,0x80 == c.srli s0, 6"
      bytes: [ 0x19,0x80 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCVC, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "c.srli s0, 6"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: s0
                access: CS_AC_READ_WRITE
              -
                type: RISCV_OP_IMM
                imm: 0x6
                access: CS_AC_READ
          groups: [ hasStdExtC ]
  -
    input:
      name: "issue 0 RISCV operand groups 0x15,0x68 == c.lui a6, 5"
      bytes: [ 0x15,0x68 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCVC, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "c.lui a6, 5"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: a6
                access: CS_AC_WRITE
              -
                type: RISCV_OP_IMM
                imm: 0x5
                access: CS_AC_READ
          groups: [ hasStdExtC ]
  -
    input:
      name: "issue 0 RISCV operand groups 0x2a,0xa4 == c.fsdsp fa0, 8(sp)"
      bytes: [ 0x2a,0xa4 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCVC, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "c.fsdsp fa0, 8(sp)"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: fa0
                access: CS_AC_READ
              -
                type: RISCV_OP_MEM
                mem:
                mem_base: REG = sp
                mem_disp: 0x8
                access: CS_AC_WRITE
          groups: [ hasStdExtC, hasStdExtD ]
  -
    input:
      name: "issue 0 RISCV operand groups 0x62,0x24 == c.fldsp fs0, 0x18(sp)"
      bytes: [ 0x62,0x24 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCVC, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "c.fldsp fs0, 0x18(sp)"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: fs0
                access: CS_AC_WRITE
              -
                type: RISCV_OP_MEM
                mem:
                mem_base: REG = sp
                mem_disp: 0x18
                access: CS_AC_READ
          groups: [ hasStdExtC, hasStdExtD ]
  -
    input:
      name: "issue 0 RISCV operand groups 0xa6,0xff == c.fswsp fs1, 0xfc(sp)"
      bytes: [ 0xa6,0xff ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCVC, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "c.fswsp fs1, 0xfc(sp)"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: fs1
                access: CS_AC_READ
              -
                type: RISCV_OP_IMM
                imm: 0xfc
                access: CS_AC_READ
              -
                type: RISCV_OP_REG
                reg: sp
                access: CS_AC_WRITE
          groups: [ hasStdExtC, hasStdExtF, isrv32 ]
  -
    input:
      name: "issue 0 RISCV operand groups 0x2a,0x65 == c.flwsp fa0, 0x88(sp)"
      bytes: [ 0x2a,0x65 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCVC, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "c.flwsp fa0, 0x88(sp)"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: fa0
                access: CS_AC_WRITE
              -
                type: RISCV_OP_IMM
                imm: 0x88
                access: CS_AC_READ
              -
                type: RISCV_OP_REG
                reg: sp
                access: CS_AC_READ
          groups: [ hasStdExtC, hasStdExtF, isrv32 ]
  -
    input:
      name: "issue 0 RISCV operand groups 0x76,0x86 == c.mv a2, t4"
      bytes: [ 0x76,0x86 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCVC, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "c.mv a2, t4"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: a2
                access: CS_AC_WRITE
              -
                type: RISCV_OP_REG
                reg: t4
                access: CS_AC_READ
          groups: [ hasStdExtC ]
  -
    input:
      name: "issue 0 RISCV operand groups 0x65,0xdd == c.beqz a0, -8"
      bytes: [ 0x65,0xdd ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCVC, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "c.beqz a0, -8"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: a0
                access: CS_AC_READ
              -
                type: RISCV_OP_IMM
                imm: 0xfffffff8
                access: CS_AC_READ
          groups: [ hasStdExtC, branch_relative, jump ]
  -
    input:
      name: "issue 0 RISCV operand groups 0x01,0x00 == c.nop"
      bytes: [ 0x01,0x00 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCVC, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "c.nop"
          groups: [ hasStdExtC ]
  -
    input:
      name: "issue 0 RISCV operand groups 0xfd,0xaf == c.j 0x7fe"
      bytes: [ 0xfd,0xaf ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCVC, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "c.j 0x7fe"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_IMM
                imm: 0x7fe
                access: CS_AC_READ
          groups: [ hasStdExtC, jump ]
  -
    input:
      name: "issue 0 RISCV operand groups 0x82,0x82 == c.jr t0"
      bytes: [ 0x82,0x82 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCVC, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "c.jr t0"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: t0
                access: CS_AC_READ
          groups: [ hasStdExtC, jump ]
  -
    input:
      name: "issue 0 RISCV operand groups 0x11,0x20 == c.jal 4"
      bytes: [ 0x11,0x20 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCVC, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "c.jal 4"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_IMM
                imm: 0x4
                access: CS_AC_READ
          groups: [ hasStdExtC, isrv32, call ]
  -
    input:
      name: "issue 0 RISCV operand groups 0x82,0x94 == c.jalr s1"
      bytes: [ 0x82,0x94 ]
      arch: "CS_ARCH_RISCV"
      options: [ CS_MODE_RISCVC, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "c.jalr s1"
        details:
          riscv:
            operands:
              -
                type: RISCV_OP_REG
                reg: s1
                access: CS_AC_READ
          groups: [ hasStdExtC, call ]
  -
    input:
      name: "issue 2285 AArch64 operands"
      bytes: [ 0xc0,0x08,0x9f,0xe0 ]
      arch: "CS_ARCH_AARCH64"
      options: [ CS_MODE_ARM, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "ld1w {za0h.s[w12, 0]}, p2/z, [x6]"
        details:
          aarch64:
            operands:
              -
                type: AARCH64_OP_SME_MATRIX
                sme.type: 2
                sme.tile: za0.s
                sme.slice_reg: w12
                sme.slice_offset: 0
                sme.is_vertical: false
                access: CS_AC_WRITE
                vas: 0x20
              -
                type: AARCH64_OP_PREDICATE
                pred.reg: p2
                access: CS_AC_READ
              -
                type: AARCH64_OP_MEM
                mem:
                mem_base: REG = x6
                access: CS_AC_READ
          regs_read: [ w12, p2, x6 ]
          regs_write: [ za0.s ]
          groups: [ HasSME ]
  -
    input:
      name: "issue 2285 AArch64 operands"
      bytes: [ 0x41,0x31,0xa2,0xe0 ]
      arch: "CS_ARCH_AARCH64"
      options: [ CS_MODE_ARM, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "st1w {za0h.s[w13, 1]}, p4, [x10, x2, lsl #2]"
        details:
          aarch64:
            operands:
              -
                type: AARCH64_OP_SME_MATRIX
                sme.type: 2
                sme.tile: za0.s
                sme.slice_reg: w13
                sme.slice_offset: 1
                sme.is_vertical: false
                access: CS_AC_READ
                vas: 0x20
              -
                type: AARCH64_OP_PREDICATE
                pred.reg: p4
                access: CS_AC_READ
              -
                type: AARCH64_OP_MEM
                mem:
                mem_base: REG = x10
                mem_index: REG = x2
                access: CS_AC_WRITE
            Shift: type = 1, value = 2
          regs_read: [ za0.s, w13, p4, x10, x2 ]
          groups: [ HasSME ]
  -
    input:
      name: "issue 2285 AArch64 operands"
      bytes: [ 0x67,0x44,0x71,0x25 ]
      arch: "CS_ARCH_AARCH64"
      options: [ CS_MODE_ARM, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "psel p7, p1, p3.s[w13, 1]"
        details:
          aarch64:
            operands:
              -
                type: AARCH64_OP_PREDICATE
                pred.reg: p7
                access: CS_AC_WRITE
              -
                type: AARCH64_OP_PREDICATE
                pred.reg: p1
                access: CS_AC_READ
              -
                type: AARCH64_OP_PREDICATE
                pred.reg: p3
                pred.vec_select: w13
                pred.imm_index: 1
                access: CS_AC_READ
                vas: 0x20
          regs_read: [ p1, p3, w13 ]
          regs_write: [ p7 ]
          groups: [ HasSVE2p1_or_HasSME ]
  -
    input:
      name: "issue 2285 AArch64 operands"
      bytes: [ 0x7f,0x47,0x03,0xd5 ]
      arch: "CS_ARCH_AARCH64"
      options: [ CS_MODE_ARM, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "smstart"
            Code-condition: 16
          groups: [ privilege ]
  -
    input:
      name: "issue 2285 AArch64 operands"
      bytes: [ 0x55,0x00,0x08,0xc0 ]
      arch: "CS_ARCH_AARCH64"
      options: [ CS_MODE_ARM, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "zero {za0.h}"
        details:
          aarch64:
            operands:
              -
                type: AARCH64_OP_SME_MATRIX
                sme.type: 1
                sme.tile: za0.h
                access: CS_AC_WRITE
                vas: 0x10
            Code-condition: 16
          regs_write: [ za0.h ]
          groups: [ HasSME ]
  -
    input:
      name: "issue 2285 AArch64 operands"
      bytes: [ 0x02,0xf8,0x55,0xc1 ]
      arch: "CS_ARCH_AARCH64"
      options: [ CS_MODE_ARM, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "sdot za.s[w11, 2, vgx4], { z0.h - z3.h }, z5.h[2]"
        details:
          aarch64:
            operands:
              -
                type: AARCH64_OP_SME_MATRIX
                sme.type: 2
                sme.tile: za
                sme.slice_reg: w11
                sme.slice_offset: 2
                sme.is_vertical: false
                access: CS_AC_READ_WRITE
                vas: 0x20
              -
                type: AARCH64_OP_REG
                reg: z0
                is_list_member: true
                access: CS_AC_READ
                vas: 0x10
              -
                type: AARCH64_OP_REG
                reg: z1
                is_list_member: true
                access: CS_AC_READ
                vas: 0x10
              -
                type: AARCH64_OP_REG
                reg: z2
                is_list_member: true
                access: CS_AC_READ
                vas: 0x10
              -
                type: AARCH64_OP_REG
                reg: z3
                is_list_member: true
                access: CS_AC_READ
                vas: 0x10
              -
                type: AARCH64_OP_REG
                reg: z5
                access: CS_AC_READ
                vas: 0x10
                vector_index: 2
            Write-back: True
            Code-condition: 16
          regs_read: [ za, w11, z0, z1, z2, z3, z5 ]
          regs_write: [ za ]
          groups: [ HasSME2 ]
  -
    input:
      name: "issue 2285 AArch64 operands"
      bytes: [ 0xa4,0x0e,0x06,0xc0 ]
      arch: "CS_ARCH_AARCH64"
      options: [ CS_MODE_ARM, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "movaz { z4.d - z7.d }, za.d[w8, 5, vgx4]"
        details:
          aarch64:
            operands:
              -
                type: AARCH64_OP_REG
                reg: z4
                is_list_member: true
                access: CS_AC_WRITE
                vas: 0x40
              -
                type: AARCH64_OP_REG
                reg: z5
                is_list_member: true
                access: CS_AC_WRITE
                vas: 0x40
              -
                type: AARCH64_OP_REG
                reg: z6
                is_list_member: true
                access: CS_AC_WRITE
                vas: 0x40
              -
                type: AARCH64_OP_REG
                reg: z7
                is_list_member: true
                access: CS_AC_WRITE
                vas: 0x40
              -
                type: AARCH64_OP_SME_MATRIX
                sme.type: 2
                sme.tile: za
                sme.slice_reg: w8
                sme.slice_offset: 5
                sme.is_vertical: false
                access: CS_AC_READ_WRITE
                vas: 0x40
            Write-back: True
            Code-condition: 16
          regs_read: [ za, w8 ]
          regs_write: [ z4, z5, z6, z7, za ]
          groups: [ HasSME2p1 ]
  -
    input:
      name: "issue 2285 AArch64 operands"
      bytes: [ 0x80,0xa0,0x8d,0xc0 ]
      arch: "CS_ARCH_AARCH64"
      options: [ CS_MODE_ARM, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "luti2 { z0.s - z3.s }, zt0, z4[1]"
        details:
          aarch64:
            operands:
              -
                type: AARCH64_OP_REG
                reg: z0
                is_list_member: true
                access: CS_AC_WRITE
                vas: 0x20
              -
                type: AARCH64_OP_REG
                reg: z1
                is_list_member: true
                access: CS_AC_WRITE
                vas: 0x20
              -
                type: AARCH64_OP_REG
                reg: z2
                is_list_member: true
                access: CS_AC_WRITE
                vas: 0x20
              -
                type: AARCH64_OP_REG
                reg: z3
                is_list_member: true
                access: CS_AC_WRITE
                vas: 0x20
              -
                type: AARCH64_OP_REG
                reg: zt0
                access: CS_AC_READ
              -
                type: AARCH64_OP_REG
                reg: z4
                access: CS_AC_READ
                vector_index: 1
            Code-condition: 16
          regs_read: [ zt0, z4 ]
          regs_write: [ z0, z1, z2, z3 ]
          groups: [ HasSME2 ]
  -
    input:
      name: "issue 2285 AArch64 operands"
      bytes: [ 0x00,0xb1,0x10,0xc1 ]
      arch: "CS_ARCH_AARCH64"
      options: [ CS_MODE_ARM, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "fmla za.h[w9, 0, vgx4], { z8.h - z11.h }, z0.h[0]"
        details:
          aarch64:
            operands:
              -
                type: AARCH64_OP_SME_MATRIX
                sme.type: 2
                sme.tile: za
                sme.slice_reg: w9
                sme.slice_offset: 0
                sme.is_vertical: false
                access: CS_AC_READ_WRITE
                vas: 0x10
              -
                type: AARCH64_OP_REG
                reg: z8
                is_list_member: true
                access: CS_AC_READ
                vas: 0x10
              -
                type: AARCH64_OP_REG
                reg: z9
                is_list_member: true
                access: CS_AC_READ
                vas: 0x10
              -
                type: AARCH64_OP_REG
                reg: z10
                is_list_member: true
                access: CS_AC_READ
                vas: 0x10
              -
                type: AARCH64_OP_REG
                reg: z11
                is_list_member: true
                access: CS_AC_READ
                vas: 0x10
              -
                type: AARCH64_OP_REG
                reg: z0
                access: CS_AC_READ
                vas: 0x10
                vector_index: 0
            Write-back: True
            Code-condition: 16
          regs_read: [ za, w9, z8, z9, z10, z11, z0 ]
          regs_write: [ za ]
          groups: [ HasSME2p1, HasSMEF16F16 ]
  -
    input:
      name: "issue 2285 AArch64 operands"
      bytes: [ 0x05,0xd0,0x9b,0xc1 ]
      arch: "CS_ARCH_AARCH64"
      options: [ CS_MODE_ARM, CS_OPT_DETAIL ]
      address: 0x0
    expected:
      insns:
      -
        asm_text: "fmlal za.s[w10, 2:3, vgx4], { z0.h - z3.h }, z11.h[1]"
        details:
          aarch64:
            operands:
              -
                type: AARCH64_OP_SME_MATRIX
                sme.type: 2
                sme.tile: za
                sme.slice_reg: w10
                sme.slice_offset: 2:3
                sme.is_vertical: false
                access: CS_AC_READ_WRITE
                vas: 0x20
              -
                type: AARCH64_OP_REG
                reg: z0
                is_list_member: true
                access: CS_AC_READ
                vas: 0x10
              -
                type: AARCH64_OP_REG
                reg: z1
                is_list_member: true
                access: CS_AC_READ
                vas: 0x10
              -
                type: AARCH64_OP_REG
                reg: z2
                is_list_member: true
                access: CS_AC_READ
                vas: 0x10
              -
                type: AARCH64_OP_REG
                reg: z3
                is_list_member: true
                access: CS_AC_READ
                vas: 0x10
              -
                type: AARCH64_OP_REG
                reg: z11
                access: CS_AC_READ
                vas: 0x10
                vector_index: 1
            Write-back: True
            Code-condition: 16
          regs_read: [ za, w10, z0, z1, z2, z3, z11 ]
          regs_write: [ za ]
          groups: [ HasSME2 ]

