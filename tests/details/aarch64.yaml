test_cases:
  -
    input:
      bytes: [ 0x09, 0x00, 0x38, 0xd5, 0xbf, 0x40, 0x00, 0xd5, 0x0c, 0x05, 0x13, 0xd5, 0x20, 0x50, 0x02, 0x0e, 0x20, 0xe4, 0x3d, 0x0f, 0x00, 0x18, 0xa0, 0x5f, 0xa2, 0x00, 0xae, 0x9e, 0x9f, 0x37, 0x03, 0xd5, 0xbf, 0x33, 0x03, 0xd5, 0xdf, 0x3f, 0x03, 0xd5, 0x21, 0x7c, 0x02, 0x9b, 0x21, 0x7c, 0x00, 0x53, 0x00, 0x40, 0x21, 0x4b, 0xe1, 0x0b, 0x40, 0xb9, 0x20, 0x04, 0x81, 0xda, 0x20, 0x08, 0x02, 0x8b, 0x10, 0x5b, 0xe8, 0x3c, 0xfd, 0x7b, 0xba, 0xa9, 0xfd, 0xc7, 0x43, 0xf8 ]
      arch: "CS_ARCH_AARCH64"
      options: [ "CS_OPT_DETAIL" ]
      address: 0x2c
    expected:
      insns:
      -
        asm_text: "mrs x9, MIDR_EL1"
        details:
          aarch64:
            operands:
              -
                type: AARCH64_OP_REG
                reg: x9
                access: CS_AC_WRITE
              -
                type: AARCH64_OP_SYSREG
                sub_type: AARCH64_OP_REG_MRS
                sys_raw_val: 0xc000
            cc: AArch64CC_Invalid
            update_flags: 1
          regs_write: [ nzcv, x9 ]

      -
        asm_text: "msr SPSel, #0"
        details:
          aarch64:
            operands:
            -
              type: AARCH64_OP_SYSALIAS
              sub_type: AARCH64_OP_PSTATEIMM0_15
              sys_raw_val: 0x5
            -
              type: AARCH64_OP_IMM
              imm: 0x0
              access: CS_AC_READ
            cc: AArch64CC_Invalid

      -
        asm_text: "msr DBGDTRTX_EL0, x12"
        details:
          aarch64:
            operands:
            -
              type: AARCH64_OP_SYSREG
              sub_type: AARCH64_OP_REG_MSR
              sys_raw_val: 0x9828
            -
              type: AARCH64_OP_REG
              reg: x12
              access: CS_AC_READ
            cc: AArch64CC_Invalid
          regs_read: [ x12 ]

      -
        asm_text: "tbx v0.8b, { v1.16b, v2.16b, v3.16b }, v2.8b"
        details:
          aarch64:
            operands:
            -
              type: AARCH64_OP_REG
              reg: d0
              access: CS_AC_READ_WRITE
              vas: AARCH64LAYOUT_VL_8B
              is_vreg: 1
            -
              type: AARCH64_OP_REG
              reg: q1
              access: CS_AC_READ
              vas: AARCH64LAYOUT_VL_16B
              is_vreg: 1
            -
              type: AARCH64_OP_REG
              reg: q2
              access: CS_AC_READ
              vas: AARCH64LAYOUT_VL_16B
              is_vreg: 1
            -
              type: AARCH64_OP_REG
              reg: q3
              access: CS_AC_READ
              vas: AARCH64LAYOUT_VL_16B
              is_vreg: 1
            -
              type: AARCH64_OP_REG
              reg: d2
              access: CS_AC_READ
              vas: AARCH64LAYOUT_VL_8B
              is_vreg: 1
            cc: AArch64CC_Invalid
          writeback: 1
          regs_read: [ d0, q1, q2, q3, d2 ]
          regs_write: [ d0 ]

      -
        asm_text: "scvtf v0.2s, v1.2s, #3"
        details:
          aarch64:
            operands:
            -
              type: AARCH64_OP_REG
              reg: d0
              access: CS_AC_WRITE
              vas: AARCH64LAYOUT_VL_2S
            -
              type: AARCH64_OP_REG
              reg: d1
              access: CS_AC_READ
              vas: AARCH64LAYOUT_VL_2S
            -
              type: AARCH64_OP_IMM
              imm: 0x3
              access: CS_AC_READ
            cc: AArch64CC_Invalid
          regs_read: [ d1 ]
          regs_write: [ d0 ]

      -
        asm_text: "fmla s0, s0, v0.s[3]"
        details:
          aarch64:
            operands:
            -
              type: AARCH64_OP_REG
              reg: s0
              access: CS_AC_READ_WRITE
            -
              type: AARCH64_OP_REG
              reg: s0
              access: CS_AC_READ
            -
              type: AARCH64_OP_REG
              reg: q0
              access: CS_AC_READ
              vas: AARCH64LAYOUT_VL_S
              vector_index: 3
              vector_index_is_set: true
            cc: AArch64CC_Invalid
          writeback: 1
          regs_read: [ fpcr, s0, q0 ]
          regs_write: [ s0 ]

      -
        asm_text: "fmov x2, v5.d[1]"
        details:
          aarch64:
            operands:
            -
              type: AARCH64_OP_REG
              reg: x2
              access: CS_AC_WRITE
            -
              type: AARCH64_OP_REG
              reg: q5
              access: CS_AC_READ
              vas: AARCH64LAYOUT_VL_D
              vector_index: 1
              vector_index_is_set: true
            cc: AArch64CC_Invalid
          regs_read: [ q5 ]
          regs_write: [ x2 ]

      -
        asm_text: "dsb nsh"
        details:
          aarch64:
            operands:
            -
              type: AARCH64_OP_SYSALIAS
              sub_type: AARCH64_OP_DB
              sys_raw_val: 0x7
            cc: AArch64CC_Invalid

      -
        asm_text: "dmb osh"
        details:
          aarch64:
            operands:
            -
              type: AARCH64_OP_SYSALIAS
              sub_type: AARCH64_OP_DB
              sys_raw_val: 0x3
            cc: AArch64CC_Invalid

      -
        asm_text: "isb"

      -
        asm_text: "mul x1, x1, x2"
        details:
          aarch64:
            operands:
            -
              type: AARCH64_OP_REG
              reg: x1
              access: CS_AC_WRITE
            -
              type: AARCH64_OP_REG
              reg: x1
              access: CS_AC_READ
            -
              type: AARCH64_OP_REG
              reg: x2
              access: CS_AC_READ
            cc: AArch64CC_Invalid
          regs_read: [ x1, x2 ]
          regs_write: [ x1 ]

      -
        asm_text: "lsr w1, w1, #0"
        details:
          aarch64:
            operands:
            -
              type: AARCH64_OP_REG
              reg: w1
              access: CS_AC_WRITE
            -
              type: AARCH64_OP_REG
              reg: w1
              access: CS_AC_READ
            cc: AArch64CC_Invalid
          regs_read: [ w1 ]
          regs_write: [ w1 ]

      -
        asm_text: "sub w0, w0, w1, uxtw"
        details:
          aarch64:
            operands:
            -
              type: AARCH64_OP_REG
              reg: w0
              access: CS_AC_WRITE
            -
              type: AARCH64_OP_REG
              reg: w0
              access: CS_AC_READ
            -
              type: AARCH64_OP_REG
              reg: w1
              access: CS_AC_READ
              ext: AARCH64_EXT_UXTW
            cc: AArch64CC_Invalid
          regs_read: [ w0, w1 ]
          regs_write: [ w0 ]

      -
        asm_text: "ldr w1, [sp, #8]"
        details:
          aarch64:
            operands:
            -
              type: AARCH64_OP_REG
              reg: w1
              access: CS_AC_WRITE
            -
              type: AARCH64_OP_MEM
              mem_base: sp
              mem_disp: 0x8
              access: CS_AC_READ
            cc: AArch64CC_Invalid
          regs_read: [ sp ]
          regs_write: [ w1 ]

      -
        asm_text: "cneg x0, x1, ne"
        details:
          aarch64:
            operands:
            -
              type: AARCH64_OP_REG
              reg: x0
              access: CS_AC_WRITE
            -
              type: AARCH64_OP_REG
              reg: x1
              access: CS_AC_READ
            cc: AArch64CC_NE
          regs_read: [ nzcv, x1 ]
          regs_write: [ x0 ]

      -
        asm_text: "add x0, x1, x2, lsl #2"
        details:
          aarch64:
            operands:
            -
              type: AARCH64_OP_REG
              reg: x0
              access: CS_AC_WRITE
            -
              type: AARCH64_OP_REG
              reg: x1
              access: CS_AC_READ
            -
              type: AARCH64_OP_REG
              reg: x2
              access: CS_AC_READ
              shift_type: AARCH64_SFT_LSL
              shift_value: 2
            cc: AArch64CC_Invalid
          regs_read: [ x1, x2 ]
          regs_write: [ x0 ]

      -
        asm_text: "ldr q16, [x24, w8, uxtw #4]"
        details:
          aarch64:
            operands:
            -
              type: AARCH64_OP_REG
              reg: q16
              access: CS_AC_WRITE
            -
              type: AARCH64_OP_MEM
              mem_base: x24
              mem_index: w8
              access: CS_AC_READ
              shift_type: AARCH64_SFT_LSL
              shift_value: 4
              ext: AARCH64_EXT_UXTW
            cc: AArch64CC_Invalid
          regs_read: [ x24, w8 ]
          regs_write: [ q16 ]

      -
        asm_text: "stp x29, x30, [sp, #-0x60]!"
        details:
          aarch64:
            operands:
            -
              type: AARCH64_OP_REG
              reg: x29
              access: CS_AC_READ
            -
              type: AARCH64_OP_REG
              reg: x30
              access: CS_AC_READ
            -
              type: AARCH64_OP_MEM
              mem_base: sp
              mem_disp: -0x60
              access: CS_AC_WRITE
            cc: AArch64CC_Invalid
          writeback: 1
          regs_read: [ x29, x30, sp ]
          regs_write: [ sp ]

      -
        asm_text: "ldr x29, [sp], #0x3c"
        details:
          aarch64:
            operands:
            -
              type: AARCH64_OP_REG
              reg: x29
              access: CS_AC_WRITE
            -
              type: AARCH64_OP_MEM
              mem_base: sp
              access: CS_AC_READ
            -
              type: AARCH64_OP_IMM
              imm: 0x3c
              access: CS_AC_READ
            post_indexed: 1
            cc: AArch64CC_Invalid
          writeback: 1
          regs_read: [ sp ]
          regs_write: [ sp, x29 ]
