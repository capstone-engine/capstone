#!/usr/bin/env python

# Capstone Python bindings test, by billow <billow.fun@gmail.com>

from __future__ import print_function
from capstone import *
from capstone.xtensa import *
from xprint import to_hex, to_x

all_tests = (
    (CS_ARCH_XTENSA, CS_MODE_LITTLE_ENDIAN, b'\x60\x51\x60\x32\x51\x02', "Xtensa"),
)


def print_insn_detail(insn: CsInsn):
    # print address, mnemonic and operands
    print("0x%x:\t%s\t%s" % (insn.address, insn.mnemonic, insn.op_str))

    # "data" instruction generated by SKIPDATA option has no detail
    if insn.id == 0:
        return

    if len(insn.operands) > 0:
        print("\top_count: %u" % len(insn.operands))
        c = 0
        for i in insn.operands:
            if i.type == CS_OP_REG:
                print("\t\toperands[%u].type: REG = %s" % (c, insn.reg_name(i.reg)))
            if i.type == CS_OP_IMM:
                print("\t\toperands[%u].type: IMM = 0x%s" % (c, to_x(i.imm)))
            if i.type == CS_OP_MEM:
                print("\t\toperands[%u].type: MEM" % c)
                if i.mem.base != 0:
                    print(f"\t\t\t.mem.base: REG = {insn.reg_name(i.mem.base)}")
                if i.mem.disp != 0:
                    print(f"\t\t\t.mem.disp:{i.mem.disp:#x}")
            if i.access == CS_AC_READ:
                print("\t\t\t.access: READ")
            elif i.access == CS_AC_WRITE:
                print("\t\t\t.access: WRITE")
            elif i.access == (CS_AC_READ & CS_AC_WRITE):
                print("\t\t\t.access: READ | WRITE")
            c += 1

    rs, ws = insn.regs_access()
    if len(rs) > 0:
        print(f"\tRegisters read: {' '.join(map(insn.reg_name, rs))}")
    if len(ws) > 0:
        print(f"\tRegisters modified: {' '.join(map(insn.reg_name, ws))}")


# ## Test class Cs
def test_class():
    for (arch, mode, code, comment) in all_tests:
        print("*" * 16)
        print("Platform: %s" % comment)
        print("Code: %s" % to_hex(code))
        print("Disasm:")

        try:
            md = Cs(arch, mode)
            md.detail = True
            for insn in md.disasm(code, 0x1000):
                print_insn_detail(insn)
        except CsError as e:
            print("ERROR: %s" % e)


if __name__ == '__main__':
    test_class()
