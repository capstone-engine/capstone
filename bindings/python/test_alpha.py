#!/usr/bin/env python

from __future__ import print_function
from capstone import *
from capstone.alpha import *
from xprint import to_x, to_hex

ALPHA_CODE = b'\x02\x00\xbb\'Pz\xbd#\xd0\xff\xde#\x00\x00^\xb7\x08\x00\xfe\xb5' \
             b'\x0f\x04\xfeG\xfe\xff=$\x90\x86A\x8d\x10\x00O\x9d\xfe\xff=$\x98' \
             b'\x86A\x89\x18\x00O\x99\x10\x00O\x8d \x00O\x9d\x18\x00O\x89(\x00O'\
             b'\x99(\x00O\x89\x8b\xd5\xea[\x00\x00\x00` \x00O\x8e\x11\x04k]\xfe'\
             b'\xff=$x\x86\x01"\x08\x80}\xa7\x00@[k\x02\x00\xba\'\xecy\xbd#\xfe'\
             b'\xff=$\x81\x86\x01"\x08\x80}\xa7\x00@[k\x02\x00\xba\'\xd4y\xbd#' \
             b'\x1f\x04\xffG\x1e\x04\xefG\x00\x00^\xa7\x08\x00\xfe\xa50\x00\xde'\
             b'#\x01\x80\xfak'

all_tests = (
    (CS_ARCH_ALPHA, 0, ALPHA_CODE, "Alpha"),
)


def print_insn_detail(insn):
    # print address, mnemonic and operands
    print("0x%x:\t%s\t%s" % (insn.address, insn.mnemonic, insn.op_str))

    # "data" instruction generated by SKIPDATA option has no detail
    if insn.id == 0:
        return

    if len(insn.operands) > 0:
        print("\top_count: %u" % len(insn.operands))
        c = 0
        for i in insn.operands:
            if i.type == ALPHA_OP_REG:
                print("\t\toperands[%u].type: REG = %s" % (c, insn.reg_name(i.reg)))
            if i.type == ALPHA_OP_IMM:
                print("\t\toperands[%u].type: IMM = 0x%s" % (c, to_x(i.imm)))
            c += 1


# ## Test class Cs
def test_class():
    for (arch, mode, code, comment) in all_tests:
        print("*" * 16)
        print("Platform: %s" % comment)
        print("Code: %s" % to_hex(code))
        print("Disasm:")

        try:
            md = Cs(arch, mode)
            md.detail = True
            for insn in md.disasm(code, 0x1000):
                print_insn_detail(insn)
                print()
                print("0x%x:\n" % (insn.address + insn.size))
        except CsError as e:
            print("ERROR: %s" % e)


if __name__ == '__main__':
    test_class()
